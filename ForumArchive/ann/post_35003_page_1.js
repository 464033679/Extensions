[{"Owner":"brianzinn","Date":"2018-01-10T19:46:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis post to help anybody that would like to debug/work on GearVR or other mobile devices over WiFi.  There is a pull request that was approved today.  The code to implement was literally 10 minutes of mostly copy/paste_co_ while the setup took over an hour to figure out_co_ so I wanted to share that (also for my forgetful self in the future!).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat does work on GearVR is trigger button will select meshes.  Trackpad allows you to rotate.  At least with trigger button working it is somewhat usable now!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe todo list at least contains_dd__lt_br /_gt_\n\t- get a 3D model_lt_br /_gt_\n\t- onTrackpadChangedObservable (doesn_t_t exist_co_ but would be called).  The trackpad axis could then show on mesh where it is selected (ie_dd_ small circle)._lt_br /_gt_\n\t- position on GamePad is always null by design.  It should be held in the hand from the constructor_co_ which I think defaults to _t_right_t_. that will fix the rays coming from the eyes and have the model visible.  I think choose a position in front and model should align with the forward ray from that point._lt_br /_gt_\n\t- using the headset device control I was triggering scene pick events_co_ but did not seem to be where I was looking.  So_co_ support for GearVR headset (without a controller) needs yet to be added.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI just wanted to outline my workflow that allows you to debug your GearVR from Chrome on your desktop.  If you directly connect your device via USB with USB debugging you can already do this and most of us already do that.  With the GearVR_co_ however_co_ you will need to debug over WiFi as the USB connection on the GearVR headset is for charging only (and the GearVR headset uses the USB connection of your phone)._lt_br /_gt__lt_br /_gt_\n\tFirst you need to have adb (install the android SDK or download the platform-tools)._lt_br /_gt_\n\tStep 1.  Connect your android device to USB and set the TCP port_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_C_dd_\\Program Files (x86)\\Android\\android-sdk\\platform-tools&gt_sm_adb devices\nList of devices attached\n* daemon not running. starting it now on port 5037 *\n* daemon started successfully *\n9889234230424e3755      device\n\n\nC_dd_\\Program Files (x86)\\Android\\android-sdk\\platform-tools&gt_sm_adb tcpip 5555\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tStep 2.  Disconnect your android device from USB.  Ensure you are connected to the same WiFi network as your desktop.  Get your Phone IP address from Settings-&gt_sm_About-&gt_sm_Status (on S8).\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_C_dd_\\Program Files (x86)\\Android\\android-sdk\\platform-tools&gt_sm_adb connect 192.168.1.77\nconnected to 192.168.1.77_dd_5555\n\nC_dd_\\Program Files (x86)\\Android\\android-sdk\\platform-tools&gt_sm_adb devices\nList of devices attached\n192.168.1.77_dd_5555       device_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tNote_dd_ You may need to reconnect your device during development_co_ so probably leave this prompt open_co_ so you can reconnect.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOpen up chrome_dd_//inspect on your desktop - make sure you are on the Devices tab.  Click port forwarding to allow accessing ie_dd_ localhost_dd_3000._lt_br /_gt_\n\tOpen up Samsung Internet to http_dd_//127.0.0.1_dd_3000 (so_co_ loopback address instead of _t_localhost_t_).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou should see the following under Remote Target in the lower part of the chrome_dd_//inspect tab_dd__lt_br /_gt_\n\tSM-G950W #192.168.1.65_dd_5555_lt_br /_gt_\n\tcom.sec.android.app.sbrowser.beta_lt_br /_gt_\n\t[ ] _t_Title of page_t_ http_dd_//127.0.0.1_dd_3000_lt_br /_gt_\n\t&lt_sm__lt_strong_gt_inspect_lt_/strong_gt_&gt_sm__lt_br /_gt_\n\tChrome_lt_br /_gt_\n\t..._lt_br /_gt_\n\tcom.brave.browser_lt_br /_gt_\n\t...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ any other debuggable Chromium browsers running will show up (ie_dd_ Chrome_co_ Brave_co_ etc.).  Note that SM-G950W will be your phone model identifier followed by your phone WiFi IP address.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tClicking the _lt_strong_gt_inspect_lt_/strong_gt_ link (bold above) to open DevTools.  You can now simulate clicks on your phone in the emulator and view the console.  This is how you would_co_ for example_co_ see the button indexes to map to functionality you need.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you are working on BabylonJS itself you can get away with only _t_npm install_t_ and _t_gulp typescript_t_ then symbolically link (or copy) the preview release with the node_modules in your project.  Otherwise you can use the local PG in BabylonJS.  I_t_ve tried both and they work well.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-10T22:18:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tCongrats for this great PR!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]