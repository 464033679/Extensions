[{"Owner":"RaananW","Date":"2018-01-10T18:35:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello dear community_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have just pushed a new version of Babylon to NPM. 3.2.0-alpha2 has a bit of changed package structure_co_ which is_co_ in general_co_ transparent to the regular user.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou will still be able to do the following_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import * as BABYLON from _qt_babylonjs_qt__sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tWhat_t_s new and exciting about this release are the extra modules that were added to this package. Babylon_t_s npm package now contains commonjs and es6-ready modules_co_ including typescript typings (for the commonjs modules). With the updated package you could do the following in TypeScript (and JavaScript)_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import { AbstractMesh_co_ Scene_co_ Vector3_co_ Engine_co_ Mesh } from _qt_babylonjs/core_qt__sm_\nimport { ArcRotateCamera } from _qt_babylonjs/arcRotateCamera_qt__sm_\nimport { HemisphericLight } from _qt_babylonjs/hemisphericLight_qt__sm_\nimport { MeshBuilder } from _qt_babylonjs/meshBuilder_qt__sm_\n\nvar canvas_dd_ any _eq_ document.getElementById(_qt_renderCanvas_qt_)_sm_\nvar engine_dd_ Engine _eq_ new Engine(canvas_co_ true)_sm_\n\nfunction createScene()_dd_ Scene {\n    var scene_dd_ Scene _eq_ new Scene(engine)_sm_\n\n    var camera_dd_ ArcRotateCamera _eq_ new ArcRotateCamera(_qt_Camera_qt__co_ Math.PI / 2_co_ Math.PI / 2_co_ 2_co_ Vector3.Zero()_co_ scene)_sm_\n    camera.attachControl(canvas_co_ true)_sm_\n\n    var light1_dd_ HemisphericLight _eq_ new HemisphericLight(_qt_light1_qt__co_ new Vector3(1_co_ 1_co_ 0)_co_ scene)_sm_\n\n    var sphere_dd_ Mesh _eq_ MeshBuilder.CreateSphere(_qt_sphere_qt__co_ { diameter_dd_ 1 }_co_ scene)_sm_\n\n    return scene_sm_\n}\n\nvar scene_dd_ Scene _eq_ createScene()_sm_\n\nengine.runRenderLoop(() _eq_&gt_sm_ {\n    scene.render()_sm_\n})_sm_\n\n\nwindow.addEventListener(_qt_resize_qt__co_ () _eq_&gt_sm_ {\n    engine.resize()_sm_\n})_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThis will be using the commonjs modules available in the babylonjs package.  The file generated (using webpack) will be roughly 2.2 MB unminified (which is an improvement to the 4+MB unminified Babylon file).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo use es6_co_ simple add /es6 after the module name. for example_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import { AbstractMesh_co_ Scene_co_ Vector3_co_ Engine_co_ Mesh } from _qt_babylonjs/core/es6_qt__sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI have worked a lot to make it work correctly. But there are (probably) many things I did catch. Please_dd_\n_lt_/p_gt_\n\n_lt_ol_gt__lt_li_gt_\n\t\tBe patient! it was just released_co_ there might be a few bugs.\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tUse it_co_ abuse it_co_ make it fail_co_ and let me know when it did! I want to fix all bugs until 3.2 is officially released\n\t_lt_/li_gt_\n_lt_/ol_gt__lt_p_gt_\n\tI will write a detailed documentation page about how to use it. For a list of modules_co_ you can refer to config.json in our Gulp directory (until I finish the docs) _dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Tools/Gulp/config.json#L21_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Tools/Gulp/config.json#L21_lt_/a_gt_ . Add _qt_core_qt__co_ being the most important package there is.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEnjoy!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2018-01-11T09:39:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tJust updating that a first bug was found in the es6 modules_co_ which I am fixing right now. Will sadly have to wait till the next npm update to be public.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Korvo","Date":"2018-01-17T10:01:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat is the use-case for a headless babylonjs?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBill\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-17T16:12:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWith the headless version you can_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- Run tests (units or validation)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- Execute server side simulation (for multiplayer games for instance)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-01-17T23:58:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThis is pretty cool!  I had to do a bunch of hacking last year to get models parsing for 3d print done server side on a bjs instance running on node.  I was able to get it functioning and run some csg then polygon optimization on the meshs all on the server_co_ but like I said it took a TON of hacking.  This would handle all that with ease it looks like.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"HoloLite","Date":"2018-01-22T18:59:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/10310-raananw/?do_eq_hovercard_qt_ data-mentionid_eq__qt_10310_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/10310-raananw/_qt_ rel_eq__qt__qt__gt_@RaananW_lt_/a_gt_ Hello_co_ I am trying to use this nifty feature_co_ and I am using babylonjs-3.2-alpha4 npm package.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo I am replacing the following line_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_    import _t_babylonjs_t__lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\twith\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_    import { AbstractMesh_co_ Scene_co_ Vector3_co_ Engine_co_ Mesh } from _qt_babylonjs/core/es6_qt__lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut I am getting error TS2307_dd_ Cannot find module _t_babylonjs/core/es6_t_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am guessing there is something in the tsconfig.json that I need to change ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLooking at the local node_modules/babylonjs dir_co_ I don_t_t see core/es6 dir structure though.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2018-01-23T13:54:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tyep_co_ sorry for not updating here (updated in github only). You can track the progress here - _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/issues/3314_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/issues/3314_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn general - until I solve the few problems we had with the standalone modules_co_ they were removed from the package. you can use the es6.js file from the repo. so you can do this_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t _lt_strong style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#353c41_sm_font-size_dd_14px_sm__qt__gt_  import { AbstractMesh_co_ Scene_co_ Vector3_co_ Engine_co_ Mesh } from _qt_babylonjs/es6_qt__lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis will load the entire framework in es6-mode and will allow you to work with native es6 modules.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tJust a note_co_ if you compile it using webpack_co_ use the UMD version_co_ which will give the same result.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"HoloLite","Date":"2018-01-23T16:16:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYes you are correct that I can do the selective import now using webpack/angular.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn this case then_co_ what advantages does the es6 module offer ? I believe the current webpack/angular settings can also do tree-shaking.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]