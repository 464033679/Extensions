[{"Owner":"jerome","Date":"2017-02-07T10:06:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi people_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m about to implement a new useful feature to the core. For now_co_ it_t_s called _lt_strong_gt_addRotation()_lt_/strong_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat is it for ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ usually the BJS users aren_t_t big fans of quaternions to manage their mesh rotations_co_ although the quaternions are the best tools to achieve it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tQuaternion aren_t_t intuitive_co_ so people prefer the Euler angles_co_ right ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMoreover BJS imposes the rotation order_co_ what is_co_ if I_t_m not wrong_co_ YXZ. This means that_co_ when you set a mesh rotation (x_co_ y_co_ z)_co_ it is rotated first around Y_co_ then around X and finally around Z in its local space. This is important because the rotation is not commutative _dd_ if you rotate a mesh for_co_ say_co_ 30° around Y and then for 20° around X_co_ you won_t_t get the same final orientation than if you rotate it first for 20° around X and then only for 30° around Y. In brief_co_ the rotation order really matters !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ you want to use only the Euler angles and you are constrained by the engine rotation order _dd_ no surprise you can hardly achieve the rotation you really want.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s comes addRotation(x_co_ y_co_ z) to the rescue !\n_lt_/p_gt_\n\n_lt_p_gt_\n\taddRotation() will do 3 things for you _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- to let you use only Euler angles_co_ whatever the internal mesh rotation is Euler or quaternion based (note _dd_ under the hood_co_ addRotation() works with quaternions_co_ but it_t_s hidden for your convenience)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- to allow you to decompose your rotation by steps in your custom order to achieve your final orientation _dd_ you can rotate a mesh first around X_co_ then around Y_co_ then around X again_co_ then around Z_co_ etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- to update the initial mesh rotation values for you _dd_ if the rotation is Euler based_co_ it_t_s updated as Euler angles (mesh.rotation)_co_ if it_t_s a quaternionRotation (mesh.rotationQuaternion)_co_ the quaternion is updated.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow does it work ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tJust give the mesh an initial rotation_co_ or none_co_ (this rotation can be Euler angles or a quaternion_co_ as you want)_co_ then add your rotation steps to achieve the wanted final orientation _dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_mesh.rotation.x _eq_ Math.PI / 4.0_sm_        // initial rotation around x\nmesh.addRotation(0_co_ Math.PI / 3.0_co_ 0)_sm_  // the mesh is fisrt rotated around X_co_ then only around Y for PI/3\n\n// you can even link all the rotation steps\n// here X first_co_ then Z_co_ finally Y\nmesh.addRotation(x1_co_ 0_co_ 0).addRotation(0_co_ 0_co_ z2).addRotation(0_co_ y3_co_ 0)_sm_\n\n// the mesh rotation property is computed for you\nconsole.log(mesh.rotation)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tFirst demo _dd__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1PON40_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1PON40_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe left box is the model box. The central box is rotated as usual for PI/3 around X and PI/2 around Y. The BJS rotation order makes it rotate first around Y_co_ then around X.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe right box is given an initial rotation for PI/3 around X_co_ then a rotation step is added for PI/2 around Y. You can see that the final orientation differs.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you have a look at the console where the box2 rotation is displayed _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1PON40%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1PON40#1_lt_/a_gt_ you will notice that the Euler angles needed to achieve this final orientation have a z value_co_ although you didn_t_t specify anything about Z. Simply because this is the Euler rotation to be done in the required BJS rotation order to achieve this final orientation. Something you wouldn_t_t probably have found by yourself just playing with Euler angles ...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLet_t_s go further with the torus wheel challenge.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRemember the number of times that_co_ in this forum_co_ people tried out to use the BJS provided shape called torus and to use it as a car wheel. It_t_s damned complex because the torus is designed horizontally in its local space and we need to make rotate either around its central axis (rolling)_co_ either around a vertical axis (wheel direction). So some head hache with quaternions or mesh.rotate() once in the local space_co_ once in the world space.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLet_t_s try an easier way. Here_t_s the just born torus _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1PON40%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1PON40#2_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLet_t_s set it vertical as an initial rotation around Z _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1PON40%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1PON40#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tToo bad the method debugLayer.shouldDisplayAxis() doesn_t_t currently display anything_co_ just keep in mind the torus local axis at this step _dd_\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tY is the torus central axis (so now horizontal after this first rotation around Z)\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tX is_co_ now the torus is vertical_co_ the vertical axis_co_\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tZ keeps unchanged along the world Z axis.\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\tSo in order to make the wheel roll_co_ we will give each frame_co_ from this initial rotation_co_ an extra rotation around X first (wheel direction) and then a rotation around the torus central axis Y\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1PON40%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1PON40#4_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs you can see_co_ the code is quite short and intuitive _dd_ I don_t_t know the BJS required rotation_co_ but I know how to set my torus orientation step by step using only Euler angles. No need for quaternion or space switching here. I just _qt_build_qt_ each frame the way to achieve the final rotation with my own rotation steps and my own order.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThen it_t_s quite easy to animate car wheels _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1PON40%235_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1PON40#5  _lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tHave fun _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-02-07T15:44:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tPRed and merged \\o/\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-02-07T16:45:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tCongrats!!!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBest name ever _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2017-02-07T18:07:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tBrilliant work as ever  Jerome.\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_162460_qt_ data-ipsquote-contentid_eq__qt_28268_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1486461968_qt_ data-ipsquote-userid_eq__qt_5453_qt_ data-ipsquote-username_eq__qt_jerome_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t7 hours ago_co_ jerome said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tMoreover BJS imposes the rotation order_co_ what is_co_ if I_t_m not wrong_co_ YXZ\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tHaving done quite a bit of work on rotations the imposed order is ZXY_co_ you can check this out at _lt_a href_eq__qt_http_dd_//babylonjsguide.github.io/advanced/Applying_Rotations.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonjsguide.github.io/advanced/Applying_Rotations.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tObviously this makes no difference to your new addRotation function and I am being very pedantic.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI can see the new function being extremely useful.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-02-07T19:55:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI was quite certain it was YXZ. I really need to check this back for my own curiosity. I had the mnemonic way to match the order with the human head movements _dd_\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tsay no first (shaking head left to right and back) _dd_ Y\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tthen yes (nodding) _dd_ X\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tthen twist it_co_ if you can_co_ like an owl  _dd_ Z\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\t_lt_img alt_eq__qt_Résultat de recherche d_t_images pour &quot_sm_owl twist&quot_sm__qt_ src_eq__qt_https_dd_//encrypted-tbn0.gstatic.com/images?q_eq_tbn_dd_ANd9GcSkihhVZSLqDvj268zE2tor4WlXyIpRWT5s4UY-C3ScSsXzQdFz_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-02-08T08:17:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI just read accurately your documentation_co_ John. Well_co_ I_t_ve omitted to precise that mesh.addRotation() only modifies the mesh properties .rotation or .rotationQuaternion_co_ what both sets the mesh rotation in its local space only.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ it_t_s coherent with your doc here _dd_ _lt_a href_eq__qt_http_dd_//babylonjsguide.github.io/advanced/Applying_Rotations.html#yxz-local-axes-yaw-pitch-roll_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonjsguide.github.io/advanced/Applying_Rotations.html#yxz-local-axes-yaw-pitch-roll_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2017-02-08T15:02:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOK got it now.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen x_co_ y_co_ z are considered as rotations in LOCAL space then mesh.rotation(x_co_ y_co_ z)  applies the rotations in the order y_co_ x_co_ z   see  _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1ST43U%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1ST43U#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen x_co_ y_co_ z are considered as rotations in WORLD space then mesh.rotation(x_co_ y_co_ z)  applies the rotations in the order z_co_ x_co_ y see  _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1ST43U%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1ST43U#2_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTherefore addRotation is accumulating rotations in LOCAL space.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEDIT I work out this stuff then forget all about it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-02-08T15:23:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tActually both methods_co_ addRotation() and rotate()_co_ accumulates the rotation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBJS only knows the order YXZ when it takes in account the mesh property values .rotation or .rotationQuaternion. BJS reads these values and computes the Wolrd Matrix from them before passing it to the GPU.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you use addRotation()_co_ you modify the initial .rotation or .rotationQuaternion values by accumulating your own values each call. At the end_co_ you_t_ve got new values for .rotation or .rotationQuaternion. BJS will read them and compute the World Matrix using the YXZ order only.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe same if you use rotate() _dd_ you accumulate new rotation values_co_ so the order of your call matters_co_ because this modifies each call the value of mesh.quaternionRotation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo if you call mesh.rotate(z) before mesh.rotate(y)_co_ you won_t_t get the same final result than the inverse order.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhatever the order you choose_co_ what has a big importance for the final rotation_co_ BJS just get the final state_co_ it is to say the final value of .quaternionRotation_co_ then computes the World Matrix ... using the YXZ order only again (if this order matters when talking about quaternions).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tExample _dd_ I changed the order of the calls to rotate() here _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1ST43U%2316_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1ST43U#16_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs you said_co_ addRotation() is a helper tool_co_ working directly with Euler angles and only in the local space whereas rotate() works only with quaternions_co_ rotation axis but either in the local and the world spaces. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-02-08T15:36:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI rewrote the rotation part here _dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Documentation/blob/master/content/overviews/Standard/How_Rotations_and_Translations_Work.md_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Documentation/blob/master/content/overviews/Standard/How_Rotations_and_Translations_Work.md_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]