[{"Owner":"Sam82","Date":"2018-09-22T13:21:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Babylon.js community_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt is my pleasure to announce _lt_a href_eq__qt_https_dd_//github.com/samdauwe/BabylonCpp_qt_ rel_eq__qt_external nofollow_qt__gt_BabylonCpp_lt_/a_gt__co_ a port of Babylon.js to C++_co_ facilitating the creation of lightweight_co_ cross-platform 3D games and applications with native performance. This port is a manual translation from the thousands and thousands of lines of Babylon.js TypeScript code into C/C++.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt__lt_u_gt_Some history_lt_/u_gt__lt_/strong_gt__lt_br /_gt_\n\tIn 2015_co_ I was looking for an interesting pet project. Due to my interest in 3D and modern C++_co_ I stumbled upon _lt_a href_eq__qt_https_dd_//archive.codeplex.com/?p_eq_babylon_qt_ rel_eq__qt_external nofollow_qt__gt_Babylon 3D (C#/native port)_lt_/a_gt_. I used this project as a starting point for mine and started updating the code with the latest code of Babylon.js. In beginning of 2017 - after a long time of porting_co_ frustration and testing - I decided to publish the code on GitHub. Since then I kept updating the code and adding examples on daily basis.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_u_gt__lt_strong_gt_The Good_lt_/strong_gt__lt_/u_gt__lt_br /_gt_\n\tTypeScript makes it really easy to port to C/C++ compared to JavaScript. For most parts_co_ it is basically copying the code_co_ updating to the proper syntax and updating the header.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo get a good overview of the current state of the project I refer to the screenshots on the _lt_a href_eq__qt_https_dd_//github.com/samdauwe/BabylonCpp/tree/master/src/Samples_qt_ rel_eq__qt_external nofollow_qt__gt_samples page_lt_/a_gt_. Not really a surprise_co_ but if you look at the samples code you will see that the API looks very similar to the one of Babylon.js. Not all functionality is supported yet_co_ but this a work in progress.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am really pleased with the performance of Babylon.js and the speedup of BabylonCpp. I am aware that I am comparing apples and oranges but I can give you some numbers. On my Intel NUC NUC7i5BNHX1 (Intel Iris Plus Graphics 640 GPU) I am getting the following numbers for the relatively simple _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1UFGZH%2312_qt_ rel_eq__qt_external nofollow_qt__gt_Grid material example_lt_/a_gt_ for a resolution 1680x1050 on Fedora 28_dd_\n_lt_/p_gt_\n\n_lt_ul_gt_\n\t_lt_li_gt_\n\t\t_lt_em_gt_Babylon.js engine (v3.3.0-rc.3)_co_ Firefox 62.0_lt_/em_gt__dd_ +/- 15% fluctuating CPU load_co_ 270 MB RAM usage_co_ fluctuating fps between 45-60 fps\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\t_lt_em_gt_BabylonCpp (library size is 7.6 MB)_lt_/em_gt__dd_ constant 2% CPU load_co_ 16 MB RAM usage_co_ constant frame rate of 60 fps\n\t_lt_/li_gt_\n_lt_/ul_gt_\n\n_lt_p_gt_\n\tSome possible use cases of BabylonCpp include_dd_\n_lt_/p_gt_\n\n_lt_ul_gt_\n\t_lt_li_gt_\n\t\tNative apps development on iOS_co_ Android\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tUsing the library as a WebAssembly module\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tUsing the library in existing desktop applications or integrating third-party libraries (i.e. Recast &amp_sm_ Detour_co_ Bullet Physics engine_co_ etc.)\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tTechnical exploration (i.e. testing functionality that is in OpenGL and not yet in WebGL_co_ supporting Vulkan API)\n\t_lt_/li_gt_\n_lt_/ul_gt_\n\n_lt_p_gt_\n\t_lt_u_gt__lt_strong_gt_The bad_lt_/strong_gt__lt_/u_gt__lt_br /_gt_\n\tMost of the time goes into keeping up with all the Babylon.js code changes. Every month I take a snapshot of the latest code and port the changes into my version. As a result_co_ the code is always very up-to-date but code on which people are still working or that might be thrown away in later versions is also integrated. An alternative I am going to follow for Babylon.js 3.3 is sticking with the stable version and focus mainly on features and stability. Porting will be done in a branches and less frequently.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNot all code can be easily ported. For instance_co_ C++ does not have reflection. There are third-party libraries available to support this_co_ but this means introducing a new dependency.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_u_gt__lt_strong_gt_...and the Ugly_lt_/strong_gt__lt_/u_gt__lt_br /_gt_\n\tLinux is my main development platform. The code compiles on Windows (MSVC 2017) and OS X but is not really tested and buggy. On Linux I am also getting different behaviour between the debug and the release version. So the library is for moment only really usable on Linux in debug mode...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLooking forward to hear what you think about the project or where you want to use it. If you have some suggestions for improvement or want to contribute or help resolving some of the issues described above feel free to contact me any time or let them know in this forum_co_ it certainly would help a lot!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCheers_co__lt_br /_gt_\n\tSam\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"babbleon","Date":"2018-09-24T09:52:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi _lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/32856-sam82/?do_eq_hovercard_qt_ data-mentionid_eq__qt_32856_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/32856-sam82/_qt_ rel_eq__qt__qt__gt_@Sam82_lt_/a_gt__co_ would this enable me to render stuff on a headless LinuxÂ server without a GPU.. or have I missed the point?_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Milton","Date":"2018-09-24T10:55:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThat_t_s probably not why he did thisÂ _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_You can emulate the GPUÂ with. xvfb (+Â mesa). You could likely do this with BabylonJS (and a browser)_co_ but OpenGL will obviously help._lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"babbleon","Date":"2018-09-24T14:31:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThank you _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5834-milton/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5834_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5834-milton/_qt_ rel_eq__qt__qt__gt_@Milton_lt_/a_gt__co_ I have been able to render successfully on a headless server.. but I_t_m always interested in anything that will improve speed.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-09-24T15:26:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tImpressive work!! I hope you_t_ll get some help!!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sam82","Date":"2018-09-24T18:11:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHiÂ  _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/29929-babbleon/?do_eq_hovercard_qt_ data-mentionid_eq__qt_29929_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/29929-babbleon/_qt_ rel_eq__qt__qt__gt_@babbleon_lt_/a_gt__co_ yes you can render _lt_span_gt_on a headless LinuxÂ server without a GPU like _lt_/span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5834-milton/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5834_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5834-milton/_qt_ rel_eq__qt__qt__gt_@Milton_lt_/a_gt__lt_span_gt_ explained but this will be emulated so the performance will be not that great compared to rendering on GPU._lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_I am not aware of any offscreen rendering method that runs very fast on CPU like you want to achieve. In case your headless LinuxÂ server has a GPU then looking further into VirtualGL might be interesting._lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dimous","Date":"2018-10-03T06:21:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou know_co_ there was successful attempt to port BJS to Haxe but it seems @gamestudiohx cannot keep up with BJS and stopped trying. _lt_em_gt_He probably got demotivated by Armory3d _lt_span class_eq__qt_ipsEmoji_qt__gt_ðŸ˜‹_lt_/span_gt__lt_/em_gt__lt_br /_gt_\n\tWhat I_t_m getting at is that it_t_s awesome that you ported BJS to C++. Haxe allows to extern native code. We have js-externs_co_ now someone would make hxcpp-externs for your port and babylon projects will become cross-platform with a native speed.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sam82","Date":"2018-10-03T18:31:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi @dimous_co_ indeed BabylonHx is a very successful attempt to fully port BJS to Haxe. Unfortunately @gamestudiohx stopped improving the project and nobody seems to be taking over...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI can understand why people choose Armory3D for developing games in Haxe (even if it is still in development)_co_ it already looks amazing and you have the full blender integration for development.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI cannot comment on how much effort it will be to create the hxcpp-externs for this port_co_ because I have no experience with Haxe . Hopefully someone will look further into supporting this!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dimous","Date":"2018-10-03T22:56:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThat someone would be me if I can master ANTLR StringTemplate_co_ because it_t_s too tedious to handcraft those bindings. I_t_ll definitely try.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sam82","Date":"2018-10-04T05:20:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWow_co_ that is amazing_co_ thanks! Let me know if I can help from my side\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"kurhlaa","Date":"2018-10-11T07:11:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tBig job done!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow long it took to port from day 0?Â Github repo is ~2 years old.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso potentially it will be great if you let developers easily to have server-side without node.js completely_co_ so for the multiplayer games they can use BJS on a client-side and a compilable version on the server-side (physics only). I mean for performance of course. From the comments above I see it_t_s already possible somehow_co_ but that could be a vector to concentrate on to improve server-side performance significantly\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sam82","Date":"2018-10-11T18:30:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tGetting from zero to something very basic (like rendering a cube) took about 7-8 months. I did not work on it full time_co_ only when I had time available.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYes_co_ that sounds interesting. So you could choose to render to a texture or use OSMesa for software-based off-screen rendering_sm_ both focus on the rendering aspect. Running server-side physics calculation is another option_co_ but might be challenging due to network lag. Do you know of any game framework that supports server-side physics?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"kurhlaa","Date":"2018-10-11T20:07:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tServer-side physics calculations are necessary for multiplayer games to prevent cheating. Network lag - yes_co_ but that_t_s on a different layer than physics calculations_sm_ partly solvable with methods like prediction and correcting of wrong predictions. But that doesn_t_t depend on the framework_t_s language_co_ you can implement server-side inÂ Javascript or evenÂ Assembler and still have issues with the network lag _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_Â that_t_s just another task._lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m not very experienced in game frameworks_co_ but most tutorials I see talkÂ about taking a javascript engine_co_ add node.js plus some magic and run in on a server-side_co_ but I still believe javascript is not for the server-side for fast performance games like FPS. So somewhen you could say _qt_hey_co_ I have a C++ project which allows you to run thousands of simultaneousÂ games on a single server_qt_.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]