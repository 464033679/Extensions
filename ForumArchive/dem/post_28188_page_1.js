[{"Owner":"JohnK","Date":"2017-02-03T13:08:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe title might look impressive but there is a long way to go yet. I am playing around with the idea of colliding meshes that have concave parts to them and then reacting based on some physics that will use BabylonJS rather than a Physics Engine. _qt_Why?_qt_ you may say - because it gives me something to do that I am interested in.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo how far have I got? Not very far but have two things that appear to be working. I say appear as my testing is limited to two shapes which I have intersected in a couple of positions and it looks like it works. Be concerned be very concerned. The code makes extensive use of  Jerome_t_s work on facetData.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. Finding the approximate points of impact of two meshes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#XEJLM_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#XEJLM_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. Finding the center of mass of a mesh. (EDIT - Scroll down topic for playground version_co_ following Jerome_t_s advice)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_s_gt_Demo _lt_a href_eq__qt_http_dd_//grideasy.github.io/Babylon/com.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//grideasy.github.io/Babylon/com.html_lt_/a_gt_    Code _lt_a href_eq__qt_https_dd_//github.com/grideasy/grideasy.github.io/tree/master/Babylon_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/grideasy/grideasy.github.io/tree/master/Babylon_lt_/a_gt__lt_/s_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Finding the approximate points of impact of two meshes._lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe basis to this is\n_lt_/p_gt_\n\n_lt_ol_gt__lt_li_gt_\n\t\tFind the overlap of the two meshes_co_ one being the hitter and the other the hittee\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tSplit the overlap into 8 octants and recursively check each octant recursively as below until the octant is too small.\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tCheck if the hitter has any has any facets inside the current octant using the mid point of the overlap area to find the closest facet to it. If there is such a one project this onto the hittee (if such a projection exists).\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tSee if the two facets are close enough for impact_co_ if so return the facet position from the hitter and the projected point from the hittee.\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tIf no two points are close enough split the current octant into 8 more octants and recursively repeat 2_co_ 3_co_ 4 and 5. If octants get too small and no hitter and hittee facets close enough return null.\n\t_lt_/li_gt_\n_lt_/ol_gt__lt_p_gt_\n\t_lt_strong_gt_Finding the center of mass of a mesh._lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAt some stage if the collision idea develops for more complex shapes the center of mass of the shape will be needed.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_s_gt_In order to complete the code I had to add to Jerome_t_s code within BJS version 2.6 itself and hence the code is in github not in the playground. As well as being able to get facetPositions and facetNormals I have added the capability to get facetAreas. To see these additions search for JK or facetAreas within the Babylon26JK.js code from the link given above._lt_/s_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_em_gt_Warning Notes for Both Projects_lt_/em_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor speed the first two facets close enough are taken so may not actually be the best two facets to use.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn calculating the center of mass for a mesh the mesh is assumed to be hollow and is based on the area of each facet_co_ the density of each facet is assumed to be the same for all facets. I have not yet though about how to do it for a solid mesh (not that meshes are ever solid but perhaps calculations could be done as if they were solid).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy coding is not particularly efficient and there are probably much better ways of achieving what I have done so far in terms of structure and use of existing BJS code but I am enjoying myself and if other want to join in make improvements then the more the merrier.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-02-03T13:34:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is excellent !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI like your idea about finding the impact point_co_ what is the real challenge in your goal.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBtw_co_ I didn_t_t implement the pre-computed facet area storage_co_ what could be done easily in the same loop in ComputeNormals()_co_ just because I thought it would take extra-memory for probably no use then and because it could be done per call really easily_co_ knowing the facet index_co_ from the mesh arrays indices and positions.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tReally impressive work anyway _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2017-02-03T14:56:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_u_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5453_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/_qt_ rel_eq__qt__qt__gt_@jerome_lt_/a_gt__lt_/u_gt_ of course you are correct I got too focused on using facetData it is so much fun. Here is a playground version of center of mass. Still with all the warnings of the first post.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1SZTOW_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1SZTOW_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]