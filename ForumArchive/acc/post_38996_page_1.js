[{"Owner":"ShiftedClock","Date":"2018-07-21T02:08:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m new to Babylon_co_ and am trying to determine how to use Observables for game logic in a frame rate independent way. I may be approaching this incorrectly_co_ because there are many parts of Babylon that I_t_m unfamiliar with_co_ such as Behaviours and Animations (so it may be an XY problem). Help would be much appreciated.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn most game engines there_t_s some deltaTime object_co_ but I haven_t_t been able to find anything similar to deltaTime in Babylons docs.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn this _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/how_to/observables_qt_ rel_eq__qt_external nofollow_qt__gt_example_lt_/a_gt_ an observer is created that increments a global var alpha by 0.01 each frame. Ideally that would be alphaChange * deltaTime. I_t_m just not sure where such a deltaTime object lives in Babylon.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf I add a parameter to the observer_t_s callback (i.e. function (parameter) {...}) I see that it actually passes the scene into the callback. So is there a way to get deltaTime from the scene object?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ve looked at the SceneInstrumentation object_co_ but I_t_m not sure it_t_s the right place to be looking. There_t_s even references to deltaTime in _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/api/classes/babylon.scene#useconstantanimationdeltatime_qt_ rel_eq__qt_external nofollow_qt__gt_Scene.useConstantAnimationDeltaTime_lt_/a_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThree.js has a built-in Clock that serves this purpose_co_ so I implemented my own based on it. But when using it for animating properties in Babylon I get very noticeable stuttering.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAny insight would be much appreciated.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-07-21T14:15:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWelcome to the forum!.  deltaTime is available on the engine_dd__lt_br /_gt_\n\t_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/api/classes/babylon.engine#getdeltatime_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/api/classes/babylon.engine#getdeltatime_lt_/a_gt__lt_br /_gt_\n\t_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/api/classes/babylon.scene#getengine_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/api/classes/babylon.scene#getengine_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_scene.getEngine().getDeltaTime()_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI_t_ve never needed to go to this level for animations.  Can you share your animation code as a playground?  I have multiple smooth animations running simultaneously without any low level coding_co_ but not sure what you are animating.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ShiftedClock","Date":"2018-07-21T19:22:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThank you so much. I_t_m just animating properties of objects_co_ like so_co_ in createSphere.js_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_let sphere _eq_ new BABYLON.MeshBuilder.CreateSphere(_qt_sphere_qt__co_ {diameter_dd_ 2}_co_ scene)_sm_\nsphere.Behaviours _eq_ []_sm_  // Shoehorning the Behaviours array onto the Mesh object.\n\nsphere.Behaviours.push(function(deltaTime) {\n    this.position.x +_eq_ 0.001 * deltaTime_sm_\n}.bind(sphere))_sm_\n// Insert more _qt_Behaviours_qt_ here_co_ from a central file.\n\nsphere.Update _eq_ function (scene) {\n    let deltaTime _eq_ engine.getDeltaTime()_sm_\n    for (let i_eq_0_sm_ i&lt_sm_sphere.Behaviours.length_sm_ i++) {\n        sphere.Behaviours[i](deltaTime)_sm_\n    }\n}.bind(sphere)_sm_\n\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tLater in the scene_t_s initialization_co_ the gameObjects are loaded and their Behaviours registered_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_let sphere _eq_ createSphere(scene)_sm_\nscene.gameObjects.push(sphere)_sm_\n\nfor (let i_eq_0_sm_ i&lt_sm_scene.gameObjects.length_sm_ i++) {\n    let go _eq_ scene.gameObjects[i]_sm_\n    scene.onBeforeRenderObservable.add(go.Update)_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI_t_m trying to create something like an Entity Component System_co_ so that I can compose GameObjects from Behaviours_co_ and in turn compose scenes from those GameObjects.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis project has an emphasis on smooth animations_co_ defined in code. I_t_m rendering everything in a shader using raymarching (i.e. meshes are for physics_co_ not drawing)_co_ and just using the game engine to keep track of the game world. Every frame the game Updates_co_ then sets shader variables using gl.uniform1f_co_ etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI come from Unity (with some Phaser_co_ CreateJS_co_ and Love2D experience)_co_ so learning a new engine is always a process of _qt_Out of the techniques I_t_ve learned over the years_co_ which ones fit how this engine works? Do I have to define my own game loop? Is there a built-in Entity Component System? Or do they do things in a completely new way to me?_qt_  I_t_m very open to learning new ways_co_ but the initial learning can be cumbersome.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDoes Babylon have a preferred way of creating GameObjects in an Entity Component style? Or even a place to store them in the scene objects? Or am I approaching things the wrong way for Babylon? I may be trying to fit the ECS pattern to an engine that doesn_t_t want it_co_ for instance.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSince I started using scene.getEngine().getDeltaTime() the stuttering has gone away. It_t_s a joy to work with again_co_ thanks Brian. _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-07-21T20:37:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThere is definitely a learning curve with new engines - For me the best part is when something is new and there is a lot of learning!  There are some built-in animations and not sure how far along that will take you.  What kind of game are you building?_lt_br /_gt_\n\tOne thing about delta time only is that for Easing/(s)lerp the deltaTime is not enough - maybe you store your progress or have constant animations where that is obviously not an issue._lt_br /_gt_\n\t_lt_br /_gt_\n\tHere is a simple PG on position.x (like your behaviour) with built-in animations._lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#3BSUZB%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#3BSUZB#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere are some other tricks too - everything is well documented_dd__lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//babylonjsguide.github.io/gamelets/Sequence.html_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//babylonjsguide.github.io/gamelets/Sequence.html_lt_/a_gt__lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//doc.babylonjs.com/features/animations_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/features/animations_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ShiftedClock","Date":"2018-07-22T01:13:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks for the links. I_t_ll play around with BABYLON.Animation_co_ it seems like the more engine-friendly way of achieving what I want.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo I_t_m going to make a base GameObject_co_ and add components to it_co_ such as the Mesh_co_ and Animations. Although I_t_m not making a game right now_co_ more of an animation study_co_ but I still think in terms of GameObjects.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s a video of a _lt_a href_eq__qt_https_dd_//www.youtube.com/watch?v_eq_EEjee1CRko0_qt_ rel_eq__qt_external nofollow_qt__gt_short game_lt_/a_gt_ I made for a game jam a few years ago_co_ that used raymarching extensively (i.e. nothing on-screen was rendered with a mesh). It was made in Unity_co_ but there are certain technical abilities that I need for my upcoming projects that Unity doesn_t_t have (dynamic shader compilation)_co_ which *are* available in JS (via WebGLRenderingContext.CompileShader).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo I_t_m starting by replicating the _lt_a href_eq__qt_https_dd_//vimeo.com/93206523_qt_ rel_eq__qt_external nofollow_qt__gt_principles of animation_lt_/a_gt_ using raymarching. This isn_t_t a game itself_co_ but rather a project for discovering techniques that will bring more life to my raymarched games. The followup projects will then use the techniques I discover here in order to create appealing characters based on basic shapes (spheres/ellipsoids_co_ boxes_co_ cones_co_ etc.).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m evaluating Babylon and Three based on which would work better for these projects_co_ but I_t_m leaning heavily towards Babylon right now. The documentation_co_ the physics support_co_ this forum (!)_co_ and the playground are all hugely appealing. There_t_s also the fact that Babylon_t_s CubicBezier constructor works with _lt_a href_eq__qt_http_dd_//cubic-bezier.com_qt_ rel_eq__qt_external nofollow_qt__gt_cubic-bezier.com_lt_/a_gt__t_s output_co_ while Three_t_s CubicBezierCurve doesn_t_t. That may seem like a small thing_co_ but this whole project is about defining animations_co_ so I anticipate tinkering with cubic-bezier.com a lot.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m curious about Babylon_t_s Editor as well_co_ and Spector. So many cool toys! Thanks again for pointing me in the right direction.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-07-22T03:20:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_222714_qt_ data-ipsquote-contentid_eq__qt_38996_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1532200937_qt_ data-ipsquote-userid_eq__qt_32267_qt_ data-ipsquote-username_eq__qt_Steven Vass_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t7 hours ago_co_ Steven Vass said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tDoes Babylon have a preferred way of creating GameObjects in an Entity Component style?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tUnlike some other platforms - BabylonJS is very UNopinionated.  The Entity Component System of Unity follows a common design pattern of _qt_has a_qt_ - instead of _qt_is a_qt_ of traditional object oriented design_co_ which is really nice for avoiding complex inheritance hierarchies.  Composition over inheritance has a lot of benefits in many situations.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBabylonJS Animations can attach to anything even a plain javascript object and animate any property. That_t_s really the beauty of the dynamic languages and as you know also with dynamic shader compilation _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere is one relatively new part of BabylonJS that does follow your idea of composing behaviours_co_ so hopefully this provides some good ideas/code_co_ too_dd__lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//doc.babylonjs.com/features/behaviour_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/features/behaviour_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAttaching a gizmo to a mesh is one example.  You can attach() and detach() them on the fly even to cameras _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/3d906d11a0b2449205daec660cf266f9f8294ff2/src/Behaviors/Cameras/babylon.autoRotationBehavior.ts_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/3d906d11a0b2449205daec660cf266f9f8294ff2/src/Behaviors/Cameras/babylon.autoRotationBehavior.ts_lt_/a_gt__lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//doc.babylonjs.com/how_to/camera_behaviors#autorotation-behavior_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/how_to/camera_behaviors#autorotation-behavior_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]