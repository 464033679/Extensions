[{"Owner":"Colmea","Date":"2016-01-22T09:57:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt_t_s my first post_co_ so thank you for your awesome work on Babylon.js. I come from Three.js_co_ and I hope my journey here will be good !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLet me explain the situation_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI need to create a custom 6 faces polygon. I decided to start from a Babylon Box_co_ and then update vertices position. It was easy on Three.js_co_ but seems harder on Babylon. I have some questions_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1) What_t_s the order of the vertices position ? It looks like the first vertice is on the back face_co_ in the bottom right side_co_ and the second one bottom left. Is it normal or am I doing something wrong ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t2) Why are there two vertices for a same 3D position ? In other words_co_ why can_t_t we share a vertex for several faces ? It_t_s really complicated to have 24 vertices for a single box. 8 vertices are not enough ? (I_t_m not an expert at all_co_ I guess there_t_s a reason. Again_co_ in Three.js there are only 8 vertices).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t3) I_t_m surprised that getVerticesData(POSITION) returns an array of numbers. Why don_t_t we have an array of Vector3 ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAll these questions can be summarized in a single one_dd_ how do you easily manage vertices update in a box. I find it really complicated to deal with a _qt_big-array-with-96-number-and-deal-with-it_qt_ for a single cube (knowing I will have to deal with more complicated polygons in the future).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHope you can give me advices or tools for that !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHave a nice day_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tColmea\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-22T10:47:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi welcome on this forum and welcome in the wonderful BJS world _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t1) well_co_ the concepts of front_co_ back_co_ up_co_ down are quite complex in 3D as they depend upon the camera position\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo exactly know what face of your box you want to address_co_ you could first give each a different color._lt_br_gt_\n\tThis doc may help you _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/CreateBox_Per_Face_Textures_And_Colors_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/CreateBox_Per_Face_Textures_And_Colors_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/CreateBox_Per_Face_Textures_And_Colors#colors_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/CreateBox_Per_Face_Textures_And_Colors#colors_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2) In BJS_co_ contrary to ThreeJS_co_ all the vertices are indexed. This means_co_ there is an array called _qt_indices_qt_ to reference all the used vertices. As a normal is set per vertex only_co_ it is required to have as many vertices as the normal vectors wanted. This method is really fast as soon as the number of vertices increase_co_ in particular for vertex re-use.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo for a box_co_ there are 2 triangular facets per box side_co_ so 4 vertices per box side (2 are shared between the two facets). So in total_co_ 6  sides * 4 _eq_ 24 vertices.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPlease have a look at the first part of this tutorial to understand what the indexed vertices mean _dd_ _lt_a href_eq__qt_https_dd_//blogs.msdn.microsoft.com/eternalcoding/2014/04/17/what-do-you-mean-by-shaders-learn-how-to-create-shaders-with-babylon-js/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//blogs.msdn.microsoft.com/eternalcoding/2014/04/17/what-do-you-mean-by-shaders-learn-how-to-create-shaders-with-babylon-js/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3 ) _lt_em_gt_getVerticesData(Positions)_lt_/em_gt_ returns the array _qt_positions_qt_ of the mesh... each successive triplet of floats is each vertex coordinates _dd_ [v1.x_co_ v1.y_co_ v1.z_co_ v2.x_co_ v2.y_co_ v2.z ....]_lt_br_gt_\n\tIf you set your mesh as _lt_em_gt_updatable_lt_/em_gt_ at creation time_co_ you can easily change its vertex position with updateMeshPositions()\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#other-shapes-updatemeshpositions_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#other-shapes-updatemeshpositions_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tHope it helps\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Colmea","Date":"2016-01-22T11:18:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks for your fast answer.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ that_t_s not good news actually _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt__gt_ (but I expected this kind of answer).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI guess I will have to extend the Box class and create methods to help me update vertices easily (give only 8 Vector3). I will share my code here _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\tI hope someone already works on this !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks you (and the per face texture is a good idea ! )\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-22T12:34:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tActually_co_ all the BJS parametric shapes can be morphed from their geometry declaration (in short_co_ from their vertices or from the way the vertices are built) _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUnfortunately_co_ there_t_s no such high level provided method to do this with the fixed shapes... as noone asked for this until now _lt_img alt_eq__qt__dd_P_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ title_eq__qt__dd_P_qt_ width_eq__qt_20_qt__gt__lt_br_gt_\n\tWe will enjoy to share your code. Please feel free to use the playground (aka PG_co_ the place we all share here our ideas_co_ bugs_co_ attempts_co_ etc) for this _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBTW_co_ I guess you_t_re from Belgium (Twitter told me that) so you might attend the very next FOSDEM conference in Brussels and discover the session from Raanan and Temechon_co_ two of the framework core team and nice forum animators_co_ here _dd_ _lt_a href_eq__qt_https_dd_//fosdem.org/2016/schedule/event/babylon/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//fosdem.org/2016/schedule/event/babylon/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tConfs or speaking directly to the core devs are one of the best experience to get very fast into the framework. It_t_s really worth it imho.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-01-22T16:56:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello and Welcome Colmea!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRegarding array of number or array of vector3_dd_ the main reason is performance. Internally we are using a foat32Array to provide the fastest support possible. And if_co_ for instance you want to do fancy things like updating your mesh on every frame_co_ this is the best option.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI completely understand your point though but if you want to achieve what you mention you will have to do a copy of data. Which could be ok if you don_t_t plan to do it too much (regarding performance AND memory consumption _sm_))\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOther question_dd_ why 24 instead of 8? Because of uv and normal. With only 8 vertices you cannot provide decent shading (normal) or per-face textures coordinates.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe core foundation of BJS is simplicity and I must agree with you. This is not the case here. But sometimes simplicity has to disappear to gain performance. ANd in this case_co_ you will always be able to count on this community to help you\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Colmea","Date":"2016-01-25T14:59:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks for your clarification Deltakosh !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI agree_co_ simplicity is not always the right choice. However_co_ in my case_co_ vertices are not updated on each frame_dd_ it_t_s an event triggered by the user (which fill a form to build a new polygon). So performance is not really the main issue in my case.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOne last thing_dd_ I understand the reason behind the 24 vertices_co_ but is there a single reason why someone would like to move two _qt_same_qt_ vertices on different positions ? In other words_co_ why BABYLON doesn_t_t hide this complexity for developers ? \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m working on a custom Box class to help me move vertices easily. Here is a (WIP) demo_dd_ _lt_a href_eq__qt_http_dd_//babylonjs-playground.com/#1QHDMR%230_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonjs-playground.com/#1QHDMR#0_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis way I can move vertices from a specific face and don_t_t care about linked vertices anymore_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_// Create custom box (extend createBox helper)\nvar box _eq_ new CustomBox(_t_customBox_t__co_ scene)_sm_\n\t\n// Move vertice 0 and 2 on top face (according to world axis)\n// This automatically move linked vertices \nvar topFace _eq_ []_sm_\ntopFace[0] _eq_ new BABYLON.Vector3(-3_co_ 2_co_ 0)_sm_\ntopFace[2] _eq_ new BABYLON.Vector3(0.5_co_ 0.5_co_ 0)_sm_\n\nbox.updateFacesVertices({\n    top_dd_ topFace\n})_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSome important points_dd_\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tThe vertice index on each face is related to the order of creation in the CreateBox method (which is not logical between faces_co_ or I_t_m missing something).\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tCode is not DRY at all_co_ and the _t_top_t__co_ _t_back_t__co_ _t_left_t__co_ ... references are arbitrary. Need some clean up.\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\tNext step is to be able to do something like this_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_box.getFace(_t_top_t_).vertices[0].position.x +_eq_ 10_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI know this is a really specific use case. But maybe it can helps someone _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-01-25T16:15:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThank you for sharing _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\tThis is not done by BJs because thisis (as you mentioned) a really specific use case. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stvsynrj","Date":"2016-01-26T15:18:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIn case of_co_ this was my first considaration on babylonjs !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tyou can play with that _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#20GQPQ%230_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#20GQPQ#0_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-01-26T16:40:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tRemind me of some great demos on my Amiga _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"DeadTaco","Date":"2016-02-17T19:55:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tMy explanation of this code just got evaporated when I did a minor edit to this post so here it is again.   I had the exact same issue after coming from Three.JS so I had to come up with an easy solution. Here is a function that will allow you to move any vertex in a mesh.  If the vertex is shared among faces_co_ all shared vertices will move with it.  Some of the code originally came from a tutorial I found online.  Sorry if it_t_s a little messy.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tuse_dd_  shiftVertex(yourMesh_co_ vertexNumber_co_ [x_co_ y_co_ z]) where x y z is the amount to move the vertex.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_/* Shift a vertex by an amount on the xyz axis */\nfunction shiftVertex(mesh_co_ vertexNumber_co_ xyz) {\n    var vertexData _eq_ BABYLON.VertexData.ExtractFromMesh(mesh)_sm_\n    var positions _eq_ vertexData.positions_sm_\n    var numberOfPoints _eq_ positions.length / 3_sm_\n\n    // Build a map containing all vertices at the same position\n    var map _eq_ []_sm_\n    for (var i _eq_ 0_sm_ i &lt_sm_ numberOfPoints_sm_ i++) {\n        var p _eq_ new BABYLON.Vector3(positions[i * 3]_co_ positions[i * 3 + 1]_co_ positions[i * 3 + 2])_sm_\n\n        var found _eq_ false_sm_\n        for (var index _eq_ 0_sm_ index &lt_sm_ map.length &amp_sm_&amp_sm_ !found_sm_ index++) {\n            var array _eq_ map[index]_sm_\n            var p0 _eq_ array[0]_sm_\n            if (p0.equals(p) || (p0.subtract(p)).lengthSquared() &lt_sm_ 0.01) {\n                array.push(i * 3)_sm_\n                found _eq_ true_sm_\n            }\n        }\n        if (!found) {\n            var array _eq_ []_sm_\n            array.push(p_co_ i * 3)_sm_\n            map.push(array)_sm_\n        }\n    }\n    var thisVertex _eq_ map[vertexNumber]_sm_\n    /* Change the _qt_+_eq__qt_ to just _qt__eq__qt_ for direct coordinate placement */\n    for (index _eq_ 1_sm_ index &lt_sm_ thisVertex.length_sm_ index++) {\n        var i _eq_ thisVertex[index]_sm_\n        positions_lt_em_gt_ +_eq_ xyz[0]_sm_\n        positions[i + 1] +_eq_ xyz[1]_sm_\n        positions[i + 2] +_eq_ xyz[2]_sm_\n    }\n    \n    vertexData.applyToMesh(mesh)_sm_\n}_lt_/em_gt__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_em_gt_  _lt_/em_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"DeadTaco","Date":"2016-02-17T21:55:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHere is a useful vertex labeller to use with the shiftVertex function above.  This will label every vertex of a mesh with a number that corresponds to the vertex number.  Used in tandem with scene.debugLayer.show() and _qt_clickable labels_qt_ turned on_co_ it_t_s very useful as each vertex will be clearly labeled for use on my previous shiftVertex function.  Use labelVertices(mesh) to add labels_co_ and clearLabels() to remove labels.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_/* \nMark each vertex with a number.  WARNING!  Large meshes will raise havoc here if the maxLabelsForSafety is too high!\nMake sure you define _t_camera_t_ and _t_scene_t_ if their names are different \n*/\n\nfunction labelVertices(mesh) {\n    var maxLabelsForSafety _eq_ 100_sm_ /* Set a maximum number of labels to prevent complete lockup on large meshes */\n    \n    /* If labels already exist_co_ clear them first */\n    if( typeof _global_vertex_labelgroup !_eq_ _qt_undefined_qt_ ) {\n        clearLabels()_sm_\n    } else { _global_vertex_labelgroup _eq_ []_sm_ }\n\n    var positions _eq_ mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind)_sm_\n    var numberOfPoints _eq_ positions.length / 3_sm_\n\n    // Build a map containing all vertices at the same position\n    var map _eq_ []_sm_\n    for (var i _eq_ 0_sm_ i &lt_sm_ numberOfPoints_sm_ i++) {\n        var p _eq_ new BABYLON.Vector3(positions[i * 3]_co_ positions[i * 3 + 1]_co_ positions[i * 3 + 2])_sm_\n\n        var found _eq_ false_sm_\n        for (var index _eq_ 0_sm_ index &lt_sm_ map.length &amp_sm_&amp_sm_ !found_sm_ index++) {\n            var array _eq_ map[index]_sm_\n            var p0 _eq_ array[0]_sm_\n            if (p0.equals(p) || (p0.subtract(p)).lengthSquared() &lt_sm_ 0.01) {\n                array.push(i * 3)_sm_\n                found _eq_ true_sm_\n            }\n        }\n        if (!found) {\n            var array _eq_ []_sm_\n            array.push(p_co_ i * 3)_sm_\n            map.push(array)_sm_\n        }\n    }\n\n    var vertCount _eq_ 0_sm_\n    map.forEach(function(array) {\n        \n        var index_sm_\n        \n            if(_global_vertex_labelgroup.length &gt_sm__eq_ maxLabelsForSafety) { console.log(_qt_Too many labels! Aborting._qt_)_sm_ return_sm_ }\n        \n            index _eq_ 1_sm_\n            var i _eq_ array[index]_sm_\n            var textPlane _eq_ BABYLON.MeshBuilder.CreatePlane(_qt_Vertex _qt_ + vertCount_co_ {width_dd_1_co_height_dd_1}_co_ scene)_sm_\n            textPlane.position _eq_ new BABYLON.Vector3(positions_lt_em_gt__co_ positions[i+1]_co_positions[i+2])_sm_   \n            textPlane.billboardMode _eq_ 7_sm_\n            \n            var text _eq_ vertCount.toString()_sm_\n            var dynamicText _eq_ new BABYLON.DynamicTexture(_qt_dt_qt_+vertCount_co_ 1024_co_ scene_co_ true)_sm_\n            dynamicText.drawText(text_co_ 100_co_ 700_co_ _qt_bold 452px Arial_qt__co_ _qt_white_qt__co_ _qt_black_qt__co_ true)_sm_     \n            var textMaterial _eq_ new BABYLON.StandardMaterial(_qt_Text_qt_+vertCount_co_ scene)_sm_\n            textMaterial.diffuseTexture _eq_ dynamicText_sm_          \n            textPlane.material _eq_ textMaterial_sm_\n            var cleanupGroup _eq_ [ textPlane_co_ dynamicText_co_ textMaterial]_sm_\n            _global_vertex_labelgroup.push(cleanupGroup)_sm_\n_lt_/em_gt_            vertCount++_sm__lt_em_gt_\n    \n    })_sm_\n\n}\n\n/* Clear any existing vertex labels in the scene.  Make sure Babylon disposes of them cleanly. */\nfunction clearLabels() {\n    if( !_global_vertex_labelgroup ) {\n        console.log(_qt_No labels were found to be cleared!_qt_)_sm_\n        return_sm_\n    }\n    for(var i _eq_ 0_sm_ i &lt_sm_ _global_vertex_labelgroup.length_sm_ i++) {\n        _global_vertex_labelgroup_lt_em_gt_[0].dispose()_sm_\n        _global_vertex_labelgroup_lt_/em_gt__lt_/em_gt__lt_em_gt__lt_em_gt__lt_em_gt_[1].dispose()_sm_\n        _global_vertex_labelgroup_lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt_[2].dispose()_sm_\n    }\n    _global_vertex_labelgroup _eq_ []_sm_\n}\n_lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt_Admittedly_co_ I only tested this in an app I_t_m working on but it works well. _lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2016-02-18T01_dd_02_dd_38Z_t_ title_eq__t_02/18/2016 01_dd_02  AM_t_ data-short_eq__t_2 yr_t__gt_February 18_co_ 2016_lt_/time_gt_ by DeadTaco_lt_/strong_gt_\n\t\n\t\t_lt_br_gt_Numbers were being shown one value off\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-02-17T22:13:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\twhy not just push the array of three numbers into an object array that holds a Quat_co_ so like with the 4th value being a unique identifier or the vertex number.  then just parse then arrange those any way you would want then parse them back to a standard array minus the unique ID when you need to propagate them back.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Colmea","Date":"2016-02-18T09:54:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks DeadTaco_co_ it_t_s really interesting !\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_117039_qt_ data-ipsquote-contentid_eq__qt_20050_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1455738925_qt_ data-ipsquote-userid_eq__qt_19218_qt_ data-ipsquote-username_eq__qt_DeadTaco_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t14 hours ago_co_ DeadTaco said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tIf the vertex is shared among faces_co_ all shared vertices will move with it. \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIf I understand the code_co_ you define _qt_shared_qt_ vertices by their position. This could be a problem for me (vertices sometimes are on the same position).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut I will use your code_co_ thanks.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat is missing now is an easy way to create polygons_co_ and remove the _qt_3 vertices complexity_qt_. Would be awesome to do something like this_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_// Create a custom pyramid\nvertices _eq_ [\n  new BABYLON.Vector3(0_co_ 0_co_ 0)_co_ // 0\n  new BABYLON.Vector3(4_co_ 0_co_ 0)_co_ // 1\n  new BABYLON.Vector3(2_co_ 0_co_ 4)_co_ // 2\n  new BABYLON.Vector3(2_co_ 4_co_ 2)_co_ // 3\n]_sm_\n\nvar pyramid _eq_ new BABYLON.CreatePolygon(_t_myPyramid_t__co_ scene_co_ vertices_co_ ...)_sm_\n\n// Move vertices with DeadTaco_t_s function adaption\n// Move vertex 0 (and all shared vertices) to a new position\npyramid.moveVertex(0_co_ new BABYLON.Vector3(1_co_ 0_co_ 0))_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tDo you think it_t_s feasible with Babylon ? (I mean_co_ the vertices algo is not a problem_co_ but I don_t_t know a lot about faces_co_ normals_co_ ... Is it possible to compute them based on vertices ?)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-18T10:44:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#polyhedron_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#polyhedron_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tby default_co_ all the faces of a polyhedron are independant_co_ so you can move/morph them without changing the others\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t[EDIT] _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#21QRSK%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#21QRSK#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMinimize the editor (button EDITOR-) to see their names with the mouse pointer\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Suphi","Date":"2016-02-18T12:09:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\ti never did the uv mapping but is this what you want?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tmesh that does not share vertices_lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#I6FWR%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#I6FWR#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tmesh that share vertices (gives a smooth effect)_lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1EWY8M%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1EWY8M#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]