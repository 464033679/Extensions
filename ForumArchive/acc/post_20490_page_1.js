[{"Owner":"JCPalmer","Date":"2016-02-12T21:02:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWhen materials library was being developed / part of the monthly contest_co_ I did not have time to pay that much attention.  Now I had a thought I might make a material for an eye maybe like this_co_ but also normalish eyes with settable eye color_co_ pupil size_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img alt_eq__qt_Selection_161.png.97d50a5c231f538d23e26e_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_6356_qt_ data-unique_eq__qt_u5sbtmf6r_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/Selection_161.png.97d50a5c231f538d23e26ee2c2685b0e.png_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\tAm already planning to use separate the left &amp_sm_ right eye &amp_sm_ place the origin in the back center of each.  Simple rotations can then be done_co_ eliminating the need for a bone.  _lt_img alt_eq__qt_eye_rotation.png.018ee5fbab321ec48d61218_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_6357_qt_ data-unique_eq__qt_5wa0jqqy3_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/eye_rotation.png.018ee5fbab321ec48d61218377c1b7c0.png_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\tAm now trying to catch up.  Does this look like a good candidate?  This material would probably not be repo_t_ed.  It is kind of custom_co_ and only would work if you had separated eye meshes.  Is there a technical requirement to be in the repo?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDid not see any topic in documentation (did not search the forum yet).  Spot checking the source_co_ it was encouraging to see the attribute_co_ vEyePosition_co_ being passed to shaders.  Is this the center of the pupil?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFinally_co_ there were not base Material library classes_co_ so I side by side diff_t_ed simple vs Lava.  There are enormous quantities of similarities_co_ but did notice that somethings that should be the same were not_co_ like bone handling (that_t_s what I was working back then).  Might not a base class that has all the standard stuff make this a simple effort be a good idea?  Have method for subclasser to call in their constructor to specify the unique attributes for them.  Would make what was unique stand out.  Or is this what procedureTexturesLibrary is for?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/Selection_160.png.f45ea6ff02d6789c80065f1eaffc467a.png_qt__gt__lt_img alt_eq__qt_Selection_160.thumb.png.350286241405f761_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_6359_qt_ data-unique_eq__qt_fbxratoh3_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/Selection_160.thumb.png.350286241405f76180bfc3723a832448.png_qt__gt__lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-02-12T21:15:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ do not know how I missed those Materials &amp_sm_ Procedure Textures doc pages.  Still not understand the difference.  Both are straight to the task_co_ but most is spend on getting them into either library\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-02-12T22:55:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tprocedural textures are...textures and have to be used by material\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaterials can be directly applied to mesh. For me this is the differentiator_dd_ if you need a mesh it is a material else it is a procedural texture\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-02-12T22:56:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tRegarding the first questions_co_ I did not think about a smart way to share common part as everything rely on what you do INSIDe your shader.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou can inherit from JS code for sure but what about GLSL? You still have to provide the complete file unfortunately\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo this may appear as a lot of copy/paste but I don_t_t know how to proceed differently. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-02-13T02:43:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOh last but not least _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt_ materials in material library are not part of the core and thus are maintained by their respective authors.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut when a material starts being powerful and used enough we can think about moving it into the core where it will be keep in sync with the engine (for instance_co_ we will certainly do it for the PBR). This means adding support for it in exporters for instance\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThink about libraries (material and procedural textures) as incubators for the core engine _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-02-13T03:08:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tBUT...this gave me an idea _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt__gt_ please keep posted!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-02-13T04:36:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHA HA! I introduced shaders includes _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Shaders/default.vertex.fx#L18_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Shaders/default.vertex.fx#L18_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\twhich injects_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Shaders/ShadersInclude/bonesDeclaration.fx_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Shaders/ShadersInclude/bonesDeclaration.fx_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis will help developing materials for sure\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-02-13T18:16:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYeah_co_ your first observation of the obvious_co_ that textures are used by materials &amp_sm_ materials are used by meshes had escaped me_co_ thanks.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe code replication of each material in the library is controllable entirely with subclassing on JS side though.  Any time there is a barrier or change in environment_co_ JS to GLSL_co_ or Python to JS _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt__gt__co_ it is an _lt_strong_gt_opportunity_lt_/strong_gt_ to switch to WMD_t_s_co_ code that writes code.  It also can provide things that just cannot be done_co_ like dynamic sub-classing of meshes with complex inline data.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tReplicating entire shader pairs &amp_sm_ JS files for every material seems counter productive at best_co_ more likely as quick sand to moving to WebGL 2.0 or other future improvements.  Staying within the lines with C preprocessor commands certainly helps though.  Includes get some of the boiler plate out of the individual shader_co_ but the concept could also be accomplished with strings inside JS.  #DEFINES can still be used for much of the heavy lifting.  The fact that there is no need for quotes inside of GLSL makes things easier / more readable.  Did you notice how militant I got with using single &amp_sm_ double quotes when I first refactored the Blender exporter?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf a base TS class for a material was made_co_ which built the shader pair strings_co_ you could provide methods where subclasses could inject the GLSL parts that makes them special.  This base class should reside in the core.  The base class does a lot of string concatenation ( 1 string per GLSL line for readability)_co_ but I bet Gulp strips that out.  You get high modifiability_co_ the subclass would only have what made fire special.  Just something to think about.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]