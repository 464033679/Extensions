[{"Owner":"Joakim","Date":"2016-01-01T11:39:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI tried turning a mesh into the parent of a SpotLight. It worked fine! But when i dispose the parent mesh_co_ the spot light still remains in the scene.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSearching the forums i found this thread_dd_ _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/11230-how-do-i-attach-a-light-to-a-mesh/_qt_ rel_eq__qt__qt__gt_http_dd_//www.html5gamedevs.com/topic/11230-how-do-i-attach-a-light-to-a-mesh/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat thread holds this example_dd_ _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#2AKHZK%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#2AKHZK#2_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTry to add the following lines of code to row 69...\n_lt_/p_gt_\n\n_lt_pre class_eq__qt_ipsCode prettyprint prettyprinted_qt__gt_\n_lt_span class_eq__qt_pln_qt__gt_lightSphere0_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_dispose_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_()_sm__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_lightSphere1_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_dispose_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_()_sm__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_lightSphere2_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_dispose_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_()_sm__lt_/span_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t...and you will find that the spheres are removed_co_ but the lights remain.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIs this a bug or a feature? _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt_ How do I dispose of the lights if I only know the parent mesh?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-01-01T23:20:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Joakim_co_ welcome to the forum.  I am somewhat sure that this is neither a bug nor a feature.  It is simply the way it works.  _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tIn BabylonJS_co_ parenting _lt_u_gt_MESH_lt_/u_gt_ simply means that the child inherits the position_co_ rotation_co_ and scale of it_t_s parent.  But there IS a MESH disposal _qt_feature_qt_ that allows you to recursively dispose of the MESH children.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tmesh.dispose(_lt_em_gt_doNotRecurse_lt_/em_gt_)  Check out _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.abstractMesh.js#L861%C2%A0_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.abstractMesh.js#L861 _lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf NOT doNotRecurse... then recurse the dispose.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo we are in a DO RECURSE section.  See lines to 872-873_co_ where the child dispose happens.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAfter you get done looking at that_co_ let_t_s look at light disposal.  _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Lights/babylon.light.js#L66_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Lights/babylon.light.js#L66_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn that disposer_co_ no DoNotRecurse is available... but it COULD be added_co_ I think.  But similar to mesh recursively disposing ONLY other mesh_co_ light dispose would only dispose other lights.  Do you have a need for this?  I think it could be arranged... and this is an open source project_co_ so you could add it yourself and do a GitHub PR.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou make a good point_co_ actually.  Mesh sometimes have _qt_personal lights_qt_... lights used to illuminate THAT MESH and nothing else.  So when you dispose the mesh_co_ you want its lights to dispose as well.  It would be a simple addition to mesh.dispose... happening between lines 875 and 876.\n_lt_/p_gt_\n\n_lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_\nvar lights _eq_ this.getScene().lights.slice(0)_sm_for (index _eq_ 0_sm_ index &lt_sm_ lights.length_sm_ index++) {    if (lights[index].parent _eq__eq__eq_ this) {        lights[index].dispose()_sm_    }}_lt_/pre_gt_\n\n_lt_p_gt_\n\tBasically a repeat of the !doNotRecurse MESH child-check_co_ done instead on the scene.lights array.  *shrug*  But it is not quite as simple as I have made it appear.  Not only do we want to dispose of lights that are parented to the primary disposed mesh_co_ but we would ALSO want to dispose lights that are parented to the disposed CHILD meshes.  So_co_ BEFORE line 873 (before we dispose the child mesh)_co_ we want to check if that child has any lights parented to it... and dispose them before we dispose the child.  Then still do the child-lights check on the primary disposed mesh... after that... like mentioned above.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSeeing that this iteration must be called twice_co_ instead_co_ maybe build a _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.tools.js_qt_ rel_eq__qt_external nofollow_qt__gt_BABYLON.Tools_lt_/a_gt_.DisposeChildLights(mesh) function.  A tool.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAn interesting topic_co_ Joakim!  I_t_m not a very good coder_co_ nor am I a wise person in seeing _qt_the big picture_qt_... but... hmm.  Maybe we should listen for more comments and see what others have to say about it.  I kind-of like the Tools way of doing it.  I think this would be a rather handy tool to have.  Thanks for bringing this issue to _qt_light_qt_.  _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt_  I think it warrants further thought... and let_t_s hear more thoughts from you_co_ too.  Thanks!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Joakim","Date":"2016-01-02T19:30:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThank you for the very detailed response!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI see now that even the Mesh.getChildren function does not return lights which have been connected to it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYour suggested fix of checking for lights which have the current mesh as a parent seems like it would do the trick. But I don_t_t agree with your following explaination. This snippet of code would be run by all child meshes as well_co_ since it is recursive! Right? To me_co_ this seems simpler than adding a function to the Tools.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI do like your solution_co_ but I am not a fan of doing modifications to the framework at this point _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt_ However_co_ I tried overriding the BABYLON.AbstractMesh.prototype.dispose function and added your code. It works like a charm!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt might be worth having a discussion about this to see if something like this should be added to the framework.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]