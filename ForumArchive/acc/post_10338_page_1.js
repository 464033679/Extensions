[{"Owner":"Dinkelborg","Date":"2014-11-09T15:07:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_br_gt_I am momentarily writing a report about BabylonJS and as I was analysing my scene I came up with the question_lt_br_gt__lt_strong_gt_if any new instance of a ShadowGenerator would also create a new Texture for its shadow map_lt_/strong_gt_ ..._lt_br_gt__lt_br_gt_I guess (soly based on the constructor parameters) that each ShadowGenerator creates a Texture of the size specified in the constructor parameter and that the renderer (or a post processing entity) will combine all those shadow maps at the end._lt_br_gt__lt_br_gt_Is that true or does it work in another fashion?_lt_br_gt__lt_br_gt_Thanks for the answers in advance_co__lt_/p_gt__lt_p_gt_Dinkelborg_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dinkelborg","Date":"2014-11-09T16:14:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Oh and if somebody who can answer this question would be here already_co_ I just came up with another question about the inner functionality of the prefab-objects_dd__lt_br_gt__lt_br_gt__lt_strong_gt_If I change the _qt_scaling_qt_ attribute of a cube_co_ will this cause the cube to be scaled every frame_lt_/strong_gt_ as it would be in other frameworks or is there some internal optimisation for this?_lt_br_gt_Since in the constructor for a box for example there is only one size attribute_co_ I assume that it internally generates a geometry object which is equilateral._lt_/p_gt__lt_p_gt_The only way I see to control the boxes outer appearance then is to change its scaling_co_ in other frameworks this is something you normally want to avoid for performance reasons_co_ and therefore you will rather create a new geometry for your mesh and change the appearance for that (because then the box will not be scaled every frame...)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-11-10T17:01:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_this is perfectly true_dd_ each shadowgenerator generates a shadow map per light that standardmaterial uses to render meshes_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Changing scaling_co_ position or rotation change the worldMatrix of the mesh. This matrix is computed only when required. THere is a huge optimisation around matrices in order to reduce required computations per mesh. So once the scaling is change_co_ it will trigger a worldMatrix update. during rendering the worldMatrix is then send to the shader and won_t_t be update then_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_on every frame_co_ the mesh is rendered using a shader with the given worldmatrix and because everything remains unchanged this is pretty well optimized _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dinkelborg","Date":"2014-11-11T14:52:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Alright_co_ thanks a lot!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]