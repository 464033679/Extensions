[{"Owner":"JCPalmer","Date":"2016-08-28T21:56:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have been generating in-line JS code for my geometry from Blender_co_ and running it from my local machine (fast and has 32 bit indexes).  It did not feel like it was near fast enough.  A mere 242k worth of positions / normals / uvs / indices / sk weight / sk indices was taking _lt_strong_gt_1.9_lt_/strong_gt_ seconds. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is across 6 meshes_co_ though this one is the biggest by far_co_ and all others are children. ( I backed down the influencers to 4 to avoid extra weights &amp_sm_ indices_co_ but did not help)_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_num positions      _dd_  13656\nnum normals        _dd_  13656\nnum uvs            _dd_  27312\nnum uvs2           _dd_  0\nnum colors         _dd_  0\nnum indices        _dd_  65832\nSkeleton stats_dd_  \n\tWARNING_dd_ Maximum # of influencers exceeded for 897 vertices_co_ extras ignored\n\tTotal Influencers_dd_  24129\n\tAvg # of influencers per vertex_dd_  1.7669\n\tHighest # of influencers observed_dd_  6_co_ num vertices with this_dd_  36\n\texported as 4 influencers\n\tnum skeletonWeights and skeletonIndices_dd_  54624_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tSince I am generating source code_co_ it is not quite as pesky to put in a massing amount of timings / loggings.  I thought it was going to show everything was just sluggish &amp_sm_ nothing you could do about it_co_  but I was fuckin_t_ _lt_strong_gt__lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_wrong!!!!!!_lt_/span_gt__lt_/strong_gt_  Here are the 5 child messes.  They are basically nothing_co_ but indexes are taking up an undo amount of that nothing_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\tpositions_dd_ 0.007 secs\n\tindexes_dd_ 0.036 secs\n\tnormals_dd_ 0.001 secs\n\tuvs_dd_ 0.000 secs\n\tsk weights_dd_ 0.001 secs\n\tsk ixds_dd_ 0.000 secs\ndefined mesh_dd_ Jogger.Female_runner_Shoes06 completed_dd_  0.06_co_ geometry_dd_  0.05 secs\n\n\tpositions_dd_ 0.001 secs\n\tindexes_dd_ 0.005 secs\n\tnormals_dd_ 0.000 secs\n\tuvs_dd_ 0.000 secs\n\tsk weights_dd_ 0.000 secs\n\tsk ixds_dd_ 0.000 secs\ndefined mesh_dd_ Jogger.Female_runner_Eyelashes02 completed_dd_  0.01_co_ geometry_dd_  0.01 secs\n\n\tpositions_dd_ 0.000 secs\n\tindexes_dd_ 0.003 secs\n\tnormals_dd_ 0.000 secs\n\tuvs_dd_ 0.000 secs\n\tsk weights_dd_ 0.000 secs\n\tsk ixds_dd_ 0.000 secs\ndefined mesh_dd_ Jogger.Female_runner_Eyebrow001 completed_dd_  0.01_co_ geometry_dd_  0.01 secs\n\n\tpositions_dd_ 0.001 secs\n\tindexes_dd_ 0.002 secs\n\tnormals_dd_ 0.000 secs\n\tuvs_dd_ 0.000 secs\n\tsk weights_dd_ 0.000 secs\n\tsk ixds_dd_ 0.000 secs\ndefined mesh_dd_ Jogger.Female_runner_Low_poly completed_dd_  0.01_co_ geometry_dd_  0.01 secs\n\n\tpositions_dd_ 0.006 secs\n\tindexes_dd_ 0.151 secs\n\tnormals_dd_ 0.001 secs\n\tuvs_dd_ 0.001 secs\n\tsk weights_dd_ 0.001 secs\n\tsk ixds_dd_ 0.001 secs\ndefined mesh_dd_ Jogger.Female_runner_Braid01 completed_dd_  0.17_co_ geometry_dd_  0.17 secs_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThe big mesh_co_ stats shown above_co_ took 1.573 of the 1.59 sec for geometry.  FYI_co_ total time for the parent mesh_co_ 1.90_co_ includes children &amp_sm_ other overheadI did not break out).\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\tpositions_dd_ 0.007 secs\n\tindexes_dd_ 1.573 secs\n\tnormals_dd_ 0.003 secs\n\tuvs_dd_ 0.001 secs\n\tsk weights_dd_ 0.003 secs\n\tsk ixds_dd_ 0.002 secs\ndefined mesh_dd_ Jogger completed_dd_  1.90_co_ geometry_dd_  1.59 secs\nTexture Load delay_dd_  2.60 secs_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tOnce I knew it indexes_co_ I starting digging into the source code.  I noticed you could also pass a Uint32_co_ so I tried that.  It cause a massive increase in time!!!\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\tpositions_dd_ 0.009 secs\n\tindexes_dd_ 3.817 secs\n\tnormals_dd_ 0.003 secs\n\tuvs_dd_ 0.001 secs\n\tsk weights_dd_ 0.003 secs\n\tsk ixds_dd_ 0.002 secs\ndefined mesh_dd_ Jogger completed_dd_  4.17_co_ geometry_dd_  3.84 secs_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI am done for the day_co_ so this primarily a note myself to pick up tomorrow.  I probably need to put tracking in _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.engine.ts#L1143_qt_ rel_eq__qt_external nofollow_qt__gt_Engine.createIndexBuffer_lt_/a_gt_ itself to really isolate.  _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt__co_ any thoughts?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-08-29T14:38:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWith fresh eyes_co_ I narrowed the problem to outside Engine.  QI.Mesh overrides setIndices to perform additional processing.  I put a log of just the super call_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_/** \n * @override\n * wrappered so this._vertexMemberOfFaces can be built after super.setIndices() called\n */\npublic setIndices(indices_dd_ number[])_dd_ void {\n    var sup _eq_ BABYLON.Tools.Now_sm_\n    super.setIndices(indices)_sm_\n    sup _eq_ (BABYLON.Tools.Now - sup) / 1000_sm_\n    console.log(_qt_super setIndices_dd_ _qt_ + sup.toFixed(3))_sm_\n\n    // my processing to get list of faces to avoid calc_t_ing normals \n    // for entire mesh when a shapekey is only part of a mesh\n    ...\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_pre_gt_\n_lt_code_gt_        positions_dd_ 0.006 secs\nsuper setIndices_dd_ 0.002\n        indexes_dd_ 1.582 secs\n        normals_dd_ 0.003 secs\n        uvs_dd_ 0.001 secs\n        sk weights_dd_ 0.003 secs\n        sk ixds_dd_ 0.002 secs\ndefined mesh_dd_ Jogger completed_dd_  1.92_co_ geometry_dd_  1.60 secs_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI am pleased the fixes are outside Engine.  I can stay with 2.4_co_ and potentially move this processing into python_co_ or even determine just calculating normals for the entire mesh is too small a gain to worry about.  Am in the final pre-game performance tune up.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSorry_co_ if I got peoples hopes up of cutting time out of their loads.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-08-29T16:15:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI_t_m not sure to follow. What do you suggest? using int32 for indices loading?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-08-29T18:03:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI fixed it my code!  I switched to using the BJS VertexData.ComputeNormals of the entire mesh_co_ and grabbed the stuff I needed.  Now I do not need to do all this extra stuff in my override of setIndices.  Dumped a lot of arcane code too.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tInstancing the same Jogger mesh is now very fast.  Down from 1.92 seconds to 0.14 seconds.  Geometry went from 1.6 to 0.02 seconds.  The textures delay the mesh from actually displaying in 0.66 seconds though.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUsing my version of computing normals comes from a time where the BJS version was much slower.  _lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5453_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/_qt_ rel_eq__qt__qt__gt_@jerome_lt_/a_gt__co_ took away that advantage.  I was also computing normals for the parts of the mesh that morphed every frame.  Now I just do it once I know the end point &amp_sm_ interpolate it just like the positions._lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]