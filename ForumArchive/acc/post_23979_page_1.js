[{"Owner":"Gwir","Date":"2016-07-21T06:55:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tIs there a way to scale a mesh along global axis instead of its locals?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-07-21T08:10:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tout-of-the-box_co_ not really\n_lt_/p_gt_\n\n_lt_p_gt_\n\twhat do you intend to do ?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Gwir","Date":"2016-07-21T08:26:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI need to scale a mesh along scene global axis_co_ even if the mesh is rotated.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tmesh.scaling attribute is the most obvious way to do it but it scales the mesh along its local axis.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dadiaar","Date":"2016-07-21T08:37:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYes_co_ there is. Take a look to BABYLON.Mesh.bakeCurrentTransformIntoVertices()\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis will commit the transform to the vertices and reset position_co_ rotation and scaling.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you don_t_t want to lose that info_co_ you may want to study the code inside that function_co_ make a clone and recover later the transform info...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2016-07-21T09:38:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThere is a fairly simple way provided the scaling is to be the same in all three directions x_co_ y and z. For example when the scaling factor is 2 you can apply the scaling factor to the position as well as below\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var scalingFactor _eq_ new BABYLON.Vector3(2_co_ 2_co_ 2)_sm_\nmesh.scaling _eq_ scalingFactor_sm_\nmesh.position.multiplyInPlace(scalingFactor)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tHowever as you can see for this playground _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#UMR7M%2370_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#UMR7M#70_lt_/a_gt_ size scaling still takes place along the local axes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA second method that works for unequal scaling is to use a parent at the origin_sm_ set mesh to parent_co_ position and rotate mesh_co_ scale parent to scale mesh along global axes as in this playground _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#UMR7M%2371_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#UMR7M#71_lt_/a_gt_ you can see the distortion that occurs because the scaling is not the same in all three directions. This has the advantage that with multiple meshes you can assign the same parent and can scale them all in one go.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHope this helps\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-07-21T10:10:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tParent your mesh to an empty mesh and then scale the parent.  When you have to move the mesh_co_ move the parent.  When you have to rotate_co_ rotate the child.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1TOK7G_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1TOK7G_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]