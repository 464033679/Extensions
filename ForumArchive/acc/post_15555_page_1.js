[{"Owner":"fenomas","Date":"2015-07-04T03:18:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Regarding _qt_StandardMaterial.isReady()_qt_ - does the composition of a scene affect how often this is called_co_ or is there a way to optimize against it?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For JS-bound scenes with lots of meshes I often find that the profiler spends most of its time in this function_co_ and the big arrays it generates also seem to thrash the GC somewhat. So I_t_m wondering if something about my scene is causing it to get called unnecessarily often._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-07-04T07:36:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello_co_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If your material never changes_co_ you can use material.checkReadyOnlyOnce _dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Materials/babylon.material.ts#L21_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Materials/babylon.material.ts#L21_lt_/a_gt__lt_/p_gt__lt_p_gt_It seems to improve performances._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_About your scene_co_ hard to tell without any code or demo _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-07-06T01:33:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hmm. Setting that flag seems to cut down on the time spent in isReady but the allocations look unchanged._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Is it really the case that one can set that flag any time the material won_t_t change_co_ or are there other caveats? If so_co_ presumably it would be best to set the flag on all materials_co_ and toggle it off for a frame if you need to change a material_co_ right?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-07-06T13:49:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_DK commented on another thread that if _lt_strong_gt__lt_span style_eq__qt_color_dd_#008000_sm__qt__gt_checkOnlyOnce _eq_ true_lt_/span_gt__lt_/strong_gt_ &amp_sm_ the material was shared by meshes &amp_sm_ one changed it_co_ the behavior would not be right.  Think that is the reason for the default._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_That said_co_ in the next version of the Blender exporters_co_ when a material is not shared_co_ then _lt_strong_gt__lt_span style_eq__qt_color_dd_#008000_sm__qt__gt_checkOnlyOnce_lt_/span_gt__lt_/strong_gt_ will be set to true.  Also there is a new checkbox in the mesh custom properties for _lt_strong_gt__lt_span style_eq__qt_color_dd_#008000_sm__qt__gt_freezeWorldMatrix_lt_/span_gt__lt_/strong_gt_.  The developer should know at design time whether the mesh is ever going to move_co_ rotate_co_ or scale.  A good place to put this optimization. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Have added those attributes to the .babylon format (not PMed yet)_co_ as well as 3D camera rig_co_ so presumably other exporters can use them as well._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-07-06T14:09:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Allocations part of isReady should be stopped as well by setting checkOnlyOnce to true_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-07-06T21:15:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I finally found time to finish my revamping of the isReady function. I would like some feedbacks from you guys to see if this is better now performance and memory wise _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-07-08T04:13:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_88322_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_15555_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt_ data-cite_eq__qt_Deltakosh_qt_ data-ipsquote-timestamp_eq__qt_1436217332_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_I finally found time to finish my revamping of the isReady function. I would like some feedbacks from you guys to see if this is better now performance and memory wise _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Looks cool! I haven_t_t done deep testing but it_t_s not slower_co_ and I think it_t_s faster. Nice to not see those massive string arrays getting built. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]