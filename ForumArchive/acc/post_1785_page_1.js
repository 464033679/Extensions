[{"Owner":"karpo","Date":"2013-10-23T10:22:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m quite impressed of Babylon.js so far. Couple of questions though._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_1. I_t_ve now learned how to export/import meshes from other programs into Babylon scene. I wonder if Babylon library allows me perhaps optimize the mesh performance wise somehow by decreasing amount of vertices/polygons dynamically or other image quality values. For example I have this teletubbish landscape mesh generated from L3DT (imported as an. obj to babylon) - seems like I_t_m very soon getting low fps and I_t_d like to look into a bit more. The 3D software I use report the landscape having 34k vertices and 69k faces but I have no problem running 60fps _qt_the Car_qt_ demo at babylonjs.com with a million vertices._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_2. For the landscape - Is the more _qt_proper_qt_ way to go with a seperate heighmap where I could control the mesh subdivision?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_3. Additionally - I_t_m using camera with gravity and collision detection for simulating FPS. Could this be a resource hog?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_4. How to add FPS/Vertices/time used per frame counter/stats visible in many of the demos at _lt_a href_eq__qt_http_dd_//www.babylonjs.com/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks in advance_co__lt_/p_gt__lt_p_gt_Karpo_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2013-10-23T14:22:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_1. Your object should not be too complex to render. You have to determine where the performance is drained (collisions should be a better candidate)_lt_/p_gt__lt_p_gt_2. You can use an height map_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/wiki/16-Height-map_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/wiki/16-Height-map_lt_/a_gt__lt_/p_gt__lt_p_gt_3. Yes it could be if the object is too complex. You should consider using an invisible impostor (simplified) for the collisions_lt_/p_gt__lt_p_gt_4. Here is the code (useful for the point 1_dd_)_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_stats.innerHTML _eq_ _qt_Total vertices_dd_ _qt_ + scene.getTotalVertices() + _qt_&lt_sm_br&gt_sm__qt_                    + _qt_Active vertices_dd_ _qt_ + scene.getActiveVertices() + _qt_&lt_sm_br&gt_sm__qt_                    + _qt_Active particles_dd_ _qt_ + scene.getActiveParticles() + _qt_&lt_sm_br&gt_sm_&lt_sm_br&gt_sm_&lt_sm_br&gt_sm__qt_                    + _qt_Frame duration_dd_ _qt_ + scene.getLastFrameDuration() + _qt_ ms&lt_sm_br&gt_sm_&lt_sm_br&gt_sm__qt_                    + _qt_&lt_sm_i&gt_sm_Evaluate Active Meshes duration_dd_&lt_sm_/i&gt_sm_ _qt_ + scene.getEvaluateActiveMeshesDuration() + _qt_ ms&lt_sm_br&gt_sm__qt_                    + _qt_&lt_sm_i&gt_sm_Render Targets duration_dd_&lt_sm_/i&gt_sm_ _qt_ + scene.getRenderTargetsDuration() + _qt_ ms&lt_sm_br&gt_sm__qt_                    + _qt_&lt_sm_i&gt_sm_Particles duration_dd_&lt_sm_/i&gt_sm_ _qt_ + scene.getParticlesDuration() + _qt_ ms&lt_sm_br&gt_sm__qt_                    + _qt_&lt_sm_i&gt_sm_Sprites duration_dd_&lt_sm_/i&gt_sm_ _qt_ + scene.getSpritesDuration() + _qt_ ms&lt_sm_br&gt_sm__qt_                    + _qt_&lt_sm_i&gt_sm_Render duration_dd_&lt_sm_/i&gt_sm_ _qt_ + scene.getRenderDuration() + _qt_ ms_qt__sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"karpo","Date":"2013-10-23T21:09:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Great. Thanks. I couldn_t_t come up with any other _lt_em_gt_invisible impostor _lt_/em_gt_than cube with texture alpha set to 0. Does the job._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_One way to do the FPS counter (from Stackoverflow) in renderLoop is_dd__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt__lt_br_gt__lt_div_gt_var lastCalledTime_sm__lt_/div_gt__lt_br_gt__lt_div_gt_var fps_sm__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_/div_gt__lt_br_gt__lt_div_gt_        if(!lastCalledTime) {_lt_/div_gt__lt_br_gt__lt_div_gt_             lastCalledTime _eq_ new Date().getTime()_sm__lt_/div_gt__lt_br_gt__lt_div_gt_             fps _eq_ 0_sm__lt_/div_gt__lt_br_gt__lt_div_gt_             return_sm__lt_/div_gt__lt_br_gt__lt_div_gt_          }_lt_/div_gt__lt_br_gt__lt_div_gt_          delta _eq_ (new Date().getTime() - lastCalledTime)/1000_sm__lt_/div_gt__lt_br_gt__lt_div_gt_          lastCalledTime _eq_ new Date().getTime()_sm__lt_/div_gt__lt_br_gt__lt_div_gt_          fps _eq_ 1/delta_sm__lt_/div_gt__lt_br_gt__lt_div_gt_          console.log(fps)_sm_ // use it in an overlay etc._lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2013-10-24T08:14:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Babylon.js do that for you_dd_) _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_BABYLON.Tools.GetFps().toFixed() + _qt_ fps_qt__sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Alex10","Date":"2015-10-12T23:27:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_12307_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_1785_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt_ data-cite_eq__qt_Deltakosh_qt_ data-ipsquote-timestamp_eq__qt_1382602467_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Babylon.js do that for you_dd_) _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_BABYLON.Tools.GetFps().toFixed() + _qt_ fps_qt__sm__lt_/pre_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_In_lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_ Babylon.js_lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_2.2 version_lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_doesn_t_t work_lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_for some reason. _lt_/span_gt__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_BABYLON.Tools.GetFps().toFixed()_lt_/pre_gt__lt_p_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_Full_lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_font-family_dd_Arial_co_ Helvetica_co_ sans-serif_sm_font-size_dd_20px_sm__qt__gt_code_dd__lt_/span_gt__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var scene _eq_ createScene()_sm_loader.onFinish _eq_ function (tasks) {    engine.runRenderLoop(function () {        scene.render()_sm_        stats.innerHTML _eq_ _qt_&lt_sm_div class_eq__t_stat_t_&gt_sm_Total vertices_dd_ _qt_ + scene.getTotalVertices() + _qt_&lt_sm_br&gt_sm__qt_                          + _qt_FPS_dd_ &lt_sm_b&gt_sm__qt_ + BABYLON.Tools.GetFps().toFixed() + _qt_&lt_sm_/b&gt_sm_&lt_sm_BR&gt_sm__qt_                          + _qt_View Range_dd_ _qt_+ camera.maxZ +_qt_&lt_sm_/div&gt_sm__qt__sm_    })_sm_}_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-12T23:33:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yep this was a breaking changes in 2.0.0_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/releases/tag/v2.0.0_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/releases/tag/v2.0.0_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_ul_gt__lt_li_gt_Tools.GetFps() and Tools.GetDeltaTime() are now functions hosted by the engine_dd_engine.getFps() and engine.getDeltaTime() _lt_a href_eq__qt_http_dd_//www.github.com/deltakosh_qt_ rel_eq__qt_external nofollow_qt__gt_deltakosh_lt_/a_gt_)_lt_/li_gt__lt_/ul_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-10-13T00:37:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi Karpo!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I couldn_t_t come up with any other invisible impostor than cube with texture alpha set to 0. Does the job._lt_/p_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You could use box.visibility _eq_ 0_co_ too.  If you are willing to use a box for imposter_co_ then you should think about the object_t_s natural bounding box_co_ which is a nice collider/intersecter_co_ and a good time._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Start by setting mesh.showBoundingBox _eq_ true_sm_  ...take a look at it.  I bet it somewhat resembles your box imposter.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Take a little drive down _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/search?q_eq_bounding_qt_ rel_eq__qt_external nofollow_qt__gt_Bounding Boulevard_lt_/a_gt_ at our cool docs site_co_ if you wish.  We have quite a nice selection of tools to work-with bounding boxes and bounding spheres.  In this _lt_a href_eq__qt_http_dd_//babylonjs-playground.azurewebsites.net/?10_qt_ rel_eq__qt_external nofollow_qt__gt_playground demo_lt_/a_gt__co_ you can see that we have _qt_loose_qt_ bounding box_co_ _qt_tight_qt_ bounding box_co_ and good old mesh-to-mesh intersections available.  I am not sure how _qt_tight_qt_ you will be able to get... with a complex shape_co_ though._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Keep in mind that these use Babylon_t_s built-in collision and intersection system.  We also have a physics engine plugin system... and Oimo.js and Cannon.js physics engines are currently supported (they use DIFFERENT imposters).  Both engines are _lt_a href_eq__qt_http_dd_//babylonjs-playground.azurewebsites.net/#K3KZB_qt_ rel_eq__qt_external nofollow_qt__gt_active in the playground_lt_/a_gt_._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Party on!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]