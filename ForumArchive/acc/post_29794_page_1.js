[{"Owner":"ozRocker","Date":"2017-04-16T06:22:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIn Blender I have 2 copies of a mesh.  One of them has been warped but the vertex count is the same.  They both say 7_co_405 vertices in Blender.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen I export to .babylon file one mesh has 9_co_350 vertices and the other has 9_co_352 vertices. I_t_m trying out the new morph manager and the meshes need the exact same number of vertices.  How can I make the Blender exporter consistent?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-04-17T15:06:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou might edit line 297 of _lt_a href_eq__qt_https_dd_//github.com/Palmer-JC/Babylon.js/blob/master/Exporters/Blender/src/babylon-js/mesh.py#L297_qt_ rel_eq__qt_external nofollow_qt__gt_mesh.py_lt_/a_gt__co_ once it is unzipped.  Add an addition test which will never be true.  This will turn off vertex optimization_co_ so count will not change_co_ but it will get very large_co_ basically # of triangles * 3.  This assumes only 1 material.  There will be border triangles if multi-materials. eg.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_alreadySaved _eq_ alreadySavedVertices[vertex_index] and not useFlatShading and 3 _eq__eq_ 4_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2017-04-17T15:37:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_171312_qt_ data-ipsquote-contentid_eq__qt_29794_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1492441589_qt_ data-ipsquote-userid_eq__qt_8492_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t28 minutes ago_co_ JCPalmer said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tYou might edit line 297 of _lt_a href_eq__qt_https_dd_//github.com/Palmer-JC/Babylon.js/blob/master/Exporters/Blender/src/babylon-js/mesh.py#L297_qt_ rel_eq__qt_external nofollow_qt__gt_mesh.py_lt_/a_gt__co_ once it is unzipped.  Add an addition test which will never be true.  This will turn off vertex optimization_co_ so count will not change_co_ but it will get very large_co_ basically # of triangles * 3.  This assumes only 1 material.  There will be border triangles if multi-materials. eg.\n\t\t_lt_/p_gt_\n\n\t\t_lt_pre_gt_\n\n_lt_code_gt_alreadySaved _eq_ alreadySavedVertices[vertex_index] _lt_span_gt_and_lt_/span_gt_ _lt_span_gt_not_lt_/span_gt_ useFlatShading _lt_span_gt_and_lt_/span_gt_ _lt_span_gt_3_lt_/span_gt_ _eq__eq_ _lt_span_gt_4_lt_/span_gt__lt_/code_gt__lt_/pre_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tok cool.  Well I solved it for now by exporting as an OBJ and using the OBJ loader.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDo you think there_t_d be a way to apply the same optimisation to multiple meshes?  It would be neat if you could group a bunch of meshes together so the same optimisation is applied to all.  I don_t_t have a great understanding of this though so maybe its not possible.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-04-17T15:56:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe direct answer to your question is no.  If you have any change such that a vertex somehow no longer matches across triangle with respect to normal /UV/vertex colors/matrix weight or matrix indices_co_ then in one export you will get a mis-match in vertex count.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn about a month_co_ I will ported some of the stuff I will be doing for shapekeys.  There the vertices are set as normal.  The shapekeys are mapped into the same order.  This issue exists_co_ because you are jumping the gun and bleeding accordingly.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]