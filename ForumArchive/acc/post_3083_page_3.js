[{"Owner":"dbawel","Date":"2015-02-12T03:17:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you_t_re viewing this thread_co_ then you_t_re either curious or you would like to better understand the 3D coodinate system which we all work within - usually Cartesian space (x_co_y_co_z) coordinates and how we use this as a common thread to work in graphic development.   Most developers without a background in 3D software applications and GUIs are interested in how we view dimensional space graphically.  I and others will be contributing to the documentation for BabylonJS and how we work and depict three and four dimensional space using several mathematical disciplines.  I_t_ll also be relating this directly to functions used regularly in the BabylonJS framework to explain the arguments and variables we use._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In the meantime_co_ I came across a fairly simple explaination of Cartesian space and dimensional coordinate systems_sm_ so if you would like to better understand some of these concepts_co_ Wikipedia has a pretty good page in which to begin. I was surprised at how much is covered here - not overly comprehensive_co_ but fairly thorough and well written for the most part._lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//en.wikipedia.org/wiki/Cartesian_coordinate_system_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//en.wikipedia.org/wiki/Cartesian_coordinate_system_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Please check the documentation link below for BabylonJS reference and usage of the framework_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//doc.babylonjs.com/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_DBawel_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-02-14T09:43:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Let_t_s talk cameras.  Z is always the direction in Cartesian space in which a ray is fired to hit a triange and return pixel information for the renderer to display a single pixel or sub-pixel.  So move your cameras in (x_co_y_co_z) space_co_ but always remember your camera will always fire rays to sample polys in its local Z direction.  If anyone wants to learn more about how this relates to Euler angles (Euler math_co_) then I_t_m happy to expand upon this - it_t_s very important for gimble lock on cameras_co_ and changing the order of rotation wil correct this mathematicaly - but should be for another discussion.  Cheers._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-05-10T21:44:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I had mentioned how important it was to freze transforms on objects and then remove its proceeedural history in 3D applications.  As many people use Blender_co_ I found step by step instructions for freezing transforms in Blender.  If you freeze transforms (set their matrice_t_s to be at values 0_co_0_co_0 in x_co_y_co_z) on bones_co_ this wil allow much more freedom for manipulation in all proceedures.  But it_t_s always a good step for any object._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Here is the instructions posted on another site by amamic33431_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt_1. Create your controller_co_ say a nurbs circle. I usually do this in the top view._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_2. Shape the circle into whatever shape you want. (DO NOT MOVE IT OR ROTATE IT) Keep all locations and rotations at zero. Just shape it and scale it._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_3. Once you are done shaping the controller go back into Object mode and hit (CTRL-A_co_ 1) The scale transforms should now be set back to 1. The rotation and location transforms should have been 0_co_0_co_0 already. Because you did not move or rotate the controller while you were shaping it._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_4. Now create what Blender calls an _qt_Empty_qt_. Maya users call this a NULL. (Space Bar_co_ Add_co_ Empty)_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_5. Right click on the controller curve to select it_co_ then Shift-Right click on the _qt_Empty_qt_ to add it to your selection and hit (CTRL-P) on the keyboard to parent the _qt_Empty_qt_ to the controller curve. Hit _qt_A_qt_ to clear the selection and then right click on the _qt_Empty_qt_ and hit _qt_G_qt_ to grab it and move it around in 3D space._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_6. Use the _qt_Empty_qt_ to scale_co_ rotate_co_ and position the curve wherever you want it. You can snap it to a joint_sm_ rotate it to align with the joint chain_co_ etc. Just be sure you are transforming the _qt_Empty_qt_ and not the curve. Once you are done positioning the _qt_Empty_qt_ lock all of it_t_s transforms in the transform properties window and hide it by hitting _qt_H_qt_ on the keyboard._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_7. If you_t_ve done everything right you can now select the controller curve and all of it_t_s location and rotation transforms should still be set at zero. Scale should still be set at one._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_I hope this helps._lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-05-13T19:51:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I just posted this on another topic_co_ as everyone appears to be afraid of quaternions.  Here_t_s the post below_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_I beg you to use quaternions when rotating objects.  Otherwise you_t_ll never get your object to rotate beyond -89.9 and 89.9 degrees (approximately.)  And once you reach these limits_co_ your object may appear to rotate on more than one axis - depending on it_t_s beginning orientation.  An example would be to rotate a carousel in your scene - using euler vectors the carousel would flip each time you reached these limits.  However_co_ using a constant function such as f(x) _eq_ C to provide a constant delta to a quaternion float_co_ you are able to continually rotate the carousel around a single axis with continuity.  _lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_ _lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_At the bottom of this thread is a little primer on quaternion floats and values - not easy to visuallize_co_ but if you just use_dd__lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_mesh.rotationQuaternion _lt_span style_eq__qt_color_dd_rgb(167_co_29_co_93)_sm__qt__gt__eq__lt_/span_gt_ _lt_span style_eq__qt_color_dd_rgb(167_co_29_co_93)_sm__qt__gt_new_lt_/span_gt_ _lt_span style_eq__qt_color_dd_rgb(121_co_93_co_163)_sm__qt__gt_BABYLON.Quaternion_lt_/span_gt_(x_co_ y_co_ z_co_ w)_sm_ _lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_And place it in a scene and experiment by changing the values based on the explaination below_co_ you_t_ll most often use quaternions to rotate objects._lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_ _lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_1. A quaternion is a complex number with w as the real part and x_co_y_co_z as imaginary parts._lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_2. When a quaternion represents a rotation_co_ then w _eq_ cos(theta / 2)_co_ where theta is the rotation anglearound the axis of the quaternion._lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_3. The axis v(v1_co_v2_co_v3) of a rotation is encoded as a quaternion_dd_ x _eq_ v1 sin (theta /2)_co_ y _eq_ v2 sin (theta /2)_co_ z _eq_ v3 sin (theta /2)._lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_4. If w _eq_ 1 then the quaternion defines 0 rotation angle around an undefined axis v _eq_ (0_co_0_co_0)._lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_5. If w _eq_ 0 then the quaternion defines a half circle rotation since theta then would be +/- pi._lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_6. If w _eq_ -1 the quaternion defines +/- 2pi rotation angle around an undefined axis v _eq_ (0_co_0_co_0)._lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_7. And a quarter circle rotation around a single axis causes w to be +/- 0.5 and x/y/z to be +/- 0.5_lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_ _lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_As _lt_span style_eq__qt_color_dd_rgb(0_co_0_co_0)_sm_font-family_dd__t_helvetica neue_t__co_ sans-serif_sm_font-size_dd_13px_sm__qt__gt_Quaternions are four-dimensional_co_ you need four properties. The x/y/z properties don_t_t correspond to x/y/z in euler angles. With quaternions_co_ each of the properties is a normalized float between 0 and 1_co_ so for example a euler angle of 45/90/180 is represented by a quaternion as approximately .65/-.27/.65/.27._lt_/span_gt__lt_/p_gt__lt_p style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_Got a headache yet?  I hope not_co_ as you simply cannot apply deltas to euler vectors for rotation transforms and return any reliable rotational behavior beyond the limits above.  Please_co_ just play around with it and you_t_ll get it._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_/div_gt__lt_/blockquote_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-05-24T20:29:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I thought I might share a process I use to avoid flipping in euler rotations for animation of objects.  This is nothing special_co_ but perhaps not obvious to some developers.  If I need to rotate on multiple axis_t__co_ I often use a seperate null as a parent for one or more of these axis.  I then rotate the nulls with the object as a child_co_ and not the object directly.  This will allow you to avoid gimble lock as now you will have multiple matrices_t_ to manipulate.  The only time this fails is in the example of a carousel when you need to exceed 360 degrees of rotation on a single axis.  At this point you will need to use quaternion floats._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-06-05T07:11:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_For those of you who are working from Blender_co_ hrer is how fov in Blender is caculated._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_According to the Blender documentation_co_ the lens is calculated using FOV _eq_ 2 atan(0.5A/f)._lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_ _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_Where FOV is the _qt_angle of view_qt_ in degrees_co_ A is the image area aperture (which is often defined as the longer of either length or width of the image area)_co_ and f is the focal length of the lens. This equation assumes the tan function operates on values in degrees - if calculating in radians (as Blender seems to)_co_ multiply the right side of the equation by 180/pi. _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_ _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_It appears that Blender uses a constant (16) for variable (A). This seems to indicate that for some reason_co_ the Blender camera is hard-coded to an image aperture dimension of A _eq_ 32 units. As long as the unit system is consistent_co_ it won_t_t matter what these units actually are_co_ but if we assume the variable lensvalue in the function is intended to be a focal length in mm_co_ then the formula will only work if it_t_s also assumed that the aperture of the imaged area is fixed at 32mm. _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_ _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_I hope this helps._lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-06-13T13:30:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk.  I have doubters that this math works 100% of the time or controllers (Iceman_co_ love ya!)_co_ but I thought I_t_d post this as I_t_ve seen this question asked many times.  The question as how do you steer a ship on the screen - or use any controller to direct vectors?  Roughly stated. _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ /_gt_ Here is the my reply..\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tIf you register the pick point on the canvas_co_ the math is easy.  Let_t_s say you have a canvas of 1024X1024 and clicking in the center of the canvas returns a value of (0_co_0) on our pick point of canvas (x_co_y).  I know this isn_t_t the case with HTML_co_ but this is simply an example - primarily for using any external controller. Using conditional statements_dd_\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t \n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t \n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\tif (x &gt_sm_ 512) {\n\t_lt_/div_gt_\n\n\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t    a _eq_ ((x - 512) / 5.12))_sm_\n\t_lt_/div_gt_\n\n\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t}  else  {\n\t_lt_/div_gt_\n\n\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t    a _eq_ 0_sm_\n\t_lt_/div_gt_\n\n\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t}\n\t_lt_/div_gt_\n\n\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t \n\t_lt_/div_gt_\n\n\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t \n\t_lt_/div_gt_\n\n\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\tif (x &lt_sm_ 512) {\n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t    b _eq_ -((x - 512) / 5.12))_sm_\n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t}  else  {\n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t    b _eq_ 0_sm_\n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t}\n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t \n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t \n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\tif (y &gt_sm_ 512) {\n\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t    c _eq_ ((y - 512) / 5.12))_sm_\n\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t}  else  {\n\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t    c _eq_ 0_sm_\n\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t}\n\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t \n\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t \n\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t\tif (y &lt_sm_ 512) {\n\t\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t\t    b _eq_ -((y - 512) / 5.12))_sm_\n\t\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t\t}  else  {\n\t\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t\t    b _eq_ 0_sm_\n\t\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t\t\t\t}\n\t\t\t\t\t_lt_/div_gt_\n\t\t\t\t_lt_/div_gt_\n\t\t\t_lt_/div_gt_\n\t\t_lt_/div_gt_\n\n\t\t_lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_\n\t\t\t \n\t\t_lt_/div_gt_\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t \n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tIf you look at the math for each of these variables a_co_ b_co_ c_co_ d then you have a value of 0 to 100 for each variable.\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tThen you_t_ll want to average these so that you can direct your ship in a blended direction_co_ and not simply as an additive.\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t \n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tThis math is_dd_\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t \n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tvar Blend _eq_ (a + b + c + d)\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t \n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tif (Blend &gt_sm_ 100) {\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t    BlendDivide _eq_ ((a + b + c + d)/100)\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t}  else  {\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t    BlendDivide _eq_ 1.0   {\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t}\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t \n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tvar dir1 _eq_ (a / BlendDivide)\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tvar dir2 _eq_ (b / BlendDivide)\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tvar dir3 _eq_ (c / BlendDivide)\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tvar dir4 _eq_ (d / BlendDivide)\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t \n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tAnd you now have a blended direction for each (x_co_y) vector from a value of 0.0 in the center of your canvas for whatever the pick point is.  This will give you perfect control in whatever direction the user wants to steer.  If you want your (x_co_y) center to be in a different position on the canvas or more force in any direction_co_ just change the math.\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t \n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tYou can also use a Triginometry function_co_ but this math is much simpler and easy to add more controls to the blend.\n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\t \n_lt_/div_gt_\n\n_lt_div style_eq__qt_margin_dd_0px_sm_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_\n\tDB\n_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-07-05T08:08:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_It_t_s in the wee early hours of the morning_co_ and I just wrote a new post for working with bone and joint hierarchies - however_co_ after spending more than one hour crafting the perfect discussion_co_ I tried to attach a screenshot I was referencing of the skeleton I built for the Shrek Donkey_co_ and the forum somehow tossed away my entire post.  So_co_ I give up tonight_co_ and am now pouring a tall glass of bourbon.  I_t_ll come back to skeleton hierarchies and the manipulation thereof another time_co_ when the stars are more properly aligned_co_ and when my work_t_s not flushed away like an old floater.  Happy 4th Everyone!  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_cool.png_qt_ alt_eq__qt_B)_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Srisub","Date":"2016-03-16T17:32:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tmight be great to have a getAbsoluteRotation() to complement getAbsolutePosition().\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-04-07T23:50:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBelow is a comment I recently posted on trying to understand the behaviors of Euler values for an object. I_t_ve covered some of this previously_co_ but it_t_s always valuable to have a general understanding of what Euler angles/values represent_co_ and why you might choose Quaternion over Euler or Euler over Quaternion when developing in babylon.js. And I often read posts asking questions which might be answered by a better understanding of what Euler values typically represent.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tQuote\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5733-wingnut/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5733_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5733-wingnut/_qt_ rel_eq__qt__qt__gt_@Wingnut_lt_/a_gt_-\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tAs usual_co_ you are correct. _lt_img alt_eq__qt__dd_rolleyes_dd__qt_ data-emoticon_eq__qt__qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_rolleyes.gif_qt_ title_eq__qt__dd_rolleyes_dd__qt_ /_gt_ Euler angles are generally represented by pitch_co_ roll_co_ and yaw angles/values to set the axis of rotation_co_ as well as an angular vector for translation. Although the order of pitch_co_ roll_co_ and yaw are often ordered differently_sm_ these should be re-ordered by the developer when necessary to provide the desired behavior for an object_t_s transforms. Basically every transform applied in most every software application and/or base algorithms for object transforms in most frameworks compute in euler angles_co_ and convert these values to quaternion (x_co_y_co_z) values to make these processes simpler for the user - as it is much easier to graphically represent quaternion values in graphic applications for a UI as well as for building function curves and other graphic tools for additional animation control and representation.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThe reason gimble lock most often occurs when using euler angles/values is that even though no limit exists for euler values_co_ and they can be set to practically any value (ie. +/-10_co_000 if necessary)_co_ most applications _qt_normalize_qt_ euler values to be +/- 180 degrees (you_t_ll often find _qt_normalize_qt_ as a function used in most graphic applications)_co_ which then can cause _qt_gimble lock_qt_ and more often _qt_flipping_qt_ in an object_t_s rotation_co_ as euler values of -180 and 180 often produce the exact orientation for an object_t_s vector since normalized euler angles produce no euler vector value &lt_sm_ -180 and &gt_sm_ 180 degrees. So rotating an object on a single euler axis produces the same orientation state at -180 and 180 degrees_co_ depending on the value of the other two angles. So typically there is no way to rotate an object numerically and avoid _qt_flipping_qt_ using only euler angles more than one 360 degree rotation - without additional algorithms. And what is often overlooked is that the order in which you apply values to an object_t_s euler angles changes the transformational behavior dramatically. So if you are using euler angles/values in your scene and experience _qt_gimble lock_qt_ on a bone object or _qt_flipping_qt_ on objects or cameras_co_ then by simply changing the order of rotation - which is the order in which the euler values are applied - can often correct these undesired behaviors\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThere is certainly allot more to euler and quaternion math_co_ but I hope this provides a basic understanding of behaviors and when and how to use Euler values on a fundamental level. And I agree completely with Wingnut_co_ that I have almost always found it faster to work with animating objects using quaternion values.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-04-08T00:26:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\thahaha... a double helix cross-reference!  Yep_co_ good idea.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  Congealing our categories.  heh  Every post is a tutorial_co_ right?  You bet!  WE know what WE_t_re doing_co_ eh?  Bytes of a feather...  (need bulldozing together).\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-04-11T05:33:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_Below is another post I responded to concerning world spaces which should help many newbies understand how to correctly export FBX and other file formats to the .babylon file format.\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tQuote\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt__gt_\n\t\t\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t\t\tQuote\n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t\t\t_lt_div style_eq__qt_table-layout_dd_fixed_sm_width_dd_1091.11px_sm_line-height_dd_1.6_sm_color_dd_rgb(39_co_42_co_52)_sm_font-size_dd_14px_sm_margin-bottom_dd_20px_sm_margin-top_dd_0px_sm_font-family_dd__t_Helvetica Neue_t__co_ Helvetica_co_ Arial_co_ sans-serif_sm_font-style_dd_normal_sm_font-variant_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm_background-color_dd_rgb(255_co_255_co_255)_sm__qt__gt_\n\t\t\t\t\t_lt_p style_eq__qt_margin-top_dd_0px_sm__qt__gt_\n\t\t\t\t\t\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/20836-foura/?do_eq_hovercard_qt_ data-mentionid_eq__qt_20836_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/20836-foura/_qt_ rel_eq__qt__qt_ style_eq__qt_color_dd_rgb(255_co_255_co_255)_sm_text-decoration_dd_underline_sm_padding_dd_0px 5px_sm_font-size_dd_12.6px_sm_background_dd_rgb(48_co_132_co_196)_sm__qt__gt_@foura_lt_/a_gt__co_\n\t\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t\t_lt_p_gt_\n\t\t\t\t\t\tWelcome to the forum. When load your file into MotionBuilder_co_ I see the object and orientation below_dd__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_04/rak_basic.jpg.46a66797620f0efcd8f32a437e73cc15.jpg_qt_ style_eq__qt_color_dd_rgb(60_co_105_co_148)_sm_text-decoration_dd_underline_sm_background-color_dd_transparent_sm__qt_ title_eq__qt_Enlarge image_qt_ data-fileid_eq__qt_7250_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img alt_eq__qt_rak_basic.jpg_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_7250_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_04/rak_basic.jpg.46a66797620f0efcd8f32a437e73cc15.jpg_qt_ style_eq__qt_vertical-align_dd_middle_sm_border_dd_1px solid rgb(226_co_226_co_226)_sm_height_dd_auto_sm_padding_dd_1px_sm__qt_ /_gt__lt_/a_gt_\n\t\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t\t_lt_p_gt_\n\t\t\t\t\t\tIf you are using MotionBuilder_co_ the rotation you see is how the file was saved. I would parent the legs and rotate in MB_co_ Maya_co_ or Max - or an application with a Y axis up world orientation. I use the FBX format most of the time_co_ as it is more flexible for objects and animations than Blender (depending on the scene)_co_ as well as most all attributes. I would rotate the objects 270 degrees (not 90 degrees) and freeze or bake all transforms (or just rotations) depending on which application you_t_re using. If I knew which application you exported from_co_ this would help answer your question. There are often orientation differences when exporting from various applications. However_co_ the reason you are seeing a different orientation result in babylon is that the application you exported from must have a Z axis up world orientation_co_ where as the FBX format is a Y axis up world orientation - and this is maintained in the FBX file format. Keep in mind that Blender is also Z axis up_co_ but I believe this is corrected for .babylon during the export process. Also your object is not rotated 90 degrees_co_ but you_t_ll find that there is a 270 degree rotation placed on your models. Keep this in mind_co_ as rotating 90 degrees will look correct_co_ but numerically_co_ your objects might have a 360 degree rotation added if you rotate 90 degrees instead of 270 degrees in the opposite direction.\n\t\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t\t_lt_p_gt_\n\t\t\t\t\t\tAnd FYI - I saw upon loading that your scene contains NURBS surfaces_co_ which I would convert to polygons before exporting_co_ as well as your object is incredibly small_co_ which can also cause a vast number of problems_co_ and would be difficult to work with in babylon.js.\n\t\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t\t_lt_p style_eq__qt_margin-bottom_dd_0px_sm__qt__gt_\n\t\t\t\t\t\tDB\n\t\t\t\t\t_lt_/p_gt_\n\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t_lt_div style_eq__qt_float_dd_right_sm_color_dd_rgb(82_co_82_co_82)_sm_font-family_dd__t_Helvetica Neue_t__co_ Helvetica_co_ Arial_co_ sans-serif_sm_font-size_dd_13px_sm_font-style_dd_normal_sm_font-variant_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_line-height_dd_20px_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm_background-color_dd_rgb(255_co_255_co_255)_sm__qt__gt_\n\t\t\t\t\t \n\t\t\t\t_lt_/div_gt_\n\n\t\t\t\t_lt_ul style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_list-style_dd_none_sm_color_dd_rgb(82_co_82_co_82)_sm_font-family_dd__t_Helvetica Neue_t__co_ Helvetica_co_ Arial_co_ sans-serif_sm_font-size_dd_13px_sm_font-style_dd_normal_sm_font-variant_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_line-height_dd_20px_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm_background-color_dd_rgb(255_co_255_co_255)_sm__qt__gt__lt_li style_eq__qt_vertical-align_dd_middle_sm_margin-right_dd_15px_sm__qt__gt_\n\t\t\t\t\t\t\n\t\t\t\t\t_lt_/li_gt_\n\t\t\t\t_lt_/ul_gt__lt_/div_gt_\n\t\t_lt_/blockquote_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-04-20T09:04:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI recently responded to a topic which again asks for support of a Z axis up world orientation. Below is the following_dd_\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tQuote\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tI believe I MIGHT understand why a Z axis up world coordinate system would be your chosen coordinate system. I also learned this as the way I perceived and approached all work in both CGI and algorithmic development in my earlier days as I was working with magnetic coordinate systems which as (I believe) you might be familiar with as the mathematical standards for Earth_t_s magnetic fields and the math supporting this as Z axis up (outward from the Eath_t_s core as the Z axis.)\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tHowever_co_ either the above is the case_co_ or you are working in development environments that use a standard methodlogy of the math construct which pre-dates the most widely (currently) used construct of a Y axis up world orientation which is represented in many graphic APIs and in polygonal rendering resulting from the most widely used development languages in applications today - (please note this is a very remedial description.) I had to make the decision to adopt a Y axis world orientation in most of my development and graphic work years ago - even though all my work previously had been oriented to a Z axis up world coordinate system - which is a simplified explaination applied to the work I was doing at the time - but involved magnetic and other physical property detection devices including motion capture systems and various motion sensors - as well as other devices which anyone else on this forum would most likely not relate to without an unpresidented description of practically no value these days. \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tHowever_co_ if you are not coming from a magnetic coordinate system which I briefly described above_co_ then I would not understand why you would choose to continue to work with a Y axis up world coordinate system in Babylon.js. I can testify from personal experience that you will experience attempting to write functions and applications which will limit you tremedously if you don_t_t either create extensions to handle the conversion to a magnetic construct ( a Z axis up coordinate system)_co_ or to adopt Y axis up for your work in WebGL. Otherwise_co_ you wil find yourself limited in the any development you might attempt within the framework(s) in which you are attempting to produce media within. \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tHowever_co_ as I_t_m certain you most likely know there is a solution (certainly not recommended) to what I believe is your dilemma - which is to re-write the babylon.js framework to adopt a Z axis up world coordinate system - which is for me would be a nightmare as this framework is evolving faster than any I have ever been associated. Not to mention that the knowledge base driving Babylon.js is far outside my experience level to possibly keep up any resemblanse of the features_co_ as well as any backwards compatability. So in no way would I personally choose to take this approach_co_ unless I had immense resourses and I was prepared for not only the adaptation of Babylon.js_co_ but other aspects of WebGL (forget all of the different browsers and versions thereof) and all associated frameworks and extensions which support these frameworks - as I find myself more than often adapting code from many_co_ many sources which all follow a Y axis up world cooordinate system.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tI wish you the best of luck_co_ but unless you are working with legacy frameworks as I did with military and other agencies_co_ I would seriously consider adopting the Y axis up world coordinate system as a base coodinate system for any development within the WebGL frameworks currently available. Of course_co_ there_t_s always room for another development framework (as well as a collection of extensions) to support a Z axis up world orientation.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tDB\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-06-06T23:22:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_Below is a post which I often see similar questions on the forum - especially when it comes to character animation and rigging. The specific_co_ post is as follows_sm_\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tQuote\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\n\t\t_lt_div style_eq__qt_table-layout_dd_fixed_sm_width_dd_1091.11px_sm_line-height_dd_1.6_sm_color_dd_rgb(39_co_42_co_52)_sm_font-size_dd_14px_sm_margin-bottom_dd_20px_sm_margin-top_dd_0px_sm_font-family_dd__t_Helvetica Neue_t__co_ Helvetica_co_ Arial_co_ sans-serif_sm_font-style_dd_normal_sm_font-variant_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm_background-color_dd_rgb(255_co_255_co_255)_sm__qt__gt_\n\t\t\t_lt_p style_eq__qt_margin-top_dd_0px_sm__qt__gt_\n\t\t\t\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/16753-biswazr/?do_eq_hovercard_qt_ data-mentionid_eq__qt_16753_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/16753-biswazr/_qt_ rel_eq__qt__qt_ style_eq__qt_color_dd_rgb(255_co_255_co_255)_sm_text-decoration_dd_underline_sm_padding_dd_0px 5px_sm_font-size_dd_12.6px_sm_background_dd_rgb(48_co_132_co_196)_sm__qt__gt_@biswazr_lt_/a_gt_ -\n\t\t\t_lt_/p_gt_\n\n\t\t\t_lt_p_gt_\n\t\t\t\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/7026-gryff/?do_eq_hovercard_qt_ data-mentionid_eq__qt_7026_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/7026-gryff/_qt_ rel_eq__qt__qt_ style_eq__qt_color_dd_rgb(255_co_255_co_255)_sm_text-decoration_dd_underline_sm_padding_dd_0px 5px_sm_font-size_dd_12.6px_sm_background_dd_rgb(48_co_132_co_196)_sm__qt__gt_@gryff_lt_/a_gt_ provided_co_ I forgot to inform you of an essential step in using keyframe animation for characters (meshes bound to a skeleton hierarchy) and also using any motion capture animation as well. This is to always parent your root bone (joint) to a seperate object or objects depending on how you intend on animating your character(s). What_lt_span_gt_ _lt_/span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/7026-gryff/?do_eq_hovercard_qt_ data-mentionid_eq__qt_7026_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/7026-gryff/_qt_ rel_eq__qt__qt_ style_eq__qt_color_dd_rgb(255_co_255_co_255)_sm_text-decoration_dd_underline_sm_padding_dd_0px 5px_sm_font-size_dd_12.6px_sm_background_dd_rgb(48_co_132_co_196)_sm__qt__gt_@gryff_lt_/a_gt_ recommends will work_co_ however_co_ I find myself severly limted in many animations if I don_t_t have at least one parent object or bone at the base of the character (generally the origin where hopefully the feet are placed and touching the _qt_ground_qt_ position at (0_co_0_co_0) to make contact with a ground plane at 0 in the global Y axis.                                                                                                                                  \n\t\t\t_lt_/p_gt_\n\n\t\t\t_lt_p_gt_\n\t\t\t\tIn addition_co_ it is invaluable to freeze all transforms of this parent null or bone to allow as much flexability for animating the character in world space. I also recommend adding additional objects (nulls or bones) for each unique transform the character might make in world space such as a seperate parent under the translation parent object for rotations which will allow a great deal more freedom to rotate your character and avoid gimble lock_co_ as well as increased rotational flexability. And having the top parent null or bone only for world translation_co_ this allows your character to easily move up and down inclines_co_ on uneven terrian_co_ and up stairs and ladders_sm_ whereas attempting to do this using only the character_t_s local skeleton transforms in addition to a world transform on the root joint will severly limit you in the ability for our character to freely translate as well as accomplish _qt_flying_qt_ and/or jumping high in world space. And please always try and freeze ALL skeleton transforms prior to attaching any animation (for every bone in the skeleton hierarchy before animating a single key) especially motion capture animations_co_ as this will always provide the greatest range of motion for any character skeleton.    \n\t\t\t_lt_/p_gt_\n\t\t_lt_/div_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_div style_eq__qt_table-layout_dd_fixed_sm_width_dd_1091.11px_sm_line-height_dd_1.6_sm_color_dd_rgb(39_co_42_co_52)_sm_font-size_dd_14px_sm_margin-bottom_dd_20px_sm_margin-top_dd_0px_sm_font-family_dd__t_Helvetica Neue_t__co_ Helvetica_co_ Arial_co_ sans-serif_sm_font-style_dd_normal_sm_font-variant_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm_background-color_dd_rgb(255_co_255_co_255)_sm__qt__gt_\n\t_lt_p_gt_\n\t\t                                                                                                                                                                                                                                                 \n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\tIf you wish to read the entire topic_co_ then the link to the topic is as follows_dd_\n\t_lt_/p_gt_\n\t_lt_iframe data-embedcontent_eq__qt__qt_ frameborder_eq__qt_0_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/topic/22759-mixamo-bvh-distorting-after-a-littile-edit-in-blender/?do_eq_embed&amp_sm_embedComment_eq_131273&amp_sm_embedDo_eq_findComment#comment-131273_qt__gt__lt_/iframe_gt_\n\n\t_lt_p_gt_\n\t\tCheers_co_\n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\tDB\n\t_lt_/p_gt_\n_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JackFalcon","Date":"2018-04-27T15:34:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/11286-dbawel/?do_eq_hovercard_qt_ data-mentionid_eq__qt_11286_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/11286-dbawel/_qt_ rel_eq__qt__qt__gt_@dbawel_lt_/a_gt_  Great thread_co_ here are... pseudo-random question. _dd_ )\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ lots of questions but... the current journey is to understand_dd__lt_em_gt_ transforming points between spaces. _lt_/em_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHOW TO BEST TRANSFORM SINGLE-POINT from WORLDSPACE to LOCALSPACE... and back again?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFrom a recent SUCCESS of a translation from WORLD to LOCAL_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_        /*TRANSFORM WORLD COORDINATES INTO LOCAL*/\n        var invertParentWorldMatrix _eq_ tgtPlane.getWorldMatrix().clone()_sm_\n        invertParentWorldMatrix.invert()_sm_\n        var local_position _eq_ BABYLON.Vector3.TransformCoordinates(pickPoint_co_ invertParentWorldMatrix)_sm_\n         local_position.y_eq_3_sm_ //local adjustment.\n         pickMesh.position.copyFrom(local_position)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tinvertParentWorldMatrix... does what now? _dd_ )\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOh wait_co_ that is not my 1 question_co_ (niether -&gt_sm_ gimble lock - precise moves to break gimble lock? [anyone?] )\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRefocus falcon_dd_ Here is the question...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow best to TRANSFORM LOCAL COORDINATES from LOCALSPACE to WORLDSPACE?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLooking... and found it. \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_mesh.computeWorldMatrix()_sm_\nvar matrix _eq_ mesh.getWorldMatrix(true)_sm_\nvar local_position _eq_ new BABYLON.Vector3(0_co_1_co_0)_sm_\nvar global_position _eq_ BABYLON.Vector3.TransformCoordinates(local_position_co_ matrix)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tOk_co_ So what is going on with the _lt_em_gt_transforming_co_ _lt_/em_gt__lt_em_gt_computing and inverting of matrices?_lt_/em_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt__dd_ )_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2018-05-14T01:56:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/25131-afalcon/?do_eq_hovercard_qt_ data-mentionid_eq__qt_25131_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/25131-afalcon/_qt_ rel_eq__qt__qt__gt_@aFalcon_lt_/a_gt_-\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSorry_co_ I_t_ve been absent for a while. I see you found the function call and best method. Once you_t_re at this point in understanding world matrices_t_ and the difference between local_co_ global_co_ Euler_co_ and Quaternion... It_t_s a simple step to applying vectors to local and world transforms without even thinking about it. If you want to really wrap your head around this to become second nature_co_ I recommend creating a very simple scene and a simple mesh representing a spaceship - and generate a path for the ship to follow. But make certain that you maintain the tangent on the curve for the ship to maintain direction_co_ as well as using the normals and binormals to prevent gimble lock and maintain correct orientation. This simple exercise will teach anyone all they need to know about path animation_co_ euler angles_co_ normals and binormals of a curve_co_ etc. Once this is fully understood_co_ it will become second nature to the point that you will never have any questions as to local and global vectors as well as remaining within the constraints of Euler angles.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTry experimenting around with the order of tangent_co_ normal_co_ and binormal as well - and see what results occur. Once fully understood_co_ all your questions will be answered. Here is a playground scene recently updated by _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ using group animations - which when they work are incredibly efficient.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#92EYG%2324_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#92EYG#24_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNote that group animations didn_t_t work using Electron - which is a standalone version of Chromium. But perhaps this bug is fixed now.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCheers_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit - by the way_co_ make sure you create a box as a parent of the mesh and attach the box to the path and animate along the path. This will then allow you to animate the ship_t_s orintation in addition to the path to add additional banking for the ship without any worries of gimble lock.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JackFalcon","Date":"2018-05-14T03:22:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWoo-hoo... Yep applying world/local transform no big deal! _dd_ )\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd about 75% on the space ship challenge...(still need to understand tangent_co_ normal binormals) Guessing there might be a cross product in there somewhere..\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDid some updates on the _qt_car following a path_qt_ example.Using lookAt as orientation trick...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso have info from electron app near completion. Fascinating things with animation...interpolation with a config object_dd_._lt_strong_gt_ anim({from_co_ to_co_ duration}).done()_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUpdate_dd_ wow that is an awesome example. Thanks! \n_lt_/p_gt_\n\n_lt_p_gt_\n\t(ed) CatmullRomSpline yee-haw. Will learn groups (and test in electron app).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tGreat to see you back _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/11286-dbawel/?do_eq_hovercard_qt_ data-mentionid_eq__qt_11286_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/11286-dbawel/_qt_ rel_eq__qt__qt__gt_@dbawel_lt_/a_gt_ _dd_ )\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]