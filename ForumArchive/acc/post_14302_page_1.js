[{"Owner":"dsman","Date":"2015-05-05T20:28:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_So I have a scene which is genered from imported .babylon model.  Total vertices _dd_58590_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_There_t_s a mesh which I want to apply mirror material. Now initially_co_ the mesh only has 214 vertices heavy. (This mean when imported from model it had only this many vertices. )_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But If I apply mirror material_co_ the mesh adds up ~58000 vertices (yes 58k).  (I am checking the difference in number Active Vertices in stats by hiding the mesh on which I applied mirror and show it)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What_t_s reason in sudden increase of vertices count? And we are applying texture not modifying the mesh vertices data. So why does vertices count goes this high?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It is reducing fps by 4th.  What are other things we can do to improve mirror performance ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-05-05T23:15:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_OMG there is a bug here. Either on your side or in my side _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Can you reproduce it on the playground or provide a link to a sample using Babylon debug version? (_lt_a href_eq__qt_http_dd_//www.babylonjs.com/babylon.max.js_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/babylon.max.js_lt_/a_gt_) _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dsman","Date":"2015-05-06T19:28:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I can give you zip file.  But I think it is happening because I am passing entire scene.meshes array  to mirrorMaterial.reflectionTexture.renderList . And that could be reason it is increasing active vertices count to same amount as total vertices in original scene. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But shouldn_t_t  _qt_Active Vertices count _qt_  _eq_  the total vertices in camera view port  + total vertices in mirror view port ? _lt_/p_gt__lt_p_gt_Instead of   - _qt_ Active vertices count _qt_ _eq_ the total vertices in the camera view port + total vertices in the scene ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dsman","Date":"2015-05-06T20:12:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_So I confirm above is true. (That whatever number of vertices are there in total for all meshes you are adding in renderList property of reflectionTexture _co_ will be added to the Active Vertice count  _co_ no matter how many meshes are being displayed actually inside the mirror for current camera port ) _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So this is wrong in my opinion and can be improved. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Now I tried adding only meshes whose vertice count is less than 1000  in the renderList. And the increase in Active Vertice Count is 1000 regardless of what is being shown in the mirror. In one camera view_co_ I see only a plane mesh in the mirror having 10-20 vertices. But still the Active Vertices Count is 1000 more than when I hide mirror mesh. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_strong_gt_One more performance problem I encountered_dd_ _lt_/strong_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have total 39 meshes in scene. Out of which I have 10-15 meshes set as renderList in a mesh_t_s mirror material. Now I generated 400 dynamic Plane meshes by code_co_ each having four vertices (or Six?). And I set all those meshes in the mirror_t_s renderList. The potential  FPS dropped from 200-300 to 40-60.  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Here I understand I increased count of meshes in renderList from 10-15 to  410-415 . But the total number of vertices from all newly added dynamic meshes is very small. Like around 2k. So why such sudden drop in potential FPS. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-05-07T20:08:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Active vertices are the number of vertices sent to the GPU. The viewport is not computed on the CPU so there is no way to know the PRECISE number of vertices drawn._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For your second question_dd_ a big number of small meshes is counter-efficient because it breaks the GPU pipeline (GPU prefer a big bunch of vertices instead of a big number of draw calls)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dsman","Date":"2015-05-07T22:30:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_@Deltakosh_lt_br_gt__lt_br_gt_I understood little of what you said about CPU/GPU. But I am intrigued at how mirror adds up all vertices in all meshes given in RenderList   _qt_ Active Vertices Count_qt_  regardless of how many meshes are currently being displayed in the mirror. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Suppose I have set 15 meshes (with 1000 vertices each) in the RenderList of mirror material. Now my camera is positioned such that mirror only shows reflection of 1 mesh out of 15 in its RenderList. So in this case only 1000 vertices should be added to the _qt_ Active Vertices Count_qt_  Right ? or No ? Currently in such case_co_ it adds all 15 * 1000 _eq_ 15000 vertices to _qt_ Active Vertices Count_qt_ _co_ regardless of the fact that mirror only shows 1 mesh  out of 15 and not all 15. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So same logic that applies for camera view isn_t_t applied to mirror basically. In case of camera view_co_ _qt_ Active Vertices Count_qt_  considers only # of vertices in the meshes which are viewable in current camera viewport. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_............._lt_br_gt__lt_br_gt_About my second question_co_ What are my option to reduce number of draw call in such case ?  I am generating separate dynamic mesh by code_co_ because I need to place them at certain position and apply separate texture to each.  Can this be done with any alternate method with better performance ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-05-07T22:41:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt_Suppose I have set 15 meshes (with 1000 vertices each) in the RenderList of mirror material. Now my camera is positioned such that mirror only shows reflection of 1 mesh out of 15 in its RenderList_lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In this case ALL meshes will be sent to the GPU as there is no frustum clipping / occlusion testing done on the CPU. So 1000*15 vertices will be added._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For your second question_co_ you should think about merging your meshes into a bigger one_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dsman","Date":"2015-05-08T06:31:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Can someone point to specific thing I should be looking for here ? _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I saw _qt_Merging Meshes_qt_  article (Link below) . But it will make one mesh out of multiple mesh I guess. And I will have no way to separately apply transform  later on. _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//doc.babylonjs.com/page.php?p_eq_22451_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/page.php?p_eq_22451_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I saw _qt_ Creating Instances_qt_ article  (Link below). But in that case I can_t_t have meshes of different type having different texture instantiated from a mesh. _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//doc.babylonjs.com/page.php?p_eq_22571_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/page.php?p_eq_22571_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Is mesh grouping entirely different thing ? Any pointer ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-05-08T18:33:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_If you need same geometry and different materials_co_ then mesh.clone is the best way to improve (a bit) performance_lt_/p_gt__lt_p_gt_If you need same geometry_co_ same material and different world matrices then instances are the best way to greatly improve performance_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]