[{"Owner":"Vousk-prod.","Date":"2014-12-24T16:33:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello all_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ve just noticed something I don_t_t know whether it_t_s a bug or it should behave like this._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have 2 objects with animations_co_ and I register PlayAnimationAction on them._lt_/p_gt__lt_p_gt_I trigger one animation (by mouse click)_co_ and then immediatly the other _dd_ everything goes fine._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Now I instanciate _lt_em_gt_object1_lt_/em_gt_. Since instance does not have animations_co_ I reference _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_instance1.animations _eq_ object1.animations_lt_/span_gt_. (I referenced it instead of duplicating the animations keys because I think for large number of instances and complex animations that would be a big ressource cruncher...). Then I register PlayAnimationAction on this instance._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I can now trigger animations independently on the 3 objects (the 2 real meshes and the instance)._lt_/p_gt__lt_p_gt_But when I trigger the anim on _lt_em_gt_object1 _lt_/em_gt_or _lt_em_gt__lt_span style_eq__qt_font-family_dd_arial_co_ helvetica_co_ sans-serif_sm__qt__gt_instance1_lt_/span_gt__lt_/em_gt_ and immediatly after I click the other_co_ the first animation immediatly stops while the second animation starts._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You can test that on the repro-case (_lt_em_gt_obj1 _lt_/em_gt_-blue- and _lt_em_gt_obj2 _lt_/em_gt_-pink- are real objects_co_ _lt_em_gt_inst1 _lt_/em_gt_-also blue- is instance of _lt_em_gt_obj1_lt_/em_gt_) _dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1MYQJJ%236_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1MYQJJ#6_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Is this the expecting result ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-12-26T18:58:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Expected_co_ yes.  Here is why._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The exeucte() of PlayAnimationAction is_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        public execute()_dd_ void {            var scene _eq_ this._actionManager.getScene()_sm_            scene.beginAnimation(this._target_co_ this.from_co_ this.to_co_ this.loop)_sm_        }_lt_/pre_gt__lt_p_gt_Now the target is different for each_co_ so it initiates on all three correctly.  scene.beginAnimation() calls scene.stopAnimation()_co_ passing the correct target object.  Here is where sharing burns you though._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        public stopAnimation(target_dd_ any)_dd_ void {            var animatable _eq_ this.getAnimatableByTarget(target)_sm_            if (animatable) {                animatable.stop()_sm_            }        }_lt_/pre_gt__lt_p_gt_It gets the animation for the target and stops it.  Being a reference stops it on the other object.  I am not good enough with the animation system combined with the action system to know an alternative_co_ other than to clone the animation.  Hopefully this is not being done with bones._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2014-12-27T03:09:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Arr_co_ I_t_m using bones for most of my animations... and I really should avoid clones for the meshes_co_ instances is the clean way to go for my needs. But I will try the clone approch for the animations if it_t_s applicable. Thanks man._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"gryff","Date":"2014-12-27T05:52:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Vousk_dd_  there is a demo on the Babylon.js site _lt_a href_eq__qt_http_dd_//www.babylonjs.com/_qt_ rel_eq__qt_external nofollow_qt__gt_Link_lt_/a_gt_ - scroll down to _qt_Bones_qt_ (personally hate the way that is set up - as I can_t_t mostly link directly to a specific example). The three rabbits are an original and two clones Then the animation for each rabbit is a different section of the total animation._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In my experience_co_ instancing can be tricky. In my _qt_Christmas Village_qt_ piece_co_ rather than have all the trees an instance of one tree_co_ I ended up splitting trees into 4 quadrants each with their own original tree as I was having issues with the lights(7)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Not sure if that helps _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_unsure.png_qt_ alt_eq__qt__dd_unsure_dd__qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_cheers_co_ gryff _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-12-27T16:56:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Cloning of meshes instead of instances is not what I was suggesting.  Rather cloning of BABYLON.Animation.  This class has a large internal array_co_ _keys_co_ which could be extracted into a new instance.  There would only be one copy_co_ reference_co_ of the keys.  This would separate it from the other tiny bit of state_co_ the _stopped.  See_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_    export class Animation {        private _keys_dd_ Array&lt_sm_any&gt_sm__sm_        private _offsetsCache _eq_ {}_sm_        private _highLimitsCache _eq_ {}_sm_        private _stopped _eq_ false_sm_        public _target_sm_        private _easingFunction_dd_ BABYLON.IEasingFunction_sm_...}_lt_/pre_gt__lt_p_gt_There is a clone method in BABYLON.Animation that should fix your playground example_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        public clone()_dd_ Animation {            var clone _eq_ new Animation(this.name_co_ this.targetPropertyPath.join(_qt_._qt_)_co_ this.framePerSecond_co_ this.dataType_co_ this.loopMode)_sm_            clone.setKeys(this._keys)_sm_            return clone_sm_        }_lt_/pre_gt__lt_p_gt_Big problem for skeletons though_co_ as each bone has its own Animation object_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        var skeleton_sm_        var bone_sm_        var animation_sm_        skeleton _eq_ new BABYLON.Skeleton(_qt_name_qt__co_ _qt_0_qt__co_ scene)_sm_        bone _eq_ new BABYLON.Bone(_qt_hips_qt__co_ skeleton_co_null_co_ BABYLON.Matrix.FromValues(0.9967_co_0.0513_co_-0.0632_co_0_co_-0.0495_co_0.9984_co_0.029_co_0_co_-0.0646_co_0.0258_co_-0.9976_co_0_co_0_co_0.9036_co_-0.0008_co_1))_sm_        animation _eq_ new BABYLON.Animation(_qt_anim_qt__co_ _qt__matrix_qt__co_ 30_co_ 3_co_ 1)_sm_        animation.setKeys([        {frame_dd_ 1_co_ value_dd_ BABYLON.Matrix.FromValues(0.9967_co_0.0513_co_-0.0632_co_0_co_-0.0495_co_0.9984_co_0.029_co_0_co_-0.0646_co_0.0258_co_-0.9976_co_0_co_0_co_0.9036_co_-0.0008_co_1)}_co_        {frame_dd_ 2_co_ value_dd_ BABYLON.Matrix.FromValues(0.9972_co_0.0652_co_-0.0372_co_0_co_-0.0637_co_0.9972_co_0.0401_co_0_co_-0.0397_co_0.0376_co_-0.9985_co_0_co_0_co_0.8986_co_-0.0016_co_1)}_co_        {frame_dd_ 3_co_ value_dd_ BABYLON.Matrix.FromValues(0.9983_co_0.0569_co_-0.0135_co_0_co_-0.0564_co_0.9976_co_0.0395_co_0_co_-0.0157_co_0.0387_co_-0.9991_co_0_co_0_co_0.8937_co_-0.0025_co_1)}_co_        ...         ])_sm_        bone.animations.push(animation)_sm_        bone _eq_ new BABYLON.Bone(_qt_thigh.L_qt__co_ skeleton_co_skeleton.bones[0]_co_ BABYLON.Matrix.FromValues(0.9913_co_-0.1269_co_-0.0336_co_0_co_-0.1259_co_-0.9916_co_0.0306_co_0_co_-0.0372_co_-0.0261_co_-0.999_co_0_co_0.1085_co_-0.0034_co_-0.0113_co_1))_sm_        animation _eq_ new BABYLON.Animation(_qt_anim_qt__co_ _qt__matrix_qt__co_ 30_co_ 3_co_ 1)_sm_        animation.setKeys([...])_sm_        ... continue for each bone_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-12-27T18:47:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_@Gryff_co_ you can deep link like this _lt_a href_eq__qt_http_dd_//www.babylonjs.com?BONES_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com?BONES_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-01-10T17:47:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yep_co_ with the clone method in BABYLON.Animation everything is ok. Thank you JCP._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-02-06T16:45:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Is it possible to take the animation bone part and update it with new data but having the same model..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Merci_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Benoit_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-02-06T17:42:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes it is !_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-02-06T17:43:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_65651_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_11287_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt_ data-cite_eq__qt_JCPalmer_qt_ data-ipsquote-timestamp_eq__qt_1419699372_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cloning of meshes instead of instances is not what I was suggesting.  Rather cloning of BABYLON.Animation.  This class has a large internal array_co_ _keys_co_ which could be extracted into a new instance.  There would only be one copy_co_ reference_co_ of the keys.  This would separate it from the other tiny bit of state_co_ the _stopped.  See_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_    export class Animation {        private _keys_dd_ Array&lt_sm_any&gt_sm__sm_        private _offsetsCache _eq_ {}_sm_        private _highLimitsCache _eq_ {}_sm_        private _stopped _eq_ false_sm_        public _target_sm_        private _easingFunction_dd_ BABYLON.IEasingFunction_sm_...}_lt_/pre_gt__lt_p_gt_There is a clone method in BABYLON.Animation that should fix your playground example_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        public clone()_dd_ Animation {            var clone _eq_ new Animation(this.name_co_ this.targetPropertyPath.join(_qt_._qt_)_co_ this.framePerSecond_co_ this.dataType_co_ this.loopMode)_sm_            clone.setKeys(this._keys)_sm_            return clone_sm_        }_lt_/pre_gt__lt_p_gt_Big problem for skeletons though_co_ as each bone has its own Animation object_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        var skeleton_sm_        var bone_sm_        var animation_sm_        skeleton _eq_ new BABYLON.Skeleton(_qt_name_qt__co_ _qt_0_qt__co_ scene)_sm_        bone _eq_ new BABYLON.Bone(_qt_hips_qt__co_ skeleton_co_null_co_ BABYLON.Matrix.FromValues(0.9967_co_0.0513_co_-0.0632_co_0_co_-0.0495_co_0.9984_co_0.029_co_0_co_-0.0646_co_0.0258_co_-0.9976_co_0_co_0_co_0.9036_co_-0.0008_co_1))_sm_        animation _eq_ new BABYLON.Animation(_qt_anim_qt__co_ _qt__matrix_qt__co_ 30_co_ 3_co_ 1)_sm_        animation.setKeys([        {frame_dd_ 1_co_ value_dd_ BABYLON.Matrix.FromValues(0.9967_co_0.0513_co_-0.0632_co_0_co_-0.0495_co_0.9984_co_0.029_co_0_co_-0.0646_co_0.0258_co_-0.9976_co_0_co_0_co_0.9036_co_-0.0008_co_1)}_co_        {frame_dd_ 2_co_ value_dd_ BABYLON.Matrix.FromValues(0.9972_co_0.0652_co_-0.0372_co_0_co_-0.0637_co_0.9972_co_0.0401_co_0_co_-0.0397_co_0.0376_co_-0.9985_co_0_co_0_co_0.8986_co_-0.0016_co_1)}_co_        {frame_dd_ 3_co_ value_dd_ BABYLON.Matrix.FromValues(0.9983_co_0.0569_co_-0.0135_co_0_co_-0.0564_co_0.9976_co_0.0395_co_0_co_-0.0157_co_0.0387_co_-0.9991_co_0_co_0_co_0.8937_co_-0.0025_co_1)}_co_        ...         ])_sm_        bone.animations.push(animation)_sm_        bone _eq_ new BABYLON.Bone(_qt_thigh.L_qt__co_ skeleton_co_skeleton.bones[0]_co_ BABYLON.Matrix.FromValues(0.9913_co_-0.1269_co_-0.0336_co_0_co_-0.1259_co_-0.9916_co_0.0306_co_0_co_-0.0372_co_-0.0261_co_-0.999_co_0_co_0.1085_co_-0.0034_co_-0.0113_co_1))_sm_        animation _eq_ new BABYLON.Animation(_qt_anim_qt__co_ _qt__matrix_qt__co_ 30_co_ 3_co_ 1)_sm_        animation.setKeys([...])_sm_        ... continue for each bone_lt_/pre_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_How we know what every numbers in the matrix means ?  BABYLON.Matrix.FromValues(0.9913..........) in this example how we know what 0.9913 means etc...._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]