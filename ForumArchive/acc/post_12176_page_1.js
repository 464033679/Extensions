[{"Owner":"jerome","Date":"2015-02-02T08:41:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have got two different meshes._lt_/p_gt__lt_p_gt_I want them to use the same textured material but each one with a different texture offset._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Is there a way to do this ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Or do I need to create a different material for each mesh ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-02-02T08:51:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think you need to create two materials_co_ as texture are shared between materials._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-02-02T09:12:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_tinkiou _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-02-03T10:08:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co_ I was thinking_dd_ wouldn_t_t it be possible to use a ShaderMaterial_co_ and somehow change its uniforms depending on which mesh gets rendered? This way_co_ one material could suit many different meshes and allow for variations on each one (shift in texture coords_co_ color variations_co_ etc.)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I know materials have an onBind event hook_co_ but it doesn_t_t give the mesh as a parameter so it wouldn_t_t be possible to change uniforms here. Also the material won_t_t get bound before each mesh render._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This would mean less Material objects created_co_ but also (and more importantly) allow variations on instanced meshes_co_ since these all share the same material._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Am I speaking crazy here?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-02-03T10:30:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Isn_t_t this already possible with Sprites ?_lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/wiki/08-Sprites_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/wiki/08-Sprites_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_A SpriteManager has a texture and each sprite then may have its different offset on this texture_co_ the position in the image_co_ nope ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-02-03T11:16:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_That is a very good point. I_t_ll look into it and see if there is something there that I can replicate._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The idea would be to have some sort of _t_3D_t_ sprites_co_ instanced meshes with more that just position/rotation/scale variables!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Xeonzinc","Date":"2015-02-03T12:49:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I already have a material like this for meshes as I found sprites too limiting_co_ essentially it allows the use of a texture as a sprite sheet for a mesh (changing offsets base on parameters attached to the mesh)_co_ but you only need one material._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I can post the key parts this evening if its of use?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-02-03T12:54:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_That sounds perfect_dd_ please share _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-02-03T12:56:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes_co_ please show _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Xeonzinc","Date":"2015-02-03T20:06:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Here it is_co_ mostly just a fudge from some of the other examples around here _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_strike_gt_I_t_ve highlighted in red _lt_/strike_gt_the key lines_co_ which essentially just pass the number of sprites wide/high of the texture and then the sprite offset for x/y from the mesh to the shader._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Material js_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var custom_material _eq_ custom_material || {}_sm_(function () {    custom_material.ssheet _eq_ function (name_co_ scene_co_ texture) {        BABYLON.Material.call(this_co_ name_co_ scene)_sm_\tthis.ssheet _eq_ texture_sm_        this.ssheet.uScale _eq_ 1.0_sm_        this.ssheet.vScale _eq_ 1.0_sm_  \tthis.ssheet.uOffset _eq_ 0_sm_        this.ssheet.vOffset _eq_ 0_sm_        this.ssheet.wrapU _eq_ BABYLON.Texture.MIRROR_ADDRESSMODE_sm_        this.ssheet.wrapV _eq_ BABYLON.Texture.MIRROR_ADDRESSMODE_sm_       \t\tthis.backFaceCulling _eq_ false_sm_    }_sm_    custom_material.ssheet.prototype _eq_ Object.create(BABYLON.Material.prototype)_sm_    // Properties       custom_material.ssheet.prototype.needAlphaBlending _eq_ function () {        return true_sm_    }_sm_    custom_material.ssheet.prototype.needAlphaTesting _eq_ function () {        return true_sm_    }_sm_\t    // Methods       custom_material.ssheet.prototype.isReady _eq_ function (mesh) {        var engine _eq_ this._scene.getEngine()_sm_        if (!this.ssheet.isReady)            return false_sm_\t\t\t\t\t\t        var defines _eq_ []_sm_        if (this._scene.clipPlane) {            defines.push(_qt_#define CLIPPLANE_qt_)_sm_        }        var join _eq_ defines.join(_qt_\\n_qt_)_sm_        if (this._cachedDefines !_eq_ join) {            this._cachedDefines _eq_ join_sm_            this._effect _eq_ engine.createEffect(_qt_./Shaders/Spritesheet/ssheet_qt__co_                [_qt_position_qt__co_ _qt_normal_qt__co_ _qt_uv_qt_]_co_                [_qt_worldViewProjection_qt__co_ _qt_world_qt__co_ _qt_vSsheet_qt_]_co_                [_qt_ssheetSampler_qt_]_co_                join)_sm_        }        if (!this._effect.isReady()) {            return false_sm_        }        return true_sm_    }_sm_    custom_material.ssheet.prototype.bind _eq_ function (world_co_ mesh) {        this._effect.setMatrix(_qt_world_qt__co_ world)_sm_        this._effect.setMatrix(_qt_worldViewProjection_qt__co_ world.multiply(this._scene.getTransformMatrix()))_sm_                // Textures        if (this.ssheet) {            this._effect.setTexture(_qt_ssheetSampler_qt__co_ this.ssheet)_sm_        }  \t\tthis._effect.setFloat4(_qt_vSsheet_qt__co_mesh.xn_co_mesh.yn_co_mesh.xoff_co_mesh.yoff)_sm_    }_sm_        custom_material.ssheet.prototype.dispose _eq_ function () {        if (this.ssheet) {            this.ssheet.dispose()_sm_        }     \t\t        BABYLON.Material.dispose(this)_sm_    }_sm_})()_sm__lt_/pre_gt__lt_p_gt_Vertex Shader_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_#ifdef GL_ESprecision mediump float_sm_#endif// Attributesattribute vec3 position_sm_attribute vec2 uv_sm_// Uniformsuniform mat4 worldViewProjection_sm_// Normalvarying vec2 vUV_sm_void main(void) {    gl_Position _eq_ worldViewProjection * vec4(position_co_ 1.0)_sm_    vUV _eq_ uv_sm_}_lt_/pre_gt__lt_p_gt_Fragment Shader_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_#ifdef GL_ESprecision mediump float_sm_#endif// Refsvarying vec2 vUV_sm_uniform sampler2D ssheetSampler_sm_uniform vec4 vSsheet_sm_void main(void) {    // Cell selection    vec2 texCoords_sm_\t\ttexCoords.x _eq_( vUV.x /vSsheet.x) + vSsheet.z_sm_\ttexCoords.y _eq_( vUV.y /vSsheet.y) + vSsheet.w_sm_    gl_FragColor _eq_ texture2D(ssheetSampler_co_ texCoords).rgba_sm_}_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-02-03T21:59:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks_co_ very interesting. If I understand correctly_co_ the _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt__lt_span_gt_mesh_lt_/span_gt__lt_span_gt_._lt_/span_gt__lt_span_gt_xn_lt_/span_gt__lt_/span_gt__lt_span_gt__co_ _lt_/span_gt__lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt__lt_span_gt_mesh_lt_/span_gt__lt_span_gt_._lt_/span_gt__lt_span_gt_yn_lt_/span_gt__lt_/span_gt__lt_span_gt__co_ _lt_/span_gt__lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt__lt_span_gt_mesh_lt_/span_gt__lt_span_gt_._lt_/span_gt__lt_/span_gt__lt_span_gt__lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_xoff_lt_/span_gt_ and _lt_/span_gt__lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt__lt_span_gt_mesh_lt_/span_gt__lt_span_gt_._lt_/span_gt__lt_/span_gt__lt_span_gt__lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_yoff_lt_/span_gt_ properties control which part of the texture will be displayed on the mesh_co_ and these properties can be changed on the fly._lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span_gt_It means one could similarly handle properties such as _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_colorTint_lt_/span_gt__co_ _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_opacity_lt_/span_gt__co_ etc. while still using instanced meshes. Is that right?_lt_/span_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Xeonzinc","Date":"2015-02-03T22:06:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes_co_ that_t_s the key bit really._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The only aspect i haven_t_t tried out is sending large amounts of dynamic data to the shader (probably some form of array) as I_t_m currently limited to putting data into multiple vec4_t_s_co_  although I think it must be possible._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]