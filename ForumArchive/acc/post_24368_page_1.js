[{"Owner":"V!nc3r","Date":"2016-08-09T14:37:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOn desktop I have a clear view of how it works_co_ so I will start by asking how textures are manage on _lt_u_gt_mobile hardware_lt_/u_gt_ (tablet or smartphone) but of course if someone wants to ask something about desktop_co_ this topic is open.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe assume that all textures size are obviously in power of two.\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tIf I have _lt_em_gt_textureOne_lt_/em_gt__co_ jpg file_co_ and _lt_em_gt_textureTwo _lt_/em_gt_which is the same but in png_co_ do they take the same amount of ram once loaded ? If yes_co_ using for example tga will change only the download time and not the performance ?\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tCould uncompressing a texture kill some FPS ? _lt_em_gt_(example _dd_ jpg file to RAM _sm_ png file to RAM)_lt_/em_gt_\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tIs Mobile hardware have VRAM or only RAM shared between CPU and GPU unit ? It depends of the device I supposed ?\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tIs there a way to use mipmaps or is this specific to dds format ?\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\tThanks\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-08-09T20:32:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. Yes as they are uncompressed and save as lain bitmap. Only DDS keeps data compressed (when DDS is supported)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. Nope. This is utterly fast to decompress. Loading time can be the problem though\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3. It depends. iPhone has really fast hardware for instance\n_lt_/p_gt_\n\n_lt_p_gt_\n\t4. Mipmaps are on by default with babylon.js and are automatically computed at loading time\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2016-08-10T07:12:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk great !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAbout the mipmaps_co_ I was thinking that only dds allows it _sm_ but in fact the benefit of the dds is _qt_just_qt_ that the texture is keep compressed if I understand (which is a great benefit of course).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOut of curiosity_co_ how works the process to compute mipmaps on the fly ? Depending on the camera distance_co_ the full texture file is loaded_co_ resize_co_ then use ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow BJS decide to use 128²px rather than 2048²px ? It depends of a ratio screen-pixels / texture-pixels ?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-08-10T15:02:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tmipmaps are generated on GPU side\n_lt_/p_gt_\n\n_lt_p_gt_\n\tif you load a 512x512 picture_co_ the mipmaps will be 256x256_co_ 128x128_co_ 64x64_co_ 32x32_co_ 16x16_co_ 8x8_co_ 4x4\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Rodrix3","Date":"2018-04-27T06:32:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tJust to clarify_co_ at *run-time* (after all assets have loaded) is there any benefit to using DDS textures?_lt_br /_gt_\n\tOr is the benefit of DDS is just avoid a compression step and making loading time faster?_lt_br /_gt_\n\t_lt_br /_gt_\n\tWould actually using DDS textures would get a scene have higher FPS than the same using PNG files?_lt_br /_gt_\n\t_lt_br /_gt_\n\tIf so_co_ how can we create DDS textures? (What tool and what settings do you recommend)?_lt_br /_gt_\n\tThanks in advance _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-04-27T16:43:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tDDS can contains compressed data but this will only work on Windows basically\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDDS can save the time required to build the mipmaps but at runtime this will change nothing (once everything is loaded)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Rodrix3","Date":"2018-04-27T16:47:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_213065_qt_ data-ipsquote-contentid_eq__qt_24368_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1524847390_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t3 minutes ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tDDS can contains compressed data but this will only work on Windows basically\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tDDS can save the time required to build the mipmaps but at runtime this will change nothing (once everything is loaded)\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThanks so much for the reply!_lt_br /_gt_\n\tSo basically there is no benefit at runtime (on the render loop). _lt_br /_gt_\n\tThe only benefit is the loading_co_ correct?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis means I will see no performance boost  on the render cycle if I use dds textures. Right?_lt_br /_gt_\n\t_lt_br /_gt_\n\tThanks again!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-04-27T18:05:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_139344_qt_ data-ipsquote-contentid_eq__qt_24368_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1470774735_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 8/9/2016 at 4_dd_32 PM_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tHey!\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t1. Yes as they are uncompressed and save as lain bitmap. Only DDS keeps data compressed (when DDS is supported)\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t2. Nope. This is utterly fast to decompress. Loading time can be the problem though\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t3. It depends. iPhone has really fast hardware for instance\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t4. Mipmaps are on by default with babylon.js and are automatically computed at loading time\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tSorry_co_ but not accurate_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1 No_co_ (as long as you use the case sensitive extension _qt_.jpg_qt_) a _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Engine/babylon.engine.ts#L4247_qt_ rel_eq__qt_external nofollow_qt__gt_gl.RGB texture_lt_/a_gt_ will get created.  A _qt_.png_qt_ extension will get a gl.RGBA texture created.  There are also a whole series of compressed formats using the _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/resources/multi-platform_compressed_textures_qt_ rel_eq__qt_external nofollow_qt__gt_platform independent texture container KTX_lt_/a_gt_.  Inside can contain any number of formats_dd_  PVRTC_co_ ETC1_co_ ETC2_co_ DXT_co_ &amp_sm_ ASTC.  DDS containers can only store DXT.  The best format to use is determined at load time for a given machine.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3.  Yes it depends_co_ but either way a compressed texture takes up much less memory the .jpg / .png.  This dramatically increases with the increase in dimensions_co_ &amp_sm_ can be important for using 4K textures on mobile.  Many people do not need 4k textures_co_ but an example of this is taking your .blend with all your static meshes_co_ merging to a single mesh_co_ and force baking (turn on in source code).  Now you get maybe dozens of draws reduced to one &amp_sm_ less JS overhead as well.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA 4k texture in PVRTC with mipmaps is 5_co_462KB (both in file size &amp_sm_ RAM).  a .jpg varies in file size_co_ but expands to 67_co_108KB in RAM_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_50_co_331_co_648 (4096 _lt_span_gt_* 4096 *_lt_/span_gt_ 3) +\n12_co_582_co_912 (2048 _lt_span_gt_* 2048 *_lt_/span_gt_ 3) +\n 3_co_145_co_728 (1024 _lt_span_gt_* 1024 *_lt_/span_gt_ 3) +\n   786_co_432 ( 512 _lt_span_gt_*  512 *_lt_/span_gt_ 3) +\n   196_co_608 ( 256 _lt_span_gt_*  256 *_lt_/span_gt_ 3) +\n_lt_span_gt_    49_co_152 ( 128 *  128 * 3) +_lt_/span_gt_\n_lt_span_gt_    12_co_288 (  64 *   64 * 3) +_lt_/span_gt_\n_lt_span_gt_     3_co_072 (  32 *   32 * 3) +_lt_/span_gt_\n_lt_span_gt_       768 (  16 *   16 * 3) +_lt_/span_gt_\n_lt_span_gt_       192 (   8 *    8 * 3) +_lt_/span_gt_\n_lt_span_gt_        48 (   4 *    4 * 3) +_lt_/span_gt_\n_lt_span_gt_        12 (   2 *    2 * 3) +_lt_/span_gt_\n_lt_span_gt_         3 (   1 *    1 * 3)\n_eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__lt_/span_gt_\n67_co_108_lt_span_gt_﻿_lt_/span_gt__co_863_lt_span_gt_﻿_lt_/span_gt__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t4. KTX &amp_sm_ DDS containers have mipmaps right in the file_co_ since they cannot be computed at run time.  This is controlled at create time.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Rodrix3","Date":"2018-04-27T18:25:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_213080_qt_ data-ipsquote-contentid_eq__qt_24368_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1524852323_qt_ data-ipsquote-userid_eq__qt_8492_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t5 minutes ago_co_ JCPalmer said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tSorry_co_ but not accurate_dd_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t1 No_co_ (as long as you use the case sensitive extension _qt_.jpg_qt_) a _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Engine/babylon.engine.ts#L4247_qt_ rel_eq__qt_external nofollow_qt__gt_gl.RGB texture_lt_/a_gt_ will get created.  A _qt_.png_qt_ extension will get a gl.RGBA texture created.  There are also a whole series of compressed formats using the _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/resources/multi-platform_compressed_textures_qt_ rel_eq__qt_external nofollow_qt__gt_platform independent texture container KTX_lt_/a_gt_.  Inside can contain any number of formats_dd_  PVRTC_co_ ETC1_co_ ETC2_co_ DXT_co_ &amp_sm_ ASTC.  DDS containers can only store DXT.  The best format to use is determined at load time for a given machine.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t3.  Yes it depends_co_ but either way a compressed texture takes up much less memory the .jpg / .png.  This dramatically increases with the increase in dimensions_co_ &amp_sm_ can be important for using 4K textures on mobile.  Many people do not need 4k textures_co_ but an example of this is taking your .blend with all your static meshes_co_ merging to a single mesh_co_ and force baking (turn on in source code).  Now you get maybe dozens of draws reduced to one &amp_sm_ less JS overhead as well.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tA 4k texture in PVRTC with mipmaps is 5_co_462KB (both in file size &amp_sm_ RAM).  a .jpg varies in file size_co_ but expands to 67_co_108KB in RAM_dd_\n\t\t_lt_/p_gt_\n\n\t\t_lt_pre_gt_\n\n_lt_code_gt_50_co_331_co_648 (4096 _lt_span_gt__lt_span_gt_* 4096 *_lt_/span_gt__lt_/span_gt_ 3) +\n12_co_582_co_912 (2048 _lt_span_gt__lt_span_gt_* 2048 *_lt_/span_gt__lt_/span_gt_ 3) +\n 3_co_145_co_728 (1024 _lt_span_gt__lt_span_gt_* 1024 *_lt_/span_gt__lt_/span_gt_ 3) +\n   786_co_432 ( 512 _lt_span_gt__lt_span_gt_*  512 *_lt_/span_gt__lt_/span_gt_ 3) +\n   196_co_608 ( 256 _lt_span_gt__lt_span_gt_*  256 *_lt_/span_gt__lt_/span_gt_ 3) +\n_lt_span_gt__lt_span_gt_    49_co_152 ( 128 *  128 * 3) +_lt_/span_gt__lt_/span_gt_\n_lt_span_gt__lt_span_gt_    12_co_288 (  64 *   64 * 3) +_lt_/span_gt__lt_/span_gt_\n_lt_span_gt__lt_span_gt_     3_co_072 (  32 *   32 * 3) +_lt_/span_gt__lt_/span_gt_\n_lt_span_gt__lt_span_gt_       768 (  16 *   16 * 3) +_lt_/span_gt__lt_/span_gt_\n_lt_span_gt__lt_span_gt_       192 (   8 *    8 * 3) +_lt_/span_gt__lt_/span_gt_\n_lt_span_gt__lt_span_gt_        48 (   4 *    4 * 3) +_lt_/span_gt__lt_/span_gt_\n_lt_span_gt__lt_span_gt_        12 (   2 *    2 * 3) +_lt_/span_gt__lt_/span_gt_\n_lt_span_gt__lt_span_gt_         3 (   1 *    1 * 3)\n_eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__lt_/span_gt__lt_/span_gt_\n67_co_108_lt_span_gt_﻿_lt_/span_gt__co_863_lt_span_gt_﻿_lt_/span_gt__lt_/code_gt__lt_/pre_gt_\n\n\t\t_lt_p_gt_\n\t\t\t4. KTX &amp_sm_ DDS containers have mipmaps right in the file_co_ since they cannot be computed at run time.  This is controlled at create time.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThanks _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/8492-jcpalmer/?do_eq_hovercard_qt_ data-mentionid_eq__qt_8492_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/8492-jcpalmer/_qt_ rel_eq__qt__qt__gt_@JCPalmer_lt_/a_gt_ for the insight.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSome questions arise then for me_dd_\n_lt_/p_gt_\n\n_lt_ul_gt_\n\t_lt_li_gt_\n\t\tI am using 16K textures for ambient occlusion maps and I am running the app on a Windows computer with 32 GB of RAM and a 1080 GTX card (this is the target of the app_co_ for experimental purposes)._lt_br /_gt_\n\t\tUp to now I was using .png files for the ambient occlusion maps_co_ which seems like a waste since the RGBA channels are being loaded_co_ and 3 wasted_co_ since the occlusion map is black and white._lt_br /_gt_\n\t\t_lt_strong_gt_What image format do you recommend I use for the ambient occlusion map textures_lt_/strong_gt_ (I cannot combine them with the metallicRoughtness map since they are 4K_co_ and it is reused by multiple textures_co_ which the only difference is the occlusion map).\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tDiffuse textures are also in PNG format_co_ but do NOT use alpha channel. Using jpg would be a mistake since it would deteriorate the quality. What file format would be recommended for this case?\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\t_qt_4. KTX &amp_sm_ DDS containers have mipmaps right in the file_co_ since they cannot be computed at run time.  This is controlled at create time._qt_ _lt_br /_gt_\n\t\t_lt_br /_gt_\n\t\t_lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ mentioned that mipmaps are generated created on runtime. Are you stating the opposite_co_ if I understood well_co_ and you are mentioning that there is actually a benefit to doing it at create time?_lt_/span_gt_\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\t_lt_span_gt_I see little mentions about DDS in documentation vs KTX. Is KTX more recommended?  My target is Windows_co_ and I just want to achieve the highest FPS with lowest footprint possible (as of this moment the application is too heavy and is facing a bottleneck on the textures related pipeline I believe)._lt_/span_gt_\n\t_lt_/li_gt_\n_lt_/ul_gt_\n\n_lt_p_gt_\n\tThanks in advance!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-04-27T19:09:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_ul_gt_\n\t_lt_li_gt_\n\t\t16 K_co_ wow that is big even for a 1080 GTX.  For scenes strictly for one machine / type_co_ first see what this _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/index.html#1SCH7H%235_qt_ rel_eq__qt_external nofollow_qt__gt_says _lt_/a_gt_(probably going to load DXT).  For something that big_co_ I would suggest a DXT_co_ probably in a DDS.  The PVRTool_co_ see Compressed Textures Doc link from before can build either DDS or KTX container.  Note DXT is shown as BCx in that tool.  Do not know whether BC1 or BC2 does not have alpha.  Both should work_co_ check file sizes.\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tSame as first answer.\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tCompressed have mipmaps in the file_co_ .jpg &amp_sm_ .png do not.  It has nothing to do with benefit.  It is not in openGL API to create mipmaps for compressed types.\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tIf you did not have such a tight list of hardware_co_ using DDS would die on mobile.\n\t_lt_/li_gt_\n_lt_/ul_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]