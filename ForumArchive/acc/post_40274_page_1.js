[{"Owner":"bergman","Date":"2018-09-27T07:23:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi all!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am currently exporting a 3ds Max-scene to gltf models_co_ and then using these models in a web project of mine.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor various reasons I both need to export each model in my scene separately_co_ as well as export the entire scene as a single gltf (to keep some information about how different objects relate to each other in the scene in 3dsmax_co_ among other things). \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe problem I_t_m having is that when my 3dsmax scene gets too big_co_ the gltf export of the entire scene takes an unnecessary long amount of time to complete. Since each model in my scene is also exported separately and since the scene export is mostly used to contain information about object transforms and such_co_ I do not really need the actual binary model data for the whole scene export (Since I already have each model gltf+bin when exporting them separately). \n_lt_/p_gt_\n\n_lt_p_gt_\n\tTherefore_co_ my question is_dd_ What would be the easiest way to export a 3ds max scene to gltf _lt_em_gt_without_lt_/em_gt_ exporting the actual binary data of the models? The desired result of my export would be only a minimal .gltf-file (No .bin-file_co_ and no model data embedded in the gltf-file). I would be open to make a modified version of the _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Exporters/tree/master/3ds%20Max_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Exporters/tree/master/3ds Max_lt_/a_gt_ repo to suit my needs_co_ but I could use some direction to where the binary data is actually exported.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBest Regards_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnton\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"bghgary","Date":"2018-09-27T17:16:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/30070-kcoley/?do_eq_hovercard_qt_ data-mentionid_eq__qt_30070_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/30070-kcoley/_qt_ rel_eq__qt__qt__gt_@kcoley_lt_/a_gt_ Ping_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"kcoley","Date":"2018-09-27T17:56:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/32905-bergman/?do_eq_hovercard_qt_ data-mentionid_eq__qt_32905_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/32905-bergman/_qt_ rel_eq__qt__qt__gt_@bergman_lt_/a_gt_.  The _lt_em_gt_easiest _lt_/em_gt_way is to comment out the .bin generation code in GLTFExporter.cs when exporting to .gltf_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_// Output\nRaiseMessage(_qt_GLTFExporter | Saving to output file_qt_)_sm_\nif (!generateBinary) {\n    // Write .gltf file\n    string outputGltfFile _eq_ Path.ChangeExtension(outputFile_co_ _qt_gltf_qt_)_sm_\n    File.WriteAllText(outputGltfFile_co_ gltfToJson(gltf))_sm_\n\n    // Write .bin file -- comment out this section\n    string outputBinaryFile _eq_ Path.ChangeExtension(outputFile_co_ _qt_bin_qt_)_sm_\n    using (BinaryWriter writer _eq_ new BinaryWriter(File.Open(outputBinaryFile_co_ FileMode.Create)))\n    {\n        gltf.BuffersList.ForEach(buffer _eq_&gt_sm_\n        {\n            buffer.bytesList.ForEach(b _eq_&gt_sm_ writer.Write(b))_sm_\n        })_sm_\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_br /_gt_\n\tWe can look into making the exporter more robust by checking if the file on disk is already the same as generated in the code.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"bergman","Date":"2018-10-11T08:59:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/30070-kcoley/?do_eq_hovercard_qt_ data-mentionid_eq__qt_30070_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/30070-kcoley/_qt_ rel_eq__qt__qt__gt_@kcoley_lt_/a_gt_ Hi again!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI commented out the code as per your suggestion_co_ and it worked wonders - no .bin file is created. However_co_ my expectation was that this would also speed up my export process_co_ but it still takes the same amount of time just that no .bin file is created.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWould there be some way where I could do something similar in order to speed up the export_co_ since I do not need all the actual mesh data and such?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBest Regards_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnton\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"kcoley","Date":"2018-10-11T18:43:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/32905-bergman/?do_eq_hovercard_qt_ data-mentionid_eq__qt_32905_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/32905-bergman/_qt_ rel_eq__qt__qt__gt_@bergman_lt_/a_gt_  Hmm_co_ another thing you can try is not writing out textures in your code by commenting out references to SaveBitmap_co_ which is located in BabylonExporter.Texture.cs_dd__lt_br /_gt_\n\t_lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_private void SaveBitmap(Bitmap bitmap_co_ string path_co_ ImageFormat imageFormat)\n{\n    SaveBitmap(bitmap_co_ Path.GetDirectoryName(path)_co_ Path.GetFileName(path)_co_ imageFormat)_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThis may help cut some time out if you have lots of textures.  The other bottleneck is writing the binary data_co_ though commenting out this code may cause offset issues in the generated json.  \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"kcoley","Date":"2018-10-11T18:50:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/32905-bergman/?do_eq_hovercard_qt_ data-mentionid_eq__qt_32905_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/32905-bergman/_qt_ rel_eq__qt__qt__gt_@bergman_lt_/a_gt_ you can also look for all areas where Bitmap objects are generated.  There are several other locations in GLTFExporter.Texture.cs such as in ExportEmissiveTexture that do somewhat expensive operations.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]