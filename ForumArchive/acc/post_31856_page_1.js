[{"Owner":"PeapBoy","Date":"2017-07-24T19:02:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello everybody_co__lt_br /_gt__lt_br /_gt_\n\tI face some errors in my app concerning material defines_co_ I don_t_t understand how they_t_re managed._lt_br /_gt__lt_br /_gt_\n\tTo render a mesh_co_ subMesh.getMaterial().isReadyForSubMesh() and subMesh.getMaterial().bindForSubMesh() functions are successively called each frame_co_ right ?_lt_br /_gt_\n\tMaterial defines are created at the beginning of the isReady function if subMesh doesn_t_t have defines (so_co_ if it_t_s the first time this mesh is rendered_co_ I assume)._lt_br /_gt_\n\tDefines are stored in subMesh with the _materialDefines property._lt_br /_gt__lt_br /_gt_\n\tGuess we begin with a standard material_co_ we_t_ll get StandardMaterialDefines on our subMesh and use the isReady function of StandardMaterial._lt_br /_gt_\n\tNow_co_ I assign another material to my mesh (a PBR for example). We_t_ll now use the isReady function of PBRMaterial._lt_br /_gt_\n\tIn the isReady function_co_ we_t_ll only check if defines exist and we will work with StandardMaterialDefines instead of PBRMaterialDefines_co_ no ?_lt_br /_gt__lt_br /_gt_\n\tThis is what happens to me in some circumstances... _lt_br /_gt_\n\tPG_dd_ _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#YNCHVR_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#YNCHVR_lt_/a_gt__lt_br /_gt_\n\t(Open your console)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut then_co_ there is a mechanism that handles this issue and this doesn_t_t happen anymore. I don_t_t understand this either._lt_br /_gt__lt_br /_gt_\n\tSomeone could enlight me please ? _lt_img alt_eq__qt__dd_unsure_dd__qt_ data-emoticon_eq__qt__qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_unsure.png_qt_ title_eq__qt__dd_unsure_dd__qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-07-24T21:58:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou are right _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt_ this rich (who said complex? _dd_D) mechanism is here to optimize code but could be tough to follow _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tThe defines stored on every submesh are actually wiped out when you change the material_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.abstractMesh.ts#L158_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.abstractMesh.ts#L158_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"PeapBoy","Date":"2017-07-25T10:49:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tShame on me_co_ I didn_t_t think about looking for _qt_setEffect(null)_qt_ _lt_img alt_eq__qt__dd_lol_dd__qt_ data-emoticon_eq__qt__qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_laugh.png_qt_ title_eq__qt__dd_lol_dd__qt_ /_gt_ Thanks_lt_br /_gt__lt_br /_gt_\n\tMmh now_co_ I understand the issue in the PG above._lt_br /_gt_\n\tFirst time setMaterial (and setEffect(null)) is called_co_ _lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_(_lt_/span_gt__lt_span style_eq__qt_color_dd_#005cc5_sm__qt__gt_this_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt__materialEffect_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#d73a49_sm__qt__gt__eq__eq__eq__lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_effect_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_) _lt_/span_gt_ is (undefined _eq__eq__eq_ null) so we assign undefined to materialDefines and null to materialEffect._lt_br /_gt_\n\tThen we create StandardMaterialDefines at the beginning of the isReady function. If something is not ready yet_co_ we don_t_t call setEffect and materialEffect stays at null._lt_br /_gt_\n\tSecond time setMaterial (and setEffect(null)) is called_co_ _lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_(_lt_/span_gt__lt_span style_eq__qt_color_dd_#005cc5_sm__qt__gt_this_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt__materialEffect_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#d73a49_sm__qt__gt__eq__eq__eq__lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_effect_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_) _lt_/span_gt_is (null _eq__eq__eq_ null) so we return and don_t_t assign undefined to materialDefines. Then I find myself with StandardMaterialDefines instead of PBRMaterialDefines or undefined. And boom._lt_br /_gt__lt_br /_gt_\n\tsetEffect(null) is not enough in the particular case where something isn_t_t ready in material isReady function() and materialEffect is not replaced by a value._lt_br /_gt_\n\tDo you mind if we assign directly subMesh._materialDefines _eq_ undefined in the material set function ?_lt_br /_gt__lt_br /_gt_\n\tMoreover_co_ it_t_s been a long time I wonder why we don_t_t use defines in bindForSubMesh function to save some if instructions. But I could open a new post for this. _lt_img alt_eq__qt_^_^_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_happy.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/happy@2x.png 2x_qt_ title_eq__qt_^_^_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-07-25T15:58:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tQuote\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t_lt_span style_eq__qt_color_dd_#272a34_sm__qt__gt_Do you mind if we assign directly subMesh._materialDefines _eq_ undefined in the material set function ?_lt_/span_gt_\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThis is what this does_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.subMesh.ts#L14_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.subMesh.ts#L14_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen you call submesh.setEffect(null)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"PeapBoy","Date":"2017-07-25T16:11:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tAs I show it in my PG_co_ sometimes it happens that setEffect(null) is not enough._lt_br /_gt_\n\tIn some cases_co_ this._materialEffect is null. So_co_ if you call setEffect(null)_co_ it will return immediately without setting the defines to undefined._lt_br /_gt__lt_br /_gt_\n\tI have this issue in my app. I tried to reproduce it and make it simple in the PG._lt_br /_gt__lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#YNCHVR_qt_ rel_eq__qt_external nofollow_qt_ style_eq__qt_color_dd_#ad1457_sm__qt__gt_https_dd_//www.babylonjs-playground.com/#YNCHVR_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-07-25T23:49:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tok makes sense!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tso do you want to submit a PR to update the setEffect(null) to affect defines to null if _lt_span style_eq__qt_color_dd_#272a34_sm__qt__gt__materialEffect_lt_span_gt_ _lt_/span_gt__lt_/span_gt_is null?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"PeapBoy","Date":"2017-07-26T17:10:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOf course ! _lt_img alt_eq__qt_^_^_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_happy.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/happy@2x.png 2x_qt_ title_eq__qt_^_^_qt_ width_eq__qt_20_qt_ /_gt__lt_br /_gt__lt_br /_gt_\n\tHowever_co_ I just realized that the issue I have in my app is not exactly the same as the one in the PG._lt_br /_gt_\n\tMy bug appears because of my subMaterials._lt_br /_gt__lt_br /_gt_\n\tI can see in this code that there_t_s a complete mechanism when subMaterials are set _dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_Object.defineProperty(MultiMaterial.prototype_co_ _qt_subMaterials_qt__co_ {\n  get_dd_ function () {\n    return this._subMaterials_sm_\n  }_co_\n  set_dd_ function (value) {\n    this._subMaterials _eq_ value_sm_\n    this._hookArray(value)_sm_\n  }_co_\n  enumerable_dd_ true_co_\n  configurable_dd_ true\n})_sm_\nMultiMaterial.prototype._hookArray _eq_ function (array) {\n  var _this _eq_ this_sm_\n  var oldPush _eq_ array.push_sm_\n  array.push _eq_ function () {\n    var items _eq_ []_sm_\n    for (var _i _eq_ 0_sm_ _i &lt_sm_ arguments.length_sm_ _i++) {\n      items[_i] _eq_ arguments[_i]_sm_\n    }\n    var result _eq_ oldPush.apply(array_co_ items)_sm_\n    _this._markAllSubMeshesAsTexturesDirty()_sm_\n    return result_sm_\n  }_sm_\n  var oldSplice _eq_ array.splice_sm_\n  array.splice _eq_ function (index_co_ deleteCount) {\n    var deleted _eq_ oldSplice.apply(array_co_ [index_co_ deleteCount])_sm_\n    _this._markAllSubMeshesAsTexturesDirty()_sm_\n    return deleted_sm_\n  }_sm_\n}_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_br /_gt_\n\tI have three questions about this part _dd__lt_br /_gt_\n\t- Why adding a new material only affects textures and not everything ? (TexturesDirty flag)_lt_br /_gt_\n\t- How are the materialDefines assigned to undefined ? (They aren_t_t_co_ right ? That_t_s my issue in my app_co_ I think)_lt_br /_gt_\n\t- If we add a subMaterial using subMaterials[materialIndex] _eq_ new Material() instead of using subMaterials.push() function_co_ is the dirty flag rised ?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"PeapBoy","Date":"2017-07-27T13:33:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello again_co__lt_br /_gt__lt_br /_gt_\n\tWhen calling subMesh.getMaterial() function_co_ we actually set the new subMaterial to the subMesh._lt_br /_gt_\n\tI think we should reset the defines here._lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_public getMaterial()_dd_ Material {\n  var rootMaterial _eq_ this._renderingMesh.material_sm_\n\n  if (rootMaterial &amp_sm_&amp_sm_ (&lt_sm_MultiMaterial&gt_sm_rootMaterial).getSubMaterial) {\n    var multiMaterial _eq_ &lt_sm_MultiMaterial&gt_sm_rootMaterial_sm_\n    var effectiveMaterial _eq_ multiMaterial.getSubMaterial(this.materialIndex)_sm_\n\n    if (this._currentMaterial !_eq__eq_ effectiveMaterial) {\n      this._currentMaterial _eq_ effectiveMaterial_sm_\n      if (this._materialDefines) {\n        this._materialDefines.markAllAsDirty()_sm_\n      }\n    }\n\n    return effectiveMaterial_sm_\n  }\n\n  if (!rootMaterial) {\n    return this._mesh.getScene().defaultMaterial_sm_\n  }\n\n  return rootMaterial_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_br /_gt_\n\tInstead of this  _dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_if (this._materialDefines) {\n  this._materialDefines.markAllAsDirty()_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tWe could do this _dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_this._materialDefines _eq_ undefined_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tBecause if we assign a new material the line before_co_ materialDefines are not the good ones anymore (except if you change the material from a PBR to a PBR or from a Standard to a Standard)._lt_br /_gt__lt_br /_gt_\n\tSince I_t_m sure I don_t_t understand everything so I may miss some important processes_co_ I prefer asking here if it makes sense rather than submitting a PR immmediately._lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-07-27T15:10:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI think it is a great fix! You can go ahead\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"PeapBoy","Date":"2017-07-28T15:45:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co__lt_br /_gt__lt_br /_gt_\n\tI still have a case where defines are wrong _lt_img alt_eq__qt__dd_unsure_dd__qt_ data-emoticon_eq__qt__qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_unsure.png_qt_ title_eq__qt__dd_unsure_dd__qt_ /_gt__lt_br /_gt_\n\tBut I found why._lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_PushMaterial.prototype.isReady _eq_ function (mesh_co_ useInstances) {\n  if (!mesh) {\n    return false_sm_\n  }\n  if (!mesh.subMeshes || mesh.subMeshes.length _eq__eq__eq_ 0) {\n    return true_sm_\n  }\n  return this.isReadyForSubMesh(mesh_co_ mesh.subMeshes[0]_co_ useInstances)_sm_\n}_sm_\nPushMaterial.prototype.bind _eq_ function (world_co_ mesh) {\n  if (!mesh) {\n    return_sm_\n  }\n  this.bindForSubMesh(world_co_ mesh_co_ mesh.subMeshes[0])_sm_\n}_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn these two functions_co_ we use mesh.subMeshes[0] without knowing if this subMesh does use the material._lt_br /_gt_\n\tThese function are called by Scene._checkIsReady() function_co_ that_t_s why I faced this case._lt_br /_gt__lt_br /_gt_\n\tFor example. I have a MultiMaterial which has two subMaterials _dd_ a Standard and a PBR._lt_br /_gt_\n\tMultiMaterial.isReady(mesh) will call PushMaterial.isReady(mesh) for each subMaterial._lt_br /_gt_\n\tFirst_co_ it will go through StandardMaterial.isReadyForSubMesh() function_co_ create StandardMaterialDefines and set them to mesh.subMeshes[0]._lt_br /_gt_\n\tThen_co_ it will go through the PBRMaterial.isReadyForSubMesh() function with StandardMaterialDefines instead of PBRMaterialDefines._lt_br /_gt_\n\tBecause we called the two functions with the same subMesh._lt_br /_gt__lt_br /_gt__lt_br /_gt_\n\tI understand it_t_s necessary for retrocompatibility (there was only isReady function before_co_ right ?). So I can_t_t simply put the defines to undefined after calling the isReadyForSubMesh function...\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-07-28T20:25:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThe fix could be in the isReady function of MultiMat. It should call _lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#353c41_sm_font-size_dd_14px_sm__qt__gt_isReadyForSubMesh instead of isReady if it exists_lt_/span_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"PeapBoy","Date":"2017-07-31T09:45:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSomething like this ?\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_MultiMaterial.prototype.isReady _eq_ function (mesh) {\n  if (!mesh) {\n    return false_sm_\n  }\n  if (!mesh.subMeshes || mesh.subMeshes.length _eq__eq__eq_ 0) {\n    return true_sm_\n  }\n  for (var index _eq_ 0_sm_ index &lt_sm_ mesh.subMeshes.length_sm_ index++) {\n    var subMesh _eq_ mesh.subMeshes[index]_sm_\n    var subMaterial _eq_ this.subMaterials[subMesh._materialIndex]_sm_\n    if (subMaterial) {\n      if (!material.isReadyForSubMesh(mesh_co_ subMesh)) {\n        return false_sm_\n      }\n    }\n  }\n  return true_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_br /_gt_\n\tBut if we do this_co_ you_t_re not guaranteed to verify every material of subMaterials array. So it could return true without being really ready._lt_br /_gt_\n\tIt only returns true if every _lt_strong_gt__lt_em_gt_used _lt_/em_gt__lt_/strong_gt_subMaterial is ready.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-07-31T17:54:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tsounds good to me\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"PeapBoy","Date":"2017-08-08T15:08:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tSeems like you did the last change_co_ thanks ! _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]