[{"Owner":"Convergence","Date":"2015-09-16T12:08:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The _lt_a href_eq__qt_http_dd_//babylonjs.com/Scenes/Worldmonger/index.html_qt_ rel_eq__qt_external nofollow_qt__gt_Worldmonger demo_lt_/a_gt_ has a custom shader for the ground mesh_co_ that blends multiples textures smoothly according to height. Since Babylon seems to employ the _qt_KISS_qt_ principle_co_ would it be possible for this texture feature - a staple in worldbuilding - to make it into the Babylon engine? _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Currently I_t_m using multiple groundMeshes with opacityMaps to achieve a similar effect_co_ but it is a bit of a crude and performance inhibiting work-around._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I know Babylon has a _lt_a href_eq__qt_http_dd_//blogs.msdn.com/b/eternalcoding/archive/2013/07/10/babylon-js-using-multi-materials.aspx_qt_ rel_eq__qt_external nofollow_qt__gt_multimaterial _lt_/a_gt_of sorts_co_ but it only supports hard edges instead of smooth (and only one texture per face)_co_ and it is a bit hard to work._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-09-16T15:41:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello_co_ why not using directly the shader from worldmonger demo?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Convergence","Date":"2015-09-17T05:52:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hmm_co_ I guess learning how to make/edit GLSL shaders is inevitable for game-making._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_There are no plans to make such a staple feature native to Babylon?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-09-17T14:10:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes_co_ you may not need to write GLSL for a given game_co_ but you do limit your potential.  GLSL is just C with different library calls &amp_sm_ a premium put on avoiding branching._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The frame work does do all the compiling for you_co_ and takes out a lot of the logistics of assigning uniforms &amp_sm_ calling._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-09-17T16:36:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_We have a great tool to support shaders_dd_ _lt_a href_eq__qt_http_dd_//blogs.msdn.com/b/eternalcoding/archive/2014/04/17/learning-shaders-create-your-own-shaders-with-babylon-js.aspx_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//blogs.msdn.com/b/eternalcoding/archive/2014/04/17/learning-shaders-create-your-own-shaders-with-babylon-js.aspx_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]