[{"Owner":"kurhlaa","Date":"2018-02-04T21:34:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI try to use a Camera with a built-in movement (WASD keys). Default collision system allows to climb on small enough objects. However_co_ if I look directly down and move forward to climb on the same mesh - it_t_s impossible.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPG - _lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#XKMVWE_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#XKMVWE_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think this is because _lt_strong_gt_camera.keysUp _eq_ [87]_lt_/strong_gt_ actually is not for _qt_go forward_qt__co_ but for _qt_go where your camera looks_qt_. That means that while looking down - key _lt_strong_gt_W_lt_/strong_gt_ tries to go through the ground. So power pushing me down is much more than needed to go up. This disallows me to move over almost any size of objects.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIs there a switch to prevent moving Camera Up/Down with _lt_strong_gt_WS_lt_/strong_gt_ keys (or at least ignore camera_t_s Y rotation when calculating a movement direction) ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf not - what else can I do? I could create additional JavaScript keys listeners for movement_co_ but built-in way is so short and easy to use_co_ I would like to keep it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2018-02-05T04:04:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi K.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNo solution_co_ yet.  _lt_a href_eq__qt_https_dd_//playground.babylonjs.com/indexstable#XKMVWE%237_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/indexstable#XKMVWE#7_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA little testing.  I put red .ellipsoidMesh on camera_co_ yellow .ellipsoidMesh on s1 (via my nasty .showEllipsoid() func).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThen_co_ I turned-on a renderTargetTexture for camera2... so I could use IT... to watch primary camera_t_s red elllipsoidMesh... run over the yellow ellipsoid.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNothing solved_co_ yet.  Camera seems to sit atop obstacles fine... when upright.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut_co_ when camera forward vector is aimed downward... camera gravity might make cam ellipsoid... _qt_rub-off_qt_ and fall to the ground.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIncreasing value of _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/3.1/engine#static-collisionsepsilon-number_qt_ rel_eq__qt_external nofollow_qt__gt_engine.collisionsEpsilon_lt_/a_gt_ might help.  Not sure.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA post with no answers at all... by Wingnut.  Figs_co_ eh?  heh.  Sorry. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaybe this fancy playground will help us do further tests.  And hopefully_co_ others will comment soon.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tKeep in mind that the red camera.ellipsoidMesh (that gets added in showEllipsoid) is _lt_strong_gt_NOT_lt_/strong_gt_ parented to camera.  It is kept POSITION and ROTATION-updated in lines 127-130.  Although my camera.ellipsoidMesh tilts up/down just like the main camera_co_ I_t_m not sure that the REAL camera.ellipsoid... tilts with cam.  I think it does.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis might be the issue.  Perhaps the SIDES of a camera.ellipsoid have more _qt_rub-off_qt_ tendency... than the tops and bottoms.  So when you tilt cam face-down and try to sit atop an obstacle... camera gravity makes it slides off (onto the ground)_co_ AS IF the camera was constantly w-key-pushing against a horizontal obstacle.  *shrug*  Just some theories.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAin_t_t it weird how camera.speed (line 63) MUST be around 4.0... or else the camera can_t_t climb-over the obstacle?  Interesting.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"kurhlaa","Date":"2018-02-05T16:54:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_203627_qt_ data-ipsquote-contentid_eq__qt_35482_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1517803490_qt_ data-ipsquote-userid_eq__qt_5733_qt_ data-ipsquote-username_eq__qt_Wingnut_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t12 hours ago_co_ Wingnut said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tNo solution_co_ yet\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIs there a place to vote for a solution? _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2018-02-05T17:24:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\theh.  Unfortunately_co_ this situation MIGHT be limited by the way collider collisions are handled.  Possibly un-avoidable.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe _qt_other solve_qt_... would be invisible mesh... that camera sits-atop/within_co_ and camera is parented-to it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAND_co_ you know... you_t_d need to build your own invisible-mesh-navigating system.  It wouldn_t_t matter if you tilted the camera to face-down_co_ because the invisi-mesh .ellipsoid is the one used... for _qt_sitting atop another collider_qt_.  You would never tilt the invisi-mesh... only the camera atop/within it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCameras have an _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/3.1/camera#upvector-vector3-classes-3-1-vector3-_qt_ rel_eq__qt_external nofollow_qt__gt_upVector_lt_/a_gt_.  It is probably 0_co_ 1_co_ 0 by default.  Let_t_s pretend your camera is face-down.  IF you then set the camera.upVector _eq_ new BABYLON.Vector3(0_co_0_co_-1)... I wonder if your W/S keys would change directions.  Perhaps... you could nav-around a facing-down camera... exactly as-if it were facing forward.  Worth a try_co_ I suspect.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ a forum and playground search for _qt_upVector_qt_ might be fruitful.  Some things to try.  *shrug* \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_t_POV_t_ is another worthy search term.  I_t_m not sure what POV is about_co_ but it stands for _qt_point of view_qt_... I suspect.  There are some POV things in BJS... but I don_t_t know their story_co_ or if they would be useful for you.  Never used them.  Might be a mesh-only thing... not for cameras.  Possibly more useful if you change to invisible-mesh system.  Talk soon.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"kurhlaa","Date":"2018-02-05T18:27:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_strong_gt_upVector_lt_/strong_gt_ as I see changes how picture is rendered_co_ where UP is. For example_co_ you can set your LEFT as UP_co_ and a whole picture will be rotated.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ve modified a little your example - _lt_a href_eq__qt_https_dd_//playground.babylonjs.com/indexstable#XKMVWE%238_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/indexstable#XKMVWE#8_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEllipsoid is a sphere now_co_ so technically it_t_s rotation shouldn_t_t affect anything. Gravity is smaller too. Move close to the green mesh while looking down_co_ and press _lt_strong_gt_S_lt_/strong_gt_ - you will fly Up_co_ instead of going back. That means that camera_t_s Y-rotation sets the movement Up/Down direction.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think the easiest solution would be to add a flag like _lt_strong_gt_camera.keysIgnoreYrotation_lt_/strong_gt__co_ which will exclude Y-rotation from movement direction calculation. But this is just an idea_co_ of course.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso docs say _qt_The Universal Camera is now the default camera used by Babylon.js if nothing is specified_co_ and it’s your best choice if you’d like to have a FPS-like control in your scene_qt_ - so developers at least have an idea of making a camera as main character (not invisible mesh) _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ it would be nice to hear at least somebody_co_ what plans do they have about this.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]