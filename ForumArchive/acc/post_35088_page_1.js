[{"Owner":"FunFetched","Date":"2018-01-15T20:40:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_ everyone! I just wanted to pass along some very important information that I just discovered regarding optimization that has been completely overlooked in optimization articles that I_t_ve read_co_ and can have a huge impact on your apps!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have a game that pushes a pretty similar number of triangles and commands as the Sponza demo_co_ but I wasn_t_t enjoying anywhere near the same frame rate on slower systems. I fired up SpectorJS_co_ cleaned up as much as I could in terms of draw calls and such_co_ and wound up with a game that had fewer calls_co_ fewer commands_co_ and yet STILL ran a good deal slower than Sponza. However_co_ there was one more metric that I had yet to take a close look at_co_ and that was _qt_clear()_qt_. I had 6 of them_co_ while Sponza was using only 1.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy game is a first-person-shooter that uses an additional camera to draw UI components_co_ and on a different layer_co_ so game geometry doesn_t_t interfere with it. The player_t_s hands and weapons are also drawn in a different rendering group for the same reason. It turns out_co_ however_co_ that for every new layer and group_co_ Babylon kicks off a gl.clear() (which makes sense)_co_ and on systems with poor fill rates_co_ this can absolutely wipe you out.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn my case_co_ the engine was clearing various buffers 6 times per frame_co_ including multiple times per group/layer. Disabling Babylon_t_s engine.prototype.clear() entirely made a world of difference in terms of FPS_co_ though I do need at least 1 or 2 gl.clear() calls to accommodate my layering requirements. 6 is excessive and unnecessary_co_ however_co_ and I_t_m currently investigating ways to minimize that. Hopefully_co_ I can do it all by simply modifying my code_co_ but I suspect I might have to make some small engine modifications as well so I have greater control over when gl.clear() gets called_co_ and just how many times.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_ Just discovered scene.autoClear and scene.autoClearDepthAndStencil. Setting both to false takes care of... well... one of them!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-16T18:23:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is a good catch!\n_lt_/p_gt_\n\n_lt_p_gt_\n\twould you be ok to add this to the otpimization articles?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Documentation/blob/master/content/How_To/scene/Optimizing_your_scene.md_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Documentation/blob/master/content/How_To/scene/Optimizing_your_scene.md_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tas you mentioned the clear is controlled by scene.autoClear. You also have the same at render target level with texture.autoClear\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"FunFetched","Date":"2018-01-16T18:38:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_201599_qt_ data-ipsquote-contentid_eq__qt_35088_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1516127011_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t17 minutes ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThis is a good catch!\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\twould you be ok to add this to the otpimization articles?\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Documentation/blob/master/content/How_To/scene/Optimizing_your_scene.md_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Documentation/blob/master/content/How_To/scene/Optimizing_your_scene.md_lt_/a_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tas you mentioned the clear is controlled by scene.autoClear. You also have the same at render target level with texture.autoClear\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tAbsolutely! I also discovered scene.setRenderingAutoClearDepthStencil() to control clearing for each RenderingGroup. However_co_ I _lt_em_gt_also_lt_/em_gt_ found this_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\t\t\t// Multi-cameras?\n\t\t\tif (this.activeCameras.length &gt_sm_ 0) {\n\t\t\t\tfor (var cameraIndex _eq_ 0_sm_ cameraIndex &lt_sm_ this.activeCameras.length_sm_ cameraIndex++) {\n\t\t\t\t\tif (cameraIndex &gt_sm_ 0) {\n\t\t\t\t\t\t//this._engine.clear(null_co_ false_co_ true_co_ true)_sm_\n\t\t\t\t\t}\n\t\t\t\t\tthis._processSubCameras(this.activeCameras[cameraIndex])_sm_\n\t\t\t\t}\n\t\t\t}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t... this is tricky_co_ as there are some edge cases where you might not want this. In my case_co_ I have some UI rendering with an Ortho camera with a different layerMask. Since it_t_s all rendered at Z_eq_0_co_ I don_t_t need (or even want) the depth or stencil buffers cleared before it_t_s rendered. As you can see_co_ I_t_ve commented it out temporarily for the app I_t_m working on. It might be a good idea to add an autoClear option to BABYLON.Camera as well.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn any case_co_ I_t_m now down to one gl.clear() in my game (width shadows disabled)_co_ and have gained a good 20FPS on my cheap little test Chromebook. _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-16T18:43:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tGood catch! I_t_m totally open to validate a PR about this if you want to submit one.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]