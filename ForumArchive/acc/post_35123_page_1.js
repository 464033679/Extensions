[{"Owner":"BlackMojito","Date":"2018-01-17T03:02:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Folks_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have several questions regarding rendering performance.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tQuestion 1_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tabout the acceleration structures. As we know that in Babylon we have Octree_co_ it seems to be used for both frustum culling and picking. But I saw that we had also an interface called IActiveMeshProvider. Is it used for implementing other acceleration structure like BSP or BVH? I_t_ve seen some rendering engine which use BVH to do frustum culling. What are the advantages of Octree against BVH?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ told me that we have a complete frustum culling stuff internally. How does it work? Does it work by using the Octree?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tQuestion 2_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAbout sorting. Do we have bulit-in pre-sorting process so that we can avoid useless shader binding? \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tQuestion 3_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAbout mesh merging. I think I can use MergeMeshes to merge the meshes which share the same shader. However I need to keep the original one for picking. How can I distinguish the _qt_Visual Tree_qt_ and the _qt_Selection Tree_qt_?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks guys\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Amarth2Estel","Date":"2018-01-17T10:15:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tHi BlackMojito_co__lt_br /_gt__lt_br /_gt_\n\tI cannot answer the first two questions but I faced the same issue and found a solution for Question 3._lt_br /_gt__lt_br /_gt_\n\tI have done as follow _dd__lt_br /_gt_\n\t- Merge meshes_co_ without disposing sources_lt_br /_gt_\n\t- Disable the original meshes (not in the render anymore)_lt_br /_gt_\n\t- When picking_co_ use _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/babylon101/raycasts#predicate-function_qt_ rel_eq__qt_external nofollow_qt__gt_predicate function_lt_/a_gt_ to set only disabled meshes as selectable. _lt_br /_gt__lt_br /_gt_\n\tFor other reason_co_ I had to use my own picking system with call on Scene.MultiPickWithRay but I guess you can also use pointer[Down/Up/Move]Predicate attribute on your scene to override default predicate function_co_ which -from what I remember- is _t_mesh.isPickable &amp_sm_&amp_sm_ mesh.isVisible &amp_sm_&amp_sm_ mesh.isReady()_t_ _lt_br /_gt__lt_br /_gt_\n\tThis way_co_ you have a drawable part of the scene composed by few meshes after the merging process and an interactive part_co_ not drawn_co_ to use interaction._lt_br /_gt__lt_br /_gt_\n\tThere may be a better solution_co_ and it would be a pleasure to know it to increase performances again_co_ if somebody has an idea _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt_!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-17T16:28:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. We use octree for mesh selection only if user enable it as the cost of maintaining the octree could be bigger than just going through a list of meshes. When you have a lot of static meshes then the octree is a good idea. BVH or Octree is a good question and there is no good response _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_1_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt_ It clearly depends on your scene topology and this is why you have the opportunity to provide your own mesh selection algorithm._lt_br_gt_\n\tBy default_co_ the scene will go through all enabled and visible meshes and will do frustum clipping based on current camera view. This will generate the list of active meshes used for rendering. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. By default only transparent meshes are ordered back to front. But you can decide to also order opaque and alpha test meshes with this API_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/3.1/scene#setrenderingorder-renderinggroupid-opaquesortcomparefn-alphatestsortcomparefn-transparentsortcomparefn-rarr-void_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/3.1/scene#setrenderingorder-renderinggroupid-opaquesortcomparefn-alphatestsortcomparefn-transparentsortcomparefn-rarr-void_lt_/a_gt_. _lt_br_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-01-17T20:11:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tQuestion 2_dd_ This is a good read_dd__lt_br /_gt__lt_a href_eq__qt_https_dd_//doc.babylonjs.com/resources/transparency_and_how_meshes_are_rendered_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/resources/transparency_and_how_meshes_are_rendered_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tif you have a really expensive object to draw you may want to try occlusion queries - new in 3.1_dd__lt_br /_gt__lt_a href_eq__qt_https_dd_//doc.babylonjs.com/features/occlusionquery_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/features/occlusionquery_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]