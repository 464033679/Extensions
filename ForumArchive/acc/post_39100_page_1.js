[{"Owner":"BMWPilote","Date":"2018-07-26T13:50:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tMaterialDefines is per SubMesh and if I have a lot of meshes in the Scene_co_ the memory consumption can be crazy. For some reasons_co_ I cannot merge my meshes (because I need to clone the picked mesh).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img alt_eq__qt_image.png.26d0b213cfeba4eefce9eec70ad0e3bd.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_19395_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_07/image.png.26d0b213cfeba4eefce9eec70ad0e3bd.png_qt_ /_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy scene is static and the meshes are similar. I have only two types of meshes_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. one use only diffuse color_co_ diffuse texture_co_ glossiness and specular color and IBL.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. the other one has just an extra opacity value\n_lt_/p_gt_\n\n_lt_p_gt_\n\t So_co_ although I have a lot of meshes_co_ theirs defines should really almost always the same. My question is that is there any way to share the MaterialDefines? \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ data-fileid_eq__qt_19393_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_07/image.png.50dd3243b1bb997241c14f4bb0ea4705.png_qt_ rel_eq__qt__qt__gt__lt_img alt_eq__qt_image.thumb.png.461806eb4a1614e27c23005776507b3d.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_19393_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_07/image.thumb.png.461806eb4a1614e27c23005776507b3d.png_qt_ /_gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BMWPilote","Date":"2018-07-26T14:07:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI thought about the worst case. Maybe I could use the pbr shader_co_ and use ShaderMaterial with it?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-07-26T15:31:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWell you can still merge everything which will provide a large memory boost and you can just keep a disabled mesh as source for the clone.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ not tested but should work_dd_ just go through all submeshes and manually set the defines the one single value\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BMWPilote","Date":"2018-07-27T01:44:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_223284_qt_ data-ipsquote-contentid_eq__qt_39100_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1532619110_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t10 hours ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tWell you can still merge everything which will provide a large memory boost and you can just keep a disabled mesh as source for the clone.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tAlso_co_ not tested but should work_dd_ just go through all submeshes and manually set the defines the one single value\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t_qt_you can just keep a disabled mesh as source for the clone_qt_. Could you please explain more?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOnce merged. The source meshes are all removed...How can I still clone picked mesh dynamically?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BMWPilote","Date":"2018-07-27T04:35:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_223284_qt_ data-ipsquote-contentid_eq__qt_39100_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1532619110_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t13 hours ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tWell you can still merge everything which will provide a large memory boost and you can just keep a disabled mesh as source for the clone.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tAlso_co_ not tested but should work_dd_ just go_lt_span_gt_﻿_lt_/span_gt_ through all submeshes and manually set the defines the one single value\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tUnluckily_co_ just assigning the same MaterialDefines did not work. Only some of the meshes were displayed.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BMWPilote","Date":"2018-07-27T09:27:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIs there anyway to separate the MaterialDefines to two parts_co_ one per material and the other per subMesh?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-07-27T14:50:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tCan you repro the test your did for sharing the defines in the PG? I_t_ll try to see if I can help\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BMWPilote","Date":"2018-07-28T14:40:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_223400_qt_ data-ipsquote-contentid_eq__qt_39100_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1532703050_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t23 hours ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tCan you repro the test your did for sharing the defines in the PG? I_t_ll try to see if I can help\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tActually I just copied the code of PBRBaseSimpleMaterial and instead of creating one PBRMaterialDefines for each SubMesh_co_ I created a static PBRMaterailDefines and assign it to all the SubMeshes. Then some of the meshes could not be drawn correctly.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-07-30T16:38:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThen please share it _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt_ So we can all work on the same code base_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BMWPilote","Date":"2018-08-02T07:04:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_223612_qt_ data-ipsquote-contentid_eq__qt_39100_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1532968727_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 7/31/2018 at 12_dd_38 AM_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThen please share it _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ So we can all work on the same code base_lt_/span_gt_\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tFinally I moved all what I don_t_t need and now the Defines take lightly more than 300 bytes instead of 8000 bytes.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import * as BABYLON from _t_babylonjs_t__sm_\nimport * as custom_pbr_vert from _t_../../Graphics/Shaders/glsl/custom_pbr_vert.glsl_t__sm_\nimport * as custom_pbr_frag from _t_../../Graphics/Shaders/glsl/custom_pbr_frag.glsl_t__sm_\nimport * as MaterialUtils from _t_../MaterialUtils_t__sm_\n\nimport { MAX_CUTPLANE_COUNT_co_ CUTPLANES_UNIFORM_NAME_co_ CUTPLANE_COUNT_UNIFORM_NAME } from _t_../MaterialCommonDefinitions_t__sm_\nimport { ExtraDataHolder } from _t_../ExtraDataHolder_t__sm_\nimport { RenderOptions } from _t_../../Preferences_t__sm_\nimport { EnhancedScene } from _t_../../Scene/EnhancedScene_t__sm_\n\nexport class SimplifiedPBRMaterialDefinesShared { \n    OPACITYRGB _eq_ false_sm_\n    ALPHAFROMALBEDO _eq_ false_sm_\n    SPECULAROVERALPHA _eq_ false_sm_\n    RADIANCEOVERALPHA _eq_ false_sm_\n    ALPHAFRESNEL _eq_ false_sm_\n    LINEARALPHAFRESNEL _eq_ false_sm_\n    PREMULTIPLYALPHA _eq_ false_sm_\n\n    METALLICWORKFLOW _eq_ false_sm_\n    ROUGHNESSSTOREINMETALMAPALPHA _eq_ false_sm_\n    ROUGHNESSSTOREINMETALMAPGREEN _eq_ false_sm_\n    METALLNESSSTOREINMETALMAPBLUE _eq_ false_sm_\n    AOSTOREINMETALMAPRED _eq_ false_sm_\n    ENVIRONMENTBRDF _eq_ false_sm_\n\n    USEPHYSICALLIGHTFALLOFF _eq_ false_sm_\n    TWOSIDEDLIGHTING _eq_ false_sm_\n    SHADOWFLOAT _eq_ false_sm_\n\n    FORCENORMALFORWARD _eq_ false_sm_\n\n    MICROSURFACEFROMREFLECTIVITYMAP _eq_ false_sm_\n    MICROSURFACEAUTOMATIC _eq_ false_sm_\n    LODBASEDMICROSFURACE _eq_ false_sm_\n\n    REFLECTION _eq_ false_sm_\n    REFLECTIONMAP_3D _eq_ false_sm_\n    REFLECTIONMAP_SPHERICAL _eq_ false_sm_\n    REFLECTIONMAP_PLANAR _eq_ false_sm_\n    REFLECTIONMAP_CUBIC _eq_ false_sm_\n\n    USE_LOCAL_REFLECTIONMAP_CUBIC _eq_ false_sm_\n    REFLECTIONMAP_PROJECTION _eq_ false_sm_\n    REFLECTIONMAP_SKYBOX _eq_ false_sm_\n    REFLECTIONMAP_EXPLICIT _eq_ false_sm_\n    REFLECTIONMAP_EQUIRECTANGULAR _eq_ false_sm_\n    REFLECTIONMAP_EQUIRECTANGULAR_FIXED _eq_ false_sm_\n    REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED _eq_ false_sm_\n    INVERTCUBICMAP _eq_ false_sm_\n    USESPHERICALFROMREFLECTIONMAP _eq_ false_sm_\n    USESPHERICALINVERTEX _eq_ false_sm_\n    REFLECTIONMAP_OPPOSITEZ _eq_ false_sm_\n    LODINREFLECTIONALPHA _eq_ false_sm_\n    GAMMAREFLECTION _eq_ false_sm_\n\n    CUTPLANE _eq_ false_sm_\n    MAX_CUTPLANE_COUNT _eq_ MAX_CUTPLANE_COUNT_sm_\n}\n\nexport class SimplifiedPBRMaterialDefines extends BABYLON.MaterialDefines {\n    PBR _eq_ true_sm_\n\n    MAINUV1 _eq_ false_sm_\n    MAINUV2 _eq_ false_sm_\n    UV1 _eq_ false_sm_\n    UV2 _eq_ false_sm_\n\n    ALBEDO _eq_ false_sm_\n    EMISSIVE _eq_ false_sm_\n    REFLECTIVITY _eq_ false_sm_\n    OPACITY _eq_ false_sm_\n    BUMP _eq_ false_sm_\n\n    ALBEDODIRECTUV _eq_ 0_sm_\n    EMISSIVEDIRECTUV _eq_ 0_sm_\n    REFLECTIVITYDIRECTUV _eq_ 0_sm_\n    OPACITYDIRECTUV _eq_ 0_sm_\n    BUMPDIRECTUV _eq_ 0_sm_\n\n    NORMAL _eq_ false_sm_\n    TANGENT _eq_ false_sm_\n\n    ALPHABLEND _eq_ false_sm_\n\n    SPECULARTERM _eq_ false_sm_\n    LOGARITHMICDEPTH _eq_ false_sm_\n\n    _shared_dd_ SimplifiedPBRMaterialDefinesShared_sm_\n\n    /**\n     * Initializes the PBR Material defines.\n     */\n    constructor(shared_dd_ SimplifiedPBRMaterialDefinesShared) {\n        super()_sm_\n        this._shared _eq_ shared_sm_\n        this.rebuild()_sm_\n    }\n\n    toString()_dd_ string {\n        let result _eq_ super.toString()_sm_\n\n        let keys _eq_ Object.keys(this._shared)_sm_\n        for (var index _eq_ 0_sm_ index &lt_sm_ keys.length_sm_ index++) {\n            var prop _eq_ keys[index]_sm_\n            var value _eq_ (this._shared as any)[prop]_sm_\n            var type _eq_ typeof value_sm_\n            switch (type) {\n                case _qt_number_qt__dd_\n                case _qt_string_qt__dd_\n                    result +_eq_ _qt_#define _qt_ + prop + _qt_ _qt_ + value + _qt_\\n_qt__sm_\n                    break_sm_\n                default_dd_\n                    if (value) {\n                        result +_eq_ _qt_#define _qt_ + prop + _qt_\\n_qt__sm_\n                    }\n                    break_sm_\n            }\n        }\n\n        return result_sm_\n    }\n\n    /**\n     * Resets the PBR Material defines.\n     */\n    reset()_dd_ void {\n        super.reset()_sm_\n        this.PBR _eq_ true_sm_\n    }\n\n    get keys()_dd_ string[] {\n        return this._keys_sm_\n    }\n\n    set keys(keys_dd_ string[]) {\n        this._keys _eq_ keys_sm_\n    }\n}\n\nexport abstract class SimplifiedPBRBaseSimpleMaterial extends BABYLON.PBRBaseSimpleMaterial implements ExtraDataHolder {\n    protected _extraData_dd_ any_sm_\n    protected _extraDataDirty_dd_ boolean _eq_ true_sm_\n    protected _sharedDefines_dd_ SimplifiedPBRMaterialDefinesShared_sm_\n\n    constructor(name_dd_ string_co_ scene_dd_ BABYLON.Scene_co_ extraData_dd_ any) {\n        super(name_co_ scene)_sm_\n\n        if (RenderOptions.useLogarithmicDepth) {\n            this.useLogarithmicDepth _eq_ true_sm_\n        }\n\n        let shader _eq_ BABYLON.Effect.ShadersStore[_t_custom_pbr_t_ + _t_VertexShader_t_]_sm_\n        if (!shader) {\n            let custom_pbr_vertex_shader_dd_ string _eq_ custom_pbr_vert_sm_\n            BABYLON.Effect.ShadersStore[_t_custom_pbr_t_ + _t_VertexShader_t_] _eq_ custom_pbr_vertex_shader_sm_\n        }\n\n        shader _eq_ BABYLON.Effect.ShadersStore[_t_custom_pbr_t_ + _t_FragmentShader_t_]_sm_\n        if (!shader) {\n            let custom_pbr_fragment_shader_dd_ string _eq_ custom_pbr_frag_sm_\n            BABYLON.Effect.ShadersStore[_t_custom_pbr_t_ + _t_FragmentShader_t_] _eq_ custom_pbr_fragment_shader_sm_\n        }\n\n        if (extraData)\n            this._extraData _eq_ extraData_sm_\n        else\n            this._extraData _eq_ {}_sm_\n\n        this.onBindObservable.add(() _eq_&gt_sm_ {\n            const scene _eq_ this.getScene() as EnhancedScene_sm_\n            if (this._extraDataDirty || (scene.extraDataDirty &amp_sm_&amp_sm_ this.alpha &lt_sm_ 1.0)) {\n                this.onCutPlanesUpdated()_sm_\n                this._extraDataDirty _eq_ false_sm_\n            }\n        })_sm_\n\n        this._extraData.textureMaps _eq_ {}_sm_\n\n        this._sharedDefines _eq_ new SimplifiedPBRMaterialDefinesShared()_sm_\n    }\n\n    bindForSubMesh(world_dd_ BABYLON.Matrix_co_ mesh_dd_ BABYLON.Mesh_co_ subMesh_dd_ BABYLON.SubMesh)_dd_ void {\n        var scene _eq_ this.getScene()_sm_\n\n        var defines _eq_ &lt_sm_SimplifiedPBRMaterialDefines&gt_sm_subMesh._materialDefines_sm_\n        if (!defines) {\n            return_sm_\n        }\n\n        var effect _eq_ subMesh.effect_sm_\n\n        if (!effect) {\n            return_sm_\n        }\n\n        this._activeEffect _eq_ effect_sm_\n\n        // Matrices\n        this.bindOnlyWorldMatrix(world)_sm_\n        let mustRebind _eq_ this._mustRebind(scene_co_ effect_co_ mesh.visibility)_sm_\n\n\n        let reflectionTexture_dd_ BABYLON.Nullable&lt_sm_BABYLON.BaseTexture&gt_sm_ _eq_ null_sm_\n        if (mustRebind) {\n            this._uniformBuffer.bindToEffect(effect_co_ _qt_Material_qt_)_sm_\n\n            this.bindViewProjection(effect)_sm_\n            reflectionTexture _eq_ this._getReflectionTexture()_sm_\n\n            if (!this._uniformBuffer.useUbo || !this.isFrozen || !this._uniformBuffer.isSync) {\n\n                // Texture uniforms\n                if (scene.texturesEnabled) {\n                    if (this._albedoTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.DiffuseTextureEnabled) {\n                        this._uniformBuffer.updateFloat2(_qt_vAlbedoInfos_qt__co_ this._albedoTexture.coordinatesIndex_co_ this._albedoTexture.level)_sm_\n                        BABYLON.MaterialHelper.BindTextureMatrix(this._albedoTexture_co_ this._uniformBuffer_co_ _qt_albedo_qt_)_sm_\n                    }\n\n                    if (this._opacityTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.OpacityTextureEnabled) {\n                        this._uniformBuffer.updateFloat2(_qt_vOpacityInfos_qt__co_ this._opacityTexture.coordinatesIndex_co_ this._opacityTexture.level)_sm_\n                        BABYLON.MaterialHelper.BindTextureMatrix(this._opacityTexture_co_ this._uniformBuffer_co_ _qt_opacity_qt_)_sm_\n                    }\n\n                    if (reflectionTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.ReflectionTextureEnabled) {\n                        this._uniformBuffer.updateMatrix(_qt_reflectionMatrix_qt__co_ reflectionTexture.getReflectionTextureMatrix())_sm_\n                        this._uniformBuffer.updateFloat2(_qt_vReflectionInfos_qt__co_ reflectionTexture.level_co_ 0)_sm_\n\n                        if ((&lt_sm_any&gt_sm_reflectionTexture).boundingBoxSize) {\n                            let cubeTexture _eq_ &lt_sm_BABYLON.CubeTexture&gt_sm_reflectionTexture_sm_\n\n                            this._uniformBuffer.updateVector3(_qt_vReflectionPosition_qt__co_ cubeTexture.boundingBoxPosition)_sm_\n                            this._uniformBuffer.updateVector3(_qt_vReflectionSize_qt__co_ cubeTexture.boundingBoxSize)_sm_\n                        }\n\n                        var polynomials _eq_ reflectionTexture.sphericalPolynomial_sm_\n                        if (defines._shared.USESPHERICALFROMREFLECTIONMAP &amp_sm_&amp_sm_ polynomials) {\n                            this._activeEffect.setFloat3(_qt_vSphericalX_qt__co_ polynomials.x.x_co_ polynomials.x.y_co_ polynomials.x.z)_sm_\n                            this._activeEffect.setFloat3(_qt_vSphericalY_qt__co_ polynomials.y.x_co_ polynomials.y.y_co_ polynomials.y.z)_sm_\n                            this._activeEffect.setFloat3(_qt_vSphericalZ_qt__co_ polynomials.z.x_co_ polynomials.z.y_co_ polynomials.z.z)_sm_\n                            this._activeEffect.setFloat3(_qt_vSphericalXX_ZZ_qt__co_ polynomials.xx.x - polynomials.zz.x_co_\n                                polynomials.xx.y - polynomials.zz.y_co_\n                                polynomials.xx.z - polynomials.zz.z)_sm_\n                            this._activeEffect.setFloat3(_qt_vSphericalYY_ZZ_qt__co_ polynomials.yy.x - polynomials.zz.x_co_\n                                polynomials.yy.y - polynomials.zz.y_co_\n                                polynomials.yy.z - polynomials.zz.z)_sm_\n                            this._activeEffect.setFloat3(_qt_vSphericalZZ_qt__co_ polynomials.zz.x_co_ polynomials.zz.y_co_ polynomials.zz.z)_sm_\n                            this._activeEffect.setFloat3(_qt_vSphericalXY_qt__co_ polynomials.xy.x_co_ polynomials.xy.y_co_ polynomials.xy.z)_sm_\n                            this._activeEffect.setFloat3(_qt_vSphericalYZ_qt__co_ polynomials.yz.x_co_ polynomials.yz.y_co_ polynomials.yz.z)_sm_\n                            this._activeEffect.setFloat3(_qt_vSphericalZX_qt__co_ polynomials.zx.x_co_ polynomials.zx.y_co_ polynomials.zx.z)_sm_\n                        }\n\n                        this._uniformBuffer.updateFloat3(_qt_vReflectionMicrosurfaceInfos_qt__co_\n                            reflectionTexture.getSize().width_co_\n                            reflectionTexture.lodGenerationScale_co_\n                            reflectionTexture.lodGenerationOffset)_sm_\n                    }\n\n                    if (this._emissiveTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.EmissiveTextureEnabled) {\n                        this._uniformBuffer.updateFloat2(_qt_vEmissiveInfos_qt__co_ this._emissiveTexture.coordinatesIndex_co_ this._emissiveTexture.level)_sm_\n                        BABYLON.MaterialHelper.BindTextureMatrix(this._emissiveTexture_co_ this._uniformBuffer_co_ _qt_emissive_qt_)_sm_\n                    }\n\n                    if (BABYLON.StandardMaterial.SpecularTextureEnabled) {\n                        if (this._metallicTexture) {\n                            this._uniformBuffer.updateFloat3(_qt_vReflectivityInfos_qt__co_ this._metallicTexture.coordinatesIndex_co_ this._metallicTexture.level_co_ this._ambientTextureStrength)_sm_\n                            BABYLON.MaterialHelper.BindTextureMatrix(this._metallicTexture_co_ this._uniformBuffer_co_ _qt_reflectivity_qt_)_sm_\n                        }\n                        else if (this._reflectivityTexture) {\n                            this._uniformBuffer.updateFloat3(_qt_vReflectivityInfos_qt__co_ this._reflectivityTexture.coordinatesIndex_co_ this._reflectivityTexture.level_co_ 1.0)_sm_\n                            BABYLON.MaterialHelper.BindTextureMatrix(this._reflectivityTexture_co_ this._uniformBuffer_co_ _qt_reflectivity_qt_)_sm_\n                        }\n\n                        if (this._microSurfaceTexture) {\n                            this._uniformBuffer.updateFloat2(_qt_vMicroSurfaceSamplerInfos_qt__co_ this._microSurfaceTexture.coordinatesIndex_co_ this._microSurfaceTexture.level)_sm_\n                            BABYLON.MaterialHelper.BindTextureMatrix(this._microSurfaceTexture_co_ this._uniformBuffer_co_ _qt_microSurfaceSampler_qt_)_sm_\n                        }\n                    }\n\n                    if (this._bumpTexture &amp_sm_&amp_sm_ scene.getEngine().getCaps().standardDerivatives &amp_sm_&amp_sm_ BABYLON.StandardMaterial.BumpTextureEnabled &amp_sm_&amp_sm_ !this._disableBumpMap) {\n                        this._uniformBuffer.updateFloat3(_qt_vBumpInfos_qt__co_ this._bumpTexture.coordinatesIndex_co_ this._bumpTexture.level_co_ this._parallaxScaleBias)_sm_\n                        BABYLON.MaterialHelper.BindTextureMatrix(this._bumpTexture_co_ this._uniformBuffer_co_ _qt_bump_qt_)_sm_\n\n                        if (scene._mirroredCameraPosition) {\n                            this._uniformBuffer.updateFloat2(_qt_vTangentSpaceParams_qt__co_ this._invertNormalMapX ? 1.0 _dd_ -1.0_co_ this._invertNormalMapY ? 1.0 _dd_ -1.0)_sm_\n                        } else {\n                            this._uniformBuffer.updateFloat2(_qt_vTangentSpaceParams_qt__co_ this._invertNormalMapX ? -1.0 _dd_ 1.0_co_ this._invertNormalMapY ? -1.0 _dd_ 1.0)_sm_\n                        }\n                    }\n                }\n\n                // Colors\n                if (defines._shared.METALLICWORKFLOW) {\n                    BABYLON.PBRMaterial._scaledReflectivity.r _eq_ (this._metallic _eq__eq__eq_ undefined || this._metallic _eq__eq__eq_ null) ? 1 _dd_ this._metallic_sm_\n                    BABYLON.PBRMaterial._scaledReflectivity.g _eq_ (this._roughness _eq__eq__eq_ undefined || this._roughness _eq__eq__eq_ null) ? 1 _dd_ this._roughness_sm_\n                    this._uniformBuffer.updateColor4(_qt_vReflectivityColor_qt__co_ BABYLON.PBRMaterial._scaledReflectivity_co_ 0)_sm_\n                }\n                else {\n                    this._uniformBuffer.updateColor4(_qt_vReflectivityColor_qt__co_ this._reflectivityColor_co_ this._microSurface)_sm_\n                }\n\n                this._uniformBuffer.updateColor3(_qt_vEmissiveColor_qt__co_ this._emissiveColor)_sm_\n                this._uniformBuffer.updateColor3(_qt_vReflectionColor_qt__co_ this._reflectionColor)_sm_\n                this._uniformBuffer.updateColor4(_qt_vAlbedoColor_qt__co_ this._albedoColor_co_ this.alpha * mesh.visibility)_sm_\n\n\n                // Misc\n                this._lightingInfos.x _eq_ this._directIntensity_sm_\n                this._lightingInfos.y _eq_ this._emissiveIntensity_sm_\n                this._lightingInfos.z _eq_ this._environmentIntensity_sm_\n                this._lightingInfos.w _eq_ this._specularIntensity_sm_\n\n                this._uniformBuffer.updateVector4(_qt_vLightingIntensity_qt__co_ this._lightingInfos)_sm_\n            }\n\n            // Textures\n            if (scene.texturesEnabled) {\n                if (this._albedoTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.DiffuseTextureEnabled) {\n                    this._uniformBuffer.setTexture(_qt_albedoSampler_qt__co_ this._albedoTexture)_sm_\n                }\n\n                if (this._opacityTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.OpacityTextureEnabled) {\n                    this._uniformBuffer.setTexture(_qt_opacitySampler_qt__co_ this._opacityTexture)_sm_\n                }\n\n                if (reflectionTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.ReflectionTextureEnabled) {\n                    if (defines._shared.LODBASEDMICROSFURACE) {\n                        this._uniformBuffer.setTexture(_qt_reflectionSampler_qt__co_ reflectionTexture)_sm_\n                    }\n                    else {\n                        this._uniformBuffer.setTexture(_qt_reflectionSampler_qt__co_ reflectionTexture._lodTextureMid || reflectionTexture)_sm_\n                        this._uniformBuffer.setTexture(_qt_reflectionSamplerLow_qt__co_ reflectionTexture._lodTextureLow || reflectionTexture)_sm_\n                        this._uniformBuffer.setTexture(_qt_reflectionSamplerHigh_qt__co_ reflectionTexture._lodTextureHigh || reflectionTexture)_sm_\n                    }\n                }\n\n                if (defines._shared.ENVIRONMENTBRDF) {\n                    this._uniformBuffer.setTexture(_qt_environmentBrdfSampler_qt__co_ this._environmentBRDFTexture)_sm_\n                }\n\n                if (this._emissiveTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.EmissiveTextureEnabled) {\n                    this._uniformBuffer.setTexture(_qt_emissiveSampler_qt__co_ this._emissiveTexture)_sm_\n                }\n\n                if (BABYLON.StandardMaterial.SpecularTextureEnabled) {\n                    if (this._metallicTexture) {\n                        this._uniformBuffer.setTexture(_qt_reflectivitySampler_qt__co_ this._metallicTexture)_sm_\n                    }\n                    else if (this._reflectivityTexture) {\n                        this._uniformBuffer.setTexture(_qt_reflectivitySampler_qt__co_ this._reflectivityTexture)_sm_\n                    }\n\n                    if (this._microSurfaceTexture) {\n                        this._uniformBuffer.setTexture(_qt_microSurfaceSampler_qt__co_ this._microSurfaceTexture)_sm_\n                    }\n                }\n\n                if (this._bumpTexture &amp_sm_&amp_sm_ scene.getEngine().getCaps().standardDerivatives &amp_sm_&amp_sm_ BABYLON.StandardMaterial.BumpTextureEnabled &amp_sm_&amp_sm_ !this._disableBumpMap) {\n                    this._uniformBuffer.setTexture(_qt_bumpSampler_qt__co_ this._bumpTexture)_sm_\n                }\n            }\n\n            // Colors\n            scene.ambientColor.multiplyToRef(this._ambientColor_co_ this._globalAmbientColor)_sm_\n\n            var eyePosition _eq_ scene._forcedViewPosition ? scene._forcedViewPosition _dd_ (scene._mirroredCameraPosition ? scene._mirroredCameraPosition _dd_ (&lt_sm_BABYLON.Camera&gt_sm_scene.activeCamera).globalPosition)_sm_\n            var invertNormal _eq_ (scene.useRightHandedSystem _eq__eq__eq_ (scene._mirroredCameraPosition !_eq_ null))_sm_\n            effect.setFloat4(_qt_vEyePosition_qt__co_\n                eyePosition.x_co_\n                eyePosition.y_co_\n                eyePosition.z_co_\n                invertNormal ? -1 _dd_ 1)_sm_\n            effect.setColor3(_qt_vAmbientColor_qt__co_ this._globalAmbientColor)_sm_\n        }\n\n        if (mustRebind || !this.isFrozen) {\n            // Lights\n            if (scene.lightsEnabled &amp_sm_&amp_sm_ !this._disableLighting) {\n                BABYLON.MaterialHelper.BindLights(scene_co_ mesh_co_ this._activeEffect_co_ defines_co_ this._maxSimultaneousLights_co_ this._usePhysicalLightFalloff)_sm_\n            }\n\n            // Log. depth\n            BABYLON. MaterialHelper.BindLogDepth(defines_co_ this._activeEffect_co_ scene)_sm_\n        }\n\n        this._uniformBuffer.update()_sm_\n        this._afterBind(mesh_co_ this._activeEffect)_sm_\n    }\n\n    getClassName()_dd_ string {\n        return _t_SimplifiedPBRBaseSimpleMaterial_t__sm_\n    }\n\n    get extraData()_dd_ any {\n        return this._extraData_sm_\n    }\n\n    get extraDataDirty()_dd_ boolean {\n        return this._extraDataDirty_sm_\n    }\n\n    set extraDataDirty(value_dd_ boolean) {\n        this._extraDataDirty _eq_ value_sm_\n    }\n\n    onCutPlanesUpdated()_dd_ void {\n        if (this.extraData.cutPlanes) {\n            MaterialUtils.updateCutPlanes(this.getEffect()_co_ this.extraData.cutPlanes)_sm_\n        }\n    }\n\n    isReadyForSubMesh(mesh_dd_ BABYLON.AbstractMesh_co_ subMesh_dd_ BABYLON.SubMesh_co_ useInstances?_dd_ boolean)_dd_ boolean {\n        if (subMesh.effect &amp_sm_&amp_sm_ this.isFrozen) {\n            if (this._wasPreviouslyReady) {\n                return true_sm_\n            }\n        }\n\n        if (!subMesh._materialDefines) {\n            subMesh._materialDefines _eq_ new SimplifiedPBRMaterialDefines(this._sharedDefines)_sm_\n        }\n\n        const defines _eq_ &lt_sm_SimplifiedPBRMaterialDefines&gt_sm_subMesh._materialDefines_sm_\n        if (!this.checkReadyOnEveryCall &amp_sm_&amp_sm_ subMesh.effect) {\n            if (defines._renderId _eq__eq__eq_ this.getScene().getRenderId()) {\n                return true_sm_\n            }\n        }\n\n        const scene _eq_ this.getScene()_sm_\n        const engine _eq_ scene.getEngine()_sm_\n\n        if (defines._areTexturesDirty) {\n            if (scene.texturesEnabled) {\n                if (this._albedoTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.DiffuseTextureEnabled) {\n                    if (!this._albedoTexture.isReadyOrNotBlocking()) {\n                        return false_sm_\n                    }\n                }\n\n                if (this._opacityTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.OpacityTextureEnabled) {\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\n                        return false_sm_\n                    }\n                }\n\n                var reflectionTexture _eq_ this._getReflectionTexture()_sm_\n                if (reflectionTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.ReflectionTextureEnabled) {\n                    if (!reflectionTexture.isReadyOrNotBlocking()) {\n                        return false_sm_\n                    }\n                }\n\n                if (this._emissiveTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.EmissiveTextureEnabled) {\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n                        return false_sm_\n                    }\n                }\n\n                if (BABYLON.StandardMaterial.SpecularTextureEnabled) {\n                    if (this._metallicTexture) {\n                        if (!this._metallicTexture.isReadyOrNotBlocking()) {\n                            return false_sm_\n                        }\n                    }\n                    else if (this._reflectivityTexture) {\n                        if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\n                            return false_sm_\n                        }\n                    }\n\n                    if (this._microSurfaceTexture) {\n                        if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\n                            return false_sm_\n                        }\n                    }\n                }\n\n                if (engine.getCaps().standardDerivatives &amp_sm_&amp_sm_ this._bumpTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.BumpTextureEnabled &amp_sm_&amp_sm_ !this._disableBumpMap) {\n                    // Bump texture cannot be not blocking.\n                    if (!this._bumpTexture.isReady()) {\n                        return false_sm_\n                    }\n                }\n\n                if (this._environmentBRDFTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.ReflectionTextureEnabled) {\n                    // This is blocking.\n                    if (!this._environmentBRDFTexture.isReady()) {\n                        return false_sm_\n                    }\n                }\n            }\n        }\n\n        if (!engine.getCaps().standardDerivatives) {\n            let bufferMesh _eq_ null_sm_\n            if (mesh.getClassName() _eq__eq__eq_ _qt_InstancedMesh_qt_) {\n                bufferMesh _eq_ (mesh as BABYLON.InstancedMesh).sourceMesh_sm_\n            }\n            else if (mesh.getClassName() _eq__eq__eq_ _qt_Mesh_qt_) {\n                bufferMesh _eq_ mesh as BABYLON.Mesh_sm_\n            }\n\n            if (bufferMesh &amp_sm_&amp_sm_ bufferMesh.geometry &amp_sm_&amp_sm_ bufferMesh.geometry.isReady() &amp_sm_&amp_sm_ !bufferMesh.geometry.isVerticesDataPresent(BABYLON.VertexBuffer.NormalKind)) {\n                bufferMesh.createNormals(true)_sm_\n                BABYLON.Tools.Warn(_qt_PBRMaterial_dd_ Normals have been created for the mesh_dd_ _qt_ + bufferMesh.name)_sm_\n            }\n        }\n\n        const effect _eq_ this._prepareEnhancedEffect(mesh_co_ defines_co_ this.onCompiled_co_ this.onError_co_ useInstances)_sm_\n        if (effect) {\n            scene.resetCachedMaterial()_sm_\n            subMesh.setEffect(effect_co_ defines)_sm_\n            this.buildUniformLayout()_sm_\n        }\n\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false_sm_\n        }\n\n        defines._renderId _eq_ scene.getRenderId()_sm_\n        this._wasPreviouslyReady _eq_ true_sm_\n\n        return true_sm_\n    }\n\n    protected _prepareEnhancedEffect(mesh_dd_ BABYLON.AbstractMesh_co_ defines_dd_ SimplifiedPBRMaterialDefines_co_ onCompiled_dd_ BABYLON.Nullable&lt_sm_(effect_dd_ BABYLON.Effect) _eq_&gt_sm_ void&gt_sm_ _eq_ null_co_ onError_dd_ BABYLON.Nullable&lt_sm_(effect_dd_ BABYLON.Effect_co_ errors_dd_ string) _eq_&gt_sm_ void&gt_sm_ _eq_ null_co_ useInstances_dd_ BABYLON.Nullable&lt_sm_boolean&gt_sm_ _eq_ null_co_ useClipPlane_dd_ BABYLON.Nullable&lt_sm_boolean&gt_sm_ _eq_ null)_dd_ BABYLON.Nullable&lt_sm_BABYLON.Effect&gt_sm_ {\n        this._prepareSimplifiedDefines(mesh_co_ defines_co_ useInstances_co_ useClipPlane)_sm_\n\n        if (!defines.isDirty) {\n            return null_sm_\n        }\n\n        defines.markAsProcessed()_sm_\n\n        const scene _eq_ this.getScene()_sm_\n        const engine _eq_ scene.getEngine()_sm_\n\n        // Fallbacks\n        let fallbacks _eq_ new BABYLON.EffectFallbacks()_sm_\n        let fallbackRank _eq_ 0_sm_\n        if (defines._shared.USESPHERICALINVERTEX) {\n            fallbacks.addFallback(fallbackRank++_co_ _t_USESPHERICALINVERTEX_t_)_sm_\n        }\n\n        if (defines.LOGARITHMICDEPTH) {\n            fallbacks.addFallback(fallbackRank_co_ _t_LOGARITHMICDEPTH_t_)_sm_\n        }\n\n        if (defines._shared.ENVIRONMENTBRDF) {\n            fallbacks.addFallback(fallbackRank++_co_ _t_ENVIRONMENTBRDF_t_)_sm_\n        }\n\n        if (defines.TANGENT) {\n            fallbacks.addFallback(fallbackRank++_co_ _t_TANGENT_t_)_sm_\n        }\n\n        if (defines.BUMP) {\n            fallbacks.addFallback(fallbackRank++_co_ _t_BUMP_t_)_sm_\n        }\n\n        fallbackRank _eq_ BABYLON.MaterialHelper.HandleFallbacksForShadows(defines_co_ fallbacks_co_ this._maxSimultaneousLights_co_ fallbackRank++)_sm_\n\n        if (defines.SPECULARTERM) {\n            fallbacks.addFallback(fallbackRank++_co_ _t_SPECULARTERM_t_)_sm_\n        }\n\n        if (defines._shared.USESPHERICALFROMREFLECTIONMAP) {\n            fallbacks.addFallback(fallbackRank++_co_ _t_USESPHERICALFROMREFLECTIONMAP_t_)_sm_\n        }\n\n        if (defines.NORMAL) {\n            fallbacks.addFallback(fallbackRank++_co_ _t_NORMAL_t_)_sm_\n        }\n\n        if (defines.EMISSIVE) {\n            fallbacks.addFallback(fallbackRank++_co_ _t_EMISSIVE_t_)_sm_\n        }\n\n        //Attributes\n        let attribs _eq_ [BABYLON.VertexBuffer.PositionKind]_sm_\n\n        if (defines.NORMAL) {\n            attribs.push(BABYLON.VertexBuffer.NormalKind)_sm_\n        }\n\n        if (defines.TANGENT) {\n            attribs.push(BABYLON.VertexBuffer.TangentKind)_sm_\n        }\n\n        if (defines.UV1) {\n            attribs.push(BABYLON.VertexBuffer.UVKind)_sm_\n        }\n\n        if (defines.UV2) {\n            attribs.push(BABYLON.VertexBuffer.UV2Kind)_sm_\n        }\n\n        let uniforms _eq_ [_t_world_t__co_ _t_view_t__co_ _t_viewProjection_t__co_ _t_vEyePosition_t__co_ _t_vLightsType_t__co_ _t_vAmbientColor_t__co_ _t_vAlbedoColor_t__co_ _t_vReflectivityColor_t__co_ _t_vEmissiveColor_t__co_ _t_vReflectionColor_t__co_\n            _t_vAlbedoInfos_t__co_ _t_vOpacityInfos_t__co_ _t_vReflectionInfos_t__co_ _t_vReflectionPosition_t__co_ _t_vReflectionSize_t__co_ _t_vEmissiveInfos_t__co_ _t_vReflectivityInfos_t__co_\n            _t_vMicroSurfaceSamplerInfos_t__co_ _t_vBumpInfos_t__co_\n            _t_albedoMatrix_t__co_ _t_opacityMatrix_t__co_ _t_reflectionMatrix_t__co_ _t_emissiveMatrix_t__co_ _t_reflectivityMatrix_t__co_ _t_normalMatrix_t__co_ _t_microSurfaceSamplerMatrix_t__co_ _t_bumpMatrix_t__co_\n            _t_vLightingIntensity_t__co_\n            _t_logarithmicDepthConstant_t__co_\n            _t_vSphericalX_t__co_ _t_vSphericalY_t__co_ _t_vSphericalZ_t__co_\n            _t_vSphericalXX_t__co_ _t_vSphericalYY_t__co_ _t_vSphericalZZ_t__co_\n            _t_vSphericalXY_t__co_ _t_vSphericalYZ_t__co_ _t_vSphericalZX_t__co_\n            _t_vReflectionMicrosurfaceInfos_t__co_\n            _t_vTangentSpaceParams_t__co_\n            CUTPLANE_COUNT_UNIFORM_NAME_co_ CUTPLANES_UNIFORM_NAME\n        ]_sm_\n\n        if (this.extraData.cutPlanes.length &gt_sm_ 0) {\n            defines._shared.CUTPLANE _eq_ true_sm_\n            defines._shared.MAX_CUTPLANE_COUNT _eq_ MAX_CUTPLANE_COUNT_sm_\n        }\n\n        let samplers _eq_ [_t_albedoSampler_t__co_ _t_reflectivitySampler_t__co_ _t_emissiveSampler_t__co_\n            _t_bumpSampler_t__co_ _t_opacitySampler_t__co_\n            _t_reflectionSampler_t__co_ _t_reflectionSamplerLow_t__co_ _t_reflectionSamplerHigh_t__co_\n            _t_microSurfaceSampler_t__co_ _t_environmentBrdfSampler_t_]_sm_\n        let uniformBuffers _eq_ [_t_Material_t__co_ _t_Scene_t_]_sm_\n\n        BABYLON.MaterialHelper.PrepareUniformsAndSamplersList(&lt_sm_BABYLON.EffectCreationOptions&gt_sm_{\n            uniformsNames_dd_ uniforms_co_\n            uniformBuffersNames_dd_ uniformBuffers_co_\n            samplers_dd_ samplers_co_\n            defines_dd_ defines_co_\n            maxSimultaneousLights_dd_ this._maxSimultaneousLights\n        })_sm_\n\n        if (!defines.keys) {\n            defines.rebuild()_sm_\n        }\n        let join _eq_ defines.toString()_sm_\n        defines.keys _eq_ undefined_sm_\n\n        return engine.createEffect(_t_custom_pbr_t__co_ &lt_sm_BABYLON.EffectCreationOptions&gt_sm_{\n            attributes_dd_ attribs_co_\n            uniformsNames_dd_ uniforms_co_\n            uniformBuffersNames_dd_ uniformBuffers_co_\n            samplers_dd_ samplers_co_\n            defines_dd_ join_co_\n            fallbacks_dd_ fallbacks_co_\n            onCompiled_dd_ onCompiled_co_\n            onError_dd_ onError_co_\n            indexParameters_dd_ { maxSimultaneousLights_dd_ this._maxSimultaneousLights }\n        }_co_ engine)_sm_\n    }\n\n    private _prepareSimplifiedDefines(mesh_dd_ BABYLON.AbstractMesh_co_ defines_dd_ SimplifiedPBRMaterialDefines_co_ useInstances_dd_ BABYLON.Nullable&lt_sm_boolean&gt_sm_ _eq_ null_co_ useClipPlane_dd_ BABYLON.Nullable&lt_sm_boolean&gt_sm_ _eq_ null)_dd_ void {\n        const scene _eq_ this.getScene()_sm_\n\n        // Lights\n        //BABYLON.MaterialHelper.PrepareDefinesForLights(scene_co_ mesh_co_ defines_co_ true_co_ this._maxSimultaneousLights_co_ this._disableLighting)_sm_\n        defines._needNormals _eq_ true_sm_\n\n        // Textures\n        defines._shared.METALLICWORKFLOW _eq_ super.isMetallicWorkflow()_sm_\n        if (defines._areTexturesDirty) {\n            defines._needUVs _eq_ false_sm_\n            if (scene.texturesEnabled) {\n                if (scene.getEngine().getCaps().textureLOD) {\n                    defines._shared.LODBASEDMICROSFURACE _eq_ true_sm_\n                }\n\n                if (this._albedoTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.DiffuseTextureEnabled) {\n                    BABYLON.MaterialHelper.PrepareDefinesForMergedUV(this._albedoTexture_co_ defines_co_ _qt_ALBEDO_qt_)_sm_\n                } else {\n                    defines.ALBEDO _eq_ false_sm_\n                }\n\n                if (this._opacityTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.OpacityTextureEnabled) {\n                    BABYLON.MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture_co_ defines_co_ _qt_OPACITY_qt_)_sm_\n                    defines._shared.OPACITYRGB _eq_ this._opacityTexture.getAlphaFromRGB_sm_\n                } else {\n                    defines.OPACITY _eq_ false_sm_\n                }\n\n                var reflectionTexture _eq_ this._getReflectionTexture()_sm_\n                if (reflectionTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.ReflectionTextureEnabled) {\n                    defines._shared.REFLECTION _eq_ true_sm_\n                    defines._shared.GAMMAREFLECTION _eq_ reflectionTexture.gammaSpace_sm_\n                    defines._shared.REFLECTIONMAP_OPPOSITEZ _eq_ this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ _dd_ reflectionTexture.invertZ_sm_\n                    defines._shared.LODINREFLECTIONALPHA _eq_ reflectionTexture.lodLevelInAlpha_sm_\n\n                    if (reflectionTexture.coordinatesMode _eq__eq__eq_ BABYLON.Texture.INVCUBIC_MODE) {\n                        defines._shared.INVERTCUBICMAP _eq_ true_sm_\n                    }\n\n                    defines._shared.REFLECTIONMAP_3D _eq_ reflectionTexture.isCube_sm_\n\n                    switch (reflectionTexture.coordinatesMode) {\n                        case BABYLON.Texture.CUBIC_MODE_dd_\n                        case BABYLON.Texture.INVCUBIC_MODE_dd_\n                            defines._shared.REFLECTIONMAP_CUBIC _eq_ true_sm_\n                            defines._shared.USE_LOCAL_REFLECTIONMAP_CUBIC _eq_ (&lt_sm_any&gt_sm_reflectionTexture).boundingBoxSize ? true _dd_ false_sm_\n                            break_sm_\n                        case BABYLON.Texture.EXPLICIT_MODE_dd_\n                            defines._shared.REFLECTIONMAP_EXPLICIT _eq_ true_sm_\n                            break_sm_\n                        case BABYLON.Texture.PLANAR_MODE_dd_\n                            defines._shared.REFLECTIONMAP_PLANAR _eq_ true_sm_\n                            break_sm_\n                        case BABYLON.Texture.PROJECTION_MODE_dd_\n                            defines._shared.REFLECTIONMAP_PROJECTION _eq_ true_sm_\n                            break_sm_\n                        case BABYLON.Texture.SKYBOX_MODE_dd_\n                            defines._shared.REFLECTIONMAP_SKYBOX _eq_ true_sm_\n                            break_sm_\n                        case BABYLON.Texture.SPHERICAL_MODE_dd_\n                            defines._shared.REFLECTIONMAP_SPHERICAL _eq_ true_sm_\n                            break_sm_\n                        case BABYLON.Texture.EQUIRECTANGULAR_MODE_dd_\n                            defines._shared.REFLECTIONMAP_EQUIRECTANGULAR _eq_ true_sm_\n                            break_sm_\n                        case BABYLON.Texture.FIXED_EQUIRECTANGULAR_MODE_dd_\n                            defines._shared.REFLECTIONMAP_EQUIRECTANGULAR_FIXED _eq_ true_sm_\n                            break_sm_\n                        case BABYLON.Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE_dd_\n                            defines._shared.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED _eq_ true_sm_\n                            break_sm_\n                    }\n\n                    if (reflectionTexture.coordinatesMode !_eq__eq_ BABYLON.Texture.SKYBOX_MODE) {\n                        if (reflectionTexture.sphericalPolynomial) {\n                            defines._shared.USESPHERICALFROMREFLECTIONMAP _eq_ true_sm_\n                            if (this._forceIrradianceInFragment || scene.getEngine().getCaps().maxVaryingVectors &lt_sm__eq_ 8) {\n                                defines._shared.USESPHERICALINVERTEX _eq_ false_sm_\n                            }\n                            else {\n                                defines._shared.USESPHERICALINVERTEX _eq_ true_sm_\n                            }\n                        }\n                    }\n                } else {\n                    defines._shared.REFLECTION _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_3D _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_SPHERICAL _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_PLANAR _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_CUBIC _eq_ false_sm_\n                    defines._shared.USE_LOCAL_REFLECTIONMAP_CUBIC _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_PROJECTION _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_SKYBOX _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_EXPLICIT _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_EQUIRECTANGULAR _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_EQUIRECTANGULAR_FIXED _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED _eq_ false_sm_\n                    defines._shared.INVERTCUBICMAP _eq_ false_sm_\n                    defines._shared.USESPHERICALFROMREFLECTIONMAP _eq_ false_sm_\n                    defines._shared.USESPHERICALINVERTEX _eq_ false_sm_\n                    defines._shared.REFLECTIONMAP_OPPOSITEZ _eq_ false_sm_\n                    defines._shared.LODINREFLECTIONALPHA _eq_ false_sm_\n                    defines._shared.GAMMAREFLECTION _eq_ false_sm_\n                }\n\n                if (this._emissiveTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.EmissiveTextureEnabled) {\n                    BABYLON.MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture_co_ defines_co_ _qt_EMISSIVE_qt_)_sm_\n                } else {\n                    defines.EMISSIVE _eq_ false_sm_\n                }\n\n                if (BABYLON.StandardMaterial.SpecularTextureEnabled) {\n                    if (this._metallicTexture) {\n                        BABYLON.MaterialHelper.PrepareDefinesForMergedUV(this._metallicTexture_co_ defines_co_ _qt_REFLECTIVITY_qt_)_sm_\n                        defines._shared.ROUGHNESSSTOREINMETALMAPALPHA _eq_ this._useRoughnessFromMetallicTextureAlpha_sm_\n                        defines._shared.ROUGHNESSSTOREINMETALMAPGREEN _eq_ !this._useRoughnessFromMetallicTextureAlpha &amp_sm_&amp_sm_ this._useRoughnessFromMetallicTextureGreen_sm_\n                        defines._shared.METALLNESSSTOREINMETALMAPBLUE _eq_ this._useMetallnessFromMetallicTextureBlue_sm_\n                        defines._shared.AOSTOREINMETALMAPRED _eq_ this._useAmbientOcclusionFromMetallicTextureRed_sm_\n                    }\n                    else if (this._reflectivityTexture) {\n                        BABYLON.MaterialHelper.PrepareDefinesForMergedUV(this._reflectivityTexture_co_ defines_co_ _qt_REFLECTIVITY_qt_)_sm_\n                    } else {\n                        defines.REFLECTIVITY _eq_ false_sm_\n                    }\n\n                } else {\n                    defines.REFLECTIVITY _eq_ false_sm_\n                }\n\n                if (scene.getEngine().getCaps().standardDerivatives &amp_sm_&amp_sm_ this._bumpTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.BumpTextureEnabled &amp_sm_&amp_sm_ !this._disableBumpMap) {\n                    BABYLON.MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture_co_ defines_co_ _qt_BUMP_qt_)_sm_\n                } else {\n                    defines.BUMP _eq_ false_sm_\n                }\n\n                if (this._environmentBRDFTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.ReflectionTextureEnabled) {\n                    defines._shared.ENVIRONMENTBRDF _eq_ true_sm_\n                } else {\n                    defines._shared.ENVIRONMENTBRDF _eq_ false_sm_\n                }\n\n                if (this._shouldUseAlphaFromAlbedoTexture()) {\n                    defines._shared.ALPHAFROMALBEDO _eq_ true_sm_\n                } else {\n                    defines._shared.ALPHAFROMALBEDO _eq_ false_sm_\n                }\n            }\n\n            defines._shared.SPECULAROVERALPHA _eq_ this._useSpecularOverAlpha_sm_\n\n            defines._shared.USEPHYSICALLIGHTFALLOFF _eq_ this._usePhysicalLightFalloff_sm_\n\n            defines._shared.RADIANCEOVERALPHA _eq_ this._useRadianceOverAlpha_sm_\n\n            if (!this.backFaceCulling &amp_sm_&amp_sm_ this._twoSidedLighting) {\n                defines._shared.TWOSIDEDLIGHTING _eq_ true_sm_\n            } else {\n                defines._shared.TWOSIDEDLIGHTING _eq_ false_sm_\n            }\n\n            defines._shared.PREMULTIPLYALPHA _eq_ (this.alphaMode _eq__eq__eq_ BABYLON.Engine.ALPHA_PREMULTIPLIED || this.alphaMode _eq__eq__eq_ BABYLON.Engine.ALPHA_PREMULTIPLIED_PORTERDUFF)_sm_\n            defines.ALPHABLEND _eq_ this.needAlphaBlendingForMesh(mesh)_sm_\n            defines._shared.ALPHAFRESNEL _eq_ this._useAlphaFresnel || this._useLinearAlphaFresnel_sm_\n            defines._shared.LINEARALPHAFRESNEL _eq_ this._useLinearAlphaFresnel_sm_\n        }\n\n\n        defines._shared.FORCENORMALFORWARD _eq_ this._forceNormalForward_sm_\n\n        // Misc.\n        this._pareDefinesForMisc(mesh_co_ this._useLogarithmicDepth_co_ defines)_sm_\n\n        // Attribs\n        this._prepareDefinesForAttributes(mesh_co_ defines)_sm_\n    }\n\n    private _pareDefinesForMisc(mesh_dd_ BABYLON.AbstractMesh_co_ useLogarithmicDepth_dd_ boolean_co_ defines_dd_ any)_dd_ void {\n        if (defines._areMiscDirty) {\n            defines[_qt_LOGARITHMICDEPTH_qt_] _eq_ useLogarithmicDepth_sm_\n        }\n    }\n\n    private _prepareDefinesForAttributes(mesh_dd_ BABYLON.AbstractMesh_co_ defines_dd_ any)_dd_ boolean {\n        if (!defines._areAttributesDirty &amp_sm_&amp_sm_ defines._needNormals _eq__eq__eq_ defines._normals &amp_sm_&amp_sm_ defines._needUVs _eq__eq__eq_ defines._uvs) {\n            return false_sm_\n        }\n        defines._normals _eq_ defines._needNormals_sm_\n        defines._uvs _eq_ defines._needUVs_sm_\n        defines[_qt_NORMAL_qt_] _eq_ (defines._needNormals &amp_sm_&amp_sm_ mesh.isVerticesDataPresent(BABYLON.VertexBuffer.NormalKind))_sm_\n        if (defines._needNormals &amp_sm_&amp_sm_ mesh.isVerticesDataPresent(BABYLON.VertexBuffer.TangentKind)) {\n            defines[_qt_TANGENT_qt_] _eq_ true_sm_\n        }\n        if (defines._needUVs) {\n            defines[_qt_UV1_qt_] _eq_ mesh.isVerticesDataPresent(BABYLON.VertexBuffer.UVKind)_sm_\n            defines[_qt_UV2_qt_] _eq_ mesh.isVerticesDataPresent(BABYLON.VertexBuffer.UV2Kind)_sm_\n        }\n        else {\n            defines[_qt_UV1_qt_] _eq_ false_sm_\n            defines[_qt_UV2_qt_] _eq_ false_sm_\n        }\n        return true_sm_\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-08-02T15:53:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tGood job!!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]