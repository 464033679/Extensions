[{"Owner":"haestflod","Date":"2016-07-10T19:32:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_ I have an .obj file that has bad normals. It_t_s exported from 3ds max a long time ago and z is up and y is forward (XZY) instead of XYZ  which causes huge issues for my lighting.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRelated topic I think made a long time ago_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//forums.cgsociety.org/archive/index.php?t-305628.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//forums.cgsociety.org/archive/index.php?t-305628.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo I_t_m wondering if there_t_s anything I can do with babylon to try and fix this?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUnity for example has _qt_calculate Normals_qt_  (Normals &amp_sm_ Tangets -&gt_sm_ Normals -&gt_sm_ calculate)  that solves it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tImporting &amp_sm_ Exporting and disable _qt_autosmooth_qt_ in blender also worked.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThree.js auto-solved it when importing the obj.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI tried the BABYLON.VertexData.ComputeNormals and it did not solve it for me.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI did solve it myself by rotating the normals with this_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var rotationQuat _eq_ BABYLON.Quaternion.RotationYawPitchRoll(0_co_  Math.PI * 1.5_co_ 0)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo for the question again is there any way that I could have used babylon_t_s existing API to solve the bad normals?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s a playground with the model and a directional light_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1S9WC2%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1S9WC2#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s an imgur picture I took of my project using a shadermaterial rendering the normal values_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//imgur.com/a/466NV_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//imgur.com/a/466NV_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs you can see in the picture _qt_up_qt_ is positive Z and forward is positive Y which is why the directional light does not work.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2016-07-11T08:22:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tWhy not just use Blender to clean the mesh ? (import mesh_co_ switch to edit mode and select all the faces_co_ ctrl+f &gt_sm_ recalcultate normals _sm_ job done !)\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"haestflod","Date":"2016-07-11T09:48:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI know that is one possibility I even wrote it in the post that using blender is one solution to the problem. This is the solution I went with in the end aswell. ( I have a lot of models that have the same issue )\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut I was curious  if there is a way to solve it with babylon to get a better understanding of babylon.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy custom solution to the problem so far is_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCheck a face to get upvector   (all y vertice points are the same)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf the upvector is Z then rotate all the normals with the quaternion\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-07-11T19:47:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou can ask the VertexData to compute normals_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\t\t\t\tvar normals _eq_ []_sm_\n\t\t\t\tBABYLON.VertexData.ComputeNormals(handledMesh.positions_co_ handledMesh.indices_co_ normals)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"haestflod","Date":"2016-07-13T15:23:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks_co_ that was it. I did 1 thing different this time adding this line after ComputeNormals().\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_m.setVerticesData( BABYLON.VertexBuffer.NormalKind_co_ normals )_sm_\t\t_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen I tried it few days ago this is the code I used and I guess I must have thought it_t_d be automatically updated.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var positions _eq_ m.getVerticesData(BABYLON.VertexBuffer.PositionKind)_sm_\n// Now I used [] like Deltakosh wrote.\nvar normals _eq_ m.getVerticesData(BABYLON.VertexBuffer.NormalKind)_sm_\n\nBABYLON.VertexData.ComputeNormals(positions_co_ m.getIndices()_co_ normals)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-07-13T15:27:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis should work _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tdid you check if your faces are in the right order?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]