[{"Owner":"JCPalmer","Date":"2017-02-09T22:16:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI am starting to use ShaderBuilder for some new _t_grand entrances_t_.  That is when a mesh is instanced (after any textures have been loaded)_co_ it is accompanied with some kind of effect &amp_sm_ sound.  My entrances till now have been assigning temp materials_co_ scaling_co_ or animating a shapekey.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tShaderBuilder is actually done against a temporary mesh.  A cylinder for Teleport entrance_co_ and sphere for a Poof entrance.  I wanted to show the mesh &amp_sm_ any kids when 85% of the animation is complete.  Problem is_co_ if this is the first time permanent mesh is being made visible_co_ there is a slight hesitation right in the middle of the shader builder animations.  It just kind of ruins it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWorks purrrrfect on subsequent entrances.  Is there something I can call on the permanent meshes before I start the animation_co_ to make sure everything is ready?  I could do a quick show while mesh was at scale(0.0000001_co_ 0.0000001_co_ 0.0000001)_co_ but looking to find a crap-free method.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-02-10T16:12:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tOk_co_ I find the effect / shader is actually defined in the call to a material.isReady().  Would calling this after I know the mesh geometry is complete_co_ and all my texture completion callbacks have run be a way?  Node.isReady() does not really do anything.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-02-10T16:16:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tmesh.material.isReady() also does not remove the short frame freeze.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-02-10T16:35:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tActually_co_ setting the scaling incredibly small works good.  A little bit of a hack_co_ but I was already hacking a bit.  QI was setup not to allow new queue items to start while mesh was not enabled.  I was enabling the mesh to get the queue to process events_co_ but setting visibility to 0.  At 85% complete_co_ was setting visibility back to 1.  Visibility does not apply to child meshes_co_ unlike scaling_co_ so had to get all the descendants &amp_sm_ apply visibility both ways in loops.  Using scaling at just the mesh is still cleaner on a relative basis.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]