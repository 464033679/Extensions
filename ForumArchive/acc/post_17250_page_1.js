[{"Owner":"ajsmith8","Date":"2015-09-17T22:30:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m working on using Babylon.js to create a gaming benchmark.  The primary test will measure the total time it takes to complete a game on different systems with an unlocked FPS.  I_t_ve done some research and looked into the source code / docs and I could not find anyway to do this other than a few hacks_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_My first attempt was to experiment with engine.fps and engine.fpsLimit.  I tried to set engine.fpsLimit to an extremely high number_co_ which I had hoped would unlock the frame rate_co_ but it did not seem to do anything.  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Next I attempted to use this hack_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.chandlerprall.com/2011/06/beating-60fps-in-javascript/_qt_ rel_eq__qt_external nofollow_qt__gt_www.chandlerprall.com/2011/06/beating-60fps-in-javascript/_lt_/a_gt_._lt_/p_gt__lt_p_gt_In short_co_ window.postMessage(_t__t__co__t_*_t_) is added to the end of the render loop.  Then you add an event listener that calls the render loop upon receiving the message_co_ like this_dd__lt_/p_gt__lt_div_gt_window.addEventListener(_t_message_t__co_ runRenderLoop_co_ false)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_This only worked somewhat.  The logic within my runRenderLoop method was run at a much higher rate than 60fps_co_ but rendering slowed to a much slower rate.  engine.getFPS() only reported about 5fps_co_ so this is also clearly unacceptable._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_Any ideas on how to unlock the FPS?  Is there something that I am missing?  Thanks for any help in advance!_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-09-18T02:16:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello! Unfortunately_co_ as we rely on requestAnimationFrame we cannot get more than 60fps._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But you can still get an interesting number_dd_ the potential FPS which is _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_1000.0 / scene.getLastFrameDuration()_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2016-06-21T07:29:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSorry to up this topic_co_ but i don_t_t find after some searches a definition of potential FPS. What does _lt_em_gt_1000/scene.getLastFrameDuration()_lt_/em_gt_ (what is the logic behind this) ? And how this is related to real FPS ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2016-06-21T11:38:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t First of all_co_ cool project! We had the idea in the past to work on such a project (benchmark) but never had the time to work on it. _sm_-)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t In the browser_co_ the best way to render the frame with efficiency is to use requestAnimationFrame that will let the browser deciding when to call you back based on its current utilization. It_t_s far better than using setTimeout(1000/60) for instance. Anyway even with setTimeout set to 8 for instance to try to have 120fps_co_ all browsers will limit the rendering to 60fps. Some recent Chrome builds have unlocked the FPS to 90 for WebVR and Oculus/Vive support.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t In conclusion_dd_ you can_t_t ask to the browser to unlock the FPS like you can do in Win32 apps. That_t_s why _lt_span_gt_@deltakosh shares what we_t_re using inside our debug layer tool_co_ the potential FPS. Indeed_co_ we know inside our engine the time it tooks to compute the last frame. For instance_co_ let_t_s say the current fps is 60 but the potential FPS is 200_co_ it means that your GPU &amp_sm_ browser could potentially display 200 fps. Unfortunately_co_ this is not that simple. There are cases a bit more complex. Let_t_s take the Mansion scene of babylonjs.com. It runs at 30 fps on my small laptop and says the potential fps is 50. This means that I_t_m losing rendering performance due to some job done on the CPU side (collision_co_ physics_co_ whatever). _lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t For your benchmark_co_ you need to think about an algorithm / tests cases that will mix_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t - complex scenes like Sponza or Mansion that will stress the complete system_dd_ CPU_co_ GPU &amp_sm_ Browsers_t_ implementation. Your score will then be computed based on an average FPS during the sequence provided by requestAnimationFrame callbacks + the potential FPS provided by getLastFrameDuration\n_lt_/p_gt_\n\n_lt_p_gt_\n\t - pure GPU side scenes (using a unique draw call for instance) without anything enable on the CPU side (no collision_co_ no physic_co_ no sound_co_ no input). The potential FPS will be probably what you would get if the browser would unlock the FPS\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBye_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDavid\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2016-06-21T12:12:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tOk_co_ thanks for explanations_co_ i now understand better !\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]