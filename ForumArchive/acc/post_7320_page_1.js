[{"Owner":"Shannon Poole","Date":"2014-06-21T19:51:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__lt_span_gt__lt_span style_eq__qt_font-size_dd_15px_sm_font-family_dd_Arial_sm__qt__gt_This post may be a bit long winded so I apologize in advance._lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span_gt__lt_span style_eq__qt_font-size_dd_15px_sm_font-family_dd_Arial_sm__qt__gt_So I am working an ammo.js plugin for Babylon. As I go_co_ I am trying to do a certain amount of preemptive problem solving. I am focusing mainly on the workflow to go from asset creation (including rigid bodies) to actually using it in game._lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span_gt__lt_span style_eq__qt_font-size_dd_15px_sm_font-family_dd_Arial_sm__qt__gt_I_t_ve looked at Blender and using the Babylon exporter. At first glance this seems great. Simple enough_co_ just add a rigid body to the mesh in Blender and export. Ok_co_ but that only gives us a handful of shapes and it’s basically impossible to really debug and tweak. Blender does some black magic to fit the shape to the mesh but doesn_t_t really give you any feedback on what’s going on. You can’t even really see the hull shape. How does it determine what the capsule shape is fit to if you have a complex model? Just the bounding box? What about the axis_co_ is it always straight up? And when is that applied_co_ just when you first add it? It basically becomes trial and error. You have minor tweaks that you can do such as margin but again you can’t see any of it so it’s hard to use. So that’s the basic rigid bodies in Blender_co_ the kind that the Babylon exporter actually pays attention to. And this is what I am trying to emulate when the models are loaded using the ammo.js plugin and Babylon impostors._lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span_gt__lt_span style_eq__qt_font-size_dd_15px_sm_font-family_dd_Arial_sm__qt__gt_Then there is the Blender Game Engine mode you can go into and have a little better control of the physics. You can actually preview the result but without real debug drawing it can be hard to really tell whether a capsule behaves as a capsule and not just a sphere. So now we have more control but the Babylon exporter ignores all this and beyond that BGE doesn_t_t seem all that useful to me. Is that really enough to make a game with? Just dropping in a few hulls and calling it a day? Blender may not even be a viable tool for game physics. I have no idea but the name would suggest so. _lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span_gt__lt_span style_eq__qt_font-size_dd_15px_sm_font-family_dd_Arial_sm__qt__gt_I read that some game engines rely on named meshes with prefixes like UCX_ and UBX_ to determine the hulls. This seems like a better approach to me since you have full control over the hull and can actually see it. However I am still a bit confused on what happens when you combine animation with the rigid bodies. I think this is more of a game engine design issue but I’d really like to know what kind of data structure would come out of this. Would something like Overgrowth (Partial Animation Blending) be the ideal result of something like this? And if that’s the case I don’t think Babylon’s approach of impostors would really work. It would need to be hull to bone binding instead of hull to mesh._lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span_gt__lt_span style_eq__qt_font-size_dd_15px_sm_font-family_dd_Arial_sm__qt__gt_So I spent the last couple of weeks trying to find any good information to help me come up with a good workflow. I am more of programmer and less of designer but I do have a little experience working with game artists and providing them with tools to create assets for my games_co_ but never 3d. I haven’t really worked with 3d physics engines but I have a basic understanding of the concepts and mechanics and Bullet seems straight forward enough. It_t_s the combination of meshes and rigid bodies that gets me and the actual asset creation. I feel like there are some huge gaps in accessibility for this type of thing. What are some other tools that people are using? Is there some way to make Blender work?_lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span_gt__lt_span style_eq__qt_font-size_dd_15px_sm_font-family_dd_Arial_sm__qt__gt_I have more questions but I don’t want to sound like a crazy person so I’ll stop now. I am more than happy to dig into this stuff_co_ I have just become frustrated with the lack of information and I don’t want to go down one road and realize later that it’s been solved already and that my approach was idiotic._lt_/span_gt__lt_/span_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-06-21T19:57:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Perhaps Gryff_co_ our Blender master can help you_dd_)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_BTW why do you need to be linked to blender? For cannon.js I tried to used bounding boxes in babylon.js to deduce sphere and box shape. For capsules I think we can do the same right?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-06-21T20:06:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_So there is nothing tying me to Blender other than trying to find a tool that will let me create assets. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I did the same for the ammojs plugin for boxes and spheres_co_ but capsules and cylinders also have an axis. So it_t_s radius height and axis. Right now I am just doing z up. But this seems pretty inflexible. Imagine a character with outstretched arms. It should be horizontal. I thought about just determining the greatest difference in min and max on any axis but that seems wrong too. I really think it will need to be decided by the asset creator. Which led me down this whole rabbit hole of finding a tool that would actually let me do that. The Blender with exporter approach seems out_co_ in that regard._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-06-21T22:37:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Perhaps we can consider the axis is defined by the bigger dimension?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-06-22T03:18:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ That_t_s sort of what I meant about the biggest difference in min and max. You just said it in a clearer way. I think this might work for some cases but it really limits what we can do with any moderately complex character rigging. If we force every capsule hull to be fixed to a whole axis_co_ right? The axis should be basically arbitrary. Otherwise the chararacter has to be rigged with 90 degree angles everywhere which would be pretty odd _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-06-22T04:21:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Worst case_dd_ Let_t_s change babylon.js functions to allow users to define values if required_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-06-22T12:05:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This is exactly this a what I thought_dd_ to be able to define our values would be the best option_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-06-22T12:24:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_OK that seems easy enough through code but that brings me back to what tools will allow us to do that during asset creation. _lt_/p_gt__lt_p_gt_So basically I guess my real question is there a standard way of doing this? I would think that there would be some basic data format for rigging up hulls to meshes. So that an exporter (from any tool_co_ not just Blender) would be pretty straight forward. _lt_/p_gt__lt_p_gt_I also think we should consider the hull to bone approach that would be used for any ragdoll like character rigging. And what that would look like in Babylon._lt_/p_gt__lt_p_gt_I mean people must be using some tools right? I remember using MilkShape ages ago and I might consider trying to work with that again_co_ but I might be misremembering how easy it was _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-07-02T00:27:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks fluffrabbit_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Have you been able to do any character rigging with physics in Blender? I imagine it requires a complex setup of multiple submeshes and rigid body constraints. Without visualization it must be pretty difficult._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m looking for some tools that allow me to do the following_lt_/p_gt__lt_ul_gt__lt_li_gt_Edit geometry with standard modeling tools_lt_/li_gt__lt_li_gt_Character rigging_co_ animation_co_ skinning_co_ bones_co_ etc_lt_/li_gt__lt_li_gt_Define and visualize arbitrary rigid bodies_lt_/li_gt__lt_li_gt_Bind rigid bodies to meshes and preferably bones_lt_/li_gt__lt_li_gt_Export to some standard format_lt_/li_gt__lt_li_gt_Import into babylon.js with minimal(if any) extra boilerplate_lt_/li_gt__lt_/ul_gt__lt_p_gt_I have no allegiances to any specific programs so I am open to any suggestions. It could even be multiple different programs.  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think I have come to the conclusion that the impostor approach is just not flexible enough for what I_t_m looking for so I think the last bullet will just end up being a wrapper and manager that I write myself._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2014-07-02T01:18:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi gang.  Interesting topic!  I don_t_t know if it applies but I thought I should point out Andy Beaulieu_t_s work at..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.andybeaulieu.com/Home/tabid/67/EntryID/238/Default.aspx_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.andybeaulieu.com/Home/tabid/67/EntryID/238/Default.aspx_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-07-02T12:06:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_You are reasons fluffrabbit . This is not a standard feature of Babylon. Physical Babylon with cannon.js is extremely limited. Game of bowling or billiards_co_ but then it becomes very tedious to use_co_ or even impossible with RPG scene._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_I opened an issue as to attach an impostor directly on a mesh with parent. Which simplifies things. I do not understand how Andy Beaulieu has to attach the mesh impostors. His demo was too much code to understand how it works._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-07-02T12:15:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I had come across Andy _lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_Beaulieu_t_s post early in my search. While great work_co_ it only further illustrates my point about the limitations of the current workflow. To create the fairly simple character he has to create a main impostor and then use cannon directly to bind up the rest. Which is all well and good but I really think we can do better. His code would have to change drastically if he decides to use the ammo.js plugin. I want to avoid that. _lt_/span_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-07-02T17:35:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_As I already mentioned I_t_m fairly open to update the physics code to something more reliable_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-07-02T21:48:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks Deltakosh_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_d like to come to some consensus on a good baseline for a file format. I_t_m really leaning towards the prefixed mesh names for defining collision hulls for several reasons. _lt_/p_gt__lt_ol_gt__lt_li_gt_The specific creation tool becomes less important since most 3d modeling tools can handle submeshes and mesh names._lt_/li_gt_\t_lt_li_gt_Exporting is pretty straightforward_lt_/li_gt_\t_lt_li_gt_Rigging can be done as you would any other character rigging_lt_/li_gt_\t_lt_li_gt_Visualization during creation doesn_t_t require any plugins_lt_/li_gt_\t_lt_li_gt_Debug drawing (of at least the hulls) in Babylon is straightforward_lt_/li_gt__lt_/ol_gt__lt_p_gt_What we would need / want for Babylon_lt_/p_gt__lt_ol_gt__lt_li_gt_A modified loader to keep the prefixed meshes from rendering unless using debug draw_lt_/li_gt_\t_lt_li_gt_A parallel approach for physics plugins for where impostors are too limited\t_lt_ol_gt__lt_li_gt_Should support hull to mesh and hull to bone binding_lt_/li_gt_\t_lt_/ol_gt__lt_/li_gt__lt_li_gt_An extended all-in-one loader to automatically bind rigid bodies (inferred from character rigging and prefixed mesh names)_lt_/li_gt__lt_/ol_gt__lt_p_gt_What_t_s missing_lt_/p_gt__lt_ol_gt__lt_li_gt_A way to actually define physics properties like friction_co_ density_co_ etc_lt_/li_gt__lt_/ol_gt__lt_p_gt_It seems odd to use this approach and then rely on some form of BGE to define the physics properties. I haven_t_t looked into it but I wonder if would be possible to use materials (or textures) to define them. Then you could have a set of predefined materials that you could tweak later without modifying the model. It_t_s in interesting thought but_co_ again_co_ I haven_t_t spent any time thinking about the implementation._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Unfortunately I haven_t_t done any development using TypeScript so I_t_m a little slow on getting started._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-07-02T23:51:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I absolutely agree_dd_ friction and restitution should be moved to materials and loaded from .babylon file_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But I_t_m not ok for the prefixed names. I prefer having specific objects in the file format that could be linked to the mesh at loading time. I_t_m not against creating a hull object type (like I did for skeletons)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-07-03T11:48:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I get that. Is your concern that you just want it segregated or that you_t_d like a better format for the rigid bodies than standard meshes? I think it might make sense to just do the inference during the export. It would make the exporters more complicated but we could just pick up the prefixed meshes then and move them into a separate object with binding info. The prefixed names are mainly to allow us to use traditional modeling tools to create the hulls without plugins but after that it_t_s less important._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I will spend some time tonight going through the current .bablyon format and see if I can come up with a decent structure._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-07-03T15:04:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_prefixes are risky because what does happen if I name my mesh with the prefixes? I_t_m more for a robust solution(especially for the web_dd_))_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-07-03T16:05:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I see what you mean but it_t_s a pretty standard convention with the Unreal engine._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_A mesh named Mesh1 would have a complimentary mesh named UCX_Mesh1 for the collision hull._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I am open to alternative solutions though. This just seemed the most flexible and easiest to implement. You could even have an option to specify the prefix during load but that would mean the inference would be done during load and not during export._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-07-03T17:12:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The imposter system is good. But it misses others._lt_/p_gt__lt_p_gt_The problem is to attach an imposter on a moving mesh. But if _qt_parent_qt_ is supported_co_ It would solve the problem. Then add an impostor ellipsoid for the characters._lt_/p_gt__lt_p_gt_Then it would be good to adjusted the ellipsoid depending on the size of the character with the scaling and position._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Then_co_ should the physic for hilly land. Would be perfect. This is what lack was Babylon._lt_br_gt_ _lt_br_gt_The Engine Unity3D is like that with rigidBody and collider. Land_co_ they automatically have a collider which follow the form of the meshes._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-07-04T01:26:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__lt_a href_eq__qt_http_dd_//cgcookie.com/blender/lessons/1-creating-rig/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//cgcookie.com/blender/lessons/1-creating-rig/_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_After watching this video I realized something. It seems you are supposed to create entire alternate meshes to turn into rigid bodies using the blender tools. This never occurred to me. If that_t_s the case I suppose impostors would work after all since you would just assign them to the simpler meshes which makes inferring size and axis much easier. I think I get what you_t_re saying now dad72. If you could just parent those alternate meshes to the true mesh or bones it should all work together. Is this not supported in babylon right now?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The capsule shape is straightforward after that. I should be able to use the triangle mesh shape from bullet to create the hills you are talking about but we might want to consider using the height field terrain shape since I imagine its much more performant._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think the only other part is to export rigid body constraints from blender as well._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-07-04T12:51:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Here_t_s how it works_co_ which is I think the best ways. This is a video that explains how it works. The video is very interesting to understand what I mean._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//unity3d.com/learn/tutorials/modules/beginner/physics/colliders_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//unity3d.com/learn/tutorials/modules/beginner/physics/colliders_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_And this. The impostor for character movement. (rigidBody)_lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-07-04T23:24:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Oh interesting. It looks like Unity has a collada exporter (sold separately $20) that supports physics. Does it make sense to just create a collada -&gt_sm_ babylon converter that supports physics? You know_co_ use collada for it_t_s true purpose._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I like the controls and visualization of physics in Unity much better than Blender. BTW the free version of unity can open .blend files._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-07-04T23:49:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Oh I didn_t_t realize that. _dd_-/ hmm there_t_s a lot to digest here._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-07-05T00:09:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_and export 3ds max also...  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt_I think it_t_s fine to add the impostors with babylon_co_ rather than with blender or 3ds max._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_The ideal would be to make more robust the current physic system which is a very good start_co_ but not enough._lt_/div_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Shannon Poole","Date":"2014-07-05T14:57:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yea I agree with fluffrabbit. The asset creation should be completely separate from the engine. Having worked with asset creators in the past it becomes incredibly difficult to explain anything outside of the tools they are used to. They aren_t_t developers. We shouldn_t_t expect them to be. Their talents lie elsewhere. Unless you are developer and artist then I envy you. I can_t_t do both. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The artists also need a quick way to preview their work in game. This means straight export -&gt_sm_ import with no boilerplate. Otherwise they can get bogged down on details and a ton of time is lost transitioning between developer and artist to iron those out._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I also agree that parenting solves a lot of the missing pieces. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I am trying to work with the blender exporter plugin but I am having a difficult time debugging it. Does anyone know if there is an easier way to reload it without having to remove the plugin and add it again every time I make a change? It_t_s quite time consuming. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]