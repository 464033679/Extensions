[{"Owner":"Vousk-prod.","Date":"2014-08-08T17:20:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello_co__lt_/p_gt__lt_p_gt_I understand the principles of registerBeforeRender function_co_ but I_t_m wondering what is the difference and the benefit of doing _lt_/p_gt__lt_p_gt_scene.registerBeforeRender(someStuff)_sm__lt_/p_gt__lt_p_gt_instead of_lt_/p_gt__lt_p_gt_engine.runRenderLoop(function () { _lt_/p_gt__lt_p_gt_    someStuff()_sm__lt_/p_gt__lt_p_gt_    scene.render()_sm__lt_/p_gt__lt_p_gt_}_lt_/p_gt__lt_p_gt_For what kind of situation this function have been added to the framework ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2014-08-08T20:17:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Generally_co_ in a game_co_ you want one engine and multiple scenes. With this method_co_ you won_t_t have to check in your renderloop _dd_ _lt_/p_gt__lt_p_gt_if (scene1.isActive) {} ... is (scene2.isActive) {}..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But if you have only one scene in your project_co_ it_t_s exactly the same._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-08-09T04:06:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_There is also the case where you do not own the renderloop(like if you use the playground for instance)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2014-08-09T10:29:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_co_ thanks for your answers. _lt_/p_gt__lt_p_gt_So_co_ since I already have my own game logic in place_co_ with a very similar registering tasks system in my scenes and engines managers_co_ I have no particular benefit (in terms of performance for instance) using registerBeforeRender in my main _qt_render loop_qt_. Better to call my registered events directly instead of (re)registering them with registerBeforeRender. _lt_/p_gt__lt_p_gt_The flexibility and the whole bunch of available options really make this bloody BJS a truely piece of art_co_ love it !!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-02-20T13:31:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m wondering whether tasks registered with registerBeforeRender() are framerate dependant or not ?_lt_/p_gt__lt_p_gt_For instance if I update camera position in a function sent to registerBeforeRender_co_ the movement speed will be constant whatever the device or be framerate dependant ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-02-20T13:42:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_It depends on the framerate_co_ since this function is called just before rendering that depends on the framerate._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-02-20T13:50:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_That_t_s what I presumed_co_ but there are often smart mechanism I don_t_t notice deeply implemented in the rendering process_co_ better to ask to be sure then _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_Thanks._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-02-20T21:04:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_beforeRender is mostly about code organization_co_ with no performance effect.  There are 2 types of beforeRenders_co_  those registered to the scene &amp_sm_ those registered to an individual mesh.  I am only going to talk about those registered to an individual mesh._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_A mesh beforeRender is much more OO_co_ especially if subclass your mesh.  You can do sophisticated things like have a variable number of _qt_bad guy_qt_ meshes moving around.  Just instance them_co_ then register a beforeRender.  Doing this for each instance in the render loop is extra management code that adds no value_co_ toxic._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you do not subclass your mesh_co_ like if it is coming from a .babylon_co_ then you will need to create a class for your before render_co_ so that you can pass the Mesh to work with in the constructor.  The constructor can do the actual registration though._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You can do things in a beforeRender_co_ like check if the state of has somehow changed_co_ and react.  I am doing this in DIALOG.Panel.  You could put this in render loop too_co_ but a render loop could become a total mess fast.  The only thing a before render might not be able to do is run when visibility _eq_ false_sm__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_beforeRender is a great way to write an extension_co_ because you can have more than 1 per mesh.  So you can have one checking for some state change_co_ and still use the POV extension_co_ which is implemented as a before renderer._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Really_co_ a better question is what is the benefit of having more than a token render loop? It might be good for non-programming types_co_  or learning an experimenting.  The bigger your game_co_ you will start to see that introducing more and more advanced logic becomes difficult to deal with._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-02-20T21:42:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Oooh I didn_t_t know mesh beforeRender existence !!_lt_/p_gt__lt_p_gt_Clearly this is a powerfull tool to keep code simple_co_ well structured and without redondancy. Once again I_t_m astonished by the versatility of BJS ! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wub.png_qt_ alt_eq__qt__dd_wub_dd__qt__gt__lt_/p_gt__lt_p_gt_Thanks for the piece of info JCP !_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-02-22T16:30:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_FYI_co_  I had thought about the need to either subclass a mesh or make a class to hold the before-renderer in order to really use it._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Neither would be required_co_ if the call to the renderer was passed the instance of the mesh it was to work with.  Good news for users of .babylon files.  Made a feature request_co_ here_dd_ _lt_a href_eq__qt_http_dd_//babylonjs.uservoice.com/forums/267546-general/suggestions/7128610-mesh-before-after-render-upgrade_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonjs.uservoice.com/forums/267546-general/suggestions/7128610-mesh-before-after-render-upgrade_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Btw_co_ there is also an after render feature._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-02-22T17:32:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Will be in the next push_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"styxxx","Date":"2015-11-26T03:25:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_How do I use beforeRenderer on meshes (not scenes)? I couldn_t_t find it in the codes or docs._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Convergence","Date":"2015-11-26T06:07:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_72832_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_8426_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt_ data-cite_eq__qt_JCPalmer_qt_ data-ipsquote-timestamp_eq__qt_1424466290_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_You can do sophisticated things like have a variable number of _qt_bad guy_qt_ meshes moving around.  Just instance them_co_ then register a beforeRender. _lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_So I just discovered mesh.registerBeforeRender through this thread_co_ and this was exactly the type of implementation that I was looking for_co_ however it looks like mesh.registerBeforeRender doesn_t_t get called when the mesh is invisible (makes sense_co_ the name is apt)_co_ but then the AI for those invisible creatures stops working. What would be a good solution for that?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_107008_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_8426_qt_ data-ipsquote-username_eq__qt_styxxx_qt_ data-cite_eq__qt_styxxx_qt_ data-ipsquote-timestamp_eq__qt_1448508312_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_How do I use beforeRenderer on meshes (not scenes)? I couldn_t_t find it in the codes or docs._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Just call mesh.registerBeforeRender(function) for every mesh that you want to have this callback_sm__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"styxxx","Date":"2015-11-26T07:33:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks! Seems like instances don_t_t have their own registerBeforeRender. Good to know _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-11-27T03:04:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_For invisible meshes_co_ Babylon.js tries to remove them as soon as possible so the best option should be to still use scene.registerBeforeRender and iterate through your list of invisibles meshes_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]