[{"Owner":"Vousk-prod.","Date":"2015-03-27T12:17:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi everyone_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_On some complex materials (bump+diff+spec)_co_ at certain viewing angles_co_ there are rendering bugs on textures._lt_/p_gt__lt_p_gt_It looks like when viewing at some angles_co_ a shift occurs between the bump map and the diffuse map._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Check this PG _dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1MYQJJ%2355_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1MYQJJ#55_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Look at the object_t_s face facing camera_co_ it_t_s kind of _qt_sharpenly blurred_qt__co_ this is not the correct aspect._lt_/p_gt__lt_p_gt_Then click on the object_co_ it will rotate upside down_co_ and now the same face previously bad rendered is correctly rendered._lt_/p_gt__lt_p_gt_Then move a bit the camera around this face and you_t_ll see a kind of _qt_moiré_qt_ (you_t_ll need a good screen to see it) resulting of the interaction between lights and bump map_co_ where it_t_s sometimes ok and sometimes not. When you manage to see this _qt_moiré_qt__co_ you can stop moving camera_co_ and notice that this comes from the fact that there is one sharp _qt_line_qt_ followed by a blurred _qt_line_qt__co_ then a sharp one_co_ etc..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You can then look all around the object_co_ turned-over or not_co_ to see that at some angles everything is ok_co_ and at other angles their are problems._lt_/p_gt__lt_p_gt_You can also change the specular values (color and power) to change the strongness of the bug and the _qt_moiré_qt_ effect._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I notice this bug for the first time when trying the first BJS implementation of SSAO. Back to that time I thought it was related to SSAO because when deactivating SSAO the bug disappeared_co_ but now the bug is always occuring even with no SSAO activation at all._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ll try with a previous 2.0-beta to check if this was or not an already existing bug before SSAO implentation._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-03-27T14:08:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Urgg_co_ that was a deep quest_co_ BUT here is some (I hope) usefull piece of info _dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_commit _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_488cbb630f24bddc1ae31b547fb13225c30d8882 _lt_/span_gt_(06/12/2014)_co_ _lt_em_gt_babylon.2.0-alpha.js_lt_/em_gt_ _dd_ the bug does not occur !! (but there is an awful lightening problem_co_ a kind of specular light ray going through the scene_co_ and the turned-over object is incorrectly lighted -too dark-)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_next commit _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_d6557f0bdaab3813ff3e7e367ced755c718b44fa _lt_/span_gt_(09/12/2014)_co_ _lt_em_gt_babylon.2.0-alpha.js_lt_/em_gt_ _dd_ the bug appears for the first time (but the other lightening problem is solved)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-03-27T19:16:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_can you provide a quick diff?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_And what about bjs v2.1 ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-03-28T00:13:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The bug is also in 2.1 (since it can be seen in the PG)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What do you mean by _qt_a diff_qt_ ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-03-28T03:48:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_you identified the two commits so you can now do a diff using git and this way it will be easier for me to find what has changed_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-03-29T19:59:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Here are the diffs (hope this dump will be helpfull_co_ wouldn_t_t it have been easier for you to check that directly in your versionning system inside VisualStudio ?) _dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_babylon.engine.ts_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/babylon.engine.ts b/Babylon/babylon.engine.tsindex 4ecb501..52ffb20 100644--- a/Babylon/babylon.engine.ts+++ b/Babylon/babylon.engine.ts@@ -429_co_6 +429_co_7 @@         // States         private _depthCullingState _eq_ new _DepthCullingState()_sm_         private _alphaState _eq_ new _AlphaState()_sm_+        private _alphaMode _eq_ Engine.ALPHA_DISABLE_sm_          // Cache         private _loadedTexturesCache _eq_ new Array&lt_sm_WebGLTexture&gt_sm_()_sm_@@ -551_co_6 +552_co_8 @@             document.addEventListener(_qt_webkitpointerlockchange_qt__co_ this._onPointerLockChange_co_ false)_sm_              this._audioEngine _eq_ new BABYLON.AudioEngine()_sm_++            Tools.Log(_qt_Babylon.js engine (v_qt_ + Engine.Version + _qt_) launched_qt_)_sm_         }          public getAudioEngine()_dd_ AudioEngine {@@ -755_co_7 +758_co_7 @@         }          public flushFramebuffer()_dd_ void {-            this._gl.flush()_sm_+         //   this._gl.flush()_sm_         }          public restoreDefaultFramebuffer()_dd_ void {@@ -1203_co_7 +1206_co_6 @@         }          public setAlphaMode(mode_dd_ number)_dd_ void {-             switch (mode) {                 case BABYLON.Engine.ALPHA_DISABLE_dd_                     this.setDepthWrite(true)_sm_@@ -1220_co_6 +1222_co_12 @@                     this._alphaState.alphaBlend _eq_ true_sm_                     break_sm_             }++            this._alphaMode _eq_ mode_sm_+        }++        public getAlphaMode()_dd_ number {+            return this._alphaMode_sm_         }          public setAlphaTesting(enable_dd_ boolean)_dd_ void {_lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_babylon.standardMaterial.ts_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Materials/babylon.standardMaterial.ts b/Babylon/Materials/babylon.standardMaterial.tsindex 967e263..cc67d9c 100644--- a/Babylon/Materials/babylon.standardMaterial.ts+++ b/Babylon/Materials/babylon.standardMaterial.ts@@ -486_co_7 +486_co_7 @@             if (this.bumpTexture &amp_sm_&amp_sm_ scene.getEngine().getCaps().standardDerivatives &amp_sm_&amp_sm_ BABYLON.StandardMaterial.BumpTextureEnabled) {                 this._effect.setTexture(_qt_bumpSampler_qt__co_ this.bumpTexture)_sm_ -                this._effect.setFloat2(_qt_vBumpInfos_qt__co_ this.bumpTexture.coordinatesIndex_co_ this.bumpTexture.level)_sm_+                this._effect.setFloat2(_qt_vBumpInfos_qt__co_ this.bumpTexture.coordinatesIndex_co_ 1.0 / this.bumpTexture.level)_sm_                 this._effect.setMatrix(_qt_bumpMatrix_qt__co_ this.bumpTexture.getTextureMatrix())_sm_             } _lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_babylon.standardProceduralTexture.ts_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Materials/textures/Procedurals/babylon.standardProceduralTexture.ts b/Babylon/Materials/textures/Procedurals/babylon.standardProceduralTexture.tsindex f5a7391..cb8ed60 100644--- a/Babylon/Materials/textures/Procedurals/babylon.standardProceduralTexture.ts+++ b/Babylon/Materials/textures/Procedurals/babylon.standardProceduralTexture.ts@@ -40_co_6 +40_co_7 @@         private _alpha_dd_ number _eq_ 0.0_sm_         private _autoGenerateTime_dd_ boolean _eq_ true_sm_         private _fireColors_dd_ BABYLON.Color3[]_sm_+        private _alphaThreshold_dd_ number _eq_ 0.5_sm_          constructor(name_dd_ string_co_ size_dd_ number_co_ scene_dd_ Scene_co_ fallbackTexture?_dd_ Texture_co_ generateMipMaps?_dd_ boolean) {             super(name_co_ size_co_ _qt_fire_qt__co_ scene_co_ fallbackTexture_co_ generateMipMaps)_sm_@@ -59_co_6 +60_co_7 @@             this.setColor3(_qt_c4_qt__co_ this._fireColors[3])_sm_             this.setColor3(_qt_c5_qt__co_ this._fireColors[4])_sm_             this.setColor3(_qt_c6_qt__co_ this._fireColors[5])_sm_+            this.setFloat(_qt_alphaThreshold_qt__co_ this._alphaThreshold)_sm_         }          public render(useCameraPostProcess?_dd_ boolean) {@@ -194_co_74 +196_co_64 @@     }      export class GrassProceduralTexture extends ProceduralTexture {+        private _grassColors_dd_ BABYLON.Color3[]_sm_         private _herb1_dd_ BABYLON.Color3 _eq_ new BABYLON.Color3(0.29_co_ 0.38_co_ 0.02)_sm_         private _herb2_dd_ BABYLON.Color3 _eq_ new BABYLON.Color3(0.36_co_ 0.49_co_ 0.09)_sm_         private _herb3_dd_ BABYLON.Color3 _eq_ new BABYLON.Color3(0.51_co_ 0.6_co_ 0.28)_sm_-        private _dirt_dd_ BABYLON.Color3 _eq_ new BABYLON.Color3(0.6_co_ 0.46_co_ 0.13)_sm_-        private _ground_dd_ BABYLON.Color3 _eq_ new BABYLON.Color3(1_co_ 1_co_ 1)_sm_+        private _dirtColor_dd_ BABYLON.Color3 _eq_ new BABYLON.Color3(0.6_co_ 0.46_co_ 0.13)_sm_+        private _groundColor_dd_ BABYLON.Color3 _eq_ new BABYLON.Color3(1_co_ 1_co_ 1)_sm_          constructor(name_dd_ string_co_ size_dd_ number_co_ scene_dd_ Scene_co_ fallbackTexture?_dd_ Texture_co_ generateMipMaps?_dd_ boolean) {             super(name_co_ size_co_ _qt_grass_qt__co_ scene_co_ fallbackTexture_co_ generateMipMaps)_sm_-            this.updateShaderUniforms()_sm_-            this.refreshRate _eq_ 0_sm_-        } -        public updateShaderUniforms() {-            this.setColor3(_qt_herb1_qt__co_ this._herb1)_sm_-            this.setColor3(_qt_herb2_qt__co_ this._herb2)_sm_-            this.setColor3(_qt_herb3_qt__co_ this._herb2)_sm_-            this.setColor3(_qt_dirt_qt__co_ this._dirt)_sm_-            this.setColor3(_qt_ground_qt__co_ this._ground)_sm_-        }--        public get herb1()_dd_ BABYLON.Color3 {-            return this._herb1_sm_-        }+            this._grassColors _eq_ [+                new BABYLON.Color3(0.29_co_ 0.38_co_ 0.02)_co_+                new BABYLON.Color3(0.36_co_ 0.49_co_ 0.09)_co_+                new BABYLON.Color3(0.51_co_ 0.6_co_ 0.28)_co_+            ]_sm_ -        public set herb1(value_dd_ BABYLON.Color3) {-            this._herb1 _eq_ value_sm_             this.updateShaderUniforms()_sm_+            this.refreshRate _eq_ 0_sm_         } -        public get herb2()_dd_ BABYLON.Color3 {-            return this._herb2_sm_-        }--        public set herb2(value_dd_ BABYLON.Color3) {-            this._herb2 _eq_ value_sm_-            this.updateShaderUniforms()_sm_+        public updateShaderUniforms() {+            this.setColor3(_qt_herb1_qt__co_ this._grassColors[0])_sm_+            this.setColor3(_qt_herb2_qt__co_ this._grassColors[1])_sm_+            this.setColor3(_qt_herb3_qt__co_ this._grassColors[2])_sm_+            this.setColor3(_qt_dirt_qt__co_ this._dirtColor)_sm_+            this.setColor3(_qt_ground_qt__co_ this._groundColor)_sm_         } -        public get herb3()_dd_ BABYLON.Color3 {-            return this._herb3_sm_+        public get grassColors()_dd_ BABYLON.Color3[] {+            return this._grassColors_sm_         } -        public set herb3(value_dd_ BABYLON.Color3) {-            this._herb3 _eq_ value_sm_+        public set grassColors(value_dd_ BABYLON.Color3[]) {+            this._grassColors _eq_ value_sm_             this.updateShaderUniforms()_sm_         } -        public get dirt()_dd_ BABYLON.Color3 {-            return this._dirt_sm_+        public get dirtColor()_dd_ BABYLON.Color3 {+            return this._dirtColor_sm_         } -        public set dirt(value_dd_ BABYLON.Color3) {-            this._dirt _eq_ value_sm_+        public set dirtColor(value_dd_ BABYLON.Color3) {+            this._dirtColor _eq_ value_sm_             this.updateShaderUniforms()_sm_         } -        public get ground()_dd_ BABYLON.Color3 {-            return this._ground_sm_+        public get groundColor()_dd_ BABYLON.Color3 {+            return this._groundColor_sm_         }          public set ground(value_dd_ BABYLON.Color3) {-            this._ground _eq_ value_sm_+            this.groundColor _eq_ value_sm_             this.updateShaderUniforms()_sm_         }     }      export class RoadProceduralTexture extends ProceduralTexture {-        private _macadamColor_dd_ BABYLON.Color3 _eq_ new BABYLON.Color3(0.53_co_ 0.53_co_ 0.53)_sm_+        private _roadColor_dd_ BABYLON.Color3 _eq_ new BABYLON.Color3(0.53_co_ 0.53_co_ 0.53)_sm_          constructor(name_dd_ string_co_ size_dd_ number_co_ scene_dd_ Scene_co_ fallbackTexture?_dd_ Texture_co_ generateMipMaps?_dd_ boolean) {             super(name_co_ size_co_ _qt_road_qt__co_ scene_co_ fallbackTexture_co_ generateMipMaps)_sm_@@ -270_co_15 +262_co_15 @@         }          public updateShaderUniforms() {-            this.setColor3(_qt_macadamColor_qt__co_ this._macadamColor)_sm_+            this.setColor3(_qt_roadColor_qt__co_ this._roadColor)_sm_         } -        public get macadamColor()_dd_ BABYLON.Color3 {-            return this._macadamColor_sm_+        public get roadColor()_dd_ BABYLON.Color3 {+            return this._roadColor_sm_         } -        public set macadamColor(value_dd_ BABYLON.Color3) {-            this._macadamColor _eq_ value_sm_+        public set roadColor(value_dd_ BABYLON.Color3) {+            this._roadColor _eq_ value_sm_             this.updateShaderUniforms()_sm_         }     }_lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_babylon.abstractMesh.ts_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Mesh/babylon.abstractMesh.ts b/Babylon/Mesh/babylon.abstractMesh.tsindex adcfa6a..d74aab0 100644--- a/Babylon/Mesh/babylon.abstractMesh.ts+++ b/Babylon/Mesh/babylon.abstractMesh.ts@@ -50_co_6 +50_co_9 @@         public renderOutline _eq_ false_sm_         public outlineColor _eq_ BABYLON.Color3.Red()_sm_         public outlineWidth _eq_ 0.02_sm_+        public renderOverlay _eq_ false_sm_+        public overlayColor _eq_ BABYLON.Color3.Red()_sm_+        public overlayAlpha _eq_ 0.5_sm_         public hasVertexAlpha _eq_ false_sm_         public useVertexColors _eq_ true_sm__lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_babylon.mesh.ts_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Mesh/babylon.mesh.ts b/Babylon/Mesh/babylon.mesh.tsindex 934f350..752e0b4 100644--- a/Babylon/Mesh/babylon.mesh.ts+++ b/Babylon/Mesh/babylon.mesh.ts@@ -526_co_6 +526_co_7 @@             if (this.renderOutline) {                 engine.setDepthWrite(false)_sm_                 scene.getOutlineRenderer().render(subMesh_co_ batch)_sm_+                engine.setDepthWrite(savedDepthWrite)_sm_             }              effectiveMaterial._preBind()_sm_@@ -571_co_6 +572_co_14 @@                 engine.setColorWrite(true)_sm_             } +            // Overlay+            if (this.renderOverlay) {+                var currentMode _eq_ engine.getAlphaMode()_sm_+                engine.setAlphaMode(BABYLON.Engine.ALPHA_COMBINE)_sm_+                scene.getOutlineRenderer().render(subMesh_co_ batch_co_ true)_sm_+                engine.setAlphaMode(currentMode)_sm_+            }+             for (callbackIndex _eq_ 0_sm_ callbackIndex &lt_sm_ this._onAfterRenderCallbacks.length_sm_ callbackIndex++) {                 this._onAfterRenderCallbacks[callbackIndex]()_sm_             }_lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_babylon.outlineRenderer.ts_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Rendering/babylon.outlineRenderer.ts b/Babylon/Rendering/babylon.outlineRenderer.tsindex 17221f6..9af7456 100644--- a/Babylon/Rendering/babylon.outlineRenderer.ts+++ b/Babylon/Rendering/babylon.outlineRenderer.ts@@ -8_co_11 +8_co_11 @@             this._scene _eq_ scene_sm_         } -        public render(subMesh_dd_ SubMesh_co_ batch_dd_ _InstancesBatch) {+        public render(subMesh_dd_ SubMesh_co_ batch_dd_ _InstancesBatch_co_ useOverlay_dd_ boolean _eq_ false) {             var scene _eq_ this._scene_sm_             var engine _eq_ this._scene.getEngine()_sm_ -            var hardwareInstancedRendering _eq_ (engine.getCaps().instancedArrays !_eq__eq_ null) &amp_sm_&amp_sm_ (batch.visibleInstances !_eq__eq_ null)_sm_+            var hardwareInstancedRendering _eq_ (engine.getCaps().instancedArrays !_eq__eq_ null) &amp_sm_&amp_sm_ (batch.visibleInstances[subMesh._id] !_eq__eq_ null) &amp_sm_&amp_sm_ (batch.visibleInstances[subMesh._id] !_eq__eq_ undefined)_sm_              if (!this.isReady(subMesh_co_ hardwareInstancedRendering)) {                 return_sm_@@ -22_co_8 +22_co_8 @@             var material _eq_ subMesh.getMaterial()_sm_              engine.enableEffect(this._effect)_sm_-            this._effect.setFloat(_qt_offset_qt__co_ mesh.outlineWidth)_sm_-            this._effect.setColor3(_qt_color_qt__co_ mesh.outlineColor)_sm_+            this._effect.setFloat(_qt_offset_qt__co_ useOverlay ? 0 _dd_ mesh.outlineWidth)_sm_+            this._effect.setColor4(_qt_color_qt__co_ useOverlay ? mesh.overlayColor _dd_ mesh.outlineColor_co_ useOverlay ? mesh.overlayAlpha _dd_ 1.0)_sm_             this._effect.setMatrix(_qt_viewProjection_qt__co_ scene.getTransformMatrix())_sm_              // Bones@@ -41_co_7 +41_co_6 @@                 this._effect.setMatrix(_qt_diffuseMatrix_qt__co_ alphaTexture.getTextureMatrix())_sm_             } -             if (hardwareInstancedRendering) {                 mesh._renderWithInstances(subMesh_co_ Material.TriangleFillMode_co_ batch_co_ this._effect_co_ engine)_sm_             } else {_lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_default.fragment.fx_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Shaders/default.fragment.fx b/Babylon/Shaders/default.fragment.fxindex a0d36da..3f17f1d 100644--- a/Babylon/Shaders/default.fragment.fx+++ b/Babylon/Shaders/default.fragment.fx@@ -317_co_9 +317_co_9 @@ mat3 cotangent_frame(vec3 normal_co_ vec3 p_co_ vec2 uv)  vec3 perturbNormal(vec3 viewDir) {-\tvec3 map _eq_ texture2D(bumpSampler_co_ vBumpUV).xyz * vBumpInfos.y_sm_+\tvec3 map _eq_ texture2D(bumpSampler_co_ vBumpUV).xyz_sm_ \tmap _eq_ map * 255. / 127. - 128. / 127._sm_-\tmat3 TBN _eq_ cotangent_frame(vNormalW_co_ -viewDir_co_ vBumpUV)_sm_+\tmat3 TBN _eq_ cotangent_frame(vNormalW * vBumpInfos.y_co_ -viewDir_co_ vBumpUV)_sm_ \treturn normalize(TBN * map)_sm_ } #endif_lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_fire.fragment.fx_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Shaders/fire.fragment.fx b/Babylon/Shaders/fire.fragment.fxindex 8757789..3e54547 100644--- a/Babylon/Shaders/fire.fragment.fx+++ b/Babylon/Shaders/fire.fragment.fx@@ -11_co_7 +11_co_7 @@ uniform vec3 c5_sm_ uniform vec3 c6_sm_ uniform vec2 speed_sm_ uniform float shift_sm_-uniform float alpha_sm_+uniform float alphaThreshold_sm_  varying vec2 vUV_sm_ @@ -40_co_5 +40_co_8 @@ void main() { \tfloat q _eq_ fbm(p - iGlobalTime * 0.1)_sm_ \tvec2 r _eq_ vec2(fbm(p + q + iGlobalTime * speed.x - p.x - p.y)_co_ fbm(p + q - iGlobalTime * speed.y))_sm_ \tvec3 c _eq_ mix(c1_co_ c2_co_ fbm(p + r)) + mix(c3_co_ c4_co_ r.x) - mix(c5_co_ c6_co_ r.y)_sm_-\tgl_FragColor _eq_ vec4(c * cos(shift * vUV.y)_co_ alpha)_sm_+\tvec3 color _eq_ c * cos(shift * vUV.y)_sm_+\tfloat luminance _eq_ dot(color.rgb_co_ vec3(0.3_co_ 0.59_co_ 0.11))_sm_++\tgl_FragColor _eq_ vec4(color_co_ luminance * alphaThreshold + (1.0 - alphaThreshold))_sm_ }\\ No newline at end of file_lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_outline.fragment.fx_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Shaders/outline.fragment.fx b/Babylon/Shaders/outline.fragment.fxindex 95198b5..fc6b047 100644--- a/Babylon/Shaders/outline.fragment.fx+++ b/Babylon/Shaders/outline.fragment.fx@@ -1_co_6 +1_co_6 @@ ﻿precision highp float_sm_ -uniform vec3 color_sm_+uniform vec4 color_sm_  #ifdef ALPHATEST varying vec2 vUV_sm_@@ -13_co_5 +13_co_5 @@ void main(void) { \t\tdiscard_sm_ #endif -\tgl_FragColor _eq_ vec4(color_co_ 1.)_sm_+\tgl_FragColor _eq_ color_sm_ }\\ No newline at end of file_lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_road.fragment.fx_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Shaders/road.fragment.fx b/Babylon/Shaders/road.fragment.fxindex 7bfdf3b..3efaed1 100644--- a/Babylon/Shaders/road.fragment.fx+++ b/Babylon/Shaders/road.fragment.fx@@ -3_co_7 +3_co_7 @@ precision highp float_sm_ #endif  varying vec2 vUV_sm_                    -uniform vec3 macadamColor_sm_+uniform vec3 roadColor_sm_  float rand(vec2 n) { \treturn fract(cos(dot(n_co_ vec2(12.9898_co_ 4.1414))) * 43758.5453)_sm_@@ -27_co_6 +27_co_6 @@ float fbm(vec2 n) {  void main(void) { \tfloat ratioy _eq_ mod(gl_FragCoord.y * 100.0 _co_ fbm(vUV * 2.0))_sm_-\tvec3 color _eq_ macadamColor * ratioy_sm_+\tvec3 color _eq_ roadColor * ratioy_sm_ \tgl_FragColor _eq_ vec4(color_co_ 1.0)_sm_ }\\ No newline at end of file_lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_babylon.tools.ts_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Tools/babylon.tools.ts b/Babylon/Tools/babylon.tools.tsindex 6f1ffdb..95532b8 100644--- a/Babylon/Tools/babylon.tools.ts+++ b/Babylon/Tools/babylon.tools.ts@@ -619_co_6 +619_co_9 @@         private static _MessageLogLevel _eq_ 1_sm_         private static _WarningLogLevel _eq_ 2_sm_         private static _ErrorLogLevel _eq_ 4_sm_+        private static _LogCache _eq_ _qt__qt__sm_++        public static OnNewCacheEntry_dd_ (entry_dd_ string) _eq_&gt_sm_ void_sm_          static get NoneLogLevel()_dd_ number {             return Tools._NoneLogLevel_sm_@@ -640_co_11 +643_co_19 @@             return Tools._MessageLogLevel | Tools._WarningLogLevel | Tools._ErrorLogLevel_sm_         } +        private static _AddLogEntry(entry_dd_ string) {+            Tools._LogCache _eq_ entry + Tools._LogCache_sm_++            if (Tools.OnNewCacheEntry) {+                Tools.OnNewCacheEntry(entry)_sm_+            }+        }+         private static _FormatMessage(message_dd_ string)_dd_ string {             var padStr _eq_ i _eq_&gt_sm_ (i &lt_sm_ 10) ? _qt_0_qt_ + i _dd_ _qt__qt_ + i_sm_              var date _eq_ new Date()_sm_-            return _qt_BJS - [_qt_ + padStr(date.getHours()) + _qt__dd__qt_ + padStr(date.getMinutes()) + _qt__dd__qt_ + padStr(date.getSeconds()) + _qt_]_dd_ _qt_ + message_sm_+            return _qt_[_qt_ + padStr(date.getHours()) + _qt__dd__qt_ + padStr(date.getMinutes()) + _qt__dd__qt_ + padStr(date.getSeconds()) + _qt_]_dd_ _qt_ + message_sm_         }          public static Log_dd_ (message_dd_ string) _eq_&gt_sm_ void _eq_ Tools._LogEnabled_sm_@@ -653_co_7 +664_co_11 @@             // nothing to do         }         private static _LogEnabled(message_dd_ string)_dd_ void {-            console.log(Tools._FormatMessage(message))_sm_+            var formattedMessage _eq_ Tools._FormatMessage(message)_sm_+            console.log(_qt_BJS - _qt_ + formattedMessage)_sm_++            var entry _eq_ _qt_&lt_sm_div style_eq__t_color_dd_white_t_&gt_sm__qt_ + formattedMessage + _qt_&lt_sm_/div&gt_sm_&lt_sm_br&gt_sm__qt__sm_+            Tools._AddLogEntry(entry)_sm_         }          public static Warn_dd_ (message_dd_ string) _eq_&gt_sm_ void _eq_ Tools._WarnEnabled_sm_@@ -662_co_7 +677_co_11 @@             // nothing to do         }         private static _WarnEnabled(message_dd_ string)_dd_ void {-            console.warn(Tools._FormatMessage(message))_sm_+            var formattedMessage _eq_ Tools._FormatMessage(message)_sm_+            console.warn(_qt_BJS - _qt_ + formattedMessage)_sm_++            var entry _eq_ _qt_&lt_sm_div style_eq__t_color_dd_orange_t_&gt_sm__qt_ + formattedMessage + _qt_&lt_sm_/div&gt_sm_&lt_sm_br&gt_sm__qt__sm_+            Tools._AddLogEntry(entry)_sm_         }          public static Error_dd_ (message_dd_ string) _eq_&gt_sm_ void _eq_ Tools._ErrorEnabled_sm_@@ -671_co_7 +690_co_15 @@             // nothing to do         }         private static _ErrorEnabled(message_dd_ string)_dd_ void {-            console.error(Tools._FormatMessage(message))_sm_+            var formattedMessage _eq_ Tools._FormatMessage(message)_sm_+            console.error(_qt_BJS - _qt_ + formattedMessage)_sm_++            var entry _eq_ _qt_&lt_sm_div style_eq__t_color_dd_red_t_&gt_sm__qt_ + formattedMessage + _qt_&lt_sm_/div&gt_sm_&lt_sm_br&gt_sm__qt__sm_+            Tools._AddLogEntry(entry)_sm_+        }++        public static get LogCache()_dd_ string {+            return Tools._LogCache_sm_         }          public static set LogLevels(level_dd_ number) {_lt_/pre_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_babylon.sound.ts_lt_/strong_gt__lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_diff --git a/Babylon/Audio/babylon.sound.ts b/Babylon/Audio/babylon.sound.tsindex d439a50..667e4d8 100644--- a/Babylon/Audio/babylon.sound.ts+++ b/Babylon/Audio/babylon.sound.ts@@ -1_co_31 +1_co_60 @@﻿module BABYLON {     export class Sound {         private _audioBuffer_sm_-        public distanceMax_dd_ number _eq_ 10_sm_+        public maxDistance_dd_ number _eq_ 10_sm_         public autoplay_dd_ boolean _eq_ false_sm_         public loop_dd_ boolean _eq_ false_sm_         private _position_dd_ Vector3 _eq_ Vector3.Zero()_sm_-        private _orientation_dd_ Vector3 _eq_ Vector3.Zero()_sm_+        private _direction_dd_ Vector3 _eq_ Vector3.Zero()_sm_         private _volume_dd_ number_sm_         private _currentVolume_dd_ number_sm_         private _isLoaded_dd_ boolean _eq_ false_sm_         private _isReadyToPlay_dd_ boolean _eq_ false_sm_+        private _isPlaying_dd_ boolean _eq_ false_sm_+        private _isDirectional_dd_ boolean _eq_ false_sm_         private _audioEngine_dd_ BABYLON.AudioEngine_sm_         private _readyToPlayCallback_sm_         private _soundSource_dd_ AudioBufferSourceNode_sm_         private _soundPanner_dd_ PannerNode_sm_+        // Used if you_t_d like to create a directional sound.+        // If not set_co_ the sound will be omnidirectional+        private _coneInnerAngle_dd_ number _eq_ null_sm_+        private _coneOuterAngle_dd_ number _eq_ null_sm_+        private _coneOuterGain_dd_ number _eq_ null_sm_         constructor(url_dd_ string_co_ engine_dd_ BABYLON.Engine_co_ readyToPlayCallback_co_ distanceMax?_dd_ number_co_ autoplay?_dd_ boolean_co_ loop?_dd_ boolean) {             this._audioEngine _eq_ engine.getAudioEngine()_sm__sm_             this._readyToPlayCallback _eq_ readyToPlayCallback_sm_-            if (distanceMax) this.distanceMax _eq_ distanceMax_sm_-            if (autoplay) this.autoplay _eq_ autoplay_sm_-            if (loop) this.loop _eq_ loop_sm_+            if (distanceMax) { this.maxDistance _eq_ distanceMax_sm_ }+            if (autoplay) { this.autoplay _eq_ autoplay_sm_ }+            if (loop) { this.loop _eq_ loop_sm_ }             if (this._audioEngine.canUseWebAudio) {                 BABYLON.Tools.LoadFile(url_co_ (data) _eq_&gt_sm_ { this._soundLoaded(data)_sm_ }_co_ null_co_ null_co_ true)_sm_             }         }+        /**+        * Transform this sound into a directional source+        * @param coneInnerAngle Size of the inner cone in degree+        * @param coneOuterAngle Size of the outer cone in degree+        * @param coneOuterGain Volume of the sound outside the outer cone (between 0.0 and 1.0)+        */+        public setDirectionalCone(coneInnerAngle_dd_ number_co_ coneOuterAngle_dd_ number_co_ coneOuterGain_dd_ number) {+            if (coneOuterAngle &lt_sm_ coneInnerAngle) {+                BABYLON.Tools.Error(_qt_setDirectionalCone()_dd_ outer angle of the cone must be superior or equal to the inner angle._qt_)_sm_+                return_sm_+            }+            this._coneInnerAngle _eq_ coneInnerAngle_sm_+            this._coneOuterAngle _eq_ coneOuterAngle_sm_+            this._coneOuterGain _eq_ coneOuterGain_sm_+            this._isDirectional _eq_ true_sm_++            if (this._isPlaying &amp_sm_&amp_sm_ this.loop) {+                this.stop()_sm_+                this.play()_sm_+            }+        }+         public setPosition(newPosition_dd_ Vector3) {             this._position _eq_ newPosition_sm_@@ -34_co_11 +63_co_12 @@             }         }-        public setOrientiation(newOrientation_dd_ Vector3) {-            this._orientation _eq_ newOrientation_sm_+        public setDirection(newDirection_dd_ Vector3) {+            this._direction _eq_ newDirection_sm_             if (this._isReadyToPlay) {-                this._soundPanner.setOrientation(this._orientation.x_co_ this._orientation.y_co_ this._orientation.z)_sm_+                console.log(this._direction.x + _qt_ _qt_ + this._direction.y + _qt_ _qt_ + this._direction.z)_sm_+                this._soundPanner.setOrientation(this._direction.x_co_ this._direction.y_co_ this._direction.z)_sm_             }         }@@ -48_co_14 +78_co_23 @@                 this._soundSource.buffer _eq_ this._audioBuffer_sm_                 this._soundPanner _eq_ this._audioEngine.audioContext.createPanner()_sm_                 this._soundPanner.setPosition(this._position.x_co_ this._position.y_co_ this._position.z)_sm_+                //this._soundPanner.maxDistance _eq_ this.maxDistance_sm_+                if (this._isDirectional) {+                    this._soundPanner.coneInnerAngle _eq_ this._coneInnerAngle_sm_+                    this._soundPanner.coneOuterAngle _eq_ this._coneOuterAngle_sm_+                    this._soundPanner.coneOuterGain _eq_ this._coneOuterGain_sm_+                }                 this._soundPanner.connect(this._audioEngine.masterGain)_sm_                 this._soundSource.connect(this._soundPanner)_sm_                 this._soundSource.loop _eq_ this.loop_sm_                 this._soundSource.start(0)_sm_+                this._isPlaying _eq_ true_sm_             }         }         public stop() {+            this._soundSource.stop(0)_sm_+            this._isPlaying _eq_ false_sm_         }         public pause() {@@ -67_co_6 +106_co_10 @@         private _onRegisterAfterWorldMatrixUpdate(connectedMesh_dd_ BABYLON.AbstractMesh) {             this.setPosition(connectedMesh.position)_sm_+            var mat _eq_ connectedMesh.getWorldMatrix()_sm_+            var direction _eq_ BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(0_co_ 0_co_ -1)_co_ mat)_sm_+            direction.normalize()_sm_+            this.setDirection(direction)_sm_         }         private _soundLoaded(audioData_dd_ ArrayBuffer) {_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-03-30T20:20:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_i can_t_t see no real reason why things should be different _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-03-30T20:21:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The problem I have to debug is that loading the scene takes ages _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-03-30T20:21:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Could you try to provide a simple repro without external objects?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-03-30T22:44:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_co_ I_t_ll provide a repro case without external objects. I_t_m not sure whether the bug is visible or not with primitive meshes_co_ I kind of noticed that it_t_s easier to spot with a soft surface_co_ like a rounded cube. Maybe with the new ribbon mesh_co_ or the cat (if UVs sets are correctly mapped). Will try that tomorrow._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_BTW_co_ I_t_m surprised scene loading takes ages. I know the file is big (3.5MB) but the server should be pretty reachable (french university global subnet) and there is a manifest file_co_ the .babylon should be loaded only once_co_ at first_co_ and then be locally stored in indexDB_co_ isn_t_t it the case ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_(Anyway_co_ I will do a simpler PG)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-03-31T00:42:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m living on west coast USA and I think you_t_re in France so this is far from me _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-03-31T06:56:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey Vousk_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ve been looking into your problem and here is my conclusion_dd_ there is no bug with BJS bump mapping_co_ the problem lies in your diffuse and bump textures. (Sorry in advance if I_t_m wrong and blatantly accused your work for no reason!!)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Here is a PG with your example_co_ with the debug layer shown and the model scaled up (to be able to zoom more)_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1MYQJJ%2356_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1MYQJJ#56_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Now try to disable diffuse and bump textures with the debug layer_co_ one after the other. i don_t_t know what your intent was_co_ but these two textures look very similar and though are not really matching in resolution. Also_co_ the diffuse texture is actually a kind of precomputed bump texture_co_ which conflicts with the real-time computed one. This means that under certain lighting conditions_co_ the two motifs will overlap and create a kind of _qt_evened out_qt_ mess._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In the diff you posted there is a clear modification on the way bump mapping is computed_co_ so I thought this was where the problem came from. But after tinkering a bit_co_ I couldn_t_t get rid of this weird effect. Plus_co_ when the diffuse texture is disabled_co_ the bump effect looks absolutely normal._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I hope this will help you. My advice would be to redo your diffuse texture in a way that it holds only color information and no relief at all. What is called _t_albedo_t_ in Physics Based Rendering systems (let_t_s get prepared for the future_co_ shall we? _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ )_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-03-31T10:43:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thank you jahow for diving into that problem! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_And you_t_re totaly right on every point you mention  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_cool.png_qt_ alt_eq__qt_B)_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_- My diffuse tex and bump tex are not same resolution_co_ the reason is simple _dd_ the bump tex will be loaded once and reused for all materials_co_ whereas there will be one diffuse texture for each _qt_color_qt__co_ so the bump one is 512px and all the diffuses are 256px (or less). But I_t_ve never had problem with that in the different game engines I used to deal with. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_unsure.png_qt_ alt_eq__qt__dd_unsure_dd__qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_- Yep_co_ albedo is what some shader tools recommend_co_ but unfortunatly in most real cases it_t_s not applicable. You have to bake the bump just a little into the diffuse to add realism_co_ to ensure your objects to be visually ok in every situation. Why ? For (at least) three reasons _dd__lt_/p_gt__lt_p_gt_1. with bump map only_co_ few illuminated area immediatly looks fake (because of no details anymore)_lt_/p_gt__lt_p_gt_2. the diffuse enforce drasticaly the visual effect of the bump without the need of increasing bump deepness - increasing this value always results in awful artifacts_co_ unrealistic specular dots -_lt_/p_gt__lt_p_gt_3. the diffuse here simulate the physical _qt_dirt_qt_ fact_co_ for instance for this material_co_ disable the diffuse map and you_t_ll not be able to recognise what kind of material it is_co_ enable it and you start recognising it_t_s leather (you only _qt_start recognising_qt_ because I simplified the material for the PG debug_co_ it lacks proper specular_co_ a little fresnel_co_ etc)_lt_/p_gt__lt_p_gt_To be able to use only color in diffuse map_co_ we need to draw those _qt_dirt_qt_ area in the lightmap (except for shader using also a dirtmap)_co_ but once again for many reason it_t_s almost always impossible. Usually_co_ the lightmap is on a different UV set than diffuse_co_ a well defined diffuse will be tiled_co_ a lightmap never. For perfs reasons we need not too high resolution textures_co_ resulting in limited area to draw the whole object_t_s surface_co_ that means less precision for each poly in the ligthmap (no problem at all for lightmapping_co_ it_t_s even sometimes very convenient because it kind of auto smooths the shadows)_co_ but this lack of precision make it unusable to draw little details as _qt_bump dirtiness_qt_. Also_co_ the lightmap is related to an object (and sometimes even to a group of objects)_co_ so if the object can change its material real time_co_ the lightmap need to be enough generic to work with many different materials (and two different kind of material lead to different way for the surface to get dirty...)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Well_co_ I_t_m not trying to reject your accusations _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_laugh.png_qt_ alt_eq__qt__dd_lol_dd__qt__gt_ _co_ but the current diffuse/bump/lightmap combination I_t_m using is (unfortunatly) mostly the only applicable when realism AND versatilty is required (and that_t_s often the case...)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But I ear you and the fact that you couldn_t_t get rid of the weird effect while tinkering the code. I_t_ll dig into that_co_ create a new PG easier to check_co_ try with same resolution map to see if it_t_s better._lt_/p_gt__lt_p_gt_I think there are some other little details in the BJS rendering of the bump and specular we could discuss. See you later _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-03-31T11:38:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Okay_co_ I understand your choices better. Clearly you_t_ve thought this through and through _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Maybe reproducing the issue with a bump texture that has larger features would make things easier to see?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-03-31T12:43:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yep. I will try different combinations of diffuse/bump and resolutions to obtain the right PG to check._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-03-31T15:05:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_77225_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_13437_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt_ data-cite_eq__qt_Deltakosh_qt_ data-ipsquote-timestamp_eq__qt_1427762546_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_I_t_m living on west coast USA and I think you_t_re in France so this is far from me _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_I was beginning to wonder if you had become a creature of the night_co_ based on your recent post times._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]