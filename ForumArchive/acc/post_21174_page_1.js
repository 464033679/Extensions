[{"Owner":"Carharttguy","Date":"2016-03-14T13:43:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m absolutely new to BabylonJS. I have some basic questions_dd_\n_lt_/p_gt_\n\n_lt_ol_gt__lt_li_gt_\n\t\tIs it true that WebGL is slower than OpenGL? I know that they_t_re the same under the hood_co_ but why does WebGL slower? I can play massive MMORPG_t_s on my laptop in OpenGL_co_ while in WebGL_co_ even a small scene seems to stutter sometimes.\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tI read a little bit on the forum here_co_ and it seems that downsizing the amount of meshes in a scene is always a good idea to improve performance. But what I wonder_co_ does it matter if a mesh is in the scene_co_ or if the mesh is seen by the camera (and thus being rendered). What if I created a an imersive world_co_ but set the maxZ not to far? Will it matter if the world is 10.000 long_co_ or 100.000 long if the camera line of sight is only set to 50?\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tMain reason I_t_m asking is because I_t_m planning on creating a tool that generates imersive worlds (like RPG worlds). I was looking at other game engines_co_ they all have their troubles. But babylonjs attracted me particulary because of the nice community this engine seem to have.\n\t_lt_/li_gt_\n_lt_/ol_gt__lt_p_gt_\n\tThank you for reading (and maybe answering) my questions\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-03-14T17:27:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNo it would not_co_ line of site I imagine you will establish through raycasting so you will be able to establish a _qt_line of site hit_qt_ to in any vector to infinity... You would set up the distance for the line of site validating as true in your raycast return for the position of the ray hit and your cameras position being compared and then seeing if it_t_s true to your set _qt_site range_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tfor your world generation how conpetent are you in 3D noise algorithms and L-system equations?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\talso I have a JavaScript number extension for handling psudo random seeded numbers and accepts ANY value from strings to floats... Blah blah but anyways I can post my class for you because anything like this  that you are thinking of with procedural generation your gonna need a efficient system for seeded randoms.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Carharttguy","Date":"2016-03-15T13:27:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think I didn_t_t made myself clear well enough. Blame it on my bad English. I_t_m not really creating a terrain generator_co_ but more a game generator. Like RealmCrafter was in the past.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor the line of sight_dd_ I figured it out how to create very big scenes_co_ but with a very limited line of sight (and no FPS drop)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI created a small playground_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#Z8QAT_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#Z8QAT_lt_/a_gt__lt_br_gt__lt_br_gt_\n\t10000 boxes generated_co_ at first I get 60 fps_co_ but zooming out and out drops the FPS bit by bit_co_ if I_t_m totally zoomed out I got like 5 FPS.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow the same_co_ but with a maxZ on the camera of 100_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#Z8QAT%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#Z8QAT#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow the camera can fly over the boxes_co_ no FPS drop whatshowever_co_ because only 50 (aprox) boxes are rendered at the same time.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tCheers\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMathias\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-03-15T14:28:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tuse instances instead of many similar meshes _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/How_to_use_Instances_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/How_to_use_Instances_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-03-15T15:34:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou are effectually passing the number of boxes that are visible by the camera to the draw stack so if you can see 1000 cubes you are making a 1000 draw calls._lt_br_gt__lt_br_gt_\n\tNow your job as a developer is to get these calls down to a minimum while keeping the mesh diversity that you would need.  This is by constructing more complex draw calls and duplicating objects to the stack in the form of instances (can have a different position than the initial object) or copys (have more dynamically editable like material and other physic properties)_lt_br_gt__lt_br_gt_\n\tEach time you use an instance or a copy the stack _qt_reuses_qt_ the original objects information and saves on draw calls.  The secondary method you will need to deploy is to combine separate meshes into a single draw buffer and pass that compound buffer to the draw stack and not the independent objects._lt_br_gt__lt_br_gt_\n\tThis will increase your fps dramatically\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]