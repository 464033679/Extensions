[{"Owner":"reddozen","Date":"2014-05-21T15:36:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_What about subdividing the image into a bunch of smaller terrain pieces within Babylon before the terrain is created_co_ then use something like the tag system to keep them together so it could all be translated together... This wouldn_t_t have to effect the geometry. you could use the same calculated triangles. You would just have some minor vertex duplication at the seam. This could also help with the LOD system planned later making it easier to stitch in the lower detail pieces (could probably even have an optional value on the function to define number of LOD segments_co_ and create them all at the same time). Then maybe you don_t_t have to go over every triangle of a huge terrain to calculate impacts. Would probably have to tie that into the octree support to make sure that you weren_t_t looking at every ground _qt_tile_qt__co_ but I would imagine that you would have to do that for LOD support anyway._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It all makes since in my head anyway..._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"gwenael","Date":"2014-05-21T15:56:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Nice to read how the tags system may be used _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ahom","Date":"2014-05-23T15:01:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co__lt_br_gt__lt_br_gt_Firstly_co_ thank you for this great library! I finally found what I was looking for in babylon as a WebGL js library._lt_br_gt__lt_br_gt_Secondly_co_ what would be pretty nice to have is_dd__lt_br_gt_ _lt_/p_gt__lt_ol_gt__lt_li_gt_Handling of DDS files other than compressed types_co_ at least the RGB/A handled by WebGL_co_ _lt_strong_gt_gl.UNSIGNED_BYTE/_lt_/strong_gt__lt_strong_gt_gl.UNSIGNED_SHORT_5_6_5/_lt_/strong_gt__lt_strong_gt_gl.UNSIGNED_SHORT_4_4_4_4/_lt_/strong_gt__lt_strong_gt_gl.UNSIGNED_SHORT_5_5_5_1._lt_/strong_gt__lt_strong_gt_ _lt_/strong_gt_(I might just PR it next week when I_t_ll work on my fork)_lt_/li_gt_\t_lt_li_gt_Being able to upload different textures at a given offset/size to the same texture via _lt_strong_gt_compressed/texSubImage2D_lt_/strong_gt_. In my case I don_t_ t control the assets and I need to do this in order to skin a  mesh from textures with different compression types (DXT)_co_ I could do this offline_co_ but as there are multiple composition configurations I would create lots and lots of textures for this. However_co_ I don_t_t know how much the devs of Babylon would want this in the library_co_ I guess that could just be a new kind of texture that is composed of sub_textures._lt_/li_gt_\t_lt_li_gt_Are there any plans for being able to define vertex attributes from a vertex buffer containing all data (positions/uv/normals/etc..) concatenated? Basically_co_ being able to control type/offset/stride of the vertexAttribPointer call while giving a big Uint8Array containing all the data._lt_/li_gt_\t_lt_li_gt_Lastly_co_ is there a way to modify the mapping of attributes from a normal map or some other textures? Funnily enough sometimes X_co_Y_co_Z components are not always in R_co_G_co_B. I could just write my own shader though._lt_br_gt__lt_br_gt__lt_br_gt_\tThanks for your consideration! And keep up the good work! (From another frenchman (~_t_-_t_)~)_lt_/li_gt__lt_/ol_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2014-05-27T21:11:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_What would be very cool is an easing parameter for BABYLON.InterpolateValueAction (like easings in jQuery UI for instance _lt_a href_eq__qt_http_dd_//api.jqueryui.com/easings/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//api.jqueryui.com/easings/_lt_/a_gt_)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Marco Lebdech","Date":"2014-05-28T09:33:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_as I understand_co_ this is feature-request page. So as We(team) are working on big application in native 3d engine_co_ I am working on exporter to .babylon file for the web-app. As we are loading many scenes_co_ that are not equally structured_co_ we need some sort of variability there. So this is what I found out that I am missing in BJS._lt_/p_gt__lt_p_gt_PS_dd_ I am using 1.11 exported from typescript for now_co_ i dont know if any of things below is already in 1.12..._lt_/p_gt__lt_ol_gt__lt_li_gt_metadata of object in _qt_userData_qt_ property. The best var-type would be Object_co_ as it is the best type for that case. We have so much data saved in unity_co_ which are not exportable into .babylon file for now. It would be simple property of every instantiable object  in file (camera_co_ material_co_ mesh...)_co_ For now we need to provide another file with metadata and it means more http requests_co_ more redundancy in data ( when i want to target specific element ) and parsing multiple files._lt_/li_gt_\t_lt_li_gt_Add _qt_layerMask_qt_ property to Mesh and Camera. To implement layers_co_ that are implemented in 3DSMax. Displayed meshes are these_co_ that have (newScene.activeCamera.layerMask &amp_sm_ mesh.layerMask) &gt_sm_ 0._lt_br_gt_\tI implemented it with adding 6 lines in typescript and added 1 condition (parsing of .babylon file property included)_co_ and saved hours of work on iterating through meshes that i want to have displayed_co_ while having metadata file which defines camera-case-meshes table...._lt_/li_gt__lt_/ol_gt__lt_p_gt_Thanks for reply_co_ if anything is not clear_co_ i will respond through pm..._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-05-28T22:35:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey Marco_co_ you features sound really good. If you already implemented them please make a pull request and I will integrate it into bjs_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Леонтьев Алексей","Date":"2014-06-10T08:00:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Want 2D API for DynamicTexture and select events. Need feature create 2D dashboard._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-06-10T15:50:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The DynamicTexture has a canvas with all canvas API_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.w3schools.com/html/html5_canvas.asp_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.w3schools.com/html/html5_canvas.asp_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jiweigang1","Date":"2014-06-11T05:40:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_i want to  use it to  make 3d text  and  line   _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_laugh.png_qt_ alt_eq__qt__dd_lol_dd__qt__gt_  _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"reddozen","Date":"2014-06-26T14:55:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m not sure why node.js needs to be built in. you can just include it in your project and use the parts that you need..._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-06-27T01:29:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I mentioned this elsewhere_co_ but if here is where all the requests are stored_co_ place a function in Engine that returns a float of the Babylon version &amp_sm_ as well as a convenience function in scene_co_ which calls the one in engine.  The thing about version reporting is that it is always better to be reporting it_co_ before someone needs it._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Pretty minor to implement as well._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-06-27T15:18:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Done with 1.13 _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-07-11T23:53:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_44498_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_3865_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt_ data-cite_eq__qt_Deltakosh_qt_ data-ipsquote-timestamp_eq__qt_1403882333_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Done with 1.13 _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_This is in reference to Version.  Just made my first non-compatible change (override Automaton.prototype.setVerticesData() to capture positions vertex buffer_co_ and grab the data to initialize a persistent Float32Array after call to super)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Working with version is difficult enough_co_ since is does not exist prior to 1.13_co_  but returning as _qt_1.13.0_qt_ is a mess.  Could this not be_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        public static get Version()_dd_ number {            return 1.130_sm_        }_lt_/pre_gt__lt_p_gt_Thanks_co__lt_/p_gt__lt_p_gt_Jeff_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-07-12T15:10:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Fluff_co__lt_/p_gt__lt_p_gt_I do not disagree with anything you said_co_ though I have no opinion on Typescript or DarkBASIC yet.  I am approaching it purely from the _qt_reference in code_qt_ side.  Sometimes_co_ I feel over-complicated versioning is just something for former programmers_co_ now project leaders_co_ to over think._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What is major?  What is minor? Who cares?  Personally_co_ I have a preference for just an integer 1_co_ then 2_co_ then ...  Barring that_co_  whatever route is chosen_co_ e.g. large # of digits or IP address_co_  the API that reports it should break it out into as many parts as is expressed in.  Having to _qt_regex_qt_ the thing before it is usable_co_ discourages its use._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Jeff_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-07-12T16:16:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I know I have been asking for many system tools not new features_co_ but since Javascript has no assert facility_co_ how about a BABYLON.Engine.Debug property set to true for the debug build.  Do not know how tricky this would be to combine this with the build type.  Recently wrote something_co_ where doing through checking of function args would be good in test_co_ whether that be system_co_ or application level using a debug build of a production version.  In deployment_co_ these tests would just slow the system down._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Example use_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_if (BABYLON.Engine.Debug){    if (your failure test here) throw _qt_sorry_co_ you messed up_qt_    . . . }_lt_/pre_gt__lt_p_gt_Of course_co_ you cannot put code in the block that has side effects_co_ but that is the way it is with all implementations of assert._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It would also be good_co_ If the debug build could be as unmodified as possible (comments &amp_sm_ line breaks not stripped).  Pretty print or not_co_  these line end up so long_co_  scrolling in a debugger can make you want to kill yourself.  Saw the suggestion that you could do it yourself_co_ &amp_sm_ I_t_ll get there_co_ but think it would beneficial to be part of the normal build process.  This is not a very manual process (hope)?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_strike_gt_Also saw the options arg to the Engine constructor_co_ but my Javascript is not good enough yet to know to add my own property.  Any help_lt_/strike_gt_.  Thought options was for user defined Javascript properties for Engine_co_ not options passed to webGL engine .  Never mind on this part._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-07-12T16:45:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The version numbers have a sense. It is a standard that has been proven._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_         1            _lt_strong_gt_._lt_/strong_gt_        10           _lt_strong_gt_._lt_/strong_gt_       100_lt_/p_gt__lt_p_gt_major Version _lt_strong_gt_._lt_/strong_gt_ minor version _lt_strong_gt_._lt_/strong_gt_ version fixed_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Named versions 1_co_ 2_co_ 3_co_ 4... has no sense. that is what differentiates the minor version of the major versions or patches._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-07-12T20:27:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Making sense_co_ silly humans! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_   I am not even going to get into the political/marketing influences that seem to ultimately decide what is major or minor._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Let me do this another way then_dd_  There is is a need for a static _lt_strong_gt_function _lt_/strong_gt_from Engine_co_ which will return a number which represents the version.  You can still have the major.minor.fix text version_co_ but the function allows for a check that can be done on 1 line_co_ that is not tortured with all kinds of Number()_co_ split()_co_ replace()_co_ substr() or whatever methods  &amp_sm_ everybody is happy! There is NO need for it to make sense._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If static is not possible_co_ also need a convenience function in Scene_co_ since Engine is rarely passed as an arg.  Thanks!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-07-13T16:01:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hitting 4 billion of anything seems like a bit of high class problem.  Also_co_ not every change to any file or nightly builds need to increment it.  Just production releases_co_ or fixes.  Any developer using beta releases should probably be monitoring boards like this_co_ and weird regressions can also happen in development.  This is primarily for things like features expected that did not exist prior to 1.x.x.  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I even could see something like 1.013999 working_co_ allowing for 999 minor versions &amp_sm_ 999 fixes (think floating point precision handles this).  Probably overkill.  Would someone even consider using something this small that had 1000 fixes between minor releases_co_ or 1000 minor releases in a row?  I would think they were screwed up_co_ and look elsewhere._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Paradine","Date":"2014-07-18T11:12:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_1. Add unified babylon.1.12.d.ts_co_ babylon.1.13-beta.d.ts etc and if possible you could add it to NuGet. It would make life easier for newcomers_co_ who prefer to use typescript._lt_br_gt_2. Add missing .ts and .d.ts for example SceneLoader.ImportMesh does not exist probably because of conflict with filesInput.d.ts file_co_ where class is already defined and typescript does not support partial classes (I think it is good thing)._lt_br_gt_3. +1 support for shapekeys from lipsyncing sample mentioned before on this thread._lt_br_gt_4. Better documentation design for example as here_dd_ _lt_a href_eq__qt_http_dd_//en.cppreference.com/w/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//en.cppreference.com/w/_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-07-18T15:08:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_The documentation should be different for 1.12._lt_/div_gt__lt_br_gt__lt_div_gt_as it is carried out by a member of the community. documentation is not the official._lt_/div_gt__lt_br_gt__lt_div_gt_But I agree that the lack of documentation information. it only shows the classes_co_ members and functions_co_ but does not say what was used and each member function with an example usage for each function and members would be nice._lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-07-18T15:51:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Anyone can help for documentation. Wiki on Github is done for that specific usage_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2014-07-18T16:29:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m sorry_co_ I do what I can on my work time and on my spare time._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Moreover _dd_ _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/5759-exemple-tutoriel-for-new-version/?p_eq_34671_qt__gt_http_dd_//www.html5gamedevs.com/topic/5759-exemple-tutoriel-for-new-version/?p_eq_34671_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_RIght after I think I will be able to _lt_/span_gt__lt_span style_eq__qt_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_fi_lt_/span_gt_nd a budget for writin_lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_g a lot more examples and documentation (Hopefully)_lt_/span_gt__lt_/p_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So wait and see !_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-07-18T17:40:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Thanks Temechon for your time on documentation. I am aware that you made that you can. At least we have a documentation_co_ Even if we would like to have a documentation more complete._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_It is true that Deltakosh had us talking about a possibility of official documentation and budget. What happens to this information?_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_div_gt_Yes Deltakosh_co_ everyone can help_co_ but if everyone create documentation_co_ it is not necessarily well. Should be that everyone can do evolve one that Temechon to do to keep a single documentation and what is hosted on www.babylon.com._lt_/div_gt__lt_/div_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"reddozen","Date":"2014-07-18T20:01:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I think we would be fine letting everyone contribute to the document. Just make it reviewed before posting. make it like editing a post... you can change things in it_co_ and _qt_approve_qt_ or _qt_decline_qt_._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"memomind","Date":"2014-08-01T23:20:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_SALAAM_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have Idea for babylonjs_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_1- make it support .NET platform  as DLL library for ( VB.net_co_ C# Langs  - WinForms_co_ ASP.net_co_ WPF_co_ WinRT_co_ Win8 )_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_thanks_co_ I hope accept this Idea._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Memo._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]