[{"Owner":"jerome","Date":"2015-09-09T15:04:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As some of you (the most curious) asked me why I prefered to implement a dedicated normal computation for the Cylinder_co_ I_t_ll try to explain this with some PG._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Note _dd_ all I_t_ll show here with a ribbon is the same with any mesh built with the same way_co_ it is to say some laces between two pools of vertices (plane_co_ ground_co_ etc). And it only concerns some vertices on the edges (if any)_co_ those belonging to 3 faces only._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Let_t_s go._lt_/p_gt__lt_p_gt_Here is a flat ribbon _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#G6DG0_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#G6DG0_lt_/a_gt__lt_/p_gt__lt_p_gt_As you can see_co_ I used a Jahow_t_s function to show you its normals what are computed with _lt_em_gt_computeNormals_lt_/em_gt_() like for many meshes (all parametric shapes actually)_lt_/p_gt__lt_p_gt_There_t_s nothing mysterious here_co_ right ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Let_t_s have a look to how the ribbon is built _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#G6DG0%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#G6DG0#1_lt_/a_gt__lt_/p_gt__lt_p_gt_There are 3 vertices on each horizontal edge. They are linked by groups of three to construct triangles (faces)_lt_/p_gt__lt_p_gt_Thus there are 4 successive triangles stuck together from left to right. Right ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So the vertex in the middle of the top edge belongs to the 3 first left triangles. The same for the vertex in the middle of the bottom edge._lt_/p_gt__lt_p_gt_The other vertices belong to only one or two triangles._lt_/p_gt__lt_p_gt_Please take the time to check and understand this because this is the key of the mystery !_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Let_t_s now morph a bit this ribbon by giving each vertex a z coordinate value _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#G6DG0%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#G6DG0#2_lt_/a_gt__lt_/p_gt__lt_p_gt_Have accurately a look to each normal. Nothing weird ?_lt_/p_gt__lt_p_gt_Look carefully at the normals on the middle vertices. They aren_t_t the same orientation !_lt_/p_gt__lt_p_gt_Check with real lighting _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#G6DG0%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#G6DG0#3_lt_/a_gt__lt_/p_gt__lt_p_gt_You can also notice the specular isn_t_t _qt_right_qt_ on each plane part of the ribbon._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Why ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Before going further_co_ I will try to explain here how the BJS _lt_em_gt_computeNormals()_lt_/em_gt_ works. I said BJS _lt_em_gt_computeNormal()_lt_/em_gt__co_ but the ThreeJS_t_ one does exactly the same in their algorithm. The differences between the two frameworks are just the way this algo is implemented and what data structures are used _dd_ we chose the less object allocations (low level assignations) and the less passes to focus on performance rather than code elegance here._lt_/p_gt__lt_p_gt_So BJS _lt_em_gt_computeNormals()_lt_/em_gt_ is quite usable in the render loop._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The concept is _dd_ there is a normal vector per vertex._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So how can we compute it ?_lt_/p_gt__lt_p_gt_As we know that a face is a triangle (we just need 3 points in space to define a plane)_co_ this means a face is defined by three vertices_co_ let_t_s call them p1_co_ p2 and p3._lt_/p_gt__lt_p_gt_We can then depict the sides of this triangle by 3 vectors _dd_ p1p2_co_ p2p3 and p1p3._lt_/p_gt__lt_p_gt_Remember your (distant for me) maths courses _dd_ if you calculate the cross product of two vectors_co_ you get another vector orthogonal to the two initial vectors. This means _lt_u_gt_orthogonal to the plane_lt_/u_gt_ defined by these two initial vectors._lt_/p_gt__lt_p_gt_So _lt_em_gt_Cross(p1p2_co_ p2p3)_lt_/em_gt_ will give a vector orthogonal to p1p2 and p2p3. It is to say a vector orthogonal to the triangle_co_ so to the face._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_That is just what _lt_em_gt_computeNormal_lt_/em_gt_s does._lt_/p_gt__lt_p_gt_It iterates on each face of a mesh and compute for each one a cross product and then normalize it._lt_/p_gt__lt_p_gt_Well_co_ until now we just have normals per face_co_ not per vertex._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So _lt_em_gt_computeNormals_lt_/em_gt_ does something more _dd_ it assigns the cross product of a face to each vertex of this face._lt_/p_gt__lt_p_gt_In our example_co_ the (normalized) computed cross product of the triangle p1p2p3 would be the normal of p1_co_ the normal of p2 and the normal of p3._lt_/p_gt__lt_p_gt_Nothing difficult until now._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But remember our ribbon in the PG _dd_ some vertices belong to many faces. So what are their normals ?_lt_/p_gt__lt_p_gt__lt_em_gt_ComputeNormals()_lt_/em_gt_ does another little thing _dd_ if a vertex belongs to several faces_co_ then the sum of the normal vectors of each face is assigned to this vertex_co_ then normalized. This allow to the light reflection to take in account consecutive faces and to usually render a smooth specular between different faces._lt_/p_gt__lt_p_gt_In brief_co_ each face of a common vertex gives its weight in this vertex normal computation._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This works pretty well anywhere in the general case._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Let_t_s go back to our ribbon _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#G6DG0%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#G6DG0#1_lt_/a_gt__lt_/p_gt__lt_p_gt_Let_t_s give each triangle a name from the left to the right _dd_ A_co_ B_co_ C_co_ D_lt_/p_gt__lt_p_gt_And let_t_s give each vertex a number from the left to the right _dd_ v1_co_ v2_co_ v3 for the upper edge and v4_co_ v5_co_ v6 for the lower one._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_09_2015/post-5453-0-20362900-1441974572.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_09_2015/post-5453-0-20362900-1441974572.png_qt_ data-fileid_eq__qt_5048_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-5453-0-20362900-1441974572.png_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Now let_t_s have a look at the vertex v2 (in the middle top) _dd_ v2 belongs to the faces A_co_ B and C._lt_/p_gt__lt_p_gt_Don_t_t go further while you can_t_t see that_co_ just check again._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So v2 is a part a three different faces. Its normal will be the sum of the normals of the faces A_co_ B and C. Right ?_lt_/p_gt__lt_p_gt_As long as A_co_ B and C are aligned on the same plane (the flat ribbon here)_co_ they all have the same normals _dd_ vectors orthogonal to their common plane._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Now_co_ what append if we bend the ribbon _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#G6DG0%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#G6DG0#2_lt_/a_gt_  ?_lt_/p_gt__lt_p_gt_The normal of v2 is still computed by addind the (normalized) normals of the faces A_co_ B and C._lt_/p_gt__lt_p_gt_As A and B are on the same plane (they look like a quad) on the left of v2_co_ they still both have the same normals._lt_/p_gt__lt_p_gt_C is a triangle_co_ on the right of v2_co_ it has its own different normal what is the same than the D one because C and D are on the same plane (looking like another quad)._lt_/p_gt__lt_p_gt_However_co_ the normal of D isn_t_t taken in account in the v2 normal computation because v2 doesn_t_t belong to D. Ok ?_lt_/p_gt__lt_p_gt_Thus_co_ the v2 normal is just the vector sum of A normal_co_ B normal and C normal._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_That_t_s why the v2 normal is oriented to the left of v2 since A and B are on the left of v2._lt_/p_gt__lt_p_gt_That_t_s not a bug. It_t_s only the general way the normals are computed per vertex !_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As A and B look like a quad (AB) and C and D look like another quad (CD)_co_ human eyes (I assume only human beings read this) expect the light reflection to be the same on the AB quad and on the CD quad._lt_/p_gt__lt_p_gt_If C and D weren_t_t a plane quad_co_ you wouldn_t_t have notice something weird. Maybe the same if A and B weren_t_t a plane quad either._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_We just meet here a very particular case _dd_ a vertex common only to 3 faces and these faces belonging to 2 different quads each one on a different plane._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Indeed_co_ if we add several more vertices to this ribbon_co_ what can we see ?  _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#G6DG0%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#G6DG0#4_lt_/a_gt__lt_/p_gt__lt_p_gt_We can see the great majority of the normals are like our eyes expect and the light reflection isn_t_t that weird _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#G6DG0%235_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#G6DG0#5_lt_/a_gt__lt_/p_gt__lt_p_gt_This ribbon is not that big yet_co_ only 100 vertices. Imagine when you use a 10K vertices ribbon_co_ nothing is then noticeable anymore._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Why are all these normals _qt_better_qt_ ?_lt_/p_gt__lt_p_gt_Look back at the wireframe _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#G6DG0%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#G6DG0#4_lt_/a_gt__lt_/p_gt__lt_p_gt_Almost all the vertices belong to an even number of faces (2_co_ 4 or 6) and these faces are then symetric to each other around the concerned vertex. In other words_co_ the normal weights of face of a given vertex balance each other._lt_/p_gt__lt_p_gt_Only the few vertices on the edge belonging only to 3 faces still have the _qt_weird_qt_ normals._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_em_gt_Capice_lt_/em_gt_ ?_lt_/p_gt__lt_p_gt_simple_co_ isn_t_t it. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_&lt_sm_fileStore.core_Emoticons&gt_sm_/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Let_t_s now considerer how many passes and comparisons would necessary to _lt_em_gt_computeNormals_lt_/em_gt_ if it had to check if each triangular face is on the same plane than the successive one (on each side of the triangle)... recursively of course _dd_ is the successive face of the successive face on the same plane and so on ?_lt_/p_gt__lt_p_gt_Let_t_s forget this idea right now._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So what are the possible workarounds to avoid this artifact ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_1 - build a mesh with all vertices belonging to an even number of faces._lt_/p_gt__lt_p_gt_I dislike this idea _dd_ this force the geometry to adjust to the normal computation and could get to have unnecessary extra vertices._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_2 - compute your own normals from the geometry directly (without _lt_em_gt_computeNormals_lt_/em_gt_) if you build your mesh with a predefined known shape._lt_/p_gt__lt_p_gt_This is the solution for some of the BJS built-in fixed mesh types _dd_ plane_co_ ground_co_ sphere_co_ cylinder_co_ box_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_3 - use _lt_em_gt_computeNormals()_lt_/em_gt_ and then_co_ if you know them_co_ just update manually the normals of the concerned vertices_co_ if any._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_4 - use _lt_em_gt_computeNormals()_lt_/em_gt_ and just tolerate this artifact when it rarely appends because it_t_s not easy to notice especially on textured meshes and/or meshes with many vertices._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_5 - use any of your better ideas _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_&lt_sm_fileStore.core_Emoticons&gt_sm_/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Ahiru","Date":"2015-09-09T15:24:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Great - that explains the light-breaking in some plain faces before!! _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks for the great explanation (and that you repaired it- it WAS noticeable)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-11T09:08:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_UP_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For curious (and patient) people who want to understand how _lt_em_gt_computeNormals()_lt_/em_gt_ works and in what particular we can get an artifact _dd_ the first post is now complete _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-11T12:30:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_just added a picture_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Ahiru","Date":"2015-09-11T12:57:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_So_co_ why would we not put one normal in the middle of each face? For example at the median or incenter of each (triangular) face?_lt_/p_gt__lt_p_gt_We would have less normals AND won_t_t face the problems you described above?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-11T13:02:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Maybe because WebGL knows only about vertices and faces_co_ but nothing about the _qt_middle_qt_ of a face ..._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"chg","Date":"2015-09-11T16:03:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Hi Jerome_co_ I think I commented on your quest for better normal generation a long time ago. In the situation described perhaps the answer you are seeking is to work with a mesh representation that supports quads_co_ and compute normals from that_co_ then convert the quads to tris for the GPU._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_I believe this may help gerenally solve the issue described ( ie. option 5 _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ )_lt_/div_gt__lt_br_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-11T16:14:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes probably_lt_/p_gt__lt_p_gt_but changing the mesh representation from triangles to quads is a huge deep refactor of the whole framework. Not sure someone will ever give a try !_lt_/p_gt__lt_p_gt_I don_t_t even know if WebGL supports quads_co_ I_t_m not expert._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Nice option 5 anyway  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_[EDIT] Maybe the problem would still exist even with quads... imagine a vertex belonging to 3 quads (instead of 3 triangles) only_co_ with two of these successive quads in the same plane and the last one in a different plane _dd_ we just shift the problem to another level_co_ maybe more rare than with the triangles. I don_t_t know._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"chg","Date":"2015-09-11T16:21:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_96199_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_17040_qt_ data-ipsquote-username_eq__qt_jerome_qt_ data-cite_eq__qt_jerome_qt_ data-ipsquote-timestamp_eq__qt_1441988071_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Yes probably_lt_/p_gt__lt_p_gt_but changing the mesh representation from triangles to quads is a huge deep refactor of the whole framework. Not sure someone will ever give a try !_lt_/p_gt__lt_p_gt_I don_t_t even know if WebGL supports quads_co_ I_t_m not expert._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Nice option 5 anyway  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_No WebGL does not support quads_co_ you would have to convert each quad into 2 tris after generating normals. But you might say observe the same issue in modelling software if you triangulate a model that uses quads before generating normals..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Regarding your edit... I_t_m not certain what you mean_co_ I don_t_t think your describing the issue I am aware of (no_co_ quads not solve the issue for polygons with 5 sides or more_co_ but I assume this isn_t_t what you mean...)_lt_/p_gt__lt_p_gt_EDIT2_dd_ OK_co_ I figured out what you mean_co_ but I suggest you try that case in a modeller_co_ you get the behaviour I described for the quad case_co_ it_t_s not wrong just it may not be the behaviour you_t_ve decided you want... (there are going to be undesirable cases whatever you do... such as the case of a concave |_| shape which tends to be solved with more tessellation) but thinking about that case imagine a  | _ _ shape you can use the length of the middle _ to control the apparent sharpness of the corner _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-11T16:38:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Imagine 3 quads with the shape of _qt_L_qt_ _dd_ one quad A_co_ another one B above A and the last one C on the right of A._lt_/p_gt__lt_p_gt_There is a vertex belonging to the 3 quads._lt_/p_gt__lt_p_gt_A and B are in the same plane_co_ C is in another plane._lt_/p_gt__lt_p_gt_If we compute the normals per quad_co_ as we currently do per tri_co_ we_t_ve got the same problem. This vertex will be given  _eq_ 2 x Bnormal + 1 x Cnormal (because A and B normal are the same _dd_ coplanar)_lt_/p_gt__lt_p_gt_Now if another plane D is just under B_co_ it_t_s coplanar with A and B._lt_/p_gt__lt_p_gt_But D normals won_t_t be the same than B normals_co_ because of the B vertex common with C. We will find the light reflection weird on the plane ABD._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_[EDIT] fix the schema and the text above _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_DBAC_lt_/pre_gt__lt_p_gt_ABD are coplanar_co_ C is in another plane._lt_/p_gt__lt_p_gt_There is a vertex belonging to A_co_B and C. Its normal is weighted by A_co_ B and C normals if we use the current algo._lt_/p_gt__lt_p_gt_The normals of D vertices aren_t_t modified by C normals because D and C have no common vertices._lt_/p_gt__lt_p_gt_So the normals of B and D vertices aren_t_t colinear although B and D are coplanar _eq_&gt_sm_ weird artifact when looking at the DBA plane._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"chg","Date":"2015-09-11T16:43:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Sorry I edited my comment earlier (see above) after eventually figuring out what you mean (I think) the quad case you describe by the method I have described should wind up looking something like the following ASCII art​_co_ I think this is reasonable behaviour (viewed from the side with normals)_lt_/p_gt__lt_p_gt__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_ \\_|_|_|_lt_/pre_gt_Try to picture it with gouraud shading_co_ the tris that meet at an angle will be shaded as if rounded_co_ while the final tri will be flat... a modeller should give this same behaviour_lt_p_gt_EDIT_dd_ Re-read _qt_This vertex will be given _eq_ 2 x Anormal + 1 x Cnormal (because A and B normal are the same _dd_ coplanar)_qt__co_ if I interpret this to mean you are talking about a vertice that is common to 3 faces_co_ then that the vertex normal is the average of the 3 face normals also would not be something I would consider as a bug... otherwise what would you do for 2 nearly coplanar faces sharing a single vertex? (and when would nearly cease to be nearly such that all faces are averaged?)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-11T17:26:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I just tried to explain the case in the former edited post._lt_/p_gt__lt_p_gt_Not sure it_t_s very clear though_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"chg","Date":"2015-09-11T17:34:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Sorry I also figured out what you meant before seeing your edit/post (doh!) and I amended my post to argue that it_t_s sensible behaviour imho... There are cases for which no sensible shading even exists imagine 3 quads all sharing a single edge and which are at 120 degrees from each other... there simply is no way to smooth shade that! (EDIT_dd_ the word I was looking for here was non-manifold_co_ non-manifold meshes are really the meshes you can_t_t shade with shared vertex normals)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-11T17:41:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_yes_co_ that_t_s it  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"chg","Date":"2015-09-11T17:58:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_96215_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_17040_qt_ data-ipsquote-username_eq__qt_jerome_qt_ data-cite_eq__qt_jerome_qt_ data-ipsquote-timestamp_eq__qt_1441993295_qt__gt__lt_div_gt__lt_p_gt_yes_co_ that_t_s it  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_/div_gt__lt_/blockquote_gt_imagine that as a kind of spiral around a single point_co_ the spiral sharply curves and then quickly becomes much more shallow_co_ when all of that is taken into account (because it all happens around a common vertex) that_t_s why the shallow curvature at that point evens out the sharper curvature... I find it helps to visualise vertex normals as kind of representing a tessellation of the mesh or smoothed surface function_co_ only projected only to current mesh topology (or evaluted only at the vertices of the current mesh)_co_ I don_t_t know if that helps you but I hope it does._lt_p_gt_\nNote_dd_ shading wise this applies more to perpixel light then gouraud per vertex lighting_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-12T07:53:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thank you for all your explanations  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What can we deduct from all of this ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_em_gt_ComputeNormals()_lt_/em_gt_ is a great tool _dd_ it_t_s fast_co_ useful_co_ really usable in the render loop_co_ easy to handle and quite essential if you want to achieve a live morphing. Moreover it fits the great majority of cases in terms of vertex normals._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But it_t_s not magic ... Some cases will have to be treated by another way_co_ one of the 5 options _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ _co_ if you can_t_t tolerate tiny local artifacts _dd_ non-manifold meshes_co_ some isolated vertices_co_ etc_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Punn","Date":"2015-09-27T01:28:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_95871_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_17040_qt_ data-ipsquote-username_eq__qt_jerome_qt_ data-cite_eq__qt_jerome_qt_ data-ipsquote-timestamp_eq__qt_1441811043_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Remember your (distant for me) maths curses _dd_ _lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  Nice spelling mistake - I often curse my math courses_co_ too._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-27T05:50:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_aarff _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_correcting this_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-09-27T13:30:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi guys!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_3 - use computeNormals() and then_co_ if you know them_co_ just update manually the normals of the concerned vertices_co_ if any._lt_/p_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_(#3 of Jerome_t_s 5 possible solves.)  Jerome_co_ what about an optional secondary code-section for computeNormals()?  Can a program/code _lt_u_gt_find_lt_/u_gt_ the mis-computed normals AFTER a standard computeNormals() has completed? _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This add-on/pass2 code would likely bog computeNormals() quite drastically_co_ if it can be done at all.  Essentially_co_ users can choose standard computeNormals() and also have an optional _lt_em_gt_fixAbnormalNormals() _lt_/em_gt_function or flag.  It would automate the _qt_just update manually the normals of the concerned vertices_qt_ part.  Thoughts?  Anyone?  thx._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-27T14:15:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_ve tought about this..._lt_/p_gt__lt_p_gt_but_co_ regardless the performance_co_ what is computationnaly speaking an abnormal normal ? how to define it by a universal rule ?_lt_/p_gt__lt_p_gt_In some cases_co_ we consider it as abnormal_co_ on some other it is perfect for what our eyes expect._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_A rule could be _dd_ if all these facets (triangles) belong to same mesh side (a continuous plane bounded by edges) and this side makes an angle lower than 120° with another similar side_co_ then consider all the normals as the same on each plane/side..._lt_/p_gt__lt_p_gt_aarf but what about the vertices common to the two sides since they can only have one normal each _dd_ the normal of side 1 or of side 2 ? In this case_co_ quickly add on the fly some vertices in the common positions just to hold the missing normals !_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Actually_co_ this is what convertToFlatShaded does afterwards for the whole mesh._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]