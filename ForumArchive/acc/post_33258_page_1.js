[{"Owner":"LV3","Date":"2017-10-05T07:33:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_ I recently started exploring Babylon.js. After a couple days of beginner tutorials I_t_ve noticed that I end up with quite a bit of code boilerplate-ish code to construct a relatively simple scene (camera_co_ skybox_co_ light_co_ a couple objects with materials_co_ some collisions/physics/ray casting). If I continue on my current path and need a scene with lots of objects and interactions_co_ it will become unmanageable. I_t_m curious how those more experienced with the framework handle complex scenes_co_ so please share kindly your methods/suggestions.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ are there any good tutorials/examples for organizing and managing a complex babylon.js scene or strategies for chunking code cleanly?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2017-10-05T08:11:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tHi and welcome to the forum. As a disorganised writer of code I am probably the last person you want answering this question.  However even I end up  sectioning scripts into separate files and putting related files into different folders. Perhaps looking at how Babylon.js is itself organised may help _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/tree/master/src_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/tree/master/src_lt_/a_gt_ . OK these are typescript modules and you may or may not want to use typescript but the same concept can be applied to Javascript coding.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2017-10-05T08:24:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have a feeling this could be an interesting discussion _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tPersonally_co_ I like object-oriented coding_co_ using Typescript. I also think that using the es6 import paradigm to orginize and build your code lets you orginize your dependencies much better. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI like the way angular (the new one) set their directory structure and public APIs - _lt_a href_eq__qt_https_dd_//github.com/angular/angular_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/angular/angular_lt_/a_gt_ _co_ but this is an overkill for most smaller projects. You can_co_ however_co_ learn from them on how to integrate testing frameworks and how to define your modules_co_ if you have any. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere are many ways to write code_co_ many different paradigms. You should find the one suits you the best and make sure you stick to it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDocument your code_co_ for your own good. Coming back to code you wrote a few months ago just to fix something is much easier if you remind yourself what you actually did.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]