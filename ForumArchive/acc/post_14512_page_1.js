[{"Owner":"JCPalmer","Date":"2015-05-14T18:46:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_In my morphing using SIMD testing_co_ i finally switched to using the profiler.  My measurements of deformation CPU are just not reliable.  The Firefox Nightly profiler is kind of messed up though.  I dropped back to my non-SIMD calls_co_ and ran on FireFox 37 to get a base line._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Found that updating positions &amp_sm_ normals was only 0.78% of total CPU used_co_ anyway.  The split between evaluationMeshes &amp_sm_ render was 32.85% &amp_sm_ 55.76%_co_ respectively._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What surprised me is 9.54% of the total cost was in StandardMaterial.isReady()._lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_05_2015/post-8492-0-49589500-1431627928.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_05_2015/post-8492-0-49589500-1431627928_thumb.png_qt_ data-fileid_eq__qt_4264_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-8492-0-49589500-1431627928_thumb.pn_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_Going to Babylon.Material_co_ I see there is a way to avoid paying this tax foreverrrrrrrrrrrrrrrrrrrr._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_public checkReadyOnEveryCall _eq_ true_sm_public checkReadyOnlyOnce _eq_ false_sm__lt_/pre_gt__lt_p_gt_Unfortunately even if I switched all my materials to checkReadyOnlyOnce _eq_ true_sm__co_ in the Babylon.StandardMaterial override of isReady()_co_ where checkReadyOnlyOnce is taken into account is commented out _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_angry.png_qt_ alt_eq__qt__dd_angry_dd__qt__gt_._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_DK_co_ I realize I been a pain in the ass ever since finding out I could do profiling_co_ but this just does not scale.  Amdahl_t_s Law dictates that speed up is limited greatly by the amount of time spend doing things serially_co_ i.e. javascript.  Would not mind_co_ if it went away after a few frames._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Can that line can be un-commented?  With either grabbing textures that are already stored locally in the app_co_ or in-lining textures right into source code for the web_co_ this should be largely avoidable._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-05-14T19:00:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Why is this line commented already ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-05-14T20:22:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Actually it should not! Sounds like test I did and I forgot to uncomment_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-05-14T20:31:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_There is a comment right after that too._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_if (!this.checkReadyOnEveryCall) {    if (this._renderId _eq__eq__eq_ scene.getRenderId()) {       //  return true_sm_    }}_lt_/pre_gt__lt_p_gt_FYI_co_ does anyone even know this is here?  I only ask_co_ since it is not the default.  Did a forum search on _t_checkReadyOnlyOnce_t_.  This is the only topic found._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-05-14T20:31:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Fixed!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-05-15T21:07:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_co_ now that the business end of _lt_strong_gt_checkReadyOnlyOnce_lt_/strong_gt_ is no longer commented out_co_ I performed some comparison analysis.  First I re-did the base-line_co_ that is defaulting to _lt_strong_gt_checkReadyOnlyOnce _eq_ false_lt_/strong_gt_.  Also the scene had 28 materials_co_ 2 textures._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For best repeatability_co_ I am using a standard size for my window_co_ half width that you get from dragging the title bar off the screen.  FYI_co_ since performance metering cannot be turned on / off in code_co_ it is very difficult to numbers from different runs real close._lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_05_2015/post-8492-0-43178100-1431723207.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_05_2015/post-8492-0-43178100-1431723207_thumb.png_qt_ data-fileid_eq__qt_4274_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-8492-0-43178100-1431723207_thumb.pn_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_This run isReady is 7.2%.  After _lt_strong_gt_checkReadyOnlyOnce _eq_ true _lt_/strong_gt_on all materials_co_ a re-run drops isReady way down to 2.07%.  Of course now_co_ everything else is a higher percentage._lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_05_2015/post-8492-0-84027700-1431723584.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_05_2015/post-8492-0-84027700-1431723584_thumb.png_qt_ data-fileid_eq__qt_4275_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-8492-0-84027700-1431723584_thumb.pn_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_Wondering if having a static to set for all materials would be good._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_Material {    public static CHECK_READY_ONLY_ONCE_FOR_ALL _eq_ false_sm_}StandardMaterial{    public isReady(mesh?_dd_ AbstractMesh_co_ useInstances?_dd_ boolean)_dd_ boolean {        if (this.checkReadyOnlyOnce || Material.CHECK_READY_ONLY_ONCE_FOR_ALL) {            if (this._wasPreviouslyReady) {                return true_sm_            }        }        ...    }}_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]