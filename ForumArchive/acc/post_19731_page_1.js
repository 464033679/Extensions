[{"Owner":"jerome","Date":"2016-01-08T09:34:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1LEGTP%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1LEGTP#1_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Commented code _dd_ each rolling ball has a tiny line on its top_co_ normal to terrain._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-08T13:58:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Iiceman asked once what was the potential utility of the method getNormalAtCoordinates() ..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#RBXBG%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#RBXBG#1_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_No physic engine._lt_/p_gt__lt_p_gt_Actually I compute 3 orthogonal axis (with the cross product) from the particle plane velocity vector and the current ground normal. These 3 axis are the target system where I want to rotate each particle into._lt_/p_gt__lt_p_gt_So then the power of _lt_em_gt_RotationFromAxisToRef()_lt_/em_gt_ and that_t_s all._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I need to optimize _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Math/babylon.math.ts#L1096_qt_ rel_eq__qt_external nofollow_qt__gt_this method_lt_/a_gt_ a bit so it won_t_t allocate any temporary vector3 _dd_ currently only 6 per call. That_t_s not that much_co_ but if you call it 8000 times per frame for 8000 particles for instance_co_ I guess the GC will start to shout. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_[EDIT] _dd_ this one has 2000 boxes and still run at 60 fps on my computer_lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#RBXBG%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#RBXBG#2_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"chg","Date":"2016-01-08T14:01:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_111842_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_19731_qt_ data-ipsquote-username_eq__qt_jerome_qt_ data-cite_eq__qt_jerome_qt_ data-ipsquote-timestamp_eq__qt_1452245652_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1LEGTP%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1LEGTP#1_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Commented code _dd_ each rolling ball has a tiny line on its top_co_ normal to terrain._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Is it wrong to say this looks cute _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ for some reason it reminds me of Pikmin or something (I know it_t_s just to demonstrate the feature_co_ but still somehow it seems expressive despite being so simple_co_ lol)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dal","Date":"2016-01-08T22:43:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This seems to have broken something for me... all my trees started floating on the 0 plane when I updated _dd_S_lt_/p_gt__lt_p_gt_Does it take into account if the groundmesh is translated?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-09T06:19:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_No_co_ the returned height is the height from the ground_co_ so in the ground local system. This makes sense because the passed x_co_z are the coordinates an the ground map also._lt_/p_gt__lt_p_gt_I should document this better._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Just add the ground position to your passed or return values _dd_ tree.position _eq_ ground.position.add(new BABYLON.Vector3(x_co_ y_co_ z)_sm__lt_/p_gt__lt_p_gt_where x_co_ y_co_ z are the coordinates passed and returned from the function_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_or just tree.position.y _eq_ ground.position.y + ground.getHeightAtCoordinates(x_co_ z)_sm__lt_/p_gt__lt_p_gt_if you have just a vertical translation_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Unless everyone prefer that I switch everything to the World system ?_lt_/p_gt__lt_p_gt_I asked this before recoding it but got no answer_co_ so I guessed my assumption was the expected one because of my arguments (local system)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-09T08:30:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Wait please_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As the former version of this function used the ray intersection_co_ so World coordinates_co_ I will change the new function behavior so you can pass (x_co_ y) in the World system and get y in the World system also._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ll do it as from monday._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-11T09:30:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_fix PRed_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-16T13:14:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI just added a new complementary method called _dd_ _lt_em_gt_updateCoordinateHeights()_lt_/em_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis function can be called at any time_co_ even within the render loop_co_ and recomputes quickly all the heights of your ground if this ground has been updated (morphed_co_ etc).\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_myMorphFunction(ground)_sm_\nground.updateCoordinateHeights()_sm_\nground.getHeightAtCoordinates(x_co_ z)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tMoreover_co_ all the algo under the hood now never reallocate any new memory_co_ so the GC is happy and you can morph your ground and recompute the heights in the render loop as many times you want\n_lt_/p_gt_\n\n_lt_p_gt_\n\t[EDIT] commented PG _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1JXJVF%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1JXJVF#3_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]