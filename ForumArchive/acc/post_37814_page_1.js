[{"Owner":"hummerbaendiger","Date":"2018-05-22T15:44:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi everyone_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m quite new to babylon JS and need a small bump into the right directionÂ _lt_span class_eq__qt_ipsEmoji_qt__gt_ðŸ˜…_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_u_gt_Hoping not to fall for the _lt_a href_eq__qt_https_dd_//en.wikipedia.org/wiki/XY_problem_qt_ rel_eq__qt_external nofollow_qt__gt_XY Problem_lt_/a_gt_Â here_t_s what I want to do_dd__lt_/u_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tGoing from a modelÂ created for Unity_co_ that use special shaders_co_ I want to export these to a WebGL solution. That wayÂ I can display these models on any supported browser (even mobile since Unity WebGL is not supported by most)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_u_gt_My Approach_dd__lt_/u_gt_\n_lt_/p_gt_\n\n_lt_ul_gt_\n\t_lt_li_gt_\n\t\tCreate modelÂ in Unity3D with custom Shaders - _lt_strong_gt_done_lt_/strong_gt_\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tExport model to glTF_co_ adding a custom extension to the material that holds all relevant information (specular maps_co_ UV mappings_co_ custom material properties that exceed the standard shaders) - _lt_strong_gt_done_lt_/strong_gt__co_ made a special extension for the Unity exporter that handles my materials\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tImport glTFÂ to babylon and read out the custom material properties stored in the material extension - _lt_strong_gt_this is where I_t_m stuck_lt_/strong_gt_\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tAdapt the special Unity shader to work with the WebGL environment of babylon JS\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tDisplay the model with custom shader and settings stored in glTF file\n\t_lt_/li_gt_\n_lt_/ul_gt_\n\n_lt_p_gt_\n\tCan someone tell me how to read custom extensions from GLTF within babylon JS? From the documentation I know that for now only the standard extensions are supported (KHR_Materials_co_ draco compression_co_ MSFT_lod_co_ ...). Where do I have to start if I want to add a custom plugin or behavior for the glTF importer that understands my custom material extension?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for your help _lt_span_gt__dd_)_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-05-22T16:15:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tpinging _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/26831-bghgary/?do_eq_hovercard_qt_ data-mentionid_eq__qt_26831_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/26831-bghgary/_qt_ rel_eq__qt__qt__gt_@bghgary_lt_/a_gt_ who can provide guidance\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"bghgary","Date":"2018-05-22T21:22:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/31598-hummerbaendiger/?do_eq_hovercard_qt_ data-mentionid_eq__qt_31598_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/31598-hummerbaendiger/_qt_ rel_eq__qt__qt__gt_@hummerbaendiger_lt_/a_gt_ This isn_t_t currently easy to do without relying on non-public interfaces. I will try to add a mechanism for you to do this_co_ but it might take a bit of time.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"hummerbaendiger","Date":"2018-05-23T09:27:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks for the follow-up _lt_span_gt__lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt__lt_span_gt_I already downloadedÂ the Git repository fromÂ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js_lt_/a_gt_. This should also include the implementation of the basic glTF loader (babylon.glTFFileLoader.ts if I_t_m right). But I can_t_t find where extensions (like _qt_EXT_texture_transform_qt_)Â are handled._lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso I think I_t_m somewhat confused with the naming of _qt_extensions_qt_ and _qt_plugins_qt_. Do I understand correctly that within babylon JS a _qt_plugin_qt_ is something like the glTF loader itself or the physics engine? I think the name _qt_extension_qt_ in the context of babylon JS has a different meaning from the _qt_extension_qt_ in the glTF file format (which is rather a file extension like .jpg)?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn general I wouldn_t_t mind doing a custom implementation just for my case -Â Which would be to read extra parameters stored in the glTF file (as custom extension property) and build up the scene in babylon using these parameters. I just don_t_t quite understand where I would start or if there is already a mechanism that is intended for sort of a _qt_plugin for the glTF loader_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tGeez_co_ I hope this isn_t_t totally confusing _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for your help\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"bghgary","Date":"2018-05-23T18:43:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYeah_co_ the naming is overloaded. I_t_ll try to explain a bit.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere are SceneLoader plugins which support specific file extensions (such as obj_co_ stl_co_ and gltf/glb). The glTFLoader is one of these plugins which support the gltf/glb file extensions. The glTFLoader plugin has glTFLoader extensions that separate certain functionality of the loader into separate classes which helps with organization and maintenance of the code. Finally_co_ there are glTF extensions which are extensions to the glTF format. All of these glTF format extensions have a corresponding glTFLoader extension (e.g. KHR_materials_pbrSpecularGlossiness_co_ KHR_draco_mesh_compression_co_ etc.) The glTFLoader currently does not have a public facing contract for adding glTFLoader extensions and mostly this is because the glTFLoader extensions interface is not very stable and I often have to change it to accommodate new extensions or fix issues. I will work on something that will help with this_co_ but it will require some time.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tShort-term_co_ if you are okay with relying on interfaces that might change_co_ you can use the extension mechanism that I_t_m doing with the glTFLoader using typescript. The other option is to use _lt_a href_eq__qt_https_dd_//twitter.com/deltakosh/status/998989327609704448_qt_ rel_eq__qt_external nofollow_qt__gt_Babylon Toolkit_lt_/a_gt_ until I can provide you something to extend the glTFLoader more easily.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"hummerbaendiger","Date":"2018-05-24T13:13:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks again for the information!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI wasn_t_t evenÂ aware of the Babylon ToolkitÂ _lt_img alt_eq__qt__dd_huh_dd__qt_ data-emoticon_eq__qt__qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_huh.png_qt_ title_eq__qt__dd_huh_dd__qt_ /_gt_ - this might make the whole process even easier (since I_t_m not really skilled in JavaScripr / TypeScript yet _lt_span_gt__lt_img alt_eq__qt__dd_(_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ title_eq__qt__dd_(_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt_). I_t_ll have a look into it as well.Â \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut once I have some more practice_co_ the native implementation would probably make the final solution a lot smaller in size. I can imagine going from Unity will add quite some overhead...\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"bghgary","Date":"2018-07-31T22:54:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSee here for the first PR that supports adding custom loader extensions_dd_Â _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/pull/4845_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/pull/4845_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]