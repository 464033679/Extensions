[{"Owner":"BlackMojito","Date":"2017-10-23T07:18:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Folks_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI would like to implement a camera which behaves similarly like the ArcRotateCamera but instead of rotating around the target_co_ it needs to behave like that the object/scene itself rotates around its center. How can I achieve that? It seems that ArcRotateCamera does not have an optional pivot which I can set.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is what I really want_co_ _lt_a href_eq__qt_https_dd_//viewer-rocks.autodesk.io/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//viewer-rocks.autodesk.io/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks a lot\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2017-10-23T08:37:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHowdy _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-xuchen_shadow/?do_eq_hovercard_qt_ data-mentionid_eq__qt_28947_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-xuchen_shadow/_qt_ rel_eq__qt__qt__gt_@xuchen_shadow_lt_/a_gt__co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI guess you can achieve this with setTarget. Check this (vry simple) example - _lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#88WH5C_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#88WH5C_lt_/a_gt_ . Click on one of the meshes_co_ and you will rotate around it. You can also pan (using the control button and your mouse at the same time) to change the pivot point.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHope this helps!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2017-10-23T08:41:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_192747_qt_ data-ipsquote-contentid_eq__qt_33598_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1508747856_qt_ data-ipsquote-userid_eq__qt_10310_qt_ data-ipsquote-username_eq__qt_RaananW_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t2 minutes ago_co_ RaananW said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tHowdy _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-xuchen_shadow/?do_eq_hovercard_qt_ data-mentionid_eq__qt_28947_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-xuchen_shadow/_qt_ rel_eq__qt__qt__gt_@xuchen_shadow_lt_/a_gt__co_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tI guess you can achieve this with setTarget. Check this (vry simple) example - _lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#88WH5C_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#88WH5C_lt_/a_gt_ . Click on one of the meshes_co_ and you will rotate around it. You can also pan (using the control button and your mouse at the same time) to change the pivot point.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tHope this helps!\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tYeah but in your sample_co_ the picked objects is always at the center of the scene because it is set as the target of the Camera. But in Forge Viewer_co_ even the object is not at the center of the viewport_co_ the rotation still works as if it was at the center...\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2017-10-23T08:53:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tYou are right_co_ we always rotate around the center.  I couldn_t_t quite rotate around an object that is not currently centered using the autodesk viewer. Want to show me how?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2017-10-23T10:27:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI think it does first a translation_co_ something like T _eq_ objCenter - target_co_ then does the rotation normally. Finally translate back by TBack _eq_ - (rotation * T) ?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2017-10-23T12:35:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tNo_co_ what I mean is that I can_t_t see it happening in the Autodesk viewer as well\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2017-11-01T03:38:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_192767_qt_ data-ipsquote-contentid_eq__qt_33598_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1508762131_qt_ data-ipsquote-userid_eq__qt_10310_qt_ data-ipsquote-username_eq__qt_RaananW_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 10/23/2017 at 8_dd_35 PM_co_ RaananW said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tNo_co_ what I mean is that I can_t_t see it happening in the Autodesk viewer as well\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tHi RaananW_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you click this link _lt_a href_eq__qt_https_dd_//viewer-rocks.autodesk.io/_qt_ rel_eq__qt_external nofollow_qt_ style_eq__qt_background-color_dd_transparent_sm_color_dd_#3d6594_sm_font-size_dd_14px_sm__qt__gt_https_dd_//viewer-rocks.autodesk.io/_lt_/a_gt__co_ you can see that there are models that we can play with (rotate_co_ pan_co_ zoom). Obviously the camera rotates around a pivot which I guess is the center of the model_t_s bounding sphere. I tried to customize ArcRotateCamera but it still cannot work like theirs. Could you please provide me some ideas?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2017-11-01T06:48:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tBasically_co_ the problem of the existing ArcRotateCamera is that when the object is not at the center of the viewport_co_ the rotation is not correct because the camera always rotates around its target.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"aWeirdo","Date":"2017-11-01T09:10:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-xuchen_shadow/?do_eq_hovercard_qt_ data-mentionid_eq__qt_28947_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-xuchen_shadow/_qt_ rel_eq__qt__qt__gt_@xuchen_shadow_lt_/a_gt_ _lt_br /_gt_\n\tI see what you mean_co_ and to me_co__lt_br /_gt_\n\tIt looks like they are just rotating/moving the mesh(es) and the camera is stationary_co_ i didn_t_t look in their code_co_ but it would be the easiest way to achieve this effect._lt_br /_gt__lt_br /_gt__lt_em_gt_Edit_sm__lt_/em_gt__lt_br /_gt_\n\ti had a few minutes_co_ and this is basicly it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt__lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#X43N4U%232_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#X43N4U#2_lt_/a_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_Box is parented to ground_co__lt_/span_gt__lt_br /_gt_\n\tManipulates_sm__lt_br /_gt_\n\tground position instead of panning_co__lt_br /_gt_\n\tground rotation y instead of camera alpha for 360* rotation_co__lt_br /_gt_\n\tand last_co_ camera beta for the up and down rotation.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2017-11-01T10:06:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_193593_qt_ data-ipsquote-contentid_eq__qt_33598_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1509527435_qt_ data-ipsquote-userid_eq__qt_17943_qt_ data-ipsquote-username_eq__qt_aWeirdo_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t54 minutes ago_co_ aWeirdo said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tHi _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-xuchen_shadow/?do_eq_hovercard_qt_ data-mentionid_eq__qt_28947_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-xuchen_shadow/_qt_ rel_eq__qt__qt__gt_@xuchen_shadow_lt_/a_gt_ _lt_br /_gt_\n\t\t\tI see what you mean_co_ and to me_co__lt_br /_gt_\n\t\t\tIt looks like they are just rotating/moving the mesh(es) and the camera is stationary_co_ i didn_t_t look in their code_co_ but it would be the easiest way to achieve this effect._lt_br /_gt__lt_br /_gt__lt_em_gt_Edit_sm__lt_/em_gt__lt_br /_gt_\n\t\t\ti had a few minutes_co_ and this is basicly it.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_span_gt__lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#X43N4U%232_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#X43N4U#2_lt_/a_gt__lt_/span_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_span_gt_Box is parented to ground_co__lt_/span_gt__lt_br /_gt_\n\t\t\tManipulates_sm__lt_br /_gt_\n\t\t\tground position instead of panning_co__lt_br /_gt_\n\t\t\tground rotation y instead of camera alpha for 360* rotation_co__lt_br /_gt_\n\t\t\tand last_co_ camera beta for the up and down rotation.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tNo_co_ I am pretty sure that they are modifying the view matrix instead of using your approach. In Autodesk Fusion 360_co_ they have the same camera stuff. I know that it is a camera with a pivot_co_ but I just don_t_t know how to calculate the view matrix.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2017-11-01T15:20:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tBelow is my small class. I still don_t_t know what is missing.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe basic idea is that the somehow like what the image below illustrates.\n_lt_/p_gt_\n\n_lt_p_gt_\n\ta is the pivot and b is the target...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img alt_eq__qt_41516-demo.jpg_qt_ class_eq__qt_ipsImage_qt_ height_eq__qt_706_qt_ src_eq__qt_http_dd_//answers.unity3d.com/storage/temp/41516-demo.jpg_qt_ width_eq__qt_778_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import * as BABYLON from _t_babylonjs_t_\nimport * as MathUtils from _t_../../Utils/MathUtils_t_\n\nexport class ArcRotatePivotCamera extends BABYLON.ArcRotateCamera {\n\n    private _pivot_dd_ BABYLON.Vector3 | null_sm_\n    private _oldAlpha_dd_ number_sm_\n    private _oldBeta_dd_ number_sm_\n    private _pivotToEyeDistance_dd_ number _eq_ 0_sm_\n\n    constructor(name_dd_ string_co_ alpha_dd_ number_co_ beta_dd_ number_co_ radius_dd_ number_co_ target_dd_ BABYLON.Vector3_co_ scene_dd_ BABYLON.Scene) {\n        super(name_co_ alpha_co_ beta_co_ radius_co_ target_co_ scene)_sm_\n        this._oldAlpha _eq_ alpha_sm_\n        this._oldBeta _eq_ beta_sm_\n        this._pivotToEyeDistance _eq_ radius_sm_\n    }\n\n    get pivot()_dd_ BABYLON.Vector3 | null {\n        return this._pivot_sm_\n    }\n\n    set pivot(pivot_dd_ BABYLON.Vector3 | null) {\n        this._pivot _eq_ pivot_sm_\n    }\n\n    private updatePivotToEyeDistance()_dd_ void {\n        let pivotToTargetLengthSquared _eq_ this._getTargetPosition().subtract(this._pivot).lengthSquared()_sm_\n        this._pivotToEyeDistance _eq_ Math.sqrt(pivotToTargetLengthSquared + this.radius * this.radius)_sm_\n    }\n\n    private updateAlphaBeta()_dd_ void {\n        let diff_dd_ BABYLON.Vector3 _eq_ this._newPosition.subtract(this._pivot)_sm_\n        this.beta _eq_ Math.acos(diff.z / this._pivotToEyeDistance)_sm_\n        this.alpha _eq_ Math.atan2(diff.y_co_ diff.x)_sm_\n    }\n\n    _checkInputs()_dd_ void {\n    \n        this._oldAlpha _eq_ this.alpha_sm_\n        this._oldBeta _eq_ this.beta_sm_\n\n        //if (async) collision inspection was triggered_co_ don_t_t update the camera_t_s position - until the collision callback was called.\n        if (this._collisionTriggered) {\n            return_sm_\n        }\n\n        this.inputs.checkInputs()_sm_\n\n        // Zoom Inertia\n        if (this.inertialRadiusOffset !_eq__eq_ 0) {\n            this.radius -_eq_ this.inertialRadiusOffset_sm_\n\n            let viewDir _eq_ this._target.subtract(this._newPosition).normalize()_sm_\n            this._newPosition.addInPlace(viewDir.scaleInPlace(this.inertialRadiusOffset))_sm_\n\n            this.updatePivotToEyeDistance()_sm_\n            this.updateAlphaBeta()_sm_\n\n            this.inertialRadiusOffset *_eq_ this.inertia_sm_\n\n            if (Math.abs(this.inertialRadiusOffset) &lt_sm_ this.speed * BABYLON.Epsilon)\n                this.inertialRadiusOffset _eq_ 0_sm_\n        }\n\n        // Rotation Inertia\n        if (this.inertialAlphaOffset !_eq__eq_ 0 || this.inertialBetaOffset !_eq__eq_ 0) {\n            \n            if (this.getScene().useRightHandedSystem) {\n                this.alpha -_eq_ this.beta &lt_sm__eq_ 0 ? -this.inertialAlphaOffset _dd_ this.inertialAlphaOffset_sm_\n            } else {\n                this.alpha +_eq_ this.beta &lt_sm__eq_ 0 ? -this.inertialAlphaOffset _dd_ this.inertialAlphaOffset_sm_\n            }\n\n            this.beta +_eq_ this.inertialBetaOffset_sm_\n\n            this.inertialAlphaOffset *_eq_ this.inertia_sm_\n            this.inertialBetaOffset *_eq_ this.inertia_sm_\n\n            if (Math.abs(this.inertialAlphaOffset) &lt_sm_ BABYLON.Epsilon)\n                this.inertialAlphaOffset _eq_ 0_sm_\n            if (Math.abs(this.inertialBetaOffset) &lt_sm_ BABYLON.Epsilon)\n                this.inertialBetaOffset _eq_ 0_sm_\n        }\n\n        // Panning inertia\n        if (this.inertialPanningX !_eq__eq_ 0 || this.inertialPanningY !_eq__eq_ 0) {\n            if (!this._localDirection) {\n                this._localDirection _eq_ BABYLON.Vector3.Zero()_sm_\n                this._transformedDirection _eq_ BABYLON.Vector3.Zero()_sm_\n            }\n\n            this._localDirection.copyFromFloats(this.inertialPanningX_co_ this.inertialPanningY_co_ this.inertialPanningY)_sm_\n            this._localDirection.multiplyInPlace(this.panningAxis)_sm_\n            this._viewMatrix.invertToRef(this._cameraTransformMatrix)_sm_\n            BABYLON.Vector3.TransformNormalToRef(this._localDirection_co_ this._cameraTransformMatrix_co_ this._transformedDirection)_sm_\n            //Eliminate y if map panning is enabled (panningAxis _eq__eq_ 1_co_0_co_1)\n            if (!this.panningAxis.y) {\n                this._transformedDirection.y _eq_ 0_sm_\n            }\n\n            if (!this._targetHost) {\n                if (this.panningDistanceLimit) {\n                    this._transformedDirection.addInPlace(this._target)_sm_\n                    var distanceSquared _eq_ BABYLON.Vector3.DistanceSquared(this._transformedDirection_co_ this.panningOriginTarget)_sm_\n                    if (distanceSquared &lt_sm__eq_ (this.panningDistanceLimit * this.panningDistanceLimit)) {\n                        let oldTarget _eq_ this.target.clone()_sm_\n                        this._target.copyFrom(this._transformedDirection)_sm_\n                        let diff _eq_ this._target.subtract(oldTarget)_sm_\n\n                        this._newPosition.addInPlace(diff)_sm_\n                    }\n                }\n                else {\n                    this._target.addInPlace(this._transformedDirection)_sm_\n                    this._newPosition.addInPlace(this._transformedDirection)_sm_\n                }\n            }\n\n            this.updatePivotToEyeDistance()_sm_\n            this.updateAlphaBeta()_sm_\n\n            this.inertialPanningX *_eq_ this.panningInertia_sm_\n            this.inertialPanningY *_eq_ this.panningInertia_sm_\n\n            if (Math.abs(this.inertialPanningX) &lt_sm_ this.speed * BABYLON.Epsilon)\n                this.inertialPanningX _eq_ 0_sm_\n            if (Math.abs(this.inertialPanningY) &lt_sm_ this.speed * BABYLON.Epsilon)\n                this.inertialPanningY _eq_ 0_sm_\n        }\n\n        // Limits\n        this._checkLimits()_sm_\n\n        this.onAfterCheckInputsObservable.notifyObservers(this)_sm_\n    }\n\n    _getViewMatrix()_dd_ BABYLON.Matrix {\n\n        // Compute\n        let cosa _eq_ Math.cos(this.alpha)_sm_\n        let sina _eq_ Math.sin(this.alpha)_sm_\n        let cosb _eq_ Math.cos(this.beta)_sm_\n        let sinb _eq_ Math.sin(this.beta)_sm_\n\n        if (sinb _eq__eq__eq_ 0) {\n            sinb _eq_ 0.0001_sm_\n        }\n\n        let target _eq_ this._getTargetPosition()_sm_\n\n        let rotateEnd _eq_ new BABYLON.Vector3(cosa * sinb_co_ cosb_co_ sina * sinb)_sm_\n        let trackballVector _eq_ rotateEnd.scale(this.radius)_sm_\n\n        let rotationMatrix_dd_ BABYLON.Matrix _eq_ null_sm_\n        if (this._pivot) {\n\n            let cosaOld _eq_ Math.cos(this._oldAlpha)_sm_\n            let sinaOld _eq_ Math.sin(this._oldAlpha)_sm_\n            let cosbOld _eq_ Math.cos(this._oldBeta)_sm_\n            let sinbOld _eq_ Math.sin(this._oldBeta)_sm_\n\n            if (sinbOld _eq__eq__eq_ 0) {\n                sinbOld _eq_ 0.0001_sm_\n            }\n\n            let pivotToEye _eq_ this._newPosition.subtract(this._pivot)_sm_\n            let targetToEye _eq_ this._newPosition.subtract(this._pivot)_sm_\n\n            let targetDist _eq_ targetToEye.length()_sm_\n            targetToEye.normalize()_sm_\n\n            let rotateStart _eq_ new BABYLON.Vector3(cosaOld * sinbOld_co_ cosbOld_co_ sinaOld * sinbOld)_sm_\n            let transform _eq_ MathUtils.rotationMatrixBetweenVectors(rotateStart_co_ rotateEnd)_sm_\n\n            pivotToEye _eq_ BABYLON.Vector3.TransformNormal(pivotToEye_co_ transform)_sm_\n            targetToEye _eq_ BABYLON.Vector3.TransformNormal(targetToEye_co_ transform)_sm_\n\n            this._newPosition _eq_ this._pivot.add(pivotToEye)_sm_\n            target _eq_ this._newPosition.subtract(targetToEye.scale(targetDist))_sm_\n        }\n\n        if (this.getScene().collisionsEnabled &amp_sm_&amp_sm_ this.checkCollisions) {\n            if (!this._collider) {\n                this._collider _eq_ new BABYLON.Collider()_sm_\n            }\n            this._collider.radius _eq_ this.collisionRadius_sm_\n            this._newPosition.subtractToRef(this.position_co_ this._collisionVelocity)_sm_\n            this._collisionTriggered _eq_ true_sm_\n            this.getScene().collisionCoordinator.getNewPosition(this.position_co_ this._collisionVelocity_co_ this._collider_co_ 3_co_ null_co_ this._onCollisionPositionChange_co_ this.uniqueId)_sm_\n        } else {\n            this.position.copyFrom(this._newPosition)_sm_\n\n            let up _eq_ this.upVector_sm_\n            if (this.allowUpsideDown &amp_sm_&amp_sm_ sinb &lt_sm_ 0) {\n                up _eq_ up.clone()_sm_\n                up _eq_ up.negate()_sm_\n            }\n\n            if (this.getScene().useRightHandedSystem) {\n                BABYLON.Matrix.LookAtRHToRef(this.position_co_ target_co_ up_co_ this._viewMatrix)_sm_\n            } else {\n                BABYLON.Matrix.LookAtLHToRef(this.position_co_ target_co_ up_co_ this._viewMatrix)_sm_\n            }\n            this._viewMatrix.m[12] +_eq_ this.targetScreenOffset.x_sm_\n            this._viewMatrix.m[13] +_eq_ this.targetScreenOffset.y_sm_\n        }\n        this._currentTarget _eq_ target_sm_\n        return this._viewMatrix_sm_\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]