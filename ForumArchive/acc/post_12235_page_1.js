[{"Owner":"JCPalmer","Date":"2015-02-03T20:22:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I have pulled the part of the MORPH Module that added POV movement / rotation along with vertices deformation into its own module.  I then sub-classed it in MORPH.  My MORPH tests now run as before._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have taken the POV module and applied it to another test I have.  Thought I would get fancy use the TOB mesh clone factory to make more than 1 mesh.  When doing doc_co_ I could take screen snap to showing movement / rotation.  I spread out the clones by setting the initial delay feature on different meshes. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Found that only the first mesh that registered their beforeRender callback_co_ always gets it executed.  I also instanced completely separate meshes_co_ without cloning_co_ to rule that out as a cause.  Is this to be expected?  I thought my multiple shape key group test had already tested this_co_ but there is only 1 Mesh with a consolidated beforeRender()._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_See (linked changed) _lt_a href_eq__qt_https_dd_//googledrive.com/host/0B6-s6ZjHyEwUfnVZczlGeXQwaFlMaDM2SmFMX1VGcV9TMXZRdnZyTDJWbnZjS2l5elBHakE_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//googledrive.com/host/0B6-s6ZjHyEwUfnVZczlGeXQwaFlMaDM2SmFMX1VGcV9TMXZRdnZyTDJWbnZjS2l5elBHakE_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The original_co_ first registered_co_ is red.  If you concentrate on it_co_ you will see it never stops.  Here is the code to start it all off as an FYI (cloning version commented out)_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var duration _eq_ 2500_sm_var nClones _eq_ 2_sm_var delayBetween _eq_ duration / (nClones + 1)_sm_  //1 for originalvar initialInstance_sm_var kiddies_sm_var parenting _eq_ true_sm_function initialize(scene){    materialsRootDir _eq_ _qt_./TOB-out_qt__sm_ // edit when texture files in a different dir than html    mesh_parent.initScene(scene_co_ materialsRootDir)_sm_ // construct scene        //retrieve initial Instance of Gus made by initScene_sm_ store kids_sm_ assign beforeRender with no delay    initialInstance _eq_ scene.getMeshByID(_qt_Gus_qt_)_sm_    kiddies _eq_ initialInstance.getChildren()_sm_    assignPOV(initialInstance_co_ 0)_sm_        // add some clones with a delay to animation start    for (var i _eq_ 1_sm_ i &lt_sm__eq_ nClones_sm_ i++){//        var clone _eq_ mesh_parent.meshFactory(scene_co_ _qt_Gus_qt__co_ materialsRootDir)_sm_        var clone _eq_ new mesh_parent.Gus(_qt_Gus_qt__co_ scene_co_ materialsRootDir)_sm_        assignPOV(clone_co_ delayBetween * i)_sm_    \t    }        // change material of original     var material _eq_ new BABYLON.StandardMaterial(_qt_color for original_qt__co_ scene)_sm_    material.ambientColor  _eq_ new BABYLON.Color3(0.6_co_0.1_co_0.1)_sm_    material.diffuseColor  _eq_ new BABYLON.Color3(0.72_co_0_co_0)_sm_    material.specularColor _eq_ new BABYLON.Color3(0.5_co_0.5_co_0.5)_sm_    material.emissiveColor _eq_ new BABYLON.Color3(0_co_0_co_0)_sm_    material.specularPower _eq_ 50_sm_    material.alpha _eq_  1_sm_    material.backFaceCulling _eq_ true_sm_    initialInstance.material _eq_ material_sm_    }function assignPOV(mesh_co_ initialDelay){\t//                                 milli   _co_ varied      _co_ go 25 units forward           _co_ over 1 full twirlClockwise &amp_sm_ tiltRight\tvar event  _eq_ [ new POV.MotionEvent(duration_co_ initialDelay_co_ new BABYLON.Vector3(0_co_  0_co_ 25)_co_ new BABYLON.Vector3(0_co_ 6.28_co_ 6.28)) ]_sm_\tvar series  _eq_ new POV.EventSeries(event_co_ 1000)_sm_  // do 1000 loops\tvar renderer _eq_ new POV.BeforeRenderer(mesh)_sm_\trenderer.queueEventSeries(series)_sm_}_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-02-03T22:27:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__qt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_Found that only the first mesh that registered their beforeRender_qt__dd_ _lt_/span_gt_can you be more explicit ? _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Do you reproduce on the playground?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-02-04T14:54:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks for the mind jog.  When thinking about _qt_first_qt__co_ it made me consider that maybe it was the first mess created_co_ which always moves &amp_sm_ has no stalls.  I moved the code which adds the beforeRender() to the first mesh created_co_ _lt_strong_gt__lt_em_gt_ assignPOV(initialInstance_co_ 0)_lt_/em_gt__lt_/strong_gt_ to the very end of initialize().  The first clone is the first to have a beforeRender()._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The result is the that the original_co_ red one_co_ is still the one that always moves.  This supports that the render() method of Mesh is executed in the order that meshes are created/ added to scene._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I cannot save something that big on playground_co_ too much source code.  Will switch to simple cubes with almost no source code.  That can be saved on playground._lt_br_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-02-04T16:13:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well_co_ switched to cubes (check link again).  Also increased the # of meshes to 6.  The first mesh created_co_ the red one_co_ is still the only one that never stops.  They all should be in continuous motion for 1000 laps._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_With more meshes it is obvious that they stall out most often when an event_co_ loop_co_ has completed_co_ and doing a repeat.  It is likely my code_co_ but that does not explain why the first mesh added to scene never experiences._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Will investigate there.  Stay tuned.  Am now playground saveable now too._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-02-05T21:16:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yep_co_ self inflicted.  In the process of finding_co_ have developed a better test_co_ see new link on first post.  Have 50 cubes_co_ doing a double loop in 2 different plane_co_ 10 times.  Each double loop_co_ is faster than the one before_co_ and the cube gets smaller._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I notice small strays in time &amp_sm_ position (they all should end up in the same place).  Multiple runs do not produce the exact same final result though.  Something very minor is happening.  Probably not fixable._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_POV only has 1 problem now_dd_  Things get weird if you switch tabs and then go back.  The Morph never did that_co_ and still do not.  Tomorrow._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-02-06T19:17:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_POV 1.0 is ready to go up to the Extensions repository.  You can now switch between browser tabs and comeback._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Putting 50 meshes though 20 loops_co_ while accelerating &amp_sm_ shrinking is easily disturbed through.  This more of a torture test.  The primary reason is each incremental move is dependent on the orientation at the time.  With rotation also being incrementally interpolated &amp_sm_ the frame interval not being EXACTLY the same_co_ the result of the combination cannot be perfect._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Very acceptable results can be expected in real situations with a smaller number of moves.  The more moves_co_ the bigger the variance_co_ since it is additive.  If only moving by itself_co_ there should be no issue._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Will start working on the Doc_co_ which I agreed to for moving up the raw POV calc methods to AbstractMesh.  I made a playground_co_ since Googledrive is not good for permanent links.  The one above stopped working (guess I am being spanked by Google)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Here is playground_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#A9TOC_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#A9TOC_lt_/a_gt_  I had to use uglified POV to get it to save.  BTW_co_ can you make buttons on playground?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-02-06T19:24:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_That_t_s excellent!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]