[{"Owner":"JCPalmer","Date":"2014-10-11T23:44:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_Support has been added for Blender shape keys along with direct control of them in JavaScript/Typescript.  What follows is something I wrote the day before.  Some names of classes may change_co_ Tower of Babel may also go away in name_co_ and there may be some internal mixups in order to be more integrated with BJS before 1.14 goes into production.  This system is ready for testing though._lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_These keys are contained within a Babylon.Automaton_co_ which is a sub-class of Babylon.Mesh.  The Tower of Babel exporter generates instances of Babylon.Automaton for a .babylon file_co_ or sub-classes of Babylon.Automaton for Javascript or Typescript files.  If shape keys are part of a Blender mesh you will get a Babylon.Automaton_co_ otherwise you get a Babylon.Mesh._lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_For CPU time and memory efficiency_co_ the exporter isolates only those vertices of the mesh which change (GPU time &amp_sm_ memory are un-affected).  At the same time_co_ keys affecting the same area of a mesh can be grouped &amp_sm_ controlled together_co_ independently of other key groups_co_ e.g. MOUTH_co_ &amp_sm_ LEGS.  You indicate your groups by the names you give the keys.  Format_dd_ _qt_Group Name-State_qt_.  If no _qt_-_qt_ is found in the name_co_ you get a warning message in the log file_co_ &amp_sm_ it will put into the group _qt_ENTIRE MESH_qt_.  FYI_co_ groups &amp_sm_ states are all upper case once they get to BabylonJS._lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_As far as the special key _qt_Basis_qt__co_ it must simply be there.  The exporter will break it up_co_ so that the relevant parts of it are in each group.  _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_Automatons are deformed / morphed using control objects_co_ completely in BJS.  POV motion and rotation can also be incorporated into these control objects_co_ if you wish the mesh to move / rotate at the same time.  These control objects are called Deformations.  Deformations can be done linearly in time or at any rate of change_co_ you wish.  You can also specify that a shape key group is to be mirrored along the X_co_ Y_co_ or Z axis.  When done_co_ the end state ratio of the Deformation may also be from -1 to 0_co_ in addition to 0 to 1._lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_Deformations are grouped into an array along with Actions and functions() to create an AutomatonEventSeries.  The Deformations DO NOT have to all be to the same shape key group_co_ just the same mesh.  Event series can have repeat counts associated with them.  The first repeats of a series can have their time duration prorated_co_ to create acceleration / deceleration across repeats._lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_If the series has multiple groups_co_ there is sync across repeats.  If more control is needed_co_ individual Deformations can be made sync partners where neither start till both are ready.  Technically_co_ sync partners do not even have to be in the same mesh_co_ but Warning_dd_  deadly embrace potential exists._lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_The other great thing about shape key groups is they are queue based.  You submit your AutomatonEventSeries to the Automaton_co_ and it puts on the queue of each interested shape key group.  This allows you to do an unlimited amount of stuff in advance.  Just queue it and forget it._lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_Finally_co_ there is an Action subclass which allows you to put an AutomatonEventSeries in it._lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_With that introduction_co_ a couple of Automatons have been built and exercised.  They are part of the Blender-test directory in the Github repository.  You have full access all the way from the .blend file.  I have put up the generated results so you can play without doing any downloading / exporting. _lt_a href_eq__qt_https_dd_//googledrive.com/host/0B6-s6ZjHyEwUdHp3a3pJdlgwS0U_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//googledrive.com/host/0B6-s6ZjHyEwUdHp3a3pJdlgwS0U_lt_/a_gt_._lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_The _qt_exercise_qt_ code for the 2 Automaton tests are in common .js files_co_ so they can be accessed by either the .babylon or .js versions.  Here are the links to them in GitHub_dd__lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_Automaton (Table Cloth) - _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Exporters/Blender/blender-test/lib/automaton_common.js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Exporters/Blender/blender-test/lib/automaton_common.js_lt_/a_gt__lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_multi_group (Bumps) _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Exporters/Blender/blender-test/lib/multi_group_common.js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Exporters/Blender/blender-test/lib/multi_group_common.js_lt_/a_gt__lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_Enjoy!_lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_Jeff_lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_ _lt_/p_gt__lt_br_gt__lt_p style_eq__qt_font-family_dd_Helvetica_sm_color_dd_rgb(40_co_40_co_40)_sm__qt__gt_P.S. -  I would also like to thank Gryff for the .blends.  No way I could do it without those!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"joshcamas","Date":"2014-10-12T02:33:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hmmm..._lt_/p_gt__lt_p_gt_Would this add support to having bones animations blend? Cause that_t_d be sweet!!!!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-10-12T15:24:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_In a word_co_ no.  The real problem with bones is that the animation is produced externally.  The animation system is designed for playback of imported data.  Patching playback loops or splicing different playbacks might be good enough for some_co_ but if you look at the entire process_co_ not just the BJS piece_co_ having most things external is going to be a major limiting factor._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This is why I did not use the animation system for Automatons.  Here you do the bare minimum externally.  You define some alternative positions for the vertices to occupy_co_ shape keys.  You give the keys names in a standardized way_co_ so a mesh can _qt_Walk and chew gum at the same time_qt_.  The exporter does some analysis &amp_sm_ write out shape keys groups.  Everything else is done on the BJS side._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You do not need to make a lot of keys to really advanced things.  Gryff did a lip sync demo years ago using only 3 keys.  With automatons_co_ you could also queue the motions on the fly._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_An Automaton is a Mesh sub-class_co_ so it can have bones.  Think you will find that the shape key / animation via API approach will give bones a run for its money.  The secret weapon is really queues. With them you can just knit simple stuff together like legos_co_ all in advance.  No detecting when something is done._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]