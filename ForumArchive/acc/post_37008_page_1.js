[{"Owner":"Kjue","Date":"2018-04-13T12:52:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi! I_t_m doing a custom exporter from a source to get nice and structured glTF models as binary-glTF for my use case in BabylonJS. I modified it so that it comes equipped with the tags for MSFT_lod in place. I found I got it working to an extent with 3.1.1 version and I finally figured out that it_t_s just simulating the loading of higher detail levels. So I checked out the latest as well. Trouble I_t_m seeing now after modifying the lod scheme in the loader for MSFT_lod_co_ so that it would in fact use the addLODLevel function_co_ is that the meshes that are part of the logical tree don_t_t seem to hide away and I_t_m wondering why.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI did also figure out a potential getaway card with the idea_co_ that since I have put the submeshes to contain anything that belongs to a leaf of a node into the same subbranch of the tree_co_ I can pretty much flip the mechanism around and just reconstruct the tree form branches and would-be-boundingboxes to form a makeshift LODding scheme. It_t_s not what I wanted per say_co_ as I would love to control the scheme in the exporter side.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow I am still thinking if even that will work if I cannot even make the branches disappear with addLODLevel(distance_co_ null) calls. Help_co_ please? Cheers!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-04-13T15:32:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWe definitely need an example in the PG to understand your needs _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt_1_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt__gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-04-13T15:33:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tPinging _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/26831-bghgary/?do_eq_hovercard_qt_ data-mentionid_eq__qt_26831_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/26831-bghgary/_qt_ rel_eq__qt__qt__gt_@bghgary_lt_/a_gt_ fyi\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kjue","Date":"2018-04-13T16:35:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_ll see if I can work it into PG. What I_t_m really trying to understand is the way that the lodder works in BJS_co_ and under what principles. I have read through the sources already_co_ and the documentation regarding the instanced meshes with lodding.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI tried modifying the MSFT_lod _loadNodeAsync to use the addLODLevel method instead of removing the meshes from the scene when a more detailed version was available. When I did that_co_ the lod meshes worked as expected and disappeared with distance_co_ while the higher detail meshes remained visible regardless of distance.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_...\nnode._babylonMesh.addLODLevel(500_co_ null)_sm_\nlod._babylonMesh.addLODLevel(900_co_ null)_sm_\n..._lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-04-13T16:50:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis **should** work ! So definitely need a repro !\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kjue","Date":"2018-04-14T06:51:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWell okay_co_ that was fairly straightforward to repro. _lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#REB2BJ%233_qt_ rel_eq__qt_external nofollow_qt__gt_Here it is_lt_/a_gt_. It also has a bug with the lighting scheme and toggling debug view will show the real colors. Don_t_t know what that is about_co_ it looked okay on my other code. The key item is that when one zooms out_co_ the lod items disappear as expected and the other parts just stay as they are.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kjue","Date":"2018-04-16T15:18:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tRight and I also _lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#REB2BJ%234_qt_ rel_eq__qt_external nofollow_qt__gt_figured it out_lt_/a_gt_ myself. There is a dualistic nature to the loop which was confusing. Turns out that different parts of the loop trigger at different times and the hierarchial parts are loaded later. So they are available as the _primitiveBabylonMeshes for the nodes. After I found that_co_ it works charmingly and I can proceed with making the changes I need for the use case.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWould there be interest in using the lodding the way we are using it elsewhere too? The specification leaves the implementation detail open on this.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-04-16T18:05:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tPinging _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/26831-bghgary/?do_eq_hovercard_qt_ data-mentionid_eq__qt_26831_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/26831-bghgary/_qt_ rel_eq__qt__qt__gt_@bghgary_lt_/a_gt_ for the spec remark\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"bghgary","Date":"2018-04-16T18:20:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_212030_qt_ data-ipsquote-contentid_eq__qt_37008_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1523891936_qt_ data-ipsquote-userid_eq__qt_28353_qt_ data-ipsquote-username_eq__qt_Kjue_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t2 hours ago_co_ Kjue said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tWould there be interest in using the lodding the way we are using it elsewhere too?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI think it will be useful_co_ but it needs to be configurable depending on the use case.\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_212030_qt_ data-ipsquote-contentid_eq__qt_37008_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1523891936_qt_ data-ipsquote-userid_eq__qt_28353_qt_ data-ipsquote-username_eq__qt_Kjue_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t2 hours ago_co_ Kjue said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThe specification leaves the implementation detail open on this.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tYes_co_ the spec does not specify how the extension should be implemented as noted in the first statement of the _lt_a href_eq__qt_https_dd_//github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_lod#overview_qt_ rel_eq__qt_external nofollow_qt__gt_Overview_lt_/a_gt_. This is done intentionally as it depends on the use case.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tExamples of how the extension are used currently is listed in the spec as well _lt_a href_eq__qt_https_dd_//github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_lod#known-implementations_qt_ rel_eq__qt_external nofollow_qt__gt_here_lt_/a_gt_. BabylonJS is currently being used by _lt_a href_eq__qt_https_dd_//www.remix3d.com/_qt_ rel_eq__qt_external nofollow_qt__gt_remix3d.com_lt_/a_gt_ to improve the time it takes to first render the model.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kjue","Date":"2018-04-22T07:37:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_ll have to get back to this later. It did not span to my use case easily so I ended up modifying the lodding from source after all. I will keep looking at solutions for expansion.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]