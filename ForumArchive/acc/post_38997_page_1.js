[{"Owner":"yokewang","Date":"2018-07-21T03:35:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have written a simple demo to render 8000 cubes in BabylonJS. But found out it_t_s quite slower than in ThreeJS.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDemo in BabylonJs_dd_  _lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDemo in ThreeJS_dd_ _lt_a href_eq__qt_https_dd_//jsfiddle.net/pofq4827/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/pofq4827/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt does not make sense_co_ because BabylonJS supports more performance related features like vao.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAny help would be greatly appreciated.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-07-21T04:00:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tGreat demos. Can you share your FPS or performance stats?  On my machine with your jsfiddles_dd__lt_br /_gt_\n\tThreeJS_dd_  ~21 FPS_lt_br /_gt_\n\tBabylonJS_dd_ ~13 FPS\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy BabylonJS_dd_ ~38 FPS\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou are re-using your geometry in ThreeJS when you create your meshes_co_ I think that is essentially equivalent to instancing in BabylonJS_co_ causing a ~3x difference in FPS_dd__lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/10/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/10/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tedit_dd_ BoxGeometry is used in Three.js_co_ but not intended to be used as in your fiddle with BabylonJS.  Perhaps the BabylonJS docs could be updated to guide people coming from other ecosystems to best practices.  Hopefully this thread sheds some light for equivalence_dd__lt_br /_gt_\n\t_lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/38981-why-parameters-on-geometries-have-no-effect/?tab_eq_comments#comment-222588_qt_ rel_eq__qt__qt__gt_http_dd_//www.html5gamedevs.com/topic/38981-why-parameters-on-geometries-have-no-effect/?tab_eq_comments#comment-222588_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2018-07-21T05:01:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWell_co_ you don_t_t really use the same features in both examples. In the ThreeJS one_co_ you use the BufferGeometry. In 3JS_co_ the _lt_a href_eq__qt_https_dd_//threejs.org/docs/#api/core/BufferGeometry_qt_ rel_eq__qt_external nofollow_qt__gt_BufferGeometry_lt_/a_gt_ is under the hood a flat typed array to be passed directly to the GPU_co_ what is faster than converting some JS objects in a first pass_co_ and this geometry is shared among all the meshes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tActually_co_ in the BJS example that you provided_co_ you are trying to port line by line the 3JS code to BJS. But_co_ this doesn_t_t work that way because the frameworks don_t_t have the same way or philosophy to implement same features... Doing this will always lead to misunderstandings and wrong results.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs brianzinn suggested_co_ you could investigate how BJS does to achieve the same result in other ways.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn BJS_co_ you can use_co_ for example_co_ instances of a single mesh. In  this case_co_ the geometry_co_ and other properties like materials_co_ are shared among instances _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/how_to/how_to_use_instances_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/how_to/how_to_use_instances_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou could either use a Solid Particle System (SPS) _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/how_to/solid_particle_system_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/how_to/solid_particle_system_lt_/a_gt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/32/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/32/_lt_/a_gt_       _eq_&gt_sm_ 60 fps\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you want to tune things at buffer level_co_ there_t_s a way I just can remember now to to force to turn the buffers to be passed as flat ones (ie not related to indices ones)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEDIT _dd_ this _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/how_to/optimizing_your_scene#using-unindexed-meshes_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/how_to/optimizing_your_scene#using-unindexed-meshes_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2018-07-21T05:16:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tyou can even animate all of them at a decent framerate _dd_ _lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/43/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/43/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/47/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/47/_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"aWeirdo","Date":"2018-07-21T05:23:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tDat SPS._lt_br /_gt_\n\t422k boxes_sm_ _lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/49/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/49/_lt_/a_gt_ _lt_br /_gt_\n\t60 fps on my pc_co_ even when moving the camera_co_ yeah nah_co_ i don_t_t see the issue. _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"NasimiAsl","Date":"2018-07-21T05:36:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\ti am sure if Graphic  support 120 fs  _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5453_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/_qt_ rel_eq__qt__qt__gt_@jerome_lt_/a_gt_  show us 121fps\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-07-21T05:57:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_222668_qt_ data-ipsquote-contentid_eq__qt_38997_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1532150616_qt_ data-ipsquote-userid_eq__qt_17943_qt_ data-ipsquote-username_eq__qt_aWeirdo_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t25 minutes ago_co_ aWeirdo said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t60 fps on my pc\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t422K!!  My slow laptop is only 30FPS _lt_span_gt__lt_img alt_eq__qt__dd_(_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ title_eq__qt__dd_(_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt_  maybe I should have got a gaming laptop _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  This XPS 9560 is nearly a year old - still looking for something not too big with an amazing screen and at least nvidia 1080..._lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sable","Date":"2018-07-21T06:53:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou can make up most of the performance difference just by freezing the material.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/52/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/52/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThough the techniques above (instancing or sps) perform far better for scenes like this.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt_t_s certainly worth investigating these sorts of things though.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"yokewang","Date":"2018-07-21T08:24:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe frame rate improved by some optimizations from _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/how_to/optimizing_your_scene_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/how_to/optimizing_your_scene_lt_/a_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/57/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/57/_lt_/a_gt_  optimized version. But still slower than ThreeJS version.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj_lt_/a_gt_ original version.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBTW_dd_ We should not compare an ONE DRAWCALL instance version with a 8000 DRAWCALL version.  And ThreeJS supports instanced draw too.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt_t_s seems BabylonJs spends more time than ThreeJS to evaluate active meshes. I will try octree to see if it will help.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#353c41_sm_font-size_dd_14px_sm__qt__gt_Any help would be greatly appreciated._lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sable","Date":"2018-07-21T09:01:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI agree that evaluate active meshes seems unreasonably slow_co_ especially in the case where all the meshes in the scene are marked as always active.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe difference between having all the meshes marked as always active_co_ and freezing the active meshes array is 30 -&gt_sm_ 45 fps for me.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/65/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/65/_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"NasimiAsl","Date":"2018-07-21T10:07:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_pre_gt_\n_lt_code_gt_ for (var x _eq_ 0_sm_ x &lt_sm_ gridSize_sm_ x++)\n for (var y _eq_ 0_sm_ y &lt_sm_ gridSize_sm_ y++)\n for (var z _eq_ 0_sm_ z &lt_sm_ gridSize_sm_ z++) {\n                    var geometry _eq_ new THREE.BoxBufferGeometry(0.8_co_ 0.8_co_ 0.8)_sm_ \n                    var boxMesh _eq_ new THREE.Mesh(geometry_co_ material)_sm_\n                      }\n\n\nvs \n\n  var geometry _eq_ new THREE.BoxBufferGeometry(0.8_co_ 0.8_co_ 0.8)_sm_ \n                  \n for (var x _eq_ 0_sm_ x &lt_sm_ gridSize_sm_ x++)\n for (var y _eq_ 0_sm_ y &lt_sm_ gridSize_sm_ y++)\n for (var z _eq_ 0_sm_ z &lt_sm_ gridSize_sm_ z++) {\n                    var boxMesh _eq_ new THREE.Mesh(geometry_co_ material)_sm_\n                      }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tthat is not good sample to test at all \n_lt_/p_gt_\n\n_lt_p_gt_\n\twhen we make a new Mesh we never use one GeometryBuffer for a lot mesh\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//jsfiddle.net/pofq4827/5/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/pofq4827/5/_lt_/a_gt_  \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/68/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/68/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tif you wanna make that type i think we do different in share geometryBuffer \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2018-07-21T11:28:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAnother lead for the comparison _lt_span_gt__dd_ check that the 3JS phong material has the same default settings than the BJS standard material_co_ like specular_co_ etc ... I_t_m quite sure there_t_s some difference here because when rotating the cam to the dark side of the big cube_co_ both examples render differently _dd_ fully opaque for 3JS whereas still separated boxes for BJS_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_Check also that the canvas in both samples have same size _lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_[EDIT] I changed the 3JS ambient light to a hemispereLight like in 3JS so the comparison is better _dd_ _lt_a href_eq__qt_https_dd_//jsfiddle.net/pofq4827/11/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/pofq4827/11/_lt_/a_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_They still render differently in the dark side of the global cube_co_ meaning there_t_s still something different in the lights or in the materials_co_ I suppose_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-07-21T13:31:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAs Jerome stated_co_ it is not a good idea to port directly from one framework to another.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is something more Babylonjs wise to compare with your original demo_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/89/_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/6ng7usmj/89/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI also changed the hemi light (dynamic) by a ambient color like in original demo\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso please not that this demo works badly with uniform buffer as only world matrix change (thus using instances would be far better). In this case we update an entire uniform buffer for just a matrix which is counter productive\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"yokewang","Date":"2018-07-22T02:14:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe new version for 3JS_dd_ _lt_a href_eq__qt_https_dd_//jsfiddle.net/pofq4827/16/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//jsfiddle.net/pofq4827/16/_lt_/a_gt_   (disabled matrix auto updating and opaque objects sorting before rendering)_co_ its frame rate increased furtherly. The javascript computation time before indeed rendering(gl command)  is within 2ms comparing to 10ms in BabylonJS.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAfter inspecting the code for ThreeJS and BabylonJS_co_  _evaluateActiveMeshes method costs too much for 8000 meshes.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2018-07-22T06:45:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tReducing the 3JS example at the same window size as the BJS one_co_ I get quite the same framerate (30-33 fps) with your two last demos (dk and yokewang_t_s ones) on my laptop. The 3JS example is even slightly slower.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAre you sure that you get still such a performance difference now ?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"NasimiAsl","Date":"2018-07-22T08:00:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tboth is 30fps for me for chrome \n_lt_/p_gt_\n\n_lt_p_gt_\n\t firefox 5 - 6 fps\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-07-22T14:56:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tDid you see my example? In my example evaluateActiveMeshes costs 0 (_lt_a href_eq__qt_https_dd_//jsfiddle.net/6ng7usmj/89/_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt_ style_eq__qt_text-align_dd_ left_sm_ color_dd_ rgb(61_co_ 101_co_ 148)_sm_ text-transform_dd_ none_sm_ text-indent_dd_ 0px_sm_ letter-spacing_dd_ normal_sm_ font-size_dd_ 14px_sm_ font-style_dd_ normal_sm_ font-variant_dd_ normal_sm_ font-weight_dd_ 400_sm_ word-spacing_dd_ 0px_sm_ white-space_dd_ normal_sm_ box-sizing_dd_ border-box_sm_ orphans_dd_ 2_sm_ -webkit-text-stroke-width_dd_ 0px_sm_ background-color_dd_ transparent_sm__qt_ target_eq__qt__blank_qt__gt__lt_u_gt_https_dd_//jsfiddle.net/6ng7usmj/89/_lt_/u_gt__lt_font color_eq__qt_#003000_qt__gt_)_lt_/font_gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOn my computer_co_ my example is faster than your last 3js example.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is the code of the __lt_span style_eq__t_display_dd_ inline !important_sm_ float_dd_ none_sm_ background-color_dd_ transparent_sm_ color_dd_ rgb(53_co_ 60_co_ 65)_sm_ font-family_dd_ _qt_Roboto_qt__co__qt_Helvetica Neue_qt__co_Helvetica_co_Arial_co_sans-serif_sm_ font-size_dd_ 14px_sm_ font-style_dd_ normal_sm_ font-variant_dd_ normal_sm_ font-weight_dd_ 400_sm_ letter-spacing_dd_ normal_sm_ orphans_dd_ 2_sm_ text-align_dd_ left_sm_ text-decoration_dd_ none_sm_ text-indent_dd_ 0px_sm_ text-transform_dd_ none_sm_ -webkit-text-stroke-width_dd_ 0px_sm_ white-space_dd_ normal_sm_ word-spacing_dd_ 0px_sm__t__gt_evaluateActiveMeshes_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.scene.ts#L4190_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.scene.ts#L4190_lt_/a_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__t_display_dd_ inline !important_sm_ float_dd_ none_sm_ background-color_dd_ transparent_sm_ color_dd_ rgb(53_co_ 60_co_ 65)_sm_ font-family_dd_ _qt_Roboto_qt__co__qt_Helvetica Neue_qt__co_Helvetica_co_Arial_co_sans-serif_sm_ font-size_dd_ 14px_sm_ font-style_dd_ normal_sm_ font-variant_dd_ normal_sm_ font-weight_dd_ 400_sm_ letter-spacing_dd_ normal_sm_ orphans_dd_ 2_sm_ text-align_dd_ left_sm_ text-decoration_dd_ none_sm_ text-indent_dd_ 0px_sm_ text-transform_dd_ none_sm_ -webkit-text-stroke-width_dd_ 0px_sm_ white-space_dd_ normal_sm_ word-spacing_dd_ 0px_sm__t__gt_Among all the code_co_ the only things that could be slow are_dd__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__t_display_dd_ inline !important_sm_ float_dd_ none_sm_ background-color_dd_ transparent_sm_ color_dd_ rgb(53_co_ 60_co_ 65)_sm_ font-family_dd_ _qt_Roboto_qt__co__qt_Helvetica Neue_qt__co_Helvetica_co_Arial_co_sans-serif_sm_ font-size_dd_ 14px_sm_ font-style_dd_ normal_sm_ font-variant_dd_ normal_sm_ font-weight_dd_ 400_sm_ letter-spacing_dd_ normal_sm_ orphans_dd_ 2_sm_ text-align_dd_ left_sm_ text-decoration_dd_ none_sm_ text-indent_dd_ 0px_sm_ text-transform_dd_ none_sm_ -webkit-text-stroke-width_dd_ 0px_sm_ white-space_dd_ normal_sm_ word-spacing_dd_ 0px_sm__t__gt_- Frustum clipping (you can turn it of with mesh.alwaysSelectAsActiveMesh _eq_ true)_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__t_display_dd_ inline !important_sm_ float_dd_ none_sm_ background-color_dd_ transparent_sm_ color_dd_ rgb(53_co_ 60_co_ 65)_sm_ font-family_dd_ _qt_Roboto_qt__co__qt_Helvetica Neue_qt__co_Helvetica_co_Arial_co_sans-serif_sm_ font-size_dd_ 14px_sm_ font-style_dd_ normal_sm_ font-variant_dd_ normal_sm_ font-weight_dd_ 400_sm_ letter-spacing_dd_ normal_sm_ orphans_dd_ 2_sm_ text-align_dd_ left_sm_ text-decoration_dd_ none_sm_ text-indent_dd_ 0px_sm_ text-transform_dd_ none_sm_ -webkit-text-stroke-width_dd_ 0px_sm_ white-space_dd_ normal_sm_ word-spacing_dd_ 0px_sm__t__gt_- mesh.isReady (but we use the fatest version here as first parameter is set to false)_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__t_display_dd_ inline !important_sm_ float_dd_ none_sm_ background-color_dd_ transparent_sm_ color_dd_ rgb(53_co_ 60_co_ 65)_sm_ font-family_dd_ _qt_Roboto_qt__co__qt_Helvetica Neue_qt__co_Helvetica_co_Arial_co_sans-serif_sm_ font-size_dd_ 14px_sm_ font-style_dd_ normal_sm_ font-variant_dd_ normal_sm_ font-weight_dd_ 400_sm_ letter-spacing_dd_ normal_sm_ orphans_dd_ 2_sm_ text-align_dd_ left_sm_ text-decoration_dd_ none_sm_ text-indent_dd_ 0px_sm_ text-transform_dd_ none_sm_ -webkit-text-stroke-width_dd_ 0px_sm_ white-space_dd_ normal_sm_ word-spacing_dd_ 0px_sm__t__gt_And you can completely avoid the evaluate stage by calling scene.freezeActiveMeshes() like in my example (_lt_/span_gt__lt_a href_eq__qt_http_dd_//doc.babylonjs.com/api/classes/babylon.scene#freezeactivemeshes_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/api/classes/babylon.scene#freezeactivemeshes_lt_/a_gt_)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2018-07-22T19:05:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have the impression to see a publicity for 3js that tries to say that babylon is less efficient than 3js._lt_br /_gt_\n\tEach engine has its characteristics and its way of doing things. Babylon is very effective if you use it with the tools that must. It still has other tools to optimize.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn addition each engine has its strengths and if we must compare the two engines_co_ Babylon has a lot of assets and is much more modern and easy to use.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor my part_co_ I never understood anything at 3js and the number of incompatible thing from one version to another made me totally abandon the 3D in browser until I found Babylon who has me to do much more than 3js. In fact with 3js I display a cube and I already had a lot of difficulty to create materials. with babylon i understood right away and is display a lot more stuff. when I imported a mesh it worked and in 3js_co_ I had compatibility problems.  So 3js vs Babylon. Babylon with no hesitation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnother important piece of information and the community. when i post questions on the 3js forum_co_ i never got an answer. On babylon I had received in the minutes that followed my first posts because here there is an excellent community.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBrief_lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#000000_sm_font-size_dd_13px_sm_text-align_dd_left_sm__qt__gt__co_ _lt_/span_gt_A project with 8000 meshes is really a lot for a single scene. I can not believe that you need to create a project with 8000 meshes_co_ but maybe you want to create a GTA V and you are surrounded by a team of 100 people. I do not know._lt_br /_gt_\n\tWhen a project already reaches 500 to 1000 meshes it is already a project that has content to present_co_ if then you add instances_co_ clones_co_ you can create projects large enough without ever reaching 8000 meshes and get fps between 45 and 60 fps. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sable","Date":"2018-07-22T22:57:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIt seems odd that there is not much of a performance boost when setting all meshes to alwaysSelectAsActiveMesh _eq_ true_co_ but a big boost from freezing active meshes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/debug.html#QRIX4R%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/debug.html#QRIX4R#2_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIntuitively I_t_d think they_t_d have similar results.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"yokewang","Date":"2018-07-23T05:55:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tFreezing active meshes skip the step of checking 8000 mesh frustum clipping and state.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_                if (mesh.alwaysSelectAsActiveMesh || mesh.isVisible &amp_sm_&amp_sm_ mesh.visibility &gt_sm_ 0 &amp_sm_&amp_sm_ ((mesh.layerMask &amp_sm_ this.activeCamera.layerMask) !_eq__eq_ 0) &amp_sm_&amp_sm_ mesh.isInFrustum(this._frustumPlanes)) {\n                    this._activeMeshes.push(mesh)_sm_\n                    this.activeCamera._activeMeshes.push(mesh)_sm_\n                    mesh._activate(this._renderId)_sm_\n                    if (meshLOD !_eq__eq_ mesh) {\n                        meshLOD._activate(this._renderId)_sm_\n                    }\n                    this._activeMesh(mesh_co_ meshLOD)_sm_\n                }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tthis._activeMesh(mesh_co_ meshLOD) costs time.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd I got a little performance boost after below code replacement(BUT IT IS NOT A WISE SOLUTION).\n_lt_/p_gt_\n\n_lt_div style_eq__qt_font-size_dd_14px_sm__qt__gt_\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#808080_sm__qt__gt_// this._totalVertices.addCount(mesh.getTotalVertices()_co_ false)_sm__lt_/span_gt__lt_br /_gt_\n\t\t_lt_span style_eq__qt_color_dd_#000080_sm__qt__gt_this_lt_/span_gt_._totalVertices.addCount(mesh._geometry._totalVertices_co_ _lt_span style_eq__qt_color_dd_#000080_sm__qt__gt_false_lt_/span_gt_)_sm_\n\t_lt_/div_gt_\n\n\t_lt_div_gt_\n\t\t \n\t_lt_/div_gt_\n\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#808080_sm__qt__gt_// if (mesh.alwaysSelectAsActiveMesh || mesh.isVisible &amp_sm_&amp_sm_ mesh.visibility &gt_sm_ 0 &amp_sm_&amp_sm_ ((mesh.layerMask &amp_sm_ this.activeCamera.layerMask) !_eq__eq_ 0) &amp_sm_&amp_sm_ mesh.isInFrustum(this._frustumPlanes)) {_lt_/span_gt_\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n_lt_div style_eq__qt_font-size_dd_14px_sm__qt__gt_\n\t_lt_span style_eq__qt_color_dd_#000080_sm__qt__gt_if_lt_/span_gt_ (mesh.alwaysSelectAsActiveMesh || mesh.isVisible &amp_sm_&amp_sm_ mesh.visibility &gt_sm_ _lt_span style_eq__qt_color_dd_#0000ff_sm__qt__gt_0_lt_/span_gt_ &amp_sm_&amp_sm_ ((mesh.layerMask &amp_sm_ _lt_span style_eq__qt_color_dd_#000080_sm__qt__gt_this_lt_/span_gt_.activeCamera.layerMask) !_eq__eq_ _lt_span style_eq__qt_color_dd_#0000ff_sm__qt__gt_0_lt_/span_gt_) &amp_sm_&amp_sm_ mesh._boundingInfo.boundingSphere.isInFrustum(_lt_span style_eq__qt_color_dd_#000080_sm__qt__gt_this_lt_/span_gt_._frustumPlanes)) {\n_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2018-07-23T08:35:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe frustum check  against boundingSpheres only is obviously faster but also less accurate.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tNot sure_co_ but I think that 3JS computes the culling only with the bounding spheres _dd_ _lt_a href_eq__qt_https_dd_//github.com/mrdoob/three.js/issues/11291_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/mrdoob/three.js/issues/11291_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ if you tune your BJS demo so it_t_s the same as the 3JS one_co_ you_t_ll get same perfs _lt_span class_eq__qt_ipsEmoji_qt__gt_😉_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaybe we could add a parameter in BJS to let the final user to choose whether he wants to limit the culling tests to boundingSpheres only. This already exists in the solid particle intersections _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/how_to/solid_particle_system#particle-intersections_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/how_to/solid_particle_system#particle-intersections_lt_/a_gt_    boundingSphereOnly _dd_ true\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-07-23T15:07:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI like the idea of having a way to define which culling algorithm you want. Will work on that _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2018-07-23T16:55:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/issues/4812_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/issues/4812_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]