[{"Owner":"Olgo","Date":"2016-11-14T17:18:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi everybody_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI noticed a bug when I was playing with ExtrudeShape function.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen you make a concave shape_co_ some artefacts are visible on caps -&gt_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#102TBD%2336_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#102TBD#36_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is due to a bad triangulation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIs anyone has an idea to correct that ?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-11-14T17:28:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tyep_co_ the CAP is computed from the model shape barycenter in order to the fastest possible when the mesh is morphed\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis may lead to some artefacts with concave shapes ... well_co_ this is a question of choice _dd_ fast computation for morphing or triangulation (what could be more complex in the case of morphing) to get something more like you could expect\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs a workaround exists _dd_ put a plane mesh on to the extruded shape with the right triangulated mesh and merge it with the extruded one if needed_co_ for now_co_ I chose to let the barycenter way of computing.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut if someone wants the triangulation_co_ maybe he could change this behavior\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-11-14T23:21:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tIn a situation like that_co_ go ahead and build it up caped then add your caps later by updated the vertex data and set up the uv_t_s on the caps the way you want that way.  It will give you more control and will give you he ability to define how the indices are connected so that you can avoid that._lt_br /_gt__lt_br /_gt_\n\tIts all on how the extrude algorithm handles the points and a its designed for convex shapes i believe.  If at any point you can cross into whitespace at any point on the objects shape while drawing a line between two points then it really tosses a stick in the whole process.  Its like AABB testing convex vs concave they are different but the same process._lt_br /_gt__lt_br /_gt_\n\tI may be off on this though_co_ but yeah Id give constructing your caps manually a shot_co_ on a shape like that._lt_br /_gt__lt_br /_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5453_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/_qt_ rel_eq__qt__qt__gt_@jerome_lt_/a_gt_pointed out a good approach too_co_ and he knows what he is talking about for sure.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-11-15T08:17:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tin brief_co_ you can build your own cap with this _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.4/PolygonMeshBuilder_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.4/PolygonMeshBuilder_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tdemo _dd_ _lt_a href_eq__qt_http_dd_//babylonjs.com/Demos/Polygon/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonjs.com/Demos/Polygon/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhy does the capping process to be computed fast ? well_co_ when you dynamically morph an extruded shape _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#20IBWW%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#20IBWW#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tdoc here _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe are a game engine_co_ aren_t_t we ? _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt_ .. so let_t_s keep tools to animate or morph things by computation and let_t_s build static things with BJS static builders (polygon builder) or external softwares (blender_co_ etc).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAll the BJS parametric shapes ( _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/Parametric_Shapes_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/Parametric_Shapes_lt_/a_gt_ ) are designed to be easily animated or morphed the fastest possible way with no memory reallocation. Sometimes_co_ they may not fit the need to build some static shapes with specific constraints. In this case_co_ working with a 3D editor or merging your own needed meshes can be the solution to achieve your goal.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]