[{"Owner":"Pryme8","Date":"2018-07-17T21:16:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#NAG06Y%235_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#NAG06Y#5_lt_/a_gt__lt_br /_gt_\n\t_lt_br /_gt_\n\tOk_co_ so I have my star shape which has all the vertices labeled_co_ as you can see its UV is all sorts of messy._lt_br /_gt_\n\tWhat I am trying to do is figure out a simple way to get its UV to match the plane that is the _qt_same size_qt_._lt_br /_gt_\n\t_lt_br /_gt_\n\tI know I can do it mathematically by the points points position in relation to the stars size and manually update the uv buffer.  Just wondering if anyone has a quick and easy trick otherwise._lt_br /_gt_\n\t_lt_br /_gt_\n\tI was thinking of writing up a _qt_project UV plane_qt_  function_co_ where you pass in a mesh_co_ a plane and a vector3 to signify the projection direction._lt_br /_gt_\n\tSo like if the projection axis was Vector3(0_co_0_co_1) it would fire rays in this direction (and its inverse) from each of the target meshes vertices and check for a hit on the plane if it hits the plane update that points UV to match the raypicked point_t_s uv.  Is this gibberish or anyone savvy?_lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-07-17T21:56:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNever mind got it... Unless someone else already has a more robust method._lt_br /_gt_\n\t_lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#NAG06Y%236_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#NAG06Y#6_lt_/a_gt__lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#NAG06Y%238_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#NAG06Y#8_lt_/a_gt_ &lt_sm_- Non flat projection._lt_br /_gt_\n\t_lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#NAG06Y%2318_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#NAG06Y#18_lt_/a_gt_ &lt_sm_- one with skipTo and stopAt for vertices ID in case you only want to project a section of a mesh.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-07-17T23:49:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tLove auto-solved topics _sm_D\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-07-18T00:01:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI was kinda thinking about making this a _lt_br /_gt_\n\tBABYLON.Mesh.projectMeshUV method or something._lt_br /_gt_\n\t_lt_br /_gt_\n\tCould see others having a use for this_co_ but I_t_m not sure if I have the time to debug and dev it to a full method... so Ill hold off and maybe write a snippet instead. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]