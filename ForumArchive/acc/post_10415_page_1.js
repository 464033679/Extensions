[{"Owner":"tjslater","Date":"2014-11-12T18:05:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m a new member and relatively new to WebGL_co_ but professionally I_t_m an angular/node developer._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m currently setting up my Node server to proxy a 3rd party API in order to pull images and apply them as textures to meshes in my scene_co_ but I can_t_t get around the CORS issue that surrounds loading in the images. On the Node side_co_ I_t_ve set the CORS (Access-Control-Allow-Origin) header_co_ and everything else works fine_co_ it_t_s just with images I have a particular problem._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_BABYLON.Tools.LoadImage(response.archivesimages[0].image_uri_co_ function(){console.log(_t_loaded_t_)}_co_function(item_co_ err){console.log(_t_error_dd__t__co_ err_co_ item_co_ _t_not loaded_t_ )_sm_})_sm__lt_/pre_gt__lt_p_gt_When I get the _t_item_t_ in the error return function_co_ the image is there_dd_ _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_&lt_sm_img crossorigin_eq_​_qt_anonymous_qt_ src_eq_​_qt_http_dd_​/​/​cdn2.brooklynmuseum.org/​images/​opencollection/​archives/​size2/​S03i3079l01.jpg_qt_&gt_sm_​_lt_/pre_gt__lt_p_gt_As it should_co_ yet I_t_m still getting the CORS error._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_My response headers_dd__lt_/p_gt__lt_ol_gt__lt_li_gt_\t_lt_div style_eq__qt_color_dd_rgb(84_co_84_co_84)_sm_font-weight_dd_bold_sm__qt__gt_access-control-allow-headers_dd__lt_/div_gt_\t_lt_div style_eq__qt_font-family_dd_Menlo_co_ monospace_sm_font-size_dd_11px_sm__qt__gt_Content-Type_co_ Authorization_co_ Content-Length_co_ X-Requested-With_lt_/div_gt_\t_lt_/li_gt__lt_li_gt_\t_lt_div style_eq__qt_color_dd_rgb(84_co_84_co_84)_sm_font-weight_dd_bold_sm__qt__gt_access-control-allow-methods_dd__lt_/div_gt_\t_lt_div style_eq__qt_font-family_dd_Menlo_co_ monospace_sm_font-size_dd_11px_sm__qt__gt_GET_co_PUT_co_POST_co_DELETE_co_OPTIONS_lt_/div_gt_\t_lt_/li_gt_\t_lt_li_gt_\t_lt_div style_eq__qt_font-family_dd_Menlo_co_ monospace_sm_font-size_dd_11px_sm__qt__gt__lt_span style_eq__qt_color_dd_rgb(84_co_84_co_84)_sm_font-family_dd__t_Lucida Grande_t__co_ sans-serif_sm_font-size_dd_12px_sm_font-weight_dd_bold_sm__qt__gt_access-control-allow-origin_dd_ * &lt_sm_- (I_t_ve also tried domain-specific settings here)_lt_/span_gt__lt_/div_gt_\t_lt_/li_gt__lt_/ol_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Am I missing a step? _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-11-12T21:01:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_ Did you try this_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var texture _eq_ new BABYLON.Texture(uri_co_ scene)_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tjslater","Date":"2014-11-12T21:53:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Sure_co_ I_t_ve tried instantiating a new texture in the callback with the uri_co_ still running into the same problem._lt_/p_gt__lt_p_gt_I_t_ve also tried loading the texture directly without an API call_co_ using the URL directly._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So *a* solution I_t_ve found is instantiating a new Image()_co_ setting the src from the uri_co_ and setting the crossorigin manually. Then when I instantiate the new texture_co_ I use the Image.src instead. I_t_m not sure why the ImageLoader_co_ which essentially does the same thing_co_ doesn_t_t work for me_co_ but I_t_m glad I found a solution._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_//shorthandvar img _eq_ new Image()_sm_img.crossorigin _eq_ _t__t__sm_img.src _eq_ response.img.uri_sm_var texture _eq_ new BABYLON.Texture(img.src_co_ scene)_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-11-12T22:06:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Sounds good _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2014-11-12T22:59:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This is weird as we_t_re using CORS on babylonjs.com without any issue. The website is hosted on an Azure website and the geometries &amp_sm_ textures somewhere else (blob storage) with CORS enabled. Babylonjs has been made to work into this scenario without any change. Did you try some network traces using Fiddler to check that your CORS rule is properly set?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tjslater","Date":"2014-11-12T23:05:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey thanks for replying - actually_co_ my earlier fix ended up not working. So I_t_m definitely doing something wrong (or it_t_s the API I_t_m calling?)_lt_/p_gt__lt_p_gt_In my express settings_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_res.header(_t_Access-Control-Allow-Origin_t__co_ _t_*_t_)_sm_res.header(_t_Access-Control-Allow-Methods_t__co_ _t_GET_co_PUT_co_POST_co_DELETE_co_OPTIONS_t_)_sm_res.header(_t_Access-Control-Allow-Headers_t__co_ _t_Content-Type_co_ Authorization_co_ Content-Length_co_ X-Requested-With_t_)_sm__lt_/pre_gt__lt_p_gt_Does this look about right to you? Or perhaps there_t_s another header I need to add? I shouldn_t_t need to add anything specific to the route I wouldn_t_t think._lt_/p_gt__lt_p_gt_Mind you_co_ this issue is only coming up when trying to load the image in WebGL_co_ it_t_s working perfectly fine as an image on page._lt_/p_gt__lt_p_gt_There are other settings_co_ but I don_t_t think they_t_d be conflicting with my header settings._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2014-11-13T08:04:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_What_t_s your web server? IIS? Apache? I don_t_t understand your res.header lines. Are you setting the CORS rule on the web server hosting your content? _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tjslater","Date":"2014-11-14T00:22:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m not hosting the content_co_ I_t_m running a node-express server to route a 3rd party API to my own routes. I figured I had to do that to get around any other CORS issues_co_ which it does_co_ just not for WebGL._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_exports.show _eq_ function (req_co_ res) {    request({        url_dd_ [3rd party API url here] + req.params[slug from frontend API call] + _t_&amp_sm_format_eq_json_t_    }_co_ function (err_co_ response_co_ body) {        if (response) {            res.send(200_co_ body)_sm_        }    })_sm_}_sm__lt_/pre_gt__lt_p_gt_I_t_ve been reading a good deal about having to set CORS on the images themselves. I assume that_t_s why the babylon imageloader sets the _t_crossorigin_eq_anonymous_t_. It_t_s just not working_co_ no matter what response headers I use. The only other way around this_co_ that I can see_co_ is to process all the images_co_ turning them into base64 strings_co_ and sending those instead of the json. I assume I_t_m hitting this issue because the original 3rd party API doesn_t_t allow CORS on their images._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tjslater","Date":"2014-11-16T05:21:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Update_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So I figured out what I was doing wrong._lt_/p_gt__lt_p_gt_While I was pulling in the json data from a 3rd party api_co_ the links to the images were still in another server that didn_t_t allow CORS._lt_/p_gt__lt_p_gt_So what I_t_m doing is pulling in the data_co_ converting it to base64_co_ and sending a json object with a base64 image array to the frontend where I_t_m able to apply it._lt_/p_gt__lt_p_gt_The downside is_co_ and I_t_m not entirely clear on this_co_ is that Babylon doesn_t_t seem to recognize Base64 images. I_t_ve been able to use them only in Three.js thus far._lt_/p_gt__lt_p_gt_Perhaps someone here will be able to clear that up? Because I can_t_t find anything about trying to use base64 in Babylon. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-11-20T21:16:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This should work. Could you create a playground sample with a base64 image?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]