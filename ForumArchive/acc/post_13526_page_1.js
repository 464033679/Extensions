[{"Owner":"jerome","Date":"2015-03-31T09:41:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m currently coding the tube update feature._lt_/p_gt__lt_p_gt_I want it easy _dd_ the user only needs to pass a path_co_ a radius and a tessellation to build his tube. So I want he just passes another path and another radius to update the existing tube._lt_/p_gt__lt_p_gt_As the number of tube vertices depends directly upon the tessellation_co_ it can_t_t be changed once the mesh is created._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So the tessellation (as well as other properties like pathArray array or path3D_co_ in the purpose not to reallocate memory each update call) should be stored with the tube object._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_TypeScript doesn_t_t allow to add a new property to an instance of a class._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The tube is just a particular ribbon. This ribbon is a Mesh instance._lt_/p_gt__lt_p_gt_Actually_co_ the tube mesh is just a big math helper for some complex sub-types of ribbons (tubular)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Should I add some properties to the Mesh class although they aren_t_t pertinent for other kinds of mesh _dd_ pathArray_co_ path3D_co_ tessellation ?_lt_/p_gt__lt_p_gt_they could be then re-used in almost any tubular kind of mesh_co_ I guess_co_ and this would be very easy to do_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Or do you (BJS architects) prefer another solution ?_lt_/p_gt__lt_p_gt_I don_t_t think having a Tube class really is worth it imho ..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-03-31T10:06:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_You can do something like this_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var tess _eq_ (&lt_sm_any&gt_sm_mesh).tessellation_sm_(&lt_sm_any&gt_sm_mesh).pathArray _eq_ new_path_array_sm__lt_/pre_gt__lt_p_gt_This way you can add dynamic properties to TS object without compile errors! It_t_s not very pretty_co_ but immensely useful when you need the flexibility of JS._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-03-31T10:36:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_What about an object in Mesh class _dd_ MeshOptions_co_ or MeshParameters_co_ or MeshSpecifics._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This object could be empty for _t_classics_t_ meshes_co_ and contains stuff like this for a Tube _dd_ _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_this.meshOptions _eq_ {tesselation _dd_ 8_sm_pathArray _dd_ []_sm_...}_lt_/pre_gt__lt_p_gt_In your Tube code _dd_ _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_if (this.meshOptions &amp_sm_&amp_sm_ this.meshOptions.tesselation) {  // Do something}_lt_/pre_gt__lt_p_gt__lt_span style_eq__qt_font-size_dd_10px_sm__qt__gt_Sorry i don_t_t know how to TypeScript..._lt_/span_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-03-31T11:08:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Why won_t_t you create another class with the extra parameters_co_ that extends the Mesh class? Worked wonderfully with the ground mesh! _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-03-31T11:35:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_thank you all for your clever answers _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_well_co_ the only right clean way seems to create another class anyway._lt_/p_gt__lt_p_gt_I just didn_t_t want to add too much code in BJS for storing only 3 properties just for a single type of mesh. But..._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-03-31T12:06:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_mmh..._lt_/p_gt__lt_p_gt_Not as easy as for the GroundMesh._lt_/p_gt__lt_p_gt_In the _lt_em_gt_CreateGroundMesh_lt_/em_gt_ code_co_ we create a GroundMesh object which is a raw Mesh and then we applied computations to it to make the right associated vertexData._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Here_co_ it_t_s a little different _dd_ I get a ribbon instance (Mesh). Everything is computed in the ribbon. The ribbon constructor can_t_t return a Tube instance (which is only a particular case)_co_ it must return a Mesh instance._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I need to find a way to add these properties after the Mesh instance (ribbon) is created._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If I can_t_t ... maybe the right way would then be to adjust the Tube class constructor to accept a ribbon instance (instead of the mesh usual _lt_em_gt_super_lt_/em_gt_ constructor) and just add these 3 properties._lt_/p_gt__lt_p_gt_Any ideas ?_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_module BABYLON {    export class TubularMesh extends Mesh {        public _ribbon_dd_ Mesh_sm_        public _pathArray_dd_ new Array&lt_sm_Array&lt_sm_Vector3&gt_sm_&gt_sm_()_sm_        public _path3D_dd_ Path3D_sm_        public _tessellation_dd_ number_sm_        constructor(ribbon_dd_ Mesh_co_ pathArray_dd_ Vector3[][]_co_ path3D_dd_ Path3D_co_ tessellation_dd_ number) {            this._ribbon _eq_ ribbon_sm_            this._pathArray _eq_ pathArray_sm_            this._path3D _eq_ path3D_sm_            this._tessellation _eq_ tessellation_sm_        }..._lt_/pre_gt__lt_p_gt_and then in the _lt_em_gt_CreateTube()_lt_/em_gt_ code _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_// something to compute the right pathArray for tubesvar ribbonTube _eq_ Mesh.CreateRibbon(name_co_ pathArray_co_ etc_co_ etc)_sm_var tube _eq_ new Tube(ribbon_co_ pathArray_co_ path3D_co_ tessellation)_sm_return tube_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-03-31T12:17:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_ _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_Looks like I can_t_t do this _dd_ _qt_Constructors for derived classes must contain a _t_super_t_ call._qt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-03-31T12:24:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_maybe_co_ I just don_t_t extend the Mesh class... and just create some kind of container._lt_/p_gt__lt_p_gt_It works but I don_t_t know if it is really clean besides the rest of BJS code _dd_ a TubeMesh class which wouldn_t_t extend the Mesh class._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-03-31T12:25:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_You are missing the super call..._lt_/p_gt__lt_p_gt_Why won_t_t you try integrating it into the RibbonMesh class? and then a tube is actually a differently calculated ribbon mesh?_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint lang-auto_qt__gt_module BABYLON {    export class RibbonMesh extends Mesh {        public _pathArray_dd_ new Array&lt_sm_Array&lt_sm_Vector3&gt_sm_&gt_sm_()_sm_        public _path3D_dd_ Path3D_sm_        public _tessellation_dd_ number_sm_        constructor(name_dd_string_co_ scene_dd_Scene) {            super(name_co_ scene)_sm_            //calculate everything        }        initTube(pathArray_dd_ Vector3[][]_co_ path3D_dd_ Path3D_co_ tessellation_dd_ number) {            //do your magic        }..._lt_/pre_gt_\n\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2015-03-31T18_dd_17_dd_51Z_t_ title_eq__t_03/31/2015 06_dd_17  PM_t_ data-short_eq__t_3 yr_t__gt_March 31_co_ 2015_lt_/time_gt_ by RaananW_lt_/strong_gt_\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-03-31T12:43:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Because there_t_s no ribbonMesh class !_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_A ribbon is just an instance of a mesh._lt_/p_gt__lt_p_gt_It didn_t_t need its own class because_co_ despite there are many generic calculations_co_ it is a very simple mesh_co_ far more simple than a box or a sphere in terms of internal logic._lt_/p_gt__lt_p_gt_Actually_co_ it is really an ultra-basic mesh (just triangles between two paths) but with all the tools to be handled by the user._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As we can do quite everything with a ribbon_co_ I decided to provide some pre-computed ribbon types so the final user will have less geometric work to do by himself._lt_/p_gt__lt_p_gt_The tube is just a ribbon application. As well as the extrusion._lt_/p_gt__lt_p_gt_I just provide methods to the user in where he just gives simple parameters _dd_ an axis_co_ a radius_co_ etc and then the underlying ribbon is computed to build a tube or an extruded shape._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Well_co_ the ribbon is the elementary brick to build complex shapes with math functions._lt_/p_gt__lt_p_gt_So there aren_t_t so far any classes for these higher level constructions._lt_/p_gt__lt_p_gt_There aren_t_t either relative _lt_em_gt_CreateTube_lt_/em_gt_ or _lt_em_gt_CreateExtrusion_lt_/em_gt_ methods in the _lt_em_gt_vertexData_lt_/em_gt_ class because the _lt_em_gt_CreateRibbon_lt_/em_gt_ method is enough to do the job._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-03-31T13:02:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well_co_ create one _dd_-)_lt_/p_gt__lt_p_gt_If it makes sense_co_ create one. If there is a need to add parameters that are not a part of the mesh_co_ create one. If you can pack the entire Ribbon logic in one class_co_ create one. I don_t_t see the problem._lt_/p_gt__lt_p_gt_The GroundMesh class has 37 lines of code. 2 extra variables and 2 extra functions. And it made sense to create it. So I don_t_t see the difference between the two._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_TypeScript is wonderful to structure your code. I always think that If you need to use a hack to add some parameter to your class_co_ you are doing something _qt_wrong_qt_. Maybe unstructured_co_ maybe a bit dirty_co_ maybe it can be solved in a better way. The result will be the same_co_ because eventually it is javascript... But readability_co_ organization_co_ they benefit from such a structure._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-03-31T13:19:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I understand what you mean and I agree._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But actually ribbons don_t_t need more than what a mesh provides._lt_/p_gt__lt_p_gt_I could have done Mesh &gt_sm_ Ribbon_co_ yes_co_ but there is no need._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Tessellation_co_ path3D_co_ etc aren_t_t ribbon properties. They have no sense for it (as for the global Mesh either)_co_ no value_co_ they aren_t_t pertinent._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_They are just a _lt_em_gt_way_lt_/em_gt_ to build a tube._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The tube isn_t_t a subclass of a ribbon but just an application of ribbon _dd_ a certain ribbon twisted in a certain way. This is why the ribbon is designed to _dd_ to mathematically build shapes._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The tube itself_co_ as a ribbon object_co_ doesn_t_t need really to store these extra parameters to exist._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I wanted to store them just to simplify the end user update method call (and to reuse allocated arrays in the render loop)._lt_/p_gt__lt_p_gt_As a end user_co_ you give an axis path_co_ a tesselletion and a radius to create your tube._lt_/p_gt__lt_p_gt_To update it_co_ you can pass a new path and/or a new radius... but the tesselletion value was lost after the tube creation._lt_/p_gt__lt_p_gt_I could ask the end user to re-pass it with the same value_co_ but I would prefer he just gives pertinent update values only to his point of view _dd_ those which will actually change the final shape of the tube._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_not sure I_t_m very clear_lt_/p_gt__lt_p_gt_it_t_s more a design problem than a syntaxic one_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-03-31T13:55:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I will search with the _lt_em_gt_casting_lt_/em_gt_ way _dd_ a TubularMesh class extending the Mesh class with these extra parameters ... and the usual mesh ribbon_co_ then casted._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-03-31T14:09:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I honestly think this is not the best solution_co_ but it is only an opinion  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think inheritance in OOP is there for a reason - pack all logic involving this kind of object in the class where it belongs. Technically you could simply add the init function i suggested to the Mesh class. but it doesn_t_T belong there. It belongs as an initialization of a Ribbon object (If I understood you correctly). The parameters are not important_co_ and not a part of the class. The function is._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Again - this is just an opinion_co_ this can be quite a long discussion _dd_-)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you are looking for a simply way to add an parameter in typescript_co_ I would personally use jahow_t_s way_co_ or_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_mesh[_t_parameter_t_] _eq_ value_lt_/pre_gt__lt_p_gt_this way you avoid the type-safety the easiest way. no casting at all._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-03-31T14:15:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Works fine with _lt_em_gt_cast_lt_/em_gt_ and _lt_em_gt_TubularMesh_lt_/em_gt_ class to embbed these parameters _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_soon in PR _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-03-31T14:48:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Oopps_co_ we answered in the same time !_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I agree with you about the OOP design. Definetly._lt_/p_gt__lt_p_gt_But I think my explanation wasn_t_t clear _dd_ I had more a design problem than a typescript problem and just couldn_t_t solve it with TS._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As the extra needed parameters weren_t_t a part of the Mesh class_co_ they weren_t_t either a part of the ribbon. This was clean and I respected this design._lt_/p_gt__lt_p_gt_The tube is not a class._lt_/p_gt__lt_p_gt_Don_t_t know how to explain ... imagine you_t_ve got a function sizing a mesh box with twice width than height and three times longer than high_co_ and B for RGB values only greater than 0.5_lt_/p_gt__lt_p_gt_and imagine you don_t_t give sizes or colors as parameter to your function but other values (age_co_ temperature ?) from which the size to scale the box will then be computed_lt_/p_gt__lt_p_gt_(not sure my example is very good either)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Well_co_ it_t_s not a subclass of the box class (which didn_t_t exist)_co_ neither a subclass of the mesh class._lt_/p_gt__lt_p_gt_It_t_s just a particular box instance computed from strange custom parameters with a dedicated function._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This is the same for the ribbon/tube relationship _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So I still use the mesh class which is the only logic one to be used._lt_/p_gt__lt_p_gt_And just when needed_co_ I cast the handled object to the TubularMesh class_co_ extended from Mesh and just embbeding memorable values_co_ to access/store these strange values._lt_/p_gt__lt_p_gt_Only for concerned instances of the ribbon mesh and only if needed (when values should be stored)._lt_/p_gt__lt_p_gt_It avoids the unnecessary inheritance _dd_ Mesh &gt_sm_ Ribbon (which would have had nothing more) &gt_sm_ Tube (just a functional computed case of a ribbon instance)_lt_/p_gt__lt_p_gt_this would have been in my weird example _dd_ Mesh &gt_sm_ Box (idem) &gt_sm_ StrangeBox (computed)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Not sure again I_t_m more clear this time._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-01T08:13:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_As you adviced in the github discussion_co_ I finally got rid off the TubularMesh class (and file) and used the Jahow_t_s way _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]