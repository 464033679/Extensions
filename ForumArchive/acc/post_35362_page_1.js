[{"Owner":"1glayfan","Date":"2018-01-30T03:21:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe 3d max exporter plugin supports several format including the .babylonjs and .gltf. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_float_dd_none_sm_background-color_dd_transparent_sm_color_dd_rgb(53_co_60_co_65)_sm_font-family_dd_Roboto_co_ _t_Helvetica Neue_t__co_ Helvetica_co_ Arial_co_ sans-serif_sm_font-size_dd_14px_sm_font-style_dd_normal_sm_font-variant_dd_normal_sm_font-weight_dd_400_sm_letter-spacing_dd_normal_sm_text-align_dd_left_sm_text-decoration_dd_none_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm__qt__gt_If the speed and quality of rending is of most importance_co_ which format is recommended ?_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-01-30T15:47:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI do not use max_co_ but some general guidelines.  The only aspect of speed really controlled by the exporter is file size.  When comparing text files verses binary_co_ in general multiply the text file size by 0.25_co_ since it is gzippable &amp_sm_ binary is not.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor quality_co_ some might think that more digits is MUCH better_co_ or just secretly delight in making their customers wait_lt_img alt_eq__qt__dd_o_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_ohmy.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/ohmy@2x.png 2x_qt_ title_eq__qt__dd_o_qt_ width_eq__qt_20_qt_ /_gt_!  using 4 digits to the right of the decimal_co_ a mesh scaled in real life in meters is in micro-meter precision.  That could be lower than the matching texture.  Just how close are you really going to get_co_ camera.minZ?  It gets worse when the mesh is scaled in inches or decimeters.  Max_co_ I think_co_ uses 8 digits (no trailing zero reduction).  Would that be in nano-inch precision? WTF.  When you combine that with face normals which smooth_co_ this completely ridiculous.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have done a lot of work on a pair of exporters for Blender_co_ .babylon &amp_sm_ inline .js.  Right now they output 4 decimals (dropping trailing 0_t_s)_co_ but am thinking of adding a switch from 2 to 4 for vertex positions.  My own work is in decimeters.  Micro-decimeters (nanometers maybe?) is a waste_co_ so 3 is fine.  Other vertex types are in fixed scale.  Thinking about going to 3 decimals for normals_co_ UVs_co_ vertex colors_co_ matrix weights.  999 in both directions for each axis for normals &amp_sm_ the others is very likely indiscernible from 9999.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou are also missing the category of what can be exported by each of the formats.  The more that can be _qt_coded_qt_ in the UI_co_ the less hand built code required.  An example is multiple animations between the Blender .babylon &amp_sm_ .gltf exporters (.gltf not written by us).  .gltf can only export a single animation from Blender_co_ but the .babylon (&amp_sm_ .js) exporter can do multiples.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"1glayfan","Date":"2018-01-30T20:04:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/8492-jcpalmer/?do_eq_hovercard_qt_ data-mentionid_eq__qt_8492_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/8492-jcpalmer/_qt_ rel_eq__qt__qt__gt_@JCPalmer_lt_/a_gt_ thanks for the reply!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe specific scenario for my use case is for webvr app_co_ but I believe what you mentioned above also applies. Too much details would also impact the rendering performance inside the vr headset_co_ so I guess a good balance is needed.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is what I noticed_dd_ scene which may be rendered just fine in the browser may not be so inside the vr headset. The refresh rate seems to be drop inside the headset. Moving your head quickly side by side is usually a good test if the rendering if ok or not. If not you will see the lag which results in momentary black screen consistently.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe decimal precision you mentioned is a good point_co_ I will look into it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell since you said that there is at least one limitation of the .gltf format_co_ I guess it_t_s best to save your work in the native format aka .babylonjs. This assumes there is no graphics quality diff between the two when loaded into the scene (using scene loader).\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-30T22:39:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_ regarding rendering quality I think you can consider both equal.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut if you decide to get a more portable file format then gltf is the way to go\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you want a more complete format then pick babylon\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"1glayfan","Date":"2018-01-31T03:03:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ thanks.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]