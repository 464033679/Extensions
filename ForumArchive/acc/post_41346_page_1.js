[{"Owner":"Sme","Date":"2018-11-17T22:29:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have a rather large map_co_ and am therefore loading it in chunks 16x16 units in size. At any given time_co_ there are are a total of 25 chunks loaded in a 5x5 grid.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEach chunk has its own mesh_co_ created using BABYLON.Mesh.createGroundFromHeightMap_co_ and then I position the ground meshes at the appropriate locations.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo create the height maps_co_ I took the original map and cut it into chunks as well_co_ and then pass it to each chunk. However_co_ the edges of the ground meshes do not align_co_ particularly if the edge has a steep slope. I attached a screenshot to better understand what I_t_m talking about.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhats the best way to fix this? Is using 25 ground meshes at a time a bad idea (should I only have 1 ground mesh at any given time)?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks\n_lt_/p_gt_\n\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_11/groundfromheightmaps.png.cbb40573996ec6a4974cda1910a2cc1a.png_qt_ class_eq__qt_ipsAttachLink ipsAttachLink_image_qt__gt__lt_img data-fileid_eq__qt_21041_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_11/groundfromheightmaps.png.cbb40573996ec6a4974cda1910a2cc1a.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_groundfromheightmaps.png_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"TheSkrapper","Date":"2018-11-18T04:24:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIt could be that your textures are being smoothed before they are used as the height map.  Try some code similar to the following...\n_lt_/p_gt_\n\n_lt_div style_eq__qt_background-color_dd_#1e1e1e_sm_color_dd_#d4d4d4_sm_font-size_dd_14px_sm__qt__gt_\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#569cd6_sm__qt__gt_var_lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ convertToFlat _lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt__eq__lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#569cd6_sm__qt__gt_function_lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_()_lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_{_lt_/span_gt_\n\t_lt_/div_gt_\n\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#569cd6_sm__qt__gt_for_lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_(_lt_/span_gt__lt_span style_eq__qt_color_dd_#569cd6_sm__qt__gt_var_lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ index _lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt__eq__lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#b5cea8_sm__qt__gt_0_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt__sm__lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ index _lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_&lt_sm__lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ scene_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_textures_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_length_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt__sm__lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ index_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_++)_lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_{_lt_/span_gt_\n\t_lt_/div_gt_\n\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_scene_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_textures_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_[_lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_index_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_]._lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_updateSamplingMode_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_(_lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_BABYLON_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_Texture_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_NEAREST_LINEAR_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_)_sm__lt_/span_gt_\n\t_lt_/div_gt_\n\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_}_lt_/span_gt_\n\t_lt_/div_gt_\n\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_}_lt_/span_gt_\n\t_lt_/div_gt_\n\t \n\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_scene_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_executeWhenReady_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_(_lt_/span_gt__lt_span style_eq__qt_color_dd_#569cd6_sm__qt__gt_function_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_()_lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_{_lt_/span_gt_\n\t_lt_/div_gt_\n\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_convertToFlat_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_()_sm__lt_/span_gt_\n\t_lt_/div_gt_\n\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt_})_sm__lt_/span_gt_\n\t_lt_/div_gt_\n\t \n\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#569cd6_sm__qt__gt_return_lt_/span_gt__lt_span style_eq__qt_color_dd_#d4d4d4_sm__qt__gt_ scene_lt_/span_gt__lt_span style_eq__qt_color_dd_#dcdcdc_sm__qt__gt__sm__lt_/span_gt_\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n_lt_p_gt_\n\tI had an issue with textures being smoothed and solved it this way.    See lines 21-31 on _lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#MFTLRX%2312_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#MFTLRX#12_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2018-11-18T09:09:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi guys.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso remember... when dividing big maps into little ones... the STARTING row and column of ANY _qt_next_qt_ section... is an exact COPY of the row and column... from the ENDING row and column of the previous section.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn other words_co_ at any _qt_seam_qt_... the ending/starting row/col of verts_co_ needs to be an exact copy.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo do this_co_ when cutting up the big map_co_ make your ending row and column... be ONE row/col more (longer and wider) than you_t_d expect.  The ending row and column of any section... must be an exact copy of any beginning row/column.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWherever a seam happens_co_ there are two identical vertices_dd_  the ending one from previous section_co_ and the beginning one for next section.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#21TQJT%2356_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#21TQJT#56_lt_/a_gt_   (_lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#21TQJT%2355_qt_ rel_eq__qt_external nofollow_qt__gt_version #55_lt_/a_gt_ closes the gaps_co_ but you can still see the seams_co_ due-to lack-of normals-averaging across the seams.)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSee how the seams... have the exact same row and column of verts... on each side of the seam?  That_t_s needed... to make them match at the seams.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow look at lines 239-251 of my _qt_cutter_qt_.  See all the col+1 and row+1 stuff in there?  That_t_s for ending the row/col of PREVIOUS section/cell_co_ with the exact same verts as the starting row/col of the NEXT section/cell.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI also have _qt_showNormals_qt_ activated (the white sticks)_co_ and as you can see_co_ the lighting normals across seams... can be a challenge.  I was never successful at averaging the two normals on each side of the seams_co_ or with averaging FOUR normals at every 4-way corner.  But_co_ I didn_t_t try too hard.  Most people have gravitated toward _qt_infinite_qt_ terrains... instead of tiling.  _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#FJNR5%23218_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#FJNR5#218_lt_/a_gt_  (use arrow keys)  (see line 48 - BABYLON.DynamicTerrain)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI don_t_t know much about infinite terrains... like if they are a good alternative to tiled terrains.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAll in all_co_ I think you have positional mis-match at seams... due-to NOT _qt_going one row/col further-than-expected_qt_ when cutting-up your big map... into cells/tiles.  But I could be wrong.  Remember...ONLY _lt_strong_gt_end_lt_/strong_gt_ your cell-cut... one row/col longer/wider than expected.  _lt_strong_gt_Start_lt_/strong_gt_ your cell-cuts exactly where you would expect.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThreads of interest_dd_ _lt_br /_gt_\n\t_lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/31567-terrain-from-ribbons/?tab_eq_comments#comment-181539_qt_ rel_eq__qt__qt__gt_http_dd_//www.html5gamedevs.com/topic/31567-terrain-from-ribbons/?tab_eq_comments#comment-181539_lt_/a_gt__lt_br /_gt_\n\t_lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/34397-solved-mesh-editor-edit-ribbon-vertices/_qt_ rel_eq__qt__qt__gt_http_dd_//www.html5gamedevs.com/topic/34397-solved-mesh-editor-edit-ribbon-vertices/_lt_/a_gt__lt_br /_gt_\n\t_lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/25568-matching-neighboring-geometry/_qt_ rel_eq__qt__qt__gt_http_dd_//www.html5gamedevs.com/topic/25568-matching-neighboring-geometry/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRare forum visitor Kostar111 once did some tiled ground work... _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/resources/offsite_tutorials_list#c%C3%A9lian-garcia-kostar111-home-website-unknown_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/resources/offsite_tutorials_list#célian-garcia-kostar111-home-website-unknown_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sme","Date":"2018-11-18T12:03:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks for the tips. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAfter trying to _t_overlap_t_ the edges of each chunk_co_ I too had an issue with shading_co_ particularly areas where the slope was steep.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAfter some fiddling around_co_ I managed to find another solution. What I did was created another canvas element on the document_co_ as well as an image element to store the entire height map. Then I draw the image onto the canvas_co_ based on which part of the map needs to be loaded _lt_a href_eq__qt_https_dd_//developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage_lt_/a_gt_ (the canvas_t_ context_t_s API makes this very easy). Once the image is drawn on the canvas_co_ I create the height map using canvas.toDataUrl()_co_ instead of the original heightmap .png URL. Also_co_ this means I only have one ground mesh_co_ instead of 25.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI still don_t_t have code for loading new sections of the map (ie_co_ re-drawing he image on the canvas with the new offset coordinates_co_ then re-creating the ground mesh with the new dataURL.) This shouldn_t_t take too long_co_ once I finish I will test and see how the performance is. (hopefully it is a smooth transition! Perhaps someone who understands babylonJS more than I will already know if this is a good solution or not)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Nodragem","Date":"2018-11-18T21:57:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI guess that there are two things in play_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- the vertices needs to be exactly the same at the seams_co_ and you may have not cut your mesh correctly (but you seem to have resolve this issue?)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- the UVs at the seams also need to be identical_co_ and you may need to set them up manually to be vertical_co_ looking up (which is the simplest solution)_co_ that would explain your problem with shading\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor your question_dd_\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_235212_qt_ data-ipsquote-contentid_eq__qt_41346_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1542493799_qt_ data-ipsquote-userid_eq__qt_33306_qt_ data-ipsquote-username_eq__qt_Sme_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t23 hours ago_co_ Sme said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tWhats the best way to fix this? Is using 25 ground meshes at a time a bad idea (should I only have 1 ground mesh at any given time)?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThat depends very much on the number of vertices. For simple meshes (small number of vertices)_co_ It is good to merge them to one mesh to decrease the number of draw calls (CPU to GPU requests)_sm_ however_co_ for complex meshes (after a critical number of vertices)_co_ it is better to divide the mesh into several meshes. I am not really sure what is the rule of thumbs for the _qt_critical number_qt__sm_ probably depends on the device you target.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]