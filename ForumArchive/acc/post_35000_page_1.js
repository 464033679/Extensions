[{"Owner":"Pryme8","Date":"2018-01-10T18:22:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#QJE3YB%2320_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#QJE3YB#20_lt_/a_gt__lt_br /_gt__lt_br /_gt_\n\ttrying to figure out how to keep the rayMarched object in the center of the plane and keep it looking at the camera._lt_br /_gt__lt_br /_gt_\n\tI also want to keep the camera position update able on the shader so you can _qt_orbit_qt_ the objects.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-10T22:20:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tHello_co_ can you rephrase it? I_t_m not sure to get what you try to achieve (Shader looks gorgeous by the way!)\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-01-10T22:39:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI basically want to take a plane that always faces the camera if its in its frustum_co_ and raymarch a object on it like lets say a tree.  Then be able to move around in the scene and keep the raymarched object in the middle of the plane but update the position of the camera on the shader so you can view it from all angles._lt_br /_gt__lt_br /_gt_\n\tIm thinking it might just be smarter to use a square.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-10T23:00:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tCan billboard work?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#QJE3YB#24_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#QJE3YB#24_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-01-11T00:29:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThat method will help for sure_co_ I am just getting more familiar with rayMarching environments now _dd__lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#ZFUV4U%235_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#ZFUV4U#5_lt_/a_gt__lt_br /_gt__lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#ZFUV4U%238_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#ZFUV4U#8_lt_/a_gt__lt_br /_gt__lt_br /_gt_\n\tSo I can try this whole idea out.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-01-11T16:20:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tNow I need to figure out how to keep the camera_t_s position/view movable in the scene but still keep the rayMarching happening on in the _t_same place_t_.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-01-11T17:10:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#ZFUV4U%2312_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#ZFUV4U#12_lt_/a_gt__lt_br /_gt__lt_br /_gt_\n\tLooks like I just need help with the _qt_lookAt_qt_ Math.   I need some sort of calculation that will make it so its not like looking through a window_co_ but at an object and so the axis arrows stay in the center of the plane no matter what your view angle is._lt_br /_gt__lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#ZFUV4U%2314_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#ZFUV4U#14_lt_/a_gt_ &lt_sm_- for anyone who wants to just move around the raymarched scene.  The camera controls are attached to it._lt_br /_gt__lt_br /_gt__lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#ZFUV4U%2318_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#ZFUV4U#18_lt_/a_gt_ &lt_sm_- Basic Planet/Moon\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-01-12T16:17:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI need some math help..._lt_br /_gt_\n\tsomeone please give me an idea here..._lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo let me re-explain. We have a plane that is billboarded and on that plane is a shader that is rayMarching another scene or object.  If we move the camera around in the scene and look at the raymarch plane it is like your looking through a window (kinda)._lt_br /_gt__lt_br /_gt_\n\tWhat I am trying to do is figure out the projection math behind keeping an object centered in the rayMarched scene but still keep the ability to move the camera around it.  So effectively I could make the plane look like a cube that you can walk around_co_ but is only really two polygons with a shader on it._lt_br /_gt__lt_br /_gt_\n\tIm thinking I need to get a reflect angle and get the difference between the cameras target and the output plane then apply the inverse to the rayMarch camera matrix? _lt_br /_gt__lt_br /_gt__lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#ZFUV4U%2322_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#ZFUV4U#22_lt_/a_gt__lt_br /_gt_\n\t^^^ Ive kinda got it_co_ but there seems to be a _qt_wiggle_qt_ or like some sort of parallax effect on the position of the rayMarched Object._lt_br /_gt__lt_br /_gt__lt_span style_eq__qt_font-size_dd_24px_sm__qt__gt_NEEED INPUT!!! JOHNNY 5 NEEDS INPUT!_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-01-13T20:32:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#ZFUV4U%2324_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#ZFUV4U#24_lt_/a_gt__lt_br /_gt__lt_br /_gt_\n\tKinda got it where I want it... I should be able to make a tree or something now and give that a test.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"GeorgeCostanza","Date":"2018-10-03T00:54:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/19199-pryme8/?do_eq_hovercard_qt_ data-mentionid_eq__qt_19199_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/19199-pryme8/_qt_ rel_eq__qt__qt__gt_@Pryme8_lt_/a_gt_ Sorry if I_t_m necroposting. I stumbled across this forum thread when searching through google for a way to ray march over billboards. I_t_m not using Babylon.js_co_ instead I_t_m using a different game engine that still uses OpenGL. I_t_m a bit unclear on the _qt_lookAt_qt_ part. The following line in particular_dd__lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_shader.setVector3(_t_camTarget_t__co_ camera.getFrontPosition(10))_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI_t_m not sure what does the following line do? What I_t_m currently doing is just passing in the camera direction and the camera position to the shader_co_ but it seems like I_t_m running into an issue with the ray marched sphere moving with the camera. Attached is my attempt at ray marching over billboards.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_10/move.gif.9463612aeee3ee620c3b40c5642f6576.gif_qt_ class_eq__qt_ipsAttachLink ipsAttachLink_image_qt__gt__lt_img data-fileid_eq__qt_20318_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_10/move.gif.9463612aeee3ee620c3b40c5642f6576.gif_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_move.gif_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-10-03T16:47:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWhich engine? _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"GeorgeCostanza","Date":"2018-10-03T17:12:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tJmonkey Engine\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"GeorgeCostanza","Date":"2018-10-03T20:21:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI guess the better question is what is the relation of the camera Target and camera Direction?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-10-05T06:35:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tthis is what is needed to determine your ray direction.  If you look at the main section of the shader code you will see_dd_\n_lt_/p_gt_\n\n_lt_div style_eq__qt_background-color_dd_#fffffe_sm_color_dd_#000000_sm_font-size_dd_14px_sm__qt__gt_\n\t_lt_div_gt_\n\t\t_lt_span style_eq__qt_color_dd_#a31515_sm__qt__gt_vec3 rayDir _eq_ getRayDir(camPos_co_ normalize(camTarget - camPos)_co_ p)_sm__lt_/span_gt__lt_br /_gt_\n\t\t_lt_br /_gt_\n\t\twhich does this function_dd_\n\t\t_lt_div style_eq__qt_background-color_dd_#fffffe_sm_color_dd_#000000_sm_font-size_dd_14px_sm__qt__gt_\n\t\t\t_lt_div_gt_\n\t\t\t\t_lt_span style_eq__qt_color_dd_#a31515_sm__qt__gt_vec3 getRayDir(vec3 camPos_co_ vec3 viewDir_co_ vec2 pixelPos) {_lt_/span_gt_\n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div_gt_\n\t\t\t\t_lt_span style_eq__qt_color_dd_#a31515_sm__qt__gt_vec3 camRight _eq_ normalize(cross(viewDir_co_ vec3(0.0_co_ 1.0_co_ 0.0)))_sm__lt_/span_gt_\n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div_gt_\n\t\t\t\t_lt_span style_eq__qt_color_dd_#a31515_sm__qt__gt_vec3 camUp _eq_ normalize(cross(camRight_co_ viewDir))_sm__lt_/span_gt_\n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div_gt_\n\t\t\t\t_lt_span style_eq__qt_color_dd_#a31515_sm__qt__gt_return normalize(pixelPos.x*(camRight*-1.) + pixelPos.y*camUp + CAM_FOV_FACTOR*viewDir)_sm__lt_/span_gt_\n\t\t\t_lt_/div_gt_\n\n\t\t\t_lt_div_gt_\n\t\t\t\t_lt_span style_eq__qt_color_dd_#a31515_sm__qt__gt_}_lt_/span_gt_\n\t\t\t_lt_/div_gt_\n\t\t_lt_/div_gt_\n\t\t_lt_br /_gt_\n\t\tso the cam target_co_ which is just a positions in front of the _t_physical_t_ camera in the scene.  So with quick maths you subtract positions and normalize to get your vector for forward.   I think you could essentially just pass the camera forward (global) forward vector but his works well._lt_br /_gt_\n\t\t_lt_br /_gt_\n\t\tThink of it as the cameras view direction as denoted in the getRayDir function._lt_br /_gt_\n\t\t_lt_br /_gt_\n\t\tA Normalized Global Camera Rotation Vector.\n\t_lt_/div_gt_\n\n\t_lt_div_gt_\n\t\t \n\t_lt_/div_gt_\n_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"GeorgeCostanza","Date":"2018-10-06T01:48:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks so much for the much needed help. I think I understand now. My issue_co_ apparently it seems was the _qt_Y_qt_ component of my camera position and the camera target needed to flipped_co_ as in I needed to multiply by -1. So weird_co_ could be something to do with the face _lt_span_gt_ _lt_/span_gt_that I_t_m using GL_POINT instead of quads.\n_lt_/p_gt_\n\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_10/move.gif.2899e15ab43fd64996175e8089ba31af.gif_qt_ class_eq__qt_ipsAttachLink ipsAttachLink_image_qt__gt__lt_img data-fileid_eq__qt_20376_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_10/move.gif.2899e15ab43fd64996175e8089ba31af.gif_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_move.gif_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-10-06T21:09:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tGlad my research ended up helping!_lt_br /_gt_\n\t_lt_br /_gt_\n\tI should publish the end result of this_co_ which was raymarching organics like trees and bushes.  I was never fully able to make things look truly organic but I was getting close.  The idea was to be able to eventually have fully 3D trees being rendered on a billboard_co_ or an outside scene through a window.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"GeorgeCostanza","Date":"2018-10-15T23:29:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello! Back again_co_ now with more questions! So now that I was able to successfully implement that ray marched cube I_t_m running into a different issue now_co_ something I also noticed  that seems to appear also in both mine and your implementation. The issue that seems to occur is that when the ray marched objects are far away_co_ maybe &gt_sm_30 world units_co_ upon moving or rotating the camera the ray marched object seems to _qt_shift_qt_ towards the edges of the billboard_co_ in more extreme cases completely going out of the billboard.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_20540_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_10/image.png.1299fb1faedeeb31f84f9adb7ab7698d.png_qt_ alt_eq__qt_image.png.1299fb1faedeeb31f84f9adb7ab7698d.png_qt_ /_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is the use case in Babylon.js where the ray marched object is given a white background to better visualize the issue that is occurring. As show in the picture_co_ the camera is rotated downward and is some ways away from the ray marched object. The object seems to be _qt_shifted_qt_ towards the top edge of the billboard. This issue seems to be more pronounced the further away the camera is from the ray marched object.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]