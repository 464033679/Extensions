[{"Owner":"MackeyK24","Date":"2018-01-10T22:49:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWhat is the IMPACT in babylonjs of using window.setTimeout and window.setInterval in your babylon js script code logic vs some kins of frame delay tracking flags and check that time has expired in the _t_tick_t_ function then execute action function.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIs it _t_TABOO_t_ to use browser based timeout and interval functions in your babylonjs game logic \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIs it preferred to use window.requestAnimationFrame game loop (TICKING) to execute DELAYED or INTERVALED functions ???\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs Always... Thanks for any info _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-10T22:57:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNope this is not taboo at all\n_lt_/p_gt_\n\n_lt_p_gt_\n\tJust consider that they are not precise functions so they can be delayed or ignored based on CPU load\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-01-11T06:15:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI try to avoid setInterval_co_ but it_t_s more a personal preference than anything taboo.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tsetInterval doesn_t_t report errors or guarantee execution (I didn_t_t know it was CPU load_co_ but thought it was duration of function).  setTimeout calling setTimeout (ie_dd_ tail recursion) is considered better by some.  Here is a setInterval npm using requestAnimationFrame_dd__lt_br /_gt__lt_a href_eq__qt_https_dd_//github.com/nk-components/request-interval/blob/master/index.js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/nk-components/request-interval/blob/master/index.js_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWHY you are using setInterval is also important.  If you are using it to trigger an action every x ms that seems OK.  I would say that if you are using setInterval only to check for a condition in a loop_co_ progressing a game loop_co_ or sequencing of events/actions that continuation passing style (CPS) or Promises may be better (like onComplete callback for animations) and will react faster.  For really convoluted chaining I may use something like redux-saga (great for game loops) with testable code from the generator functions_co_ even if you skip the redux reducers.  Both CPS and generators can get hard to fathom_co_ but we also have Promises or RxJS!  Probably more than you wanted to hear..._lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-01-12T00:43:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\twhy not just use a recursive function with a kick out_co_ that is dependent on the before Or AfterRender binding?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]