[{"Owner":"MasterSplinter","Date":"2016-01-02T08:24:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m having some framerate issues (granted there are 240k vertices)..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Getting about 58 on Desktop... Drops to 15 Chrome on  Laptop and then 8 on Firefox on Laptop..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//crab.strangled.net/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//crab.strangled.net/_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think this is the issue -- I need a method of skipping calculations... I tried Jerome_t_s suggestion of waiting to calculate every 3 frames but this causes a stutter...  Any suggestions welcome!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks in advance!_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_  SPS.recycleParticle _eq_ function (particle) {    if (particle.idx &gt_sm_ particleCount) {      particle.alive _eq_ false_sm_    }    else {      particle.alive _eq_ true_sm_    }    if (!particle.alive) {      if (particle.scale.y _eq__eq_ 0) {        return_sm_      }      particle.scale.x _eq_ 0_sm_      particle.scale.y _eq_ 0_sm_      particle.scale.z _eq_ 0_sm_      particle.position.x _eq_ Math.random() * 6_sm_      particle.position.y _eq_ Math.random() * 6_sm_      particle.position.z _eq_ Math.random() * 6_sm_      return_sm_    }    else {      particle.position.x _eq_ Math.random() * 6_sm_      particle.position.y _eq_ Math.random() * 6_sm_      particle.position.z _eq_ Math.random() * 6_sm_      particle.velocity.x _eq_ (Math.random() - 0.5) * speed_sm_      particle.velocity.y _eq_ Math.random() * speed_sm_      particle.velocity.z _eq_ (Math.random() - 0.5) * speed_sm_      var scale _eq_ scaleValue - 3 * (Math.random())_sm_      particle.scale.x _eq_ scale_sm_      particle.scale.y _eq_ scale_sm_      particle.scale.z _eq_ scale_sm_      particle.rotation.x _eq_ Math.seededRandom() * 3.5_sm_      particle.rotation.y _eq_ Math.seededRandom() * 3.5_sm_      particle.rotation.z _eq_ Math.seededRandom() * 3.5_sm_      particle.color.r _eq_ Math.random() * 0.6 + 0.5_sm_      particle.color.g _eq_ Math.random() * 0.6 + 0.5_sm_      particle.color.b _eq_ Math.random() * 0.6 + 0.5_sm_    }  }_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-02T09:26:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tMaybe a PG could help ...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tGenerally_co_ the leads to improve the performances are _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- skipping un-needed calculations or processes. You can also set some properties to false _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/overviews/Solid_Particle_System#sps-management_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/overviews/Solid_Particle_System#sps-management_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t-  being careful about NOT creating new objects within the render loop and taking care about the GC _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/overviews/Solid_Particle_System#garbage-collector-concerns_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/overviews/Solid_Particle_System#garbage-collector-concerns_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd if it_t_s not enough_co_ maybe lower the number of vertices or the number of particles _dd_ 240 K vertices is a big amount_co_ the sps will have to iterate over it 240 K times per frame. There might be here just a JS engine speed limitation reached depending on the browser or device you are using_co_ simply due to the CPU capacity.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI keep an old laptop and test my programs with it. If the program runs at 30 fps or more on it_co_ it_t_s generally the proof for me that this program could then run almost everywhere at a decent framerate  _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-02T15:09:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tabout your code here _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou choose when you want to call _lt_em_gt_sps.recycleParticle()_lt_/em_gt_. It_t_s not called for each particle by_lt_em_gt_ setParticles(). _lt_/em_gt_So I can call it for only the particle to be recycled_co_ I guess... this is a first limitation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tLine 16 to 18 _dd_ is there a need for positioning dead particles at this moment ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLine 28 _dd_ you_t_ve got thousands and thousands particles_co_ I guess. So don_t_t declare a local variable here_co_ that will be allocated each call and deleted then by the GC when leaving your function.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tInstead use a higher scope permanent variable or _lt_span style_eq__qt_font-family_dd_arial_co_ helvetica_co_ sans-serif_sm__qt__gt_SPS.vars.scale_lt_/span_gt_ what is designed for this goal _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/overviews/Solid_Particle_System#garbage-collector-concerns_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/overviews/Solid_Particle_System#garbage-collector-concerns_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf the particles don_t_t need to change their own colors each time they are recycled_co_ you could set the SPS optimizers after the first call to _lt_em_gt_setParticles()_lt_/em_gt_.\n_lt_/p_gt_\n\n_lt_pre class_eq__qt_ipsCode prettyprint prettyprinted_qt__gt_\n_lt_span class_eq__qt_pln_qt__gt_SPS_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_computeParticleRotation _lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__eq__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ _lt_/span_gt__lt_span class_eq__qt_kwd_qt__gt_false_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__sm__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_  _lt_/span_gt__lt_span class_eq__qt_com_qt__gt_// prevents from computing particle.rotation SPS.computeParticleTexture _eq_ false_sm_   // prevents from computing particle.uvs SPS.computeParticleColor _eq_ false_sm_     // prevents from computing particle.color _lt_/span_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThen the next calls to _lt_em_gt_setParticles() _lt_/em_gt_won_t_t compute the rotation_co_ texture_co_ color _lt_u_gt_updates_lt_/u_gt_ for each particle and will just keep the current set values.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MasterSplinter","Date":"2016-01-02T16:47:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I fixed the stuff you mentioned...  It gets me up to about 19-20FPS on the laptop.  One thing I was hoping you could explain.  I have 10_co_000 cubes in this scene -- but it is saying I have 240 vertices.  Where is that calculation coming from?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-02T16:51:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well a BJS cube (as a 3js one) is 24 vertices _dd_ 6 sides of 4 vertices each._lt_/p_gt__lt_p_gt_You can_t_t reuse the vertices (for 3 common sides for instance) on a cube because of the rule _dd__lt_/p_gt__lt_p_gt_a vertex _eq__eq_ a normal_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Normals aren_t_t shared by the sides on a cube. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_[EDIT] Do you really need 10 000 different solid objects on the same scene ?_lt_/p_gt__lt_p_gt_The user eye won_t_t make the difference if there are only 6000 maybe_co_ or if you fake some plenty of them if less objects but aggregated ones._lt_/p_gt__lt_p_gt_Or if you display in the fustrum only_co_ say_co_ 4000 objects_co_ and recycle/  position / scale them quick when the cam moves in order to fake they are far more numerous in the environment than there are really in your pool._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What I mean is that this number of iterations seems to be huge for the CPU of this laptop and adding any other process (game logic_co_ IA_co_ collisions_co_ etc) will need some more CPU anyway._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The SPS is only one mesh_co_ so a fast draw call (in other words_co_ you can_t_t get more perfs in the render process) and a big iteration over the particles and their vertices. The embedded optimizers just allow to skip some internal computation if they are not needed._lt_/p_gt__lt_p_gt_Then the chase of memory allocations within the render loop_co_ which will trigger the GC_co_ is the next lead to explore _dd_ the browser profiler is your friend._lt_/p_gt__lt_p_gt_Finally the last lead to improve the framerate stays the number of iterations_co_ so the number of particles or vertices._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Sometimes_co_ just lowering under a certain limit (ex _dd_ from 10 000 to 6000) can get to recover 60 fps. It_t_s not necesseraly a linear gain._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_[EDIT 2] a PG would help to check if we can improve something _sm_-)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MasterSplinter","Date":"2016-01-02T17:06:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_111097_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_19594_qt_ data-ipsquote-username_eq__qt_jerome_qt_ data-cite_eq__qt_jerome_qt_ data-ipsquote-timestamp_eq__qt_1451753492_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Well a BJS cube (as a 3js one) is 24 vertices _dd_ 6 sides of 4 vertices each._lt_/p_gt__lt_p_gt_You can_t_t reuse the vertices (for 3 common sides for instance) on a cube because of the rule _dd__lt_/p_gt__lt_p_gt_a vertex _eq__eq_ a normal_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Normals aren_t_t shared by the sides on a cube. _lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Makes perfect sense lol silly me!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MasterSplinter","Date":"2016-01-02T17:28:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I agree that you can_t_t tell the difference.  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This is for someone and I think they want to see what kind of performance I can get out of a browser.  According to the specifications this seemed like the best solution.  If I could I just billboard these things create 3 different sprites and only have 40k vertices._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_THREE can_t_t even do this stuff._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-02T17:31:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Arf..._lt_/p_gt__lt_p_gt_If you need only 2D or billboarded things_co_ you might then use the standard BJS Particle System_co_ what is more performant !_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MasterSplinter","Date":"2016-01-02T17:37:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_It has to be 3D _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MasterSplinter","Date":"2016-01-02T18:05:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Here is the src_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//rawgit.com/wpdildine/Cubenado/master/app/index.html_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//rawgit.com/wpdildine/Cubenado/master/app/index.html_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-02T19:20:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Reading your code_co_ I can_t_t see many things to improve..._lt_/p_gt__lt_p_gt_unless maybe setting once for all the particle colors at initialization time (random color for each) and then never update the color again _dd_ you won_t_t see the difference between randomly setting the colors once at the beginning and randomly setting them each call to _lt_em_gt_recycle()_lt_/em_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Nevertheless_co_ you could then set _lt_em_gt_computeParticleColor_lt_/em_gt_ to false after an initial call to _lt_em_gt_setParticles()_lt_/em_gt_ before the render loop for instance and thus skip a tiny part in the iteration process._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I really like your demo with this nice control panel._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-02T19:43:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_thinking about something more_lt_/p_gt__lt_p_gt_10K cubes are 24K vertices and 16K triangular facets_co_ so a big number for _lt_em_gt_computeNormals()_lt_/em_gt_ also_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So if you don_t_t need the normals to be updated once the mesh is built_co_ you could also freeze them _dd_ sps.mesh.freezeNormals()_lt_/p_gt__lt_p_gt_This would accelerate the speed_co_ but will also have an effect on the light reflection.. depending on if you need it or not _dd_ standard particles are 2D and don_t_t have normals_co_ don_t_t reflect the light as well in bjs as in 3js_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MasterSplinter","Date":"2016-01-02T19:44:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks!  I went a bit css crazy with the control panel.  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ll probably make that change you suggested.  It seems to get me about 2 fps boost but aside from that I don_t_t think there is a whole lot more I can do without lowering the particle count. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MasterSplinter","Date":"2016-01-02T20:05:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_111119_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_19594_qt_ data-ipsquote-username_eq__qt_jerome_qt_ data-cite_eq__qt_jerome_qt_ data-ipsquote-timestamp_eq__qt_1451763790_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_thinking about something more_lt_/p_gt__lt_p_gt_10K cubes are 24K vertices and 16K triangular facets_co_ so a big number for _lt_em_gt_computeNormals()_lt_/em_gt_ also_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So if you don_t_t need the normals to be updated once the mesh is built_co_ you could also freeze them _dd_ sps.mesh.freezeNormals()_lt_/p_gt__lt_p_gt_This would accelerate the speed_co_ but will also have an effect on the light reflection.. depending on if you need it or not _dd_ standard particles are 2D and don_t_t have normals_co_ don_t_t reflect the light as well in bjs as in 3js_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Okay_co_ just pushed those changes -- I guess I can_t_t really complain about 10k cubes getting 20fps on a non gaming laptop.  Probably_co_ the best I_t_ll get without cheating._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-03T07:44:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_last lead again_co_ if the material doesn_t_t change _dd_ material.freeze()_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]