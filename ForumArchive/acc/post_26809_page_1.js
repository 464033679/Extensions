[{"Owner":"Dad72","Date":"2016-12-04T18:30:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI was wondering if it was possible to reload/refresh the already loaded scene from the babylon file. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI was thinking of something like a scene.Refresh that reloads the babylon file and updates the scene. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou will ask me why? I would like to make a collaborative system on my editor and to make things easier to achieve_co_ I thought a scene.Refresh () would make this task easier. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn fact_co_ User 1 modifies the scene (adding objects_co_ editing ...) which are serialize and save to a file.babylon. And I would like the user 2 after a delay of x seconds with a setTimeout_co_ that file.babylon_co_ called with $.Ajax_co_ refresh the scene of the user 2. This is the simplest theory I have in mind. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t Do you have any idea how to reload/refresh the scene from a file.babylon? \n_lt_/p_gt_\n\n_lt_p_gt_\n\t Thank you for your help.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-12-04T22:22:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi D!  Can I contribute a weird idea?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1st... We can load more than one .babylon file.  User 1 and user 2 start with same normal .babylon file.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2nd... both users (all users) load-in a file called... umm... eventDB.babylon\n_lt_/p_gt_\n\n_lt_p_gt_\n\tInside eventDB... is one BJS non-rendered _lt_em_gt_node_lt_/em_gt_ with a HUGE .metadata property on it.  Json parse that metadata json-string (after load-in)... and it turns into a little database object. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn that database... are stored editorEvent objects.  You created them... (and stored them) when user 1 or 2 does a change in the editor. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf user did something_co_ create event object_co_ time stamp_co_ insert into the DB.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThen... um...  notify server of new events or... serialize the DB and somehow send back to the server?  (not sure how/what)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThen server builds a new eventDB.babylon file_co_ and quickly publishes to the folder where the OTHER user could load it.  ??\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThen a _qt_ping_qt_ is sent to all users who have not loaded-in the latest eventDB.babylon.   ??  hmmm.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAfter eventDB load-in... node.metadata becomes database.  It is compared to the database that the editor is currently _qt_using_qt_.  (check for new events)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tComparisons are made... and _qt_new events_qt_ are acted upon.  All _qt_listeners_qt_ must update per the current server-published eventDB.babylon.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEssentially_co_ all collaborators using the editor and whiteboarding the same scene... would OFTEN load eventDB.babylon_co_ _qt_growing_qt_ its .metadata into a DB object_co_ and doing updates to the local scene per info found in the NEW DB.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tComplete scene reloading sounds... painful. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tInstead_co_ you create your own _qt_what has changed?_qt_ messaging system... using a shared eventDB.babylon.  Since .metadata is a general-purpose property... put whatever you wish in there.  Why not a database of recent editor changes (events)?   Goofy idea_co_ eh?  Nod.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2016-12-05T00:01:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Wingnut_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEven though I_t_m not sure I fully understood everything 100% (I think I have to read several times) _co_ I see your general idea and it seems to me much better than my original idea. I think I will study your ideas.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo you propose me to put in a file eventDB. Babylon everything that is changing. I have to make one file per user or only one?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI did not understand too much for me metadata.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOtherwise I agree that recharging the scene completely every x seconds will be really no good when the scene will be more important.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThank you Wingnut\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-12-05T00:17:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou can do ONE eventDB for all to share_co_ but then _qt_event sorting_qt_  (see which events are new_co_ which are old) must be done within the scene JS.  EventDB might be a mix of old and new events.  Some will have been already _qt_serviced_qt__co_ and some will still need servicing (at each editor).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOr_co_ a separate file for each user_co_ and which client needs which events... could be maintained at server.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNot sure what is the best method.  You are much smarter than I... for these things.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think .metadata is _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.node.ts#L20_qt_ rel_eq__qt_external nofollow_qt__gt_defined on node... as ANY-type_lt_/a_gt_.  Start by making a .babylon file with one node (or mesh_co_ light_co_ camera) and put a .metadata property in the .babylon file... that is one big fat _lt_u_gt_serialized_lt_/u_gt_ chunk of json object (my terminology is terrible_co_ sorry).  It would be a big long string_co_ yes?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow import that .babylon file_co_ with that ghost mesh (blank/abstract mesh)... check its .metadata property.  Is the string there?  If so_co_ json parse that puppy_co_ and see if you can make it into an object.  If so... you party.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDo you know how to send data back to the server?  That area I am REALLY stupid.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  I would likely use a web form submission to a web server.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  There are probably newer_co_ cooler ways_co_ these days.  Blob-shooting... with a blob cannon?  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2016-12-05T00:25:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ I see_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for your ideas again.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYes to send data to the server I use Ajax with PHP. The PHP allows me to do all sort of processing to the web server and Ajax allows me to retrieve them to the client. PHP is a really cool language._lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]