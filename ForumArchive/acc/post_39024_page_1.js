[{"Owner":"promontis","Date":"2018-07-22T17:10:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi there!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI currently have two canvases_co_ one BabylonJS based and one KonvaJS based. One is 3D_co_ the other 2D.  Now_co_ I need to switch between the 3D and the 2D world_co_ and vice versa. You can see what I mean in the uploaded image.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI somehow need to calculate the _t_scale_t_ factor for the 2D world based on the 3D world. Is there any way to do such a thing for the whole scene_co_ or do I have to do this projection for every mesh point?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWill something like this work or is this oversimplified for BabylonJS? Or should I perhaps use Babylon.Vector3.Project()?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_07/image.png.726c3b1acdae451df926abfa6724f7bd.png_qt_ data-fileid_eq__qt_19331_qt_ rel_eq__qt__qt__gt__lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_19331_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_07/image.thumb.png.aeced1fd857077bbd27519c6edc3e027.png_qt_ alt_eq__qt_image.thumb.png.aeced1fd857077bbd27519c6edc3e027.png_qt_ /_gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_div style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#1a1a1a_sm_font-size_dd_12px_sm__qt__gt_\n\t_lt_p_gt_\n\t\t \n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\t \n\t_lt_/p_gt_\n_lt_/div_gt_\n\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_07/screen.gif.82cf80cc9051fdcc5c050e62341cf235.gif_qt_ class_eq__qt_ipsAttachLink ipsAttachLink_image_qt__gt__lt_img data-fileid_eq__qt_19325_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_07/screen.gif.82cf80cc9051fdcc5c050e62341cf235.gif_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_screen.gif_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Nabroski","Date":"2018-07-22T19:17:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tJust from *.gif you shared_dd_ you projecting from 2D to 2D. And in this case _co_it is a basic Javascript you can copy_co_ paste from Stackoverflow. Map one range to an other. Assuming  you have a second canvas_co_ like  a minimap situation_co_ you get you mouse coordinates (w_dd_ 50px h_dd_ 50px) and your football/soccer field (BabylonJs plane) is the canvas you _qt_paint_qt_/project the mouse position ( w_dd_  200 babylonjs3Dunits_co_ h _dd_ 200 babylonjs3Dunits ). So the coords on the minimap needed to be “screched”/mapped to the BabylonJs Plane_co_ very simple_co_ (3 lines of code)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe  3D and the 2D world thing_co_ you are talking about_co_ - is usually needed if you want to pic an 3D Object in 3D Space. I’m sure someone will answer this one properly soon_co_ meanwhile you can use the BabylonJs Forum Search ( right corner the beneath login form ). I see this question pop up like every 2 Weeks. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"promontis","Date":"2018-07-22T20:21:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIn your example (50px vs 200 3d units) I indeed try to figure out what the scale factor is between those two. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBoth units (px and 3d units) in my case are of equal value_co_ say both a 1000. So the 3d world _t_square_t_ is 1000x1000 babylonjs3dunits_co_ and the 2d world _t_square is 1000x1000 px.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow the 2d 1000x1000 px_co_ is actually a 1000x1000 px (duh haha)_co_ but the 1000x1000 babylonjs3dunits isn_t_t a 1000x1000 px_co_ it is less because of the FOV and distance of the camera to the _t_square_t_ (mesh). Say_co_ the _t_square_t_ (mesh) is actually 600x600 px on screen then I_t_m looking for the ratio 1000/600.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m actually came as far as getting it to the following function_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var scale _eq_ 2 * Math.tan(camera.fov / 2) / camera.radius * 1000 * 1.4_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThis seems to work_co_ I however don_t_t have clue of why I need to put 1.4 in the function. The 2 * Math.tan(camera.fov / 2) / camera.radius seems to be in line with the picture in the first post. The * 1000 is actually my scaling factor that I use on every coordinate on my mesh (more or less the factor between meters and babylonjs3dunits_co_ if that makes sense). \n_lt_/p_gt_\n\n_lt_p_gt_\n\tDoes anyone know where the 1.4 is coming from? The value works_co_ but I determined it by changing the value until the two squares matched. If I zoom in/out in the BabylonJS scene_co_ the scale still works_co_ and if I zoom in/out on the 2d scene_co_ the scale holds as well. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"promontis","Date":"2018-07-22T20:34:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tCool_co_ found it! The 1.4 comes from my 2d canvas. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Nabroski","Date":"2018-07-22T21:13:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#VNE2Z%2322_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#VNE2Z#22_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1BGF1O%233_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1BGF1O#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1BGF1O%234_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1BGF1O#4_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#4IVMG%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#4IVMG#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1JPHAD%2311_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1JPHAD#11_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"promontis","Date":"2018-07-26T09:59:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tJust to summary for other people stumbling on this issue...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe following formula is indeed correct_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_2 * Math.tan(camera.fov / 2) * camera.radius_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t... and it calculates the size of one babylonjsunit taken into account the the fov and the radius to such unit. You most likely will have a scale factor in your 3d scene_co_ so you_t_ll have to divide that scale factor by this result. For example_co_ mine is a 1000_co_ so 1000 / result of above.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat result_co_ call it the finalScale_co_ can be used as the scaling factor in other canvases.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]