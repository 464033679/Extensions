[{"Owner":"JCPalmer","Date":"2018-02-19T15:53:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have begun migration of all my stuff away from Eclipse back to Netbeans.  The support for the Eclipse Typescript add-in has not worked for a while.  I have been using Gulp to actually do any building.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNetbeans editor for Typescript is much better_co_ &amp_sm_ importantly being updated / improved.  Cordova projects is also nicer.  I always use Netbeans anyway until I needed to work with Typescript.  Eclipse was very early out of the gate. with Typescript.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhile Netbeans does gulp commands from a cascading menu_co_ since the typescript editor relies on a tsconfig.json file_co_ I wanted to move away from gulp.  Netbeans also runs npm scripts (in a scripts collection in a package.json file) from a menu as well.  I only really need one liners like _qt_tsc_qt_ &amp_sm_ _qt_uglifyjs_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI was intending to transpile to ES6 (do not care about ie11)_co_ so I need an uglify which supports it.  By far the most downloaded Uglify is _lt_a href_eq__qt_https_dd_//www.npmjs.com/package/uglify-js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.npmjs.com/package/uglify-js_lt_/a_gt_.  It notes that you should use _lt_a href_eq__qt_https_dd_//github.com/mishoo/UglifyJS2/tree/harmony_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/mishoo/UglifyJS2/tree/harmony_lt_/a_gt_ for ES6.  The first thing I noticed is this repo link is not the master branch_co_ hence the question_co_ is it just a little too early for es6?  Has anyone used this?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2018-02-19T16:37:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_205317_qt_ data-ipsquote-contentid_eq__qt_35803_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1519055582_qt_ data-ipsquote-userid_eq__qt_8492_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t39 minutes ago_co_ JCPalmer said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tis it just a little too early for es6? \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tyes...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere are a lot of problems still to be solved with es6 modules (personal opinion_co_ actually). For example - the _qt_traditional_qt_ npm-packaging-in-node-modules cannot work as you expect_co_ as you need to link the file directly. No webpack-magic or browserify.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor us as a framework_co_ it is nice to offer an es6 module (which we do). But we still focus on UMD modules.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-02-19T16:57:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tFortunately I am not building node modules_co_ webpacks_co_ or browserify.  I guess since I have the fallback of the es5 uglify_co_ &amp_sm_ it only takes a couple of keystrokes in the tsconfig.json file to fallback_co_ I_t_ll give es6 a chance.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI also have the benefit of a number of working es3 modules_co_ so I_t_ll know right away to back off if it is not working.  I can also isolate it to es6 or the uglify if the transpiled code works_co_ but not after it run through uglify.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-02-20T21:58:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tUpdate_dd_  I have been able to use the ES6 capable uglify_co_ giving very comparable results to the gulp tailored one.  I used it against many of the Tower of Babel source generation files (currently ES3)_co_ &amp_sm_ things work the same.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe QueuedInterpolation module I have does transpile to ES6_co_ and looks right. When I try use it with one of ToB source files_co_ things go south though.  I have not read anything that mixed between ES _qt_levels_qt_.  I am doing it 2 different ways_dd_\n_lt_/p_gt_\n\n_lt_ol_gt_\n\t_lt_li_gt_\n\t\tI am subclassing BABYLON.Mesh_co_ BABYLON.Skeleton_co_  BABYLON.Bone_co_ BABYLON.ArcRotateCamera_co_ &amp_sm_ BABYLON.Action extending the QI versions.\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tToB is generating subclasses of QI.Mesh.\n\t_lt_/li_gt_\n_lt_/ol_gt_\n\n_lt_p_gt_\n\tThe error that is tripped is _lt_u_gt__lt_strong_gt_TypeError_dd_ class constructors must be invoked with |new|_lt_/strong_gt__lt_/u_gt_.  I do not know if this is going from BJS to QI_co_ but if it is_co_ then it is game over.  I can always make the minor python changes to use ES6 syntax for ToB.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAction is the smallest subclass.  Here it is out of transpile_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_class SeriesAction extends BABYLON.Action {\n    constructor(triggerOptions_co_ _target_co_ _eSeries_co_ _clearQueue_co_ _stopCurrentSeries_co_ condition) {\n        super(triggerOptions_co_ condition)_sm_\n        this._target _eq_ _target_sm_\n        this._eSeries _eq_ _eSeries_sm_\n        this._clearQueue _eq_ _clearQueue_sm_\n        this._stopCurrentSeries _eq_ _stopCurrentSeries_sm_\n    }\n    execute(evt) {\n        this._target.queueEventSeries(this._eSeries_co_ this._clearQueue_co_ this._stopCurrentSeries)_sm_\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI have a bad feeling that this is not going to work with the tightness of my integration to BJS.  Also moving BJS to ES6 is more than I want to bite off right now.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn conclusion_co_  ES6 might work for some unless mixing is done.  Overall_co_ the move to Nebeans &amp_sm_ dumping Gulp was very successful_co_ but going to make a couple character change to tsconfig.json to not generate ES6.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-02-21T15:35:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_205323_qt_ data-ipsquote-contentid_eq__qt_35803_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1519058223_qt_ data-ipsquote-userid_eq__qt_10310_qt_ data-ipsquote-username_eq__qt_RaananW_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 2/19/2018 at 11_dd_37 AM_co_ RaananW said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tyes...\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThere are a lot of problems still to be solved with es6 modules (personal opinion_co_ actually). For example - the _qt_traditional_qt_ npm-packaging-in-node-modules cannot work as you expect_co_ as you need to link the file directly. No webpack-magic or browserify.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tFor us as a framework_co_ it is nice to offer an es6 module (which we do). But we still focus on UMD modules.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tSorry_co_ I really need to read better.  I found the es6.js file.  Is it really es6 though?  It has that __extends function?  There are comments for the class syntax_co_ so I am not sure you could really subclass anything in an es6 way.  There was no announcement topic for this so I am wondering how this is es6 &amp_sm_ what this file is for?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2018-02-21T15:56:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is es6_co_ native es6_co_ with export statement at the end of the file for all classes_co_ enums_co_ statics and co_t_ in BABYLON. It was partly announced_co_ and it still being improved _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-02-21T16:07:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m not sure that file is officially supported yet_co_ because otherwise there would be a module or jsnext_dd_main more likely in package.json.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t{_lt_br /_gt_\n\t  ..._lt_br /_gt_\n\t  _qt_main_qt__dd_ _qt_dist/preview release/babylon.js_qt__co__lt_br /_gt_\n\t  _qt_module_qt__dd_ _qt_dist/preview release/es6.js_qt__co_ // BJS doesn_t_t have this_lt_br /_gt_\n\t  _qt_jsnext_dd_main_qt__dd_ _qt_dist/preview release/es6.js_qt__co_ // BJS doesn_t_t have this_lt_br /_gt_\n\t  .._lt_br /_gt_\n\t}_lt_br /_gt_\n\tSounds like you_t_re not using browserify or webpack and _qt_module_qt_ and _qt_jsnext_qt_ are only a hint for them_co_ so that doesn_t_t affect you_co_ but that_t_s a good way to see if it_t_s official._lt_br /_gt_\n\tIn your import you can specify that es6 file as per latest comment on issue_dd__lt_br /_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/issues/3314_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/issues/3314_lt_/a_gt__lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import { Scene_co_ Vector3 } from _qt_babylonjs/es6_qt__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI_t_m using babel with ES7 features to convert to target ES5 and then uglify_co_ but with webpack.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-02-22T17:52:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ I think you guys are talking about the ES6 module type.  Where as I am talking about the ES6 Target type_co_ where Typescript classes get transpiled into javascript classes_co_ and basically everything in es6 EXCEPT modules.  I actually tried to get Typescript modules to transpile into ES2015 modules_co_ but still get this transpiled_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var NameSpace_sm_\n(function (NameSpace) {\n\n    . . . \n}) (NameSpace || (NameSpace _eq_ {}))_sm_\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThis is fine for me. I probably do not want to have to do imports anyway.  My target environment is Cordova.  I know Cordova uses Node to do its building_co_ but I do not want to muck with that.  I am making all my hand-built code in a separate area using typescript_co_ then just doing a simple copy to the Cordova project_t_s _qt_www_qt_ directory to deploy.  Pretty sure iOS &amp_sm_ Android are good for most of ES6_co_ but have not gotten ES6 code all the way through yet.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe good news is_co_ I just did a _lt_a href_eq__qt_https_dd_//palmer-jc.github.io/scenes/es6_test/index.html_qt_ rel_eq__qt_external nofollow_qt__gt_test _lt_/a_gt_against the current CDN (3.1.1) babylon.  There I put a small script tag in the html for simplicity.  This tag has an ES6 subclass of BABYLON.Mesh generated from Tower of Babel Blender exporter.  It works fine! I have a constructor.  It is calling super()_co_ as well as setVerticesData() &amp_sm_ setIndices().  The problem a few posts back was_co_ I converted my QI extension to Target ES6_co_ but had not modified the exporter from ES3_co_ so probably an ES3 _qt_faked_qt_ class cannot _qt_fake subclass_qt_ an ES6 class.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is the script tag from the test_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var TEST_sm_\n(function (TEST) {\n    function CONTIG(array_co_ offset_co_ begin_co_ end) {\n        for(var i _eq_ 0_co_ len _eq_ 1 + end - begin_sm_ i &lt_sm_ len_sm_ i++) {\n            array[offset + i] _eq_ begin + i_sm_\n        }\n    }\n    class Mesh extends BABYLON.Mesh {\n        constructor(name_co_ scene_co_ parent _eq_ null_co_ source_co_ doNotCloneChildren) {\n            super(name_co_ scene_co_ parent_co_ source_co_ doNotCloneChildren)_sm_\n            \n            this.setVerticesData(BABYLON.VertexBuffer.PositionKind_co_ new Float32Array([\n                1_co_-1_co_-1_co_-1_co_-1_co_1_co_1_co_-1_co_1_co_-1_co_1_co_1_co_1_co_1_co_-1_co_1_co_1_co_1_co_1_co_1_co_1_co_1_co_-1_co_-1_co_1_co_-1_co_1_co_1_co_1_co_-1_co_-1_co_-1_co_-1_co_1_co_-1_co_-1_co_-1_co_-1_co_-1_co_-1_co_1_co_1_co_-1_co_-1_co_1_co_1_co_-1_co_1_co_-1_co_1_co_1\n                _co_1_co_1_co_1_co_-1_co_-1_co_-1_co_-1_co_1_co_-1_co_1_co_1_co_-1_co_-1_co_1_co_-1_co_-1_co_1_co_-1_co_-1_co_-1_co_1\n            ])_co_\n            false)_sm_\n\n            let _i _eq_ new Uint32Array(36)_sm_\n            CONTIG(_i_co_ 0_co_ 0_co_ 17)_sm_\n            _i.set([0_co_18_co_1_co_3_co_19_co_4_co_6_co_20_co_7_co_9_co_21_co_10_co_12_co_22_co_13_co_15_co_23_co_16]_co_ 18)_sm_\n            this.setIndices(_i)_sm_\n        }\n    }\n    TEST.Mesh _eq_ Mesh_sm_\n})(TEST || (TEST _eq_ {}))_sm_  \n\nvar canvas _eq_ document.getElementById(_qt_renderCanvas_qt_)_sm_\nvar engine _eq_ new BABYLON.Engine(canvas_co_ true_co_ { stencil_dd_ true })_sm_\nvar scene _eq_ new BABYLON.Scene(engine)_sm_\n\nnew BABYLON.PointLight(_qt_Lamp_qt__co_ new BABYLON.Vector3(4.08_co_5.90_co_-3.98)_co_ scene)_sm_\nvar camera _eq_ new BABYLON.UniversalCamera(_qt_Camera_qt__co_ new BABYLON.Vector3(7.48_co_5.34_co_-6.51)_co_ scene)_sm_\ncamera.rotation _eq_ new BABYLON.Vector3(.46_co_-.81_co_0)_sm_\nscene.setActiveCameraByID(_qt_Camera_qt_)_sm_\n\nnew TEST.Mesh(_t_name_t__co_ scene)_sm_\n\nengine.runRenderLoop(function () {\n    scene.render()_sm_\n})_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-02-22T18:12:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI kind of meant both_co_ that_t_s why I said that I target ES5 at the end of my comment. Since you_t_re not getting the expected output_co_ what is your tsconfig.json file _t_target_t_ set as? ie_dd_ ES5.  Cheers._lt_br /_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_02/image.png.590fab8d75f4dfa2441322170f156dc1.png_qt_ data-fileid_eq__qt_17145_qt_ rel_eq__qt__qt__gt__lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_17145_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_02/image.thumb.png.27760e9ac4b6a258df48390c2f72a323.png_qt_ alt_eq__qt_image.thumb.png.27760e9ac4b6a258df48390c2f72a323.png_qt_ /_gt__lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-02-22T20:29:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_pre_gt_\n_lt_code_gt_    _qt_compilerOptions_qt__dd_ {\n        _qt_module_qt__dd_ _qt_esnext_qt__co_\n        _qt_target_qt__dd_ _qt_es6_qt__co_\n        _qt_noImplicitAny_qt__dd_ true_co_\n        _qt_removeComments_qt__dd_ true_co_\n        _qt_declaration_qt__dd_ true_co_\n        _qt_outDir_qt__dd_ _qt_./out_qt_\n    }_co_\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI do not show a _t_es2018_t_ for a target in my dropdown.  Above is one of the last ones I tried.  I double checked my version of tsc_co_ which is 2.7.2.  Thanks for pointing out that something is not right_co_ even though I get the result I want.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn fact_co_ if I use _t_system_t_ as a module_co_ then I can specify outFile &amp_sm_ get everything I need already merged to 1 file.  I am still using files to control order_co_ but since I use references in all the .ts files_co_ I am not sure I need to do this.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]