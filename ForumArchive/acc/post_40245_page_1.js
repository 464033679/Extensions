[{"Owner":"karylo","Date":"2018-09-26T00:54:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tMy question has to do with how to generate a vector from a point to the nearest point on a plane.  If I have a mesh moving inside a box_co_ I want to know the distance and direction from the mesh position to each side of the box.  I understand that would be a vector perpendicular to the plane that intersects the point.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDoes Babylon have a method that will do that for me?  TIA\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2018-09-26T02:44:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHiya K! \n_lt_/p_gt_\n\n_lt_p_gt_\n\tUm... I have some quick thoughts.  Imagine that your box is made from 6 planes_co_ positioned to form a box shape.  Then...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tdistance _eq_ BABYLON.Vector3.distance(mesh.position_co_ oneWallOfTheBox.position)_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tand direction... umm... you get that by... umm...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tdirection _eq_ mesh.position.subtract(oneWallOfTheBox.position)   // I think.  Or maybe it_t_s...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tdirection _eq_ oneWallOfTheBox.position.subtract(mesh.position)  // not sure.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow to determine which is the nearest wall of all 6?  I dunno.  Perhaps_co_ whenever mesh is moved_co_ you need to check .distance() on all 6 box walls.  The lowest distance as the nearest wall.  ??  hmm.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think there may be fancier and/or easier ways to attain these values.  Let_t_s listen for more/better replies.  Using a _qt_ray_qt_ (similar to a picking ray)... might give you direction and distance all in one little piece of code_co_ but I am not a ray master.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#12D0ST%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#12D0ST#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere is some _qt_ray_qt_ activities happening in the line 62 area.  Not sure about the story_co_ there.  It looks as-if SOMEBODY almost knew what they were doing_co_ though.  _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_That PG was found via a _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/playground/?code_eq_distance_qt_ rel_eq__qt_external nofollow_qt__gt_playground search for _t_distance_t__lt_/a_gt_._lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-09-26T03:44:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tPlanes have normals_co_ which are perpendicular_co_ so you can work from there backwards (computeWorldMatrix updates everything_co_ if you move the planes around)._lt_br /_gt_\n\tThe normal_co_ if you are inside a box will probably be facing outwards_co_ so you may not need to .negate() the Vector3 as I did._lt_br /_gt_\n\t_lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#QZH25V_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#QZH25V_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you don_t_t want to write any math_co_ you can use rays like in the PG.  Otherwise the normal of a plane can be calculated as the Cross from subtracting the corners (see comment in PG).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//en.wikipedia.org/wiki/Normal_(geometry)_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//en.wikipedia.org/wiki/Normal_(geometry)_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]