[{"Owner":"fenomas","Date":"2015-03-09T08:10:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m manually assembling a mesh with submeshes_co_ and I find that the end result renders correctly_co_ except for the fact that it often gets culled when it should be visible. That is_co_ it renders correctly if the camera is pointed in certain directions_co_ but in other directions various submeshes get hidden even though they are fully within the camera frustum._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So I imagine there is some kind of _qt_recalculateTheSomething()_qt_ function that I_t_m supposed to be calling_co_ but I can_t_t find any sample code to reference._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In pseudocode_co_ I am basically doing this_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_vdat _eq_ new VertexDatavdat.positions _eq_ concat( submeshPositions )vdat.indices _eq_ concat( submeshIndices )// ...colors_co_ normals_co_ etc.mesh _eq_ new Meshmesh.position _eq_ someVec3vdat.applyToMesh( mesh )mesh.subMeshes _eq_ []for (i in submeshData) {  var sub _eq_ new SubMesh(matID_co_ vertStart_co_ verts_co_ indStart_co_ inds_co_ mesh)}_lt_/pre_gt__lt_p_gt_Is something obvious missing from that pseudocode? Again_co_ apart from frustum culling everything seems to render correctly._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-03-10T08:10:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__eq__eq_&gt_sm_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/issues/430_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/issues/430_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]