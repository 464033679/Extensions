[{"Owner":"fenomas","Date":"2018-05-10T06:28:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI had some transparent textures that broke when updating to the current nightly build (from 3.2). After much searching_co_ the problem seems to depend on the timing of when I call _qt_mat.freeze()_qt_. Can someone confirm if this is a bug or not?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSpecifics_dd_ in my project I create and set up my materials and textures at init_co_ and then freeze the material. I delay the _qt_freeze_qt_ call_co_ to give Babylon a chance to initialize_co_ but this is while the game is paused so no renders are taking place.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var mat _eq_ new BABYLON.StandardMaterial(name_co_ scene)\n// set some colors...\n\nvar tex _eq_ new BABYLON.Texture(url_co_ scene_co_ noMip_co_ true_co_ sampling)\ntex.hasAlpha _eq_ true\nmat.diffuseTexture _eq_ tex\n\n// freeze material after a tick\nsetTimeout($ _eq_&gt_sm_ { mat.freeze() }_co_ 10)_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tIn 3.2 this worked fine_co_ but in 3.3 my transparent textures are broken. If I delay calling _qt_mat.freeze()_qt_ until after the scene has rendered at least once_co_ things work as in 3.3.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBug or no? When is it safe to freeze materials?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-05-10T17:18:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m surprised that there is a change on that between 3.2 and 3.3\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDo you mind reproducing in the PG?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs a rule of thumb_co_ freezing is valid when mat.isReady() is true\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2018-05-11T04:56:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI can_t_t easily reproduce this in the PG_co_ as it seems to depend on the timing of when scene.render is called.\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_214480_qt_ data-ipsquote-contentid_eq__qt_37540_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1525972734_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t11 hours ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tAs a rule of thumb_co_ freezing is valid when mat.isReady() is true\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThis looks promising_co_ but mat.isReady() is never true - it returns false if no mesh argument is passed in.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDo I need to check isReady(mesh) for a mesh the material is used for? Or all of them?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-05-11T15:12:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tyes you need to check for a mesh because materials are compiled per mesh. But if you plan to freeze a material it means that all meshes are compatible (ie. same way to use the material) so using just one with isReady will make it\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2018-05-12T10:54:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_ thanks for the response but it seems that things are more complicated than that.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI managed to make a PG that (probably?) replicates my issue_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#8EMFCU_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#8EMFCU_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs you can see it creates a bunch of meshes_co_ which all use the same material_co_ and then freezes the material later on. The meshes become visible at various delays. The transparent texture breaks for some meshes_co_ but not always the same ones - it seems to depend on whether or not the mesh has been rendered at the time when mat.freeze() is called?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-05-14T20:07:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is expected. The mesh has to be rendered once before you can actually freeze the mat\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2018-05-15T02:02:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_214940_qt_ data-ipsquote-contentid_eq__qt_37540_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1526328467_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t5 hours ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThis is expected. The mesh has to be rendered once before you can actually freeze the mat\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tPer the PG_co_ _lt_strong_gt_isReady(mesh)_lt_/strong_gt_ returns true even for meshes that haven_t_t rendered yet.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDoes that mean it_t_s impossible to tell whether it_t_s safe to freeze a material that is being used for multiple meshes?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-05-15T15:49:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou just need to wait for the mesh to have been rendered at least once because it requires to get data from the mat and if the mat is frozen the entire check is skipped.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFurthermore we all the latest update_co_ the material freezing is no more a big deal regarding performance\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2018-05-15T16:24:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI understand that! _lt_img alt_eq__qt__dd_blink_dd__qt_ data-emoticon_eq__qt__qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_blink.png_qt_ title_eq__qt__dd_blink_dd__qt_ /_gt_ But with frustum culling there_t_s no real way to be sure when a mesh has been rendered_co_ right?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf there_t_s no way to definitely know when this is safe_co_ and it doesn_t_t help performance_co_ should it just be forgotten about?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-05-15T17:15:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSeems like this is an obsolete optimization that was also too difficult to use.  BTW_co_ for future reference_co_  Adding a mesh afterrender_co_ which un-registers itself in the callback_co_ is foolproof.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-05-15T17:20:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI think it is ok to say that you can ignore this property for now\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]