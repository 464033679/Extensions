[{"Owner":"MasterSplinter","Date":"2015-07-30T00:21:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Okay_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Kind a noob question...  But_co_ I can_t_t seem to figure out best practices for interacting with a babylon scene.   Should I just stick all the _qt_how the games going to work inside babylon_qt_ or should I create a separate file that interacts with babylon scene?  If the best option is later is there so good reading on how I can break up and integrate these files._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Here is my source so far._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Babylon_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/wpdildine/Simon-Test/blob/master/simon/src/js/ui.js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/wpdildine/Simon-Test/blob/master/simon/src/js/ui.js_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Launcher_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/wpdildine/Simon-Test/blob/master/simon/src/js/main.js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/wpdildine/Simon-Test/blob/master/simon/src/js/main.js_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Index_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/wpdildine/Simon-Test/blob/master/simon/src/index.html_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/wpdildine/Simon-Test/blob/master/simon/src/index.html_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks in advance._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-07-30T02:11:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi MS!  I_t_m not qualified at all on this... because I do almost exclusively all-in-one-file scenes (such as our playground demos).  But I recommend you take this..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//visualiser.fr/Babylon/oldman.zip_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//visualiser.fr/Babylon/oldman.zip_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Sam Girardin_t_s ragdoll source package.  Not only is all the .ts and .js here... but Sam is a pro programmer... and you will see an organizational style to his js files/folders... that is good_co_ in my opinion.  I think much can be learned from that package.  Sam is a nice chap and welcomes downloaders_co_ and welcomes SOME code borrowing.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  It_t_s a great source package and a really fun demo._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_And then there_t_s Temechon... another fine packager and project organizer.  _lt_a href_eq__qt_http_dd_//babylondoc.azurewebsites.net/page.php?p_eq_21951_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylondoc.azurewebsites.net/page.php?p_eq_21951_lt_/a_gt_  -  that will take you into his world of wonders._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_There_t_s many more great project managers around here_co_ and the organization ideas that YOU have shown_co_ seem fine_co_ too.  The good thing... it_t_s all flexible_co_ and pretty easy to re-org late in the game.  JS is rather forgiving_co_ and ascii file adjustments are easy_co_ anytime.  It_t_s all flexible_co_ even 6 months into the project. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_One of the best organized projects of all... is Babylon.js itself.  Try to model your projects after Babylon.js_co_ and you will always remain flexible and yet nicely organized. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Sometimes_co_ OOPies seem to rush into _qt_locking-in_qt_ an interface and they freeze it solid_co_ in their minds.  We try to get that step behind us_co_ so we can get-on with fleshing it out.  Try _lt_u_gt_not to_lt_/u_gt_ lock your api_t_s.  Let yourself flex with the JS and ascii... and when in doubt... try it ALL the different ways.  The interface to Scene (to BJS) is SO unobtrusive to JS itself_co_ that_co_ it_t_s easy... and fast... and _qt_snap-on_qt_ if you do it correctly.  Any JS object can have a single .toWebGL interface_co_ and that_t_s all it needs.  Your gui object(s)... maybe .toWebGL and .toHTML...  same gui... different _t_view_t_.  *shrug*_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_There_t_s tons of projects and demos on the Babylon.js main website_co_ too... most of which are smartly organized/coded.  Follow the leader_co_ MSplinter.  Others have blazed some trails and done some tests... so you might as well _lt_strike_gt_suck their brains dry and leave them a quivering_co_ shivering mess _lt_/strike_gt_ umm... utilize their knowledge.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  Be well.  More comments to come_co_ surely._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]