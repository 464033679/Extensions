[{"Owner":"Pryme8","Date":"2016-03-25T01:32:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2KHPSP%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2KHPSP#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn my scene_co_ I am trying to add phsyics to an object like I have done a bunch of times_co_ but for some reason the scaling this time has make the object not react correctly..._lt_br_gt_\n\tI tried adding part.mesh.refreshBoundingInfo()_sm_ but to no avail._lt_br_gt_\n\tIf I make the object scaled back to 1 it works._lt_br_gt__lt_br_gt_\n\tIs it because it is a copy of another mesh and not its own drawcall_co_ I figured that would not effect it but not sure._lt_br_gt__lt_br_gt_\n\t**UPDATE**_lt_br_gt_\n\tThe Mystery gets deeper..._lt_br_gt__lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2KHPSP%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2KHPSP#1_lt_/a_gt__lt_br_gt_\n\tI fixed my extend error_co_ and tried to change the way I cloned and that still did not work... then I tried to make a whole new box and as soon as I set its dimensions down it acts the same way!_lt_br_gt__lt_br_gt__lt_br_gt_\n\t***ANOUTHER UPDATE***_lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2KHPSP%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2KHPSP#2_lt_/a_gt__lt_br_gt_\n\tI bumped the scale up by 10 and everything works now.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-03-25T03:20:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk now that I have got the scene set up_co_ nothing is working the way I would expect..._lt_br_gt__lt_br_gt_\n\tMy motor object I created worked just fine until I attached my arm and spinner objects._lt_br_gt_\n\tI tried different joint types to get it to lock in rigged_co_ and even tryed a physicslink but nothing really worked. now it just freaks out._lt_br_gt__lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2KHPSP%237_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2KHPSP#7_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t**UPDATE**_lt_br_gt_\n\tI got it kinda working by reducing the mass a whole bunch on the arm and spinner anything under 0.005 it goes crazy though._lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2KHPSP%2310_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2KHPSP#10_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthere has to be a way to make the joints _qt_stronger_qt__co_ also even though its kinda working it still freaks out at first and hangs a little bit._lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2KHPSP%2311_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2KHPSP#11_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t**UPDATE\n_lt_/p_gt_\n\n_lt_p_gt_\n\teven once ballancing the machine_co_ it still has its problems... it really kinda seems like it stems from weak joints or maybe im doing things wrong?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2KHPSP%2312_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2KHPSP#12_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2KHPSP%2313_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2KHPSP#13_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-03-25T08:01:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_ll be on mobile most of the day_co_ so I won_t_t be able to help too much until the evening. We_t_ll figure it out.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-03-25T09:51:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Pryme8_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI was trying to understand exactly what you are doing_co_ and I believe this is caused due to limit settings of the 2nd hinge of the hinge2 joint_co_ but it is really hard for me to follow your code. Sorry... I understand what you are doing_co_ I see how I would be able to change that_co_ but I really wonder why you use jQuery and the rigger class. You also keep on changing the local references to the joints themselves (using jQuery_t_s extend)_co_ so finding exactly which joint is supposed to be changed is not an easy task.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI also try to understand why you need the _qt_run_qt_ method. If you use a motor_co_ you can simply provide the motor with speed and it will do the angular work for you.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAbout the scaling - Oimo is to blame here. To work correctly with Oimo_co_ the objects need to be in big units (multiply everything by 100_co_ and it will work better). There is a reason for that_co_ but I don_t_t see Oimo changing it any time soon.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI will find the time to create a demo close to yours and see how I can help further.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-03-25T15:04:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHere is a cleaner version_co_ including 3 motors (the 3rd one is disabled).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#IBGBX%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#IBGBX#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthe function is is running before each physics step keeps the pole from constant rotation changes in different axis. Comment it out and you will see the difference.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-03-25T16:27:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tGod I love you Raan ^_^_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am using the jquery to extend my prefab objects_co_ so that way they fit the format for my rigger.  I like to keep some of my variables and settings defined on a separate container object for generation purposes._lt_br_gt__lt_br_gt_\n\tI am doing my own motor class because I want to have a little more control over the physics and will be extending it to become way more dynamic then the built i class which will include torque settings or linear force settings so thats why I have the motor run function (I also use this method for AI triggers) I have not ever added more then like 3 though so Im not sure how it will impact performance having the register before scene run through an each loop that is too large._lt_br_gt__lt_br_gt_\n\tThe rigger class will eventually be developed enough to be able to do simple to more advanced machines with some fairly easy construction methods.  The idea of it is if you want to create a lets say catapult or something_co_ you would build your rigger and then if you needed to make copys of that prefab_co_ you will be able to pass the rig object to a object/scene management object and make copys of it in the scene without having to construct it again.  I am also interested in making a _qt_prefab_qt_ editor where like in my magic marble demo you will be able to construct objects then export them as a .js file for import later in scenes which is handled by what ever object management class I come up with._lt_br_gt__lt_br_gt_\n\tIs there a way to boost the strength of the joint connections?  Also if we are having a error with the way Oimo does its units would it be prudent to pass all values through a converter before handling variables from or to the physics engine?  Like if it goes to Oimo from Babylon it gets multiplied by 100 and if it comes from Oimo to Babylon then divide it by 100_co_  I_t_m not sure if there would be some loss in the calculations though_co_ because I have seen that before when I bounce numbers between ranges (which does not make since [effen math])..._lt_br_gt__lt_br_gt_\n\tIm really excited to see your deployment of a vehicle class_co_ and will GO TO TOWN once_co_ I have all the information in front of me. _lt_br_gt__lt_br_gt_\n\tAlso quick opinion_co_ if one was to make a dynamic tank tread would I use physiclinks or joints for connecting my treads? and then how could I restrict them from going _qt_offline_qt_ and throwing themselves from their axis on the drive._lt_br_gt__lt_br_gt_\n\t----  Secondary response _dd__lt_br_gt_\n\t_qt_.physicsImpostor.physicsBody.rotation.elements_qt_ -- OOOOO What is this madness_co_ could you explain this please? I have never seen the physicsBody.rotation.elements before_co_ and it looks to me to be a WAY easier way to reference the rotation of the physics object.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_qt_.setMotor(10_co_ 100_co_ 0)_sm__qt_  -- is this just setting the forceAngle and value?  how do I change motors settings besides force factors_co_ are there any (would it be smarter to extend the motor class in Oimo or develop my own like im doing?_qt_ _lt_br_gt__lt_br_gt_\n\tI think Im gonna make a reference page for Babylon called _qt_Skin a Cat_qt_  and have examples of redundant methods... so like you wanna rotate a physics object? ok here are 8 examples how to all with different methods_co_ have fun._lt_br_gt__lt_br_gt__lt_br_gt_\n\t----- And last...._lt_br_gt__lt_br_gt_\n\tI commented out\n_lt_/p_gt_\n\n_lt_p_gt_\n\t    /*pole1.physicsImpostor.registerBeforePhysicsStep(function () {_lt_br_gt_\n\t        var boxRotation _eq_ box1.physicsImpostor.physicsBody.rotation.elements_sm__lt_br_gt_\n\t        var poleRotation _eq_ pole1.physicsImpostor.physicsBody.rotation.elements_sm__lt_br_gt_\n\t        var poleOrientation _eq_ pole1.physicsImpostor.physicsBody.orientation_sm__lt_br_gt_\n\t        _lt_br_gt_\n\t        //console.log(boxRotation_co_ poleRotation)_lt_br_gt_\n\t        var axis1 _eq_ new BABYLON.Vector3(boxRotation[1]_co_ boxRotation[4]_co_ boxRotation[7])_sm__lt_br_gt_\n\t        var axis2 _eq_ new BABYLON.Vector3(poleRotation[0]_co_ poleRotation[3]_co_ poleRotation[6])_sm__lt_br_gt_\n\t        var axis3 _eq_ axis2.subtract(axis1.scale(BABYLON.Vector3.Dot(axis1_co_ axis2)))_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t        poleOrientation.mul(new OIMO.Quat().arc(axis2_co_ axis3.normalize())_co_ poleOrientation)_sm__lt_br_gt_\n\t        poleOrientation.normalize(poleOrientation)_sm__lt_br_gt_\n\t    })*/_lt_br_gt_\n\t   \n_lt_/p_gt_\n\n_lt_p_gt_\n\tthis entire section and effectively saw no change in the scene.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-03-25T17:15:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\thi!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI do understand why you have the rigger class_co_ I just mean that it will take me longer to understand how it works_co_ than to implement this on my own _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\tAbout the 100-times calculations_co_ you are right. theoretically_co_ multiplying and dividing a number by 100 will get the same number. You are forgeting that we are dealing with a digital number_co_ that has a real limitation. even 64bit architecture has a limit to the number of places after the dot. and this is the problem. Oimo inverts the values you provide_co_ and when they come back to _qt_real world_qt__co_ they are... _qt_rounded_qt_. Oimo has a WORLD_SCALE variable for that reason_co_ but setting it makes everything slower. I can try and debug this_co_ or simply recommend you - make a larger world _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\tso_co_answering questions_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t0) there is no way to make a joint _qt_stronger_qt_. this is what the (oimo) physics engine provides. you can try cannon and see how the constraints work there.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1) _qt_.physicsImpostor.physicsBody.rotation.elements_qt_ is the 3x3 rotation matrix of the physics body. very Oimo-specific code. this won_t_t wok in cannon_co_ of course. the rotation of the physics object can be simply retrieved using mesh.rotationQuaternion. this would actually work as well (converting this quaternion to a transformation matrix and using it to run the computations). This is the magic of Babylon_t_s physics engine architecture _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\t2) this is setting the speed (first variable) and (max) force (second variable). the 3rd variable is the index of the motor (as hinge2 has two motors).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOimo only provides functions that are already available in Babylon_t_s joint class. setMotor_co_ setLimit are both implemented. you can see the (very simple) motor class here - _lt_a href_eq__qt_https_dd_//github.com/lo-th/Oimo.js/blob/gh-pages/src/constraint/joint/LimitMotor.js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/lo-th/Oimo.js/blob/gh-pages/src/constraint/joint/LimitMotor.js_lt_/a_gt_ . I am not sure what other functionality you want to add_co_ but as Oimo is open source_co_ you can of course extend it _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\t3) As long as you don_t_t really skin a cat_co_ it sounds like a great plan!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t4) of course this function is doing something. This keeps the motor from rotation in an axis it is not supposed to rotate in. you just don_t_t see it when the collision box is there. here_dd_ with - _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1CW6PI%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1CW6PI#1_lt_/a_gt_ and without - _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1CW6PI_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1CW6PI_lt_/a_gt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\t5) lowering the timestep will create more stable physics joints_co_ as oimo has more time to calculate the rotations and has more time to correct mistakes. Lowering the motor speed will do the same job.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-03-25T18:10:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI feel like we are getting to some real meat and potato conversation now!_lt_br_gt__lt_br_gt_\n\tWont lowering the timestep create a choppy playback issue in gameplay?  Like lagged calculations?  Is there a way to sacrifice fps for calculations like increase the solver iterations?_lt_br_gt__lt_br_gt_\n\tWhere would I start looking to creating a way to add a strength factor to joints?_lt_br_gt__lt_br_gt_\n\tI assume solvers iterations are handled by this?_dd_\n_lt_/p_gt_\n\n_lt_table_gt__lt_tbody_gt__lt_tr_gt__lt_td_gt_\n\t\t\t\t_lt_span_gt_OIMO_lt_/span_gt_._lt_span_gt_Constraint_lt_/span_gt_._lt_span_gt_prototype_lt_/span_gt_ _lt_span_gt__eq__lt_/span_gt_ {\n\t\t\t_lt_/td_gt_\n\t\t_lt_/tr_gt__lt_/tbody_gt__lt_/table_gt__lt_table_gt__lt_tbody_gt__lt_tr_gt__lt_td_gt_\n\t\t\t\tconstructor_lt_span_gt__dd__lt_/span_gt_ _lt_span_gt_OIMO_lt_/span_gt_._lt_span_gt_Constraint_lt_/span_gt__co_\n\t\t\t_lt_/td_gt_\n\t\t_lt_/tr_gt__lt_tr_gt__lt_td_gt_\n\t\t\t\t_lt_span_gt_/**_lt_/span_gt_\n\t\t\t_lt_/td_gt_\n\t\t_lt_/tr_gt__lt_tr_gt__lt_td_gt_\n\t\t\t\t_lt_span_gt_* Prepare for solving the constraint._lt_/span_gt_\n\t\t\t_lt_/td_gt_\n\t\t_lt_/tr_gt__lt_tr_gt__lt_td_gt_\n\t\t\t\t_lt_span_gt_* _lt_span_gt_@param_lt_/span_gt_ timeStep_lt_/span_gt_\n\t\t\t_lt_/td_gt_\n\t\t_lt_/tr_gt__lt_tr_gt__lt_td_gt_\n\t\t\t\t_lt_span_gt_* _lt_span_gt_@param_lt_/span_gt_ invTimeStep_lt_/span_gt_\n\t\t\t_lt_/td_gt_\n\t\t_lt_/tr_gt__lt_/tbody_gt__lt_/table_gt__lt_table_gt__lt_tbody_gt__lt_tr_gt__lt_td_gt_\n\t\t\t\t_lt_span_gt_*/_lt_/span_gt_\n\t\t\t_lt_/td_gt_\n\t\t_lt_/tr_gt__lt_/tbody_gt__lt_/table_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-03-25T18:48:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOn mobile so a quick answer ☺\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis will have to be implemented in oimo itself. Babylon is just using the existing engine with its upsides and downsides. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe first example I posted had a time step set to 1/120_co_ two times slower than the default 1/60. You didn_t_t notice. Because rendering is still the same_co_ it_t_s just the physics calculations. They are still smooth_co_ just move slower. Or faster_co_ of course.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou can increase the solver iterations in the constructor of the plugin. Default is 10. new OimoJSPlugin(20) will set it to 20.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tComing in the advanced tutorial.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-03-26T00:05:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t^_^_co_ I love it_co_ a lot of these answers are unlocking the secrets of developing a fully deployed piece of production software as opposed to dinky experiments!_lt_br_gt__lt_br_gt_\n\tOne question I think we skipped over is which method would be better for _qt_tank treads_qt_ physiclinks or joints?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-03-26T21:06:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI would say hinge joints.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]