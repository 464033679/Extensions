[{"Owner":"MrGroove","Date":"2018-08-05T15:13:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi everbody_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\ti_t_ve got an array of n-vectors_co_ which define an outline of an intersection. My problem - they are not _qt_ordered_qt__co_ so it can happen_co_ that there are _qt_cross lines_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tis it possible to _qt_order_qt_ them by the nearest distance to each other?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBestÂ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MrGroove","Date":"2018-08-05T15:19:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_08/1468345335_Bildschirmfoto2018-08-05um17_18_27.png.592afd33e1cc78e58e9cc4703ec19520.png_qt_ class_eq__qt_ipsAttachLink ipsAttachLink_image_qt__gt__lt_img data-fileid_eq__qt_19504_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_08/697784334_Bildschirmfoto2018-08-05um17_18_27.thumb.png.db74215cfa2ccfa5a428a981bab10256.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_Bildschirmfoto 2018-08-05 um 17.18.27.png_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"TheBoneJarmer","Date":"2018-08-05T18:44:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYour question sounds quite confusing. If I understand it correctly_co_ you got vertices who are at the exact same spot and therefore causes cross lines and you want to figure out how to prevent that by ordering them..? What is it that you are trying to archive? And for the sake of complete understanding_co_ can you zip up what you got now and add it as an attachment? That really would make things a looooot easier since we are dealing with logic and 3D algorithms here. _lt_span_gt__lt_span class_eq__qt_ipsEmoji_qt__gt_ðŸ˜›_lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2018-08-06T09:44:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tCSG (Constructive Solid Geometry)Â _lt_a href_eq__qt_https_dd_//github.com/CraigFeldspar/BabylonCSG_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/CraigFeldspar/BabylonCSG_lt_/a_gt_ deals with adding_co_ and subtracting two meshes and must deal with their intersection. So there must be something in the code for this that will help you.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]