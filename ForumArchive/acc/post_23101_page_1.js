[{"Owner":"i.animator","Date":"2016-06-10T00:42:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIn Babylon.js Is there a way to render animated sprites with an additive (one one) blend mode?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEither that or can I use an animated sprite as a particle that uses the particle_t_s one one blend mode?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t-_eq_T_eq_-\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2016-06-10T09:13:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tIs this not usefull in your case ? _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/tutorials/How_to_use_Blend_Modes_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/tutorials/How_to_use_Blend_Modes_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"i.animator","Date":"2016-06-10T16:04:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tV!nc3r_co_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThank you for the reply. While that does talk about the alpha blend modes_co_ it shows it being use with relation to a material. I don_t_t see any way to get ahold of the material that the sprite manager is using in order to force a different alpha blend mode.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is a little example of the sprite sequences_dd__lt_br /_gt__lt_br /_gt__lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#1IQ6A5%235_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#1IQ6A5#5_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthanks_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t-_eq_T_eq_-\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2016-06-13T08:59:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI don_t_t know if alpha mode could be use without material_co_ however in my not-dev point of view_co_ this is what i would set in this case _dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_spark.isPickable _eq_ false_sm_\nspark.material _eq_ new BABYLON.StandardMaterial(_qt_sparkTexture_qt__co_ scene)_sm_\nspark.material.alphaMode _eq_ BABYLON.Engine.ALPHA_ADD_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI just find how to use this in my actual project_co_ it_t_s not a sprite here_co_ but ALPHA_ADD works well _dd_ _lt_a href_eq__qt_http_dd_//imgur.com/a/beYxe_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//imgur.com/a/beYxe_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHope it can help ^^\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"FunFetched","Date":"2017-12-17T19:41:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI know this thread is over a year old_co_ but I just ran into this situation myself. ParticleSystem_co_ while handy (and additive_co_ if you want)_co_ creates too much new junk for the garbage collector for my purposes_co_ so I wanted to roll my own. SpriteManager_co_ however_co_ doesn_t_t come with an option for additive blending built-in.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHowever_co_ if you_t_re feeling even slightly adventurous_co_ it_t_s super easy to add this functionality to the engine.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPop open your babylon.js and look for this line within SpriteManager.prototype.render (it_t_s toward the bottom of the function)_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_engine.setAlphaMode(Engine.ALPHA_COMBINE)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tChange ALPHA_COMBINE to ALPHA_ADD and voila_sm_ additive blending of sprites! Of course_co_ you_t_ll want to add a flag to SpriteManager so you can enable/disable this functionality per SpriteManager_co_ but you get the drift. There are other things you might want to do as well_co_ such as disabling the depth test draw just above that_co_ so you don_t_t end up with darker additive sprites blotting out brighter ones behind them_co_ but once you know where to look_co_ you can do whatever you want.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHappy adding!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]