[{"Owner":"mainequin","Date":"2017-04-19T09:00:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tDear Babylon JS community_co__lt_br /_gt_\n\twe as a company have decided_co_ that we want to use Babylon JS for a larger project._lt_br /_gt_\n\tFor this we have specific requirements for what the shaders have to be able to do._lt_br /_gt_\n\tI will first state the problem I am trying to solve and then give the context_co_ for possible_lt_br /_gt_\n\talternative solutions.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPROBLEMS_dd__lt_br /_gt_\n\tFor our more complex shader computations we want to integrate shadows from at_lt_br /_gt_\n\tleast one shadow-generator in a custom shader. For reasons of confidentiality I can_lt_br /_gt_\n\tnot submit our current project code_co_ that is why I created this test playground_dd__lt_br /_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#VZKI0U_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#VZKI0U_lt_/a_gt__lt_br /_gt_\n\tWe want to get the influence of all shadows on a fragment as a float value in the_lt_br /_gt_\n\tshader for further computations. For this we encountered the following problems_dd__lt_br /_gt_\n\t- Mapping to shadow-map coordinates seems to be wrong_lt_br /_gt_\n\t- using functions like computeShadow() from #include&lt_sm_shadowsFragmentFunctions&gt_sm__lt_br /_gt_\n\t  yields not-declared-error_lt_br /_gt_\n\t- computeShadow() yields always 1.0 as a result\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCOURSE OF EVENTS_dd__lt_br /_gt_\n\tWe started playing around with the standart material and shadow generators and_lt_br /_gt_\n\tquickly got them to work. we wrote a small utility function for setting up the shadow_lt_br /_gt_\n\tgenerators_co_ which you can find at the top of the linked playground code. After this_lt_br /_gt_\n\twe played around with uploading textures into our custom shaders and were able_lt_br /_gt_\n\tto create the desired effects. We looked into uploading the shadow-map and the_lt_br /_gt_\n\tshadow-generator parameters into the shader_co_ which was sucessful. You can find_lt_br /_gt_\n\tthe uploads at line 113-115 of the linked playground code. Since we do not want_lt_br /_gt_\n\tto write the mapping to shadow map coordinates ourselves_co_ we looked if there is_lt_br /_gt_\n\talready existing code_co_ which we found in the shadowsVertex.fx_co_ shadowsFragment.fx_lt_br /_gt_\n\tand shadowsFragmentFunctions.fx files. While trying to get the mapping right_co_ we_lt_br /_gt_\n\tencountered the aformentioned problems. We were not able to get correct results_lt_br /_gt_\n\tregarding the shadow-uv-coordinates_co_ shaderincludes like the above mentioned_lt_br /_gt_\n\t#include&lt_sm_shadowsFragmentFunctions&gt_sm_ yields a _qt_computeShadow() has not been_lt_br /_gt_\n\tdeclared_qt_ error when used in the code after the statement and what code we_lt_br /_gt_\n\tcurrently copied from these files seems to always yield 1.0 as a result for the sha-_lt_br /_gt_\n\tdow intensity. We are turning to you now_co_ because we are at a point where we_lt_br /_gt_\n\tcannot find the errors in our approach/code anymore. We are required to use_lt_br /_gt_\n\tBabylon JS version 2.5 in our project. Although it didn_t_t seem to make a difference_lt_br /_gt_\n\tfor the shader code we looked through I wanted to mention it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCONTEXT_dd__lt_br /_gt_\n\tOur scene is basically shadeless_co_ with multiple materials per object_co_ distributed via_lt_br /_gt_\n\ta mask. Therefor we combine a precomputed light texture (for individual objects)_lt_br /_gt_\n\twith a diffuse texture and multiple material textures blended via a mask texture._lt_br /_gt_\n\tSince we require no lighting computation we just want the shadow values to get_lt_br /_gt_\n\tsome visual depth in the scene. Therefor the standart material seems to be not_lt_br /_gt_\n\tsufficient for our purposes_co_ hence the reliance on a custom shader._lt_br /_gt_\n\tI saw code that created a custom material with the standart shaders and then re-_lt_br /_gt_\n\tplaced parts of the vertex and fragment code via a function. We would be ready_lt_br /_gt_\n\tto do this kind of code insertion_co_ if it yields correct shadow information. Sadly I_lt_br /_gt_\n\tcannot find the example project for this anymore_co_ so if you could provide a link_lt_br /_gt_\n\tto a simmiliar source it would be much appreciated._lt_br /_gt__lt_br /_gt_\n\tThank you sincerely for your time and help_lt_br /_gt_\n\tWith best regards from the green heart of Germany_lt_br /_gt_\n\tThe Mainequin Team\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-04-19T15:39:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello and welcome!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI found several things_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- You used blur shadow maps but the code uses to read it was not taking it in account (comment line #9)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- You forgot to add the world uniform when constructing the ShaderMaterial (line #109)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- SHADOWFULLFLOAT was not define (line #110). You actually need to test for float texture support using engine.geCaps()\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- bias was wrong (no more required in shader code)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe working PG_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#VZKI0U%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#VZKI0U#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tHope this helps _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"mainequin","Date":"2017-04-24T10:08:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tDear Deltakosh_co__lt_br /_gt_\n\tthank you for your quick answer!_lt_br /_gt_\n\tToday we integrated your corrections into our shader code._lt_br /_gt_\n\tWe received shadow-acne_co_ which we fixed by adding bias_lt_br /_gt_\n\tagain. The computeShadowWithPCF-function looks at_lt_br /_gt_\n\tneighboring coordinates in a distance defined by a Poisson-_lt_br /_gt_\n\tdisk and fades the shadow strength based on visibility_co_ as_lt_br /_gt_\n\tfar as we understand. If all four samples are in the dark_co_ we_lt_br /_gt_\n\treceive full shadow. So since this is done in the shader_co_ the_lt_br /_gt_\n\tfilter mode in the shadow generator should be irrelevant for_lt_br /_gt_\n\tthis.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe fixed the upload of the shadow-parameters as Vector3_co__lt_br /_gt_\n\tso now darkness_co_ bias etc. are correctly uploaded.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe copied the computeShadowWithPCF-function and in-_lt_br /_gt_\n\tcreased the samples of the Poisson-disk_co_ so that it fits our_lt_br /_gt_\n\tneeds.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is the final project_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#VZKI0U%237_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#VZKI0U#7_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThank you again for your help and time!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-04-24T23:40:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tExcellent!!! Glad that it worked for you\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]