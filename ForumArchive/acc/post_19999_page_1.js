[{"Owner":"jodo","Date":"2016-01-20T13:21:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI recently did some research on how the _qt_big players_qt_ like unity_co_ unreal engine or cryengine are planing to handle webGL. While I wasnt able to find any information regarding unreal engine or cryengine going down the _qt_webgl-path_qt_ I found some articels about unity. As you might know_co_ the unity web player is pretty much deprecated. I think it doesnt run in lastest chrome_co_ firefox and ms edge versions.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut in this articel_dd_ _lt_a href_eq__qt_http_dd_//blogs.unity3d.com/2015/10/08/unity-web-player-roadmap/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//blogs.unity3d.com/2015/10/08/unity-web-player-roadmap/_lt_/a_gt_ on the unity site_co_ they talk about that it will be possible to port unity games to webGL when version 5.4 is released this March.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe question is_co_ should this work in a suitable way with unity_co_ can frameworks like babylon.js survive? Dont get me wrong_co_ I love working with babylon.js and it is an awesome framework with a super nice community. I would just like to know everybodys thoughts on this topic.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"chg","Date":"2016-01-20T13:27:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_113496_qt_ data-ipsquote-contentid_eq__qt_19999_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1453296103_qt_ data-ipsquote-userid_eq__qt_18042_qt_ data-ipsquote-username_eq__qt_jodo_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t7 minutes ago_co_ jodo said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThe question is_co_ should this work in a suitable way with unity_co_ can frameworks like babylon.js survive? Dont get me wrong_co_ I love working with babylon.js and it is an awesome framework with a super nice community. I would just like to know everybodys thoughts on this topic.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIsn_t_t it a bit premature to take Unity WebGL seriously? They_t_ve failed to deliver on this for a few years now... (EDIT_dd_ thinking about this_co_ I guess it is inevitable that they will get something useable working eventually_co_ but then as a dev that_t_s good for us right - more choice)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jodo","Date":"2016-01-20T13:32:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t@chg sorry to not know that. I have only very little experience with unity and no at all when it comes to unity and webGL or the unity web player. But well_co_ thats probably why i am premature on this topic _dd_ D\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2016-01-20T15:00:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIn my opinion_co_ Unity WebGL engine is too important to be used online. I had a client asking me to port one of their solutions from Unity WebGL to Babylon.js because the whole application was ~80Mo... Reduced to ~5Mo using Babylon.js.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-01-20T16:07:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI think is time to start putting version #_t_s on references to WebGL.  WebGL 1.0 is a stripped down OpenGL 2.0 c.a. 2007.  Unless Unity were morons_co_ they are probably OpenGL 3 or 4.  This might have a lot to do with them trying to move their code base to WebGL 1.0.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWebGL 2.0 looks close to done.  I check the spec page at least weekly.  Hardware_co_ _lt_a href_eq__qt_https_dd_//developer.apple.com/library/ios/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/OpenGLESPlatforms/OpenGLESPlatforms.html_qt_ rel_eq__qt_external nofollow_qt__gt_Apple_lt_/a_gt_ at least_co_ is already OpenGL 3.0 ES ready back to A7 processors. Once this is final_co_ we should not wait for anyone to catch us.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe would do well to publish 2.3 when WebGL 2.0 goes final_co_ then create a branch in the repository called _qt_WebGL 1.0_qt_.  Use that branch only to fix bugs.  It will take a while for Browsers / apps like CocoonJS to start publishing production versions using WebGL 2.0.  That_t_s ok.  I think we could redo a lot to change our vertex shaders to avoid uniform limits_co_ using buffers_co_ while we wait.  No more need to cpu skin do to too many bones.  Kill that.  There is probably a lot more that can be done.  Fuck 2007!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2016-01-20T16:20:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWebGL 2.0 is already out since early January 2016 (If I understand well)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.khronos.org/registry/webgl/specs/latest/2.0/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.khronos.org/registry/webgl/specs/latest/2.0/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBabylon val be wear for WebGL 2.0?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"chg","Date":"2016-01-20T16:22:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_113534_qt_ data-ipsquote-contentid_eq__qt_19999_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1453306074_qt_ data-ipsquote-userid_eq__qt_8492_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t11 minutes ago_co_ JCPalmer said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tWebGL 1.0 is a stripped down OpenGL 2.0 c.a. 2007.  Unless Unity were morons_co_ they are probably OpenGL 3 or 4.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tWebGL is moreorless OpenGL ES 2.0_co_ yes that stripped a lot of junk out compared with OpenGL 2.0_sm_ but that same junk was stripped out of from OpenGL 3 &amp_sm_ 4... there_t_s a difference between _qt_stripped out_qt_ and _qt_stripped down_qt_ - don_t_t mourn the legacy fixed function pipeline (which is the bulk of what was removed)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-01-20T16:43:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/10707-chg/?do_eq_hovercard_qt_ data-mentionid_eq__qt_10707_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/10707-chg/_qt__gt_@chg_lt_/a_gt_ the stripped down part was not my point.  I could have just left it out.  Yeah_co_ the stripped out part was mostly a turkey dump.  You cannot also use ES to fake it into doing GPGPU.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy point was_co_ there is a lot of _qt_new_qt__co_ post 2007_co_ stuff in 3.0 that can be used to remove limitation we currently live under.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dal","Date":"2016-01-20T23:17:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tUnreal Engine 4 does compile to WebGL and works well. Unity can build for WebGL as well. They_t_re both awesome engines._lt_br_gt_\n\tThe thing is_co_ both are massive... even when they try to reduce the size for the web and mobile they have quite big footprints and_co_ importantly_co_ they need to turn off or change certain features that are used in the native builds_co_ which means you have to worry about platform differences a lot more. If you just code directly for WebGL_co_ the chances are the exact same code with run everywhere. Plus of course_co_ neither are fully free in the way that Babylon is.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhere I think Babylon and other javascript engines really shine though is that they_t_re completely dynamic. It_t_s possible to make live code changes and see the results immediately on the screen or share online without any need for the slow compiling and packaging processes of most desktop engines. We can edit and run code directly on the browser and even on platforms that other engines can_t_t reach. That makes it possible to do some really cool things and work very quickly and collaborate easily with others.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI certainly agree with _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/8492-jcpalmer/?do_eq_hovercard_qt_ data-mentionid_eq__qt_8492_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/8492-jcpalmer/_qt__gt_@JCPalmer_lt_/a_gt_ that it would be best to focus on the latest GL features we can. It makes little sense to be held back by limitations in the early standards when we_t_re trying to make modern and awesome games. The natural choice for people that want to make a basic 3d scene that works everywhere is to use Three.js with its software fallbacks. Babylon can go all out for maximum eye candy _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt_ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2016-01-20T23:33:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey @jodo_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think your question is interesting. Unity is already a very heavy engine and their apps ported to WebGL have all the reasons to be even heavier and bulkier. I think this is almost inevitable when you_t_re _qt_compiling_qt_ to javascript from an engine that is not engineered around web apps in the first place. Unity has a core software written in C++ and a system of scripting on top of it_co_ with a serialization system that bridges the two. Try to imagine what it would take to transpose this system in JS... Either a complete rewrite of the C++ engine_co_ or an awkward additional JS layer on top of all this_co_ I really can_t_t tell and feel bad for all the coders that have to work on this mess.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBabylonJS is written in javascript and designed for this language_co_ so it will always beat a _qt_compiled to JS_qt_ engine in terms of performance and ease-of-use. It_t_s also a remarkably easy to use WebGL framework_co_ so it should do fine for some more time.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOn the other hand_co_ I think that web browsers will become more and more attractive for game developers. I mean_co_ they probably already are_co_ but the tools are lacking. There are 3D frameworks but they_t_re only doing a part of the job (render_co_ audio_co_ input... admittedly a lot but still) and they_t_re not actual _lt_em_gt_tools_lt_/em_gt__co_ unlike the ones you name in your post. Also_co_ JS is a language that is (I think) not very well known by game developers because not yet used widely in the industry_co_ and also not very fit to be used in large_co_ organized project. Typescript does a better job at this but still_co_ coming from strongly typed_co_ low level languages (i.e. c++) is not easy.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow_co_ think of what gaming in web browsers opens up in terms of possibilities. You_t_re not just running a piece of software that runs on its own or exchanges data with other clients or a server. You_t_re basically opening a window to a virtual universe that is hosted elsewhere. This window can be opened from pretty much everywhere. There is nothing to download_co_ nothing to install_co_ nothing to patch. The whole concept of _qt_software_qt_ is pretty much gone. You_t_re only left with the data going back and forth between you and the server. I think that this is amazing in its own right.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ in my opinion_co_ the field is currently clear for new sets of tools dedicated to in-browser gaming. There are already some in development (for example this one that I like a lot_dd_ _lt_a href_eq__qt_http_dd_//superpowers-html5.com/index.en.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//superpowers-html5.com/index.en.html_lt_/a_gt_)_co_ so time will tell who really takes advantage of the new possibilities. I think this is a pretty exciting time _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\tThat was my 2 cents_co_ use it or throw it _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dal","Date":"2016-01-21T01:31:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_113593_qt_ data-ipsquote-contentid_eq__qt_19999_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1453332797_qt_ data-ipsquote-userid_eq__qt_8339_qt_ data-ipsquote-username_eq__qt_jahow_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t1 hour ago_co_ jahow said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tBabylonJS is written in javascript and designed for this language_co_ so it will always beat a _qt_compiled to JS_qt_ engine in terms of performance and ease-of-use. It_t_s also a remarkably easy to use WebGL framework_co_ so it should do fine for some more time.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI_t_m not sure if that_t_s completely true... C++ engines are able to compile to asm.js and will soon be able to take advantage of WebAssembly as well. That means they might in theory run faster in some cases. It remains to be seen if Babylon can make use of that stuff too. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_113593_qt_ data-ipsquote-contentid_eq__qt_19999_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1453332797_qt_ data-ipsquote-userid_eq__qt_8339_qt_ data-ipsquote-username_eq__qt_jahow_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t1 hour ago_co_ jahow said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tSo_co_ in my opinion_co_ the field is currently clear for new sets of tools dedicated to in-browser gaming. There are already some in development (for example this one that I like a lot_dd_ _lt_a href_eq__qt_http_dd_//superpowers-html5.com/index.en.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//superpowers-html5.com/index.en.html_lt_/a_gt_)_co_ so time will tell who really takes advantage of the new possibilities. I think this is a pretty exciting time _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI am starting to work on something similar myself using Babylon at the core _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-01-21T08:22:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI didn_t_t know superpowers what seems really good\n_lt_/p_gt_\n\n_lt_p_gt_\n\tToo bad it_t_s powered by 3js rather than bjs _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2016-01-21T15:37:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_ve already partly answered to this question here_dd_ _lt_a href_eq__qt_https_dd_//news.ycombinator.com/item?id_eq_9335460_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//news.ycombinator.com/item?id_eq_9335460_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_qt_...First of all_co_ babylon.js for instance_co_ has been made specifically for the web. It_t_s been tested on all browsers &amp_sm_ on as much mobile devices as possible. Our shaders architecture has been made for that_dd_ to run on as much platforms as possible_co_ mobile included. We_t_re also spending a lot of time optimizing the performance for the web browsers and we_t_re taking into account some of its specifics_dd_ offline via IDB_co_ support for multi-touches (Touch &amp_sm_ Pointer Events)_co_ streaming of assets_co_ GC friendly_co_ etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe have plenty of tools to help you testing the behavior of our engine and your code in the targeted env_co_ the web_dd_ the sandbox tool_co_ the debug layer_co_ emitting user marks for F12 tools. We even have something we’re very proud of_co_ our playground_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/_qt_ rel_eq__qt_external nofollow_qt__gt__lt_u_gt__lt_font color_eq__qt_#0066cc_qt__gt_http_dd_//www.babylonjs-playground.com/_lt_/font_gt__lt_/u_gt__lt_/a_gt_. Test &amp_sm_ debug your code directly in the browser. Learn by experimenting in the target platform.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMoreover_co_ babylon.js is free &amp_sm_ open-source. You can debug your game and our engine directly in the browser. You can tune our engine to your needs if wanted as you have access to the source code_co_ fork it and do whatever you want with it. You’ll also write the logic of your code in pure JS (or any great compiler like TypeScript or CofeeScript).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBabylon.js offers then a pure web experience. You can customize everything you want_co_ handle the UI yourself with the ton of existing libraries_co_ add some cool CSS features on top of it_co_ mix it with SVG. Well_co_ it is the web. Last but not least_co_ we have almost finished our Unity exporter to Babylon.js that will dump all the graphics &amp_sm_ sounds assets from the Unity scene to our .babylon format. It even seems much more efficient that the Unity 5 export.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ you see that this is a completely different philosophy. On the other hand_co_ Unity 5 benefits from a huge community &amp_sm_ assets. But creating a simple scene with a couple of meshes could take several minutes to export to WebGL and create up to 100MB of JS! And it_t_s a very specific JS based on asm.js that can_t_t be read by human nor modified. Plus it will only run correctly on Firefox (soon on Spartan too). At last_co_ you will have to write the logic of your game in C#. But it’s a real great option for games developers that don’t master the beauty of the web. Unity is doing everything for them.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tConclusion_dd_ Unity 5 targets people with games already built for mobiles and will offer a very specific WebGL option. It_t_s closed source. Babylon.js targets web games developers that build games specifically for this platform. It_t_s free &amp_sm_ open-source._qt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMoreover_co_ I_t_d add that the WebGL export is currently based on asm.js which is only fully supported by Firefox and MS Edge. This means that targetting mobile is a no-go. In the future_co_ they should use WebAssembly. WebAssembly can potentially used by Babylon.js in the future by adding some annotation to TypeScript for instance.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTalking about WebGL 2.0_co_ yes this is in our roadmap for Babylon.js in a futur major release. But WebGL 2.0 support will be limited. Again_co_ the main point of web technology is to target the most important number of platforms/users.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDavid\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"gryff","Date":"2016-01-21T16:59:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tA nice synopsis David.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tcheers_co_ gryff _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-01-21T17:04:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_113537_qt_ data-ipsquote-contentid_eq__qt_19999_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1453306828_qt_ data-ipsquote-userid_eq__qt_5292_qt_ data-ipsquote-username_eq__qt_Dad72_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 1/20/2016 at 11_dd_20 AM_co_ Dad72 said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tWebGL 2.0 is already out since early January 2016 (If I understand well)\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_https_dd_//www.khronos.org/registry/webgl/specs/latest/2.0/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.khronos.org/registry/webgl/specs/latest/2.0/_lt_/a_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tBabylon val be wear for WebGL 2.0?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5292-dad72/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5292_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5292-dad72/_qt__gt_@Dad72_lt_/a_gt__co_ The spec you reference is not final.  It is a working draft (see blue strip on left side).  There are not many editor_t_s _qt_to do_qt_ notes_co_ so maybe the February print could be when they are finished.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]