[{"Owner":"Abyss","Date":"2016-08-23T10:17:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_ babylon js developers! Please help me _dd_).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI want to detect particle collision with camera elipsoid_co_ and when particle will collide - destroy this particle.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCan i make this in particle system update function or how? Babylon js can make this for me?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Abyss","Date":"2016-08-23T12:29:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIf somebody interested_co_ i found one method. In particle system update function i create BABYLON.path3D() between particle position and camera position_co_ now i can calculate distance between this points_co_ and if distance lower then need_co_ just remove this particle.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis method not bad_co_ but in my case_co_ i have to many particles_co_ and performance are very bad. Maybe i should optimize particles_co_ will keep trying.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-08-25T16:08:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tPinging our physic engine god _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/10310-raananw/?do_eq_hovercard_qt_ data-mentionid_eq__qt_10310_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/10310-raananw/_qt_ rel_eq__qt__qt__gt_@RaananW_lt_/a_gt_ _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-08-25T19:03:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tcreating a Path3D object for each particle test is a little overkill _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tThe fastest way would be_co_ imho_co_ to compute in turn the (squared) distance from each particle to the cam ant to compare it to the wanted (squared) distance.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.4/Vector3#lengthsquared-rarr-number_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.4/Vector3#lengthsquared-rarr-number_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tsomething like _dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var limit _eq_ 10_sm_ // your value\nvar squLimit _eq_ limit * limit_sm_\nvar squDist _eq_ 0_sm_ // current squared distance\nvar vector _eq_ BABYLON.Vector3.Zero()_sm_ // current particle-cam vector\n\n// loop for each particle\n...\nparticle.position.subtractToRef(camera.position_co_ vector)_sm_ \nsquDist _eq_ vector.lenghtSquared()_sm_\n\nif (squDist &lt_sm_ squLimit) {\n  // recylce your particle\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]