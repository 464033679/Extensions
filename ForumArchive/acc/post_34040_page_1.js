[{"Owner":"tomer","Date":"2017-11-16T12:37:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello guys_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m new to Babylon.js and I_t_m wondering what will be the best practice for sharing instances between different scopes?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t 1. by name (let_t_s say that I_t_m sharing the scene instance somehow)_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_const mesh _eq_ scene.getMeshByName(_t_someMesh_t_)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t2. by instance_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_class MainCamera {\n  private static camera_dd_ BABYLON.ArcRotateCamera_sm_\n\n  static init(scene_dd_ BABYLON.Scene) {\n    if (typeof MainCamera.camera _eq__eq__eq_ _t_undefined_t_) {\n      MainCamera.camera _eq_ new BABYLON.ArcRotateCamera(null_co_ 0_co_ 0_co_ 10_co_ BABYLON.Vector3.Zero()_co_ scene)_sm_\n// ...\n    }\n  }\n\n  static get _eq_ ()_dd_ BABYLON.Camera _eq_&gt_sm_ MainCamera.camera_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tin a different scope_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import { MainCamera } from _t_../scene/mainCamera_t__sm_\n\nconst camera _eq_ MainCamera.get()_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe second approach seems much more OO to me_co_ what do you guys think?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTomer.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2017-11-16T12:47:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Tomer_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am not sure a class with only static members make sense. The singleton pattern makes sense when you really need a single instance_co_ but you need an instance per scene. Not only there_co_ when you init the camera again_co_ the old instance is simply gone...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUse babylon_t_s native functions (like you suggested)_co_ set IDs to each object (or use .uniqueId)_co_ and I think it_t_ll be better.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut this is really up to you_co_ and the way you see your application.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]