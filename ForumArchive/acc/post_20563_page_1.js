[{"Owner":"Pryme8","Date":"2016-02-17T03:35:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI am currently manipulating a series of ground objects.  I am able to manipulate the ground with different noise effects and calculations to get the effects I am desiring on a single ground plane.  The problem when I am doing it with the series of them they are all effectively getting the same manipulation applied. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am generating the ground objects in a block so they are all one right after another and look like a single plane_co_ so they all have an offset in the global space.  How then can I convert the point from its local assignment in the script_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_TERIABLE.UpdatePositions _eq_ function (positions) {\t\t\t\n    for (var idx _eq_ 0_sm_ idx &lt_sm_ positions.length_sm_ idx +_eq_ 3) {\n        positions[idx+1] _eq_ positions[idx]*positions[idx+2]_sm_\n    }\n}_sm_\n\n\n//Section where it is called_dd_\n\nthis._block.updateMeshPositions(TERIABLE.UpdatePositions)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tto a global position.  I might be able to do it by adding the grounds.position.x and y to the idx values? but I have not tried that yet and I am not even sure how to pass the ground object with the positions on the updateMeshPositions call\n_lt_/p_gt_\n\n_lt_p_gt_\n\ti see no optional variable offset in _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.3/Mesh_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.3/Mesh_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-17T08:19:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWell_co_ you_t_ve got two solutions as_co_ like you justly said_co_ the function _lt_em_gt_updateMeshPosition()_lt_/em_gt_ only knows the parameter _lt_em_gt_positions_lt_/em_gt_ _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1 - the code of this function is quite light _dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThus you might re-implement your own function from this pattern and then add your parameter _lt_em_gt_offset._lt_/em_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2 - else_co_ you could also just do with the javascript capabilities _dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var currentOffset _eq_ 0_sm_       // this variable value will be enclosed in the function\nTERIABLE.UpdatePositions _eq_ function (positions) {\t\t\t\n    for (var idx _eq_ 0_sm_ idx &lt_sm_ positions.length_sm_ idx +_eq_ 3) {\n        positions[idx+1] _eq_ positions[idx]*positions[idx+2] + currentOffset_sm_ // use it anywhere in the function\n    }\n}_sm_\n\n\n//Section where it is called_dd_\ncurrentOffset _eq_ this._block.offset_sm_  // set the offset value to the current block one_t_s\nthis._block.updateMeshPositions(TERIABLE.UpdatePositions)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThis should work easily\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-02-17T19:21:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI solved it with using VertexData_co_ now I have a new problem that maybe you can help me with._lt_br_gt__lt_br_gt_\n\tHere is the new Update position function_co_ I did away with original one and did my own so I could pass the information I wanted.  Using this function with updateVerticesData gives me the ability to manipulate the position of the mesh the way I want_co_ the problem now is as this operation is called a second time with different parameters it seems to only reference the blocks original state vertex data not the new positions._lt_br_gt__lt_br_gt_\n\tThis could be because I am storing the block in an Object TERIABLE.Region _eq_ []_co_ where the block in the update function is a reference to the TERIABLE.Region[count] of the calling function.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI figured information in TERIABLE.Region[count] were direct references seeing how I can use them to manipulate the object I want... but it seems like if more then one VertexData is applied in a stacked order ie the first one is processed and applied before the second is added to the stack.  Its not ASNYC i have it procedural for the calling of these functions.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_TERIABLE.UpdatePositions _eq_ function (block_co_ state_co_ activeItem) {\n    //PERLIN 2D\n    if(state _eq__eq__qt_Perlin2D_qt_){console.log(_qt_Perlin2D applyed_qt_)_sm_\n        var xDiv _eq_ $(activeItem).children(_qt_#perlin-2d-x-divider_qt_).val()_sm_\n        var yDiv _eq_ $(activeItem).children(_qt_#perlin-2d-y-divider_qt_).val()_sm_\n        var height _eq_ $(activeItem).children(_qt_#perlin-2d-height_qt_).val()_sm_\n\tvar seed _eq_ $(activeItem).children(_qt_#perlin-2d-seed_qt_).val()_sm_\n\t\t\t\t\n\tnoise.seed(seed)_sm_\n\t\t\t\t\t\t\t\n\tvar vertexData _eq_ block.getVerticesData(BABYLON.VertexBuffer.PositionKind)_sm_\n\t\t\t\t\n\tfor (var i _eq_ 0_sm_ i &lt_sm_ vertexData.length_sm_ i +_eq_ 3) {\n\t\tvar x _eq_ vertexData_lt_em_gt_+block.position.x_co_ z _eq_ vertexData[i+2]+block.position.z_sm_\n\t\tvertexData[i+1] _eq_ (noise.perlin2(x/xDiv_co_ z/yDiv)*height)_sm_\n\t}\n\t\t\t\t\t\n\tblock.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ vertexData_co_ 0_co_ 0)_sm_\n\t\t\t}\n\t\t\t\n     if(state _eq__eq_ _qt_Clamp_qt_){console.log(_qt_Clamp applyed_qt_)_sm_\n\tvar clampUp _eq_ $(activeItem).children(_qt_#clamp-upper_qt_).val()_sm_\n\tvar clampLow _eq_ $(activeItem).children(_qt_#clamp-lower_qt_).val()_sm_\n\t\t\t\t\n\tvar vertexData _eq_ block.getVerticesData(BABYLON.VertexBuffer.PositionKind)_sm_\n\t\t\t\t\n\tfor (var i _eq_ 0_sm_ i &lt_sm_ vertexData.length_sm_ i +_eq_ 3) {\n\t    var y _eq_ vertexData[i+1]_sm_\n\t    if(y&gt_sm_clampUp){\n\t\tvertexData[i+1] _eq_ clampUp_sm_\n            }\n\t    if(y&lt_sm_clampLow){\n\t\tvertexData[i+1] _eq_ clampLow_sm_\n\t    }\n\t\t\t\t\t}\n\tblock.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ vertexData_co_ 0_co_ 0)_sm_\n\t}\n\t\t\t\n}_sm__lt_/em_gt__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_em_gt_The Second part of this question would be how now_co_ can I update the normal data_co_  I know the normal_t_s will change because of the shift in positions of the vertices and it would not be as simple as apply the same Noise to the values (or would it)  because they do not represent a XYZ but rather a Angular Vector...  is there some sort of built in function to call an update to the Normal Data dependent on the positions of the vertices?_lt_/em_gt__lt_br_gt__lt_br_gt__lt_em_gt_I attached screenshots so you can kinda get and Idea of whats going on_co_ this is with only one noise applied and different values blah blah... anyways the _qt_blocks_qt_ are colored random for visibility right now as I develop.  The Blocks compose a region_co_ a region is a basic styling of a land mass...  Eventually your going to be able to design your procedural generated landscapes in TERIABLE and then export them as called objects that will have LOD and infinate expansion._lt_/em_gt__lt_br_gt__lt_em_gt_The next step is to make it so that when you apply Noise layers to make it an absolute reference or a additive/subtractive one.  Then add masks and procedural texturing support.  Lucky I have already developed a html5 canvas paint program that is pretty robust so I will implement that in as well to allow live painting of reference textures and direct manipulation layers that you can assign to different blocks or areas of regions._lt_/em_gt__lt_br_gt__lt_br_gt__lt_em_gt_Anyways thats why I have all these questions_co_  If you could help me figure out the normals thing and the stacking of the Vertex Data manipulations Ill totally stick you in the credits. _lt_/em_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/TERIABLE_ALPHA_2_SS1.jpg.543b42a644b365e0a69f4a9684847f82.jpg_qt__gt__lt_img alt_eq__qt_TERIABLE_ALPHA_2_SS1.jpg_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_6407_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/TERIABLE_ALPHA_2_SS1.thumb.jpg.51fa52837fdb92f6009c52f1ee15236f.jpg_qt__gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/TERIABLE_ALPHA_2_SS2.jpg.44a0824bcba173eb17673259f93a6920.jpg_qt__gt__lt_img alt_eq__qt_TERIABLE_ALPHA_2_SS2.jpg_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_6408_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/TERIABLE_ALPHA_2_SS2.thumb.jpg.c9e7cef170c572d65a8b15636e4287d6.jpg_qt__gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/TERIABLE_ALPHA_2_SS3.jpg.56e3cd357f4a968baa7ef4a58185d86b.jpg_qt__gt__lt_img alt_eq__qt_TERIABLE_ALPHA_2_SS3.jpg_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_6409_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/TERIABLE_ALPHA_2_SS3.thumb.jpg.b6167b3d0c9fd658d71a5a057fab1304.jpg_qt__gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/TERIABLE_ALPHA_2_SS4.jpg.c5f092961a913f48e6a157069f024539.jpg_qt__gt__lt_img alt_eq__qt_TERIABLE_ALPHA_2_SS4.jpg_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_6410_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/TERIABLE_ALPHA_2_SS4.thumb.jpg.2f1304a5fdea3a25f72a1ce6b420a1ba.jpg_qt__gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUPDATE***\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI figured out the clamping I had a logic error... dumb dumb... I bet its the same reason the new noise layers dont seem to apply to the updated mesh_co_ ill do more research and then update!_lt_br_gt__lt_br_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_if(state _eq__eq_ _qt_Clamp_qt_){\n\tconsole.log(_qt_Clamp applyed_qt_)_sm_\n\tvar clampUp _eq_ $(activeItem).children(_qt_#clamp-upper_qt_).val()_sm_\n\tvar clampLow _eq_ $(activeItem).children(_qt_#clamp-lower_qt_).val()_sm_\n\tvar vertexData _eq_ block.getVerticesData(BABYLON.VertexBuffer.PositionKind)_sm_\n\t\n        for (var i _eq_ 0_sm_ i &lt_sm_ vertexData.length_sm_ i +_eq_ 3) {\n\t        var y _eq_ vertexData[i+1]+block.position.y_sm_\n\t\tif( y &gt_sm_ clampUp || y &lt_sm_ clampLow){\n\t\t\tif(y &gt_sm_ clampUp){y _eq_ clampUp}\n\t\t\t\tif(y &lt_sm_ clampLow){y _eq_ clampLow}\n\t\t\t\t\tvertexData[i+1] _eq_ y_sm_\n\t\t\t\t}\n\t\t\t}\n\t\tblock.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ vertexData_co_ 0_co_ 0)_sm_\n\t\treturn_sm_\n                }\n         }\n\n}_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t*** UPDATE 2_lt_br_gt__lt_br_gt_\n\tFixed it all.. I_t_m a dumbbell...  I was setting the values on the Perlin2d as absolute... and my min max still was flawed I should have seen that I dont know why I did it with if statements in the first place..._lt_br_gt__lt_br_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_TERIABLE.UpdatePositions _eq_ function (block_co_ state_co_ activeItem_co_ count) {\n\t\t\tconsole.log(block.name)_sm_\n\t\t\t//PERLIN 2D\n\t\t\tif(state _eq__eq__qt_Perlin2D_qt_){\n\t\t\t\tconsole.log(_qt_Perlin2D applyed_qt_)_sm_\n\t\t\t\t\n\t\t\t\tvar xDiv _eq_ $(activeItem).children(_qt_#perlin-2d-x-divider_qt_).val()_sm_\n\t\t\t\tvar yDiv _eq_ $(activeItem).children(_qt_#perlin-2d-y-divider_qt_).val()_sm_\n\t\t\t\tvar height _eq_ $(activeItem).children(_qt_#perlin-2d-height_qt_).val()_sm_\n\t\t\t\tvar seed _eq_ $(activeItem).children(_qt_#perlin-2d-seed_qt_).val()_sm_\n\t\t\t\tvar mode _eq_ $(activeItem).children(_qt_#perlin-2d-mode_qt_).val()_sm_\n\t\t\t\t\n\t\t\t\tnoise.seed(seed)_sm_\n\t\t\t\t\t\t\t\n\t\t\t\tvar vertexData _eq_ block.getVerticesData(BABYLON.VertexBuffer.PositionKind)_sm_\n\t\t\t\t\n\t\t\t\t\tfor (var i _eq_ 0_sm_ i &lt_sm_ vertexData.length_sm_ i +_eq_ 3) {\n\t\t\t\t\t\tvar x _eq_ vertexData_lt_em_gt_+block.position.x_co_ y _eq_ vertexData[i+1]+block.position.y _co_z _eq_ vertexData[i+2]+block.position.z_sm_\n\t\t\t\t\t\tvertexData[i+1] _eq_ (noise.perlin2(x/xDiv_co_ z/yDiv)*height)_sm_\n\t\t\t\t\t\tswitch (mode){\n\t\t\t\t\t\t\tcase _qt_Additive_qt__dd_\n\t\t\t\t\t\t\t\tvertexData[i+1] +_eq_ y_sm_\n\t\t\t\t\t\t\t\tbreak_sm_\n\t\t\t\t\t\t\tcase _qt_Subtractive_qt__dd_\n\t\t\t\t\t\t\t\tvertexData[i+1] -_eq_ y_sm_\n\t\t\t\t\t\t\t\tbreak_sm_\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tblock.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ vertexData_co_ 0_co_ 0)_sm_\n\t\t\t\treturn_sm_\n\t\t\t}\n\t\t\t\n\t\t\tif(state _eq__eq_ _qt_Clamp_qt_){\n\t\t\t\tconsole.log(_qt_Clamp applyed_qt_)_sm_\n\t\t\t\tvar clampUp _eq_ $(activeItem).children(_qt_#clamp-upper_qt_).val()_sm_\n\t\t\t\tvar clampLow _eq_ $(activeItem).children(_qt_#clamp-lower_qt_).val()_sm_\n\t\t\t\t\n\t\t\t\tvar vertexData _eq_ block.getVerticesData(BABYLON.VertexBuffer.PositionKind)_sm_\n\t\t\t\t\n\t\t\t\tfor (var i _eq_ 0_sm_ i &lt_sm_ vertexData.length_sm_ i +_eq_ 3) {\n\t\t\t\t\t\tvar y _eq_ vertexData[i+1]_sm_\n\t\t\t\t\t\tvertexData[i+1] _eq_ Math.min(Math.max(y_co_ clampLow)_co_ clampUp)_sm_\n\t\t\t\t\t}\n\t\t\t\tblock.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ vertexData_co_ 0_co_ 0)_sm_\n\t\t\t\treturn_sm_\n\t\t\t}\n\t\t\t\n\t\t}_sm__lt_/em_gt__lt_/code_gt__lt_/pre_gt__lt_em_gt_\n\n_lt_/em_gt__lt_p_gt__lt_em_gt_\n\t \n_lt_/em_gt__lt_/p_gt_\n\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/TERIABLE_ALPHA_2_SS5.jpg.0eef868cdc6bf43515160f688ba2c896.jpg_qt_ class_eq__qt_ipsAttachLink ipsAttachLink_image_qt__gt__lt_img data-fileid_eq__qt_6412_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_02/TERIABLE_ALPHA_2_SS5.thumb.jpg.1d3f2e9febe0d86996181361bd703c08.jpg_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_TERIABLE_ALPHA_2_SS5.jpg_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2016-02-17T23_dd_10_dd_09Z_t_ title_eq__t_02/17/2016 11_dd_10  PM_t_ data-short_eq__t_2 yr_t__gt_February 17_co_ 2016_lt_/time_gt_ by Pryme8_lt_/strong_gt_\n\t\n\t\t_lt_br_gt_Update Agian\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]