[{"Owner":"neoRiley","Date":"2014-02-02T01:42:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_In reading the tutorial _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/wiki/How-to-handle-rotations-and-translations_qt_ rel_eq__qt_external nofollow_qt__gt_here_lt_/a_gt_ it says that mesh.rotate is based on eulers and is local BUT_co_ if rotationQuaternion is set/in use_co_ then rotation is not used at all in favor of rotationQuaternion.  So_co_ an example of how to rotate in world space was given_co_ but nothing was said about how to rotate in local space if rotationQuaternion is in use._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I can confirm that mesh.rotate does nothing if rotationQuaternion is in use._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m not a quaternion expert_co_ but my guess was that rotationQuaternion was local by default_co_ and that if I did something like this_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_this.rotationQuaternion _eq_ this.rotationQuaternion.add(BABYLON.Quaternion.RotationYawPitchRoll(tempV3.y_co_ tempV3.x_co_ tempV3.z))_sm__lt_/pre_gt__lt_p_gt_it should work_co_ but I get the craziest results.  So that_t_s bad apparently.  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Can someone shed some light on how to add to the rotation in local space when having to use rotationQuaternion?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_PS&gt_sm_ I would like to suggest keeping both euler and quaternions updated for ease of use in the future.  And even updating the API to be more like_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_rotation _eq_ world rotation in radians_lt_/p_gt__lt_p_gt_localRotation _eq_ local rotation in radians_lt_/p_gt__lt_p_gt_eulers _eq_ world rotation in degrees_lt_/p_gt__lt_p_gt_localEulers _eq_ local rotation in degrees_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This way_co_ developers can do whatever they want however they want._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks for the help_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_John_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-02-02T16:06:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__lt_span style_eq__qt_color_dd_#1f497d_sm__qt__gt__lt_span style_eq__qt_font-family_dd_calibri_co_ sans-serif_sm__qt__gt__lt_span style_eq__qt_font-size_dd_11pt_sm__qt__gt_About the rotation using euler or using quaternion_co_ I choose to prefer quaternion is rotationQuaternion is defined instead of rotation for performance reasons. I do not want to update my euler angles when quaternion are in use because it implies a test and a complex operation for every object in the scene on every frame_lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_#1f497d_sm__qt__gt__lt_span style_eq__qt_font-family_dd_calibri_co_ sans-serif_sm__qt__gt__lt_span style_eq__qt_font-size_dd_11pt_sm__qt__gt_I try to keep Babylon.js as simple as possible and frankly the rotation part is not my favourite _lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_span style_eq__qt_color_dd_#1f497d_sm__qt__gt__lt_span style_eq__qt_font-family_dd_wingdings_sm__qt__gt__lt_span style_eq__qt_font-size_dd_11pt_sm__qt__gt_J_lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]