[{"Owner":"styxxx","Date":"2015-11-25T00:51:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I noticed the following issue_dd__lt_br_gt__lt_br_gt_When creating some objects I can set the renderingGroupId which works fine. Now if I create an Instance of this mesh like_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var test _eq_ someMesh.createInstance (_qt_testinstance_qt_)_sm__lt_/pre_gt__lt_p_gt_The created Instance also has the same renderingGroupId as the _qt_original_qt_ one. Buuuut it_t_s ignored._lt_br_gt_Not just for the new Instance_co_ but for the original mesh and all other instances ever created. _lt_br_gt__lt_br_gt_So for example this code_dd__lt_/p_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_BABYLON.SceneLoader.ImportMesh(_qt__qt__co_ _qt_objects/_qt__co_ _qt_someobject.babylon_qt__co_ scene_co_ function (newmeshes) {    var as _eq_ newmeshes[0]_sm_   as.renderingGroupId _eq_ 2_sm_    var tmps _eq_ new Array()_sm_   for (var x _eq_ 1_sm_ x &lt_sm_ 6_sm_ x++) {      tmps[x] _eq_ as.createInstance (_qt_asInstance__qt_+x)_sm_      tmps[x].renderingGroupId _eq_ 1_sm_   }    var testas _eq_ as.createInstance (_qt_testinstance_qt_)_sm_ }})_sm__lt_/pre_gt__lt_/div_gt__lt_p_gt_You might expect _qt_as_qt_ to be rendered with the renderingGroupId of 2_co_ all of the meshes in _qt_temps_qt_ with the renderingGroupId of 1 and testas with 2 (because as.renderingGroupId is 2) or 0 because it hasn_t_t been declared._lt_br_gt_In fact if you check the values they_t_re_dd__lt_br_gt_for as _eq_ 2_co_ for temps[...] _eq_ 1 and for testas _eq_ 0_sm__lt_br_gt_But all the meshes are rendered like having the GroupId 0._lt_br_gt__lt_br_gt_Now if you change the value of the latest instance created (in this example testas)_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_testas.renderingGroupId _eq_ 2_sm__lt_/pre_gt__lt_p_gt_all the other meshes are rendered with its GroupId although their values stay unchanged. This includes the original mesh _qt_as_qt_. If you change the value of any other instance or the _qt_original mesh_qt_ the rendering is not affected. _lt_/p_gt__lt_p_gt_This is totally different than with for example _qt_renderOverlay_qt_ where changing the value of the original object changes the rendering for all the instances. But changing the latest instance wouldn_t_t affect the original one (actually it doesn_t_t have any effect at all). Also creating new Instances wouldn_t_t affect the rendering of all the other meshes._lt_br_gt__lt_br_gt__lt_br_gt_You can test it with the babylon playground where saving is currently disabled. So here_t_s some code you can copy&amp_sm_paste_dd__lt_br_gt_ _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var createScene _eq_ function () {    // This creates a basic Babylon Scene object (non-mesh)    var scene _eq_ new BABYLON.Scene(engine)_sm_    // This creates and positions a free camera (non-mesh)    var camera _eq_ new BABYLON.FreeCamera(_qt_camera1_qt__co_ new BABYLON.Vector3(0_co_ 5_co_ -10)_co_ scene)_sm_    // This targets the camera to scene origin    camera.setTarget(BABYLON.Vector3.Zero())_sm_    // This attaches the camera to the canvas    camera.attachControl(canvas_co_ true)_sm_    // This creates a light_co_ aiming 0_co_1_co_0 - to the sky (non-mesh)    var light _eq_ new BABYLON.HemisphericLight(_qt_light1_qt__co_ new BABYLON.Vector3(0_co_ 1_co_ 0)_co_ scene)_sm_    light.intensity _eq_ 0.7_sm_       var sphere _eq_ BABYLON.Mesh.CreateSphere(_qt_sphere1_qt__co_ 16_co_ 2_co_ scene)_sm_    sphere.position.y _eq_ 1_sm_ // middle\t\t// set rendering Group\tsphere.renderingGroupId _eq_ 2_sm_\t\tvar sphere2 _eq_ sphere.createInstance(_qt_SphereInstance_1_qt_)_sm_\tsphere2.position.x _eq_ 2_sm_ // right\tsphere2.position.y _eq_ 1_sm_\t// renderingGroupId is now treated as 0\tsphere2.renderingGroupId _eq_ 2_sm_\t// still treated as 0 since another sphere is created below\t\tvar sphere3 _eq_ sphere.createInstance(_qt_SphereInstance_2_qt_)_sm_\tsphere3.position.x _eq_ -2_sm_ // left\tsphere3.position.y _eq_ 1_sm_\t// still every sphere is rendered as groupId 0\t\t// After the following statement all meshes are  rendered as groupId 3 \t//sphere3.renderingGroupId _eq_ 3_sm_\t        // But this will have no effect         sphere.renderingGroupId _eq_ 3_sm_    // no effect at all     //edit_dd_ But this will _co_ which is even more strange_dd_     //sphere3.renderingGroupId _eq_ 3_sm_   // all spheres are rendered as 3    //sphere.renderingGroupId _eq_ 0_sm_     // now all of them are rendered as 0_co_ although setting it to 3 above was ignored - also works with any other value as long as it is lesser than the one given to sphere 3.     // Our built-in _t_ground_t_ shape. Params_dd_ name_co_ width_co_ depth_co_ subdivs_co_ scene    var ground _eq_ BABYLON.Mesh.CreateGround(_qt_ground1_qt__co_ 6_co_ 6_co_ 2_co_ scene)_sm_\tground.renderingGroupId _eq_ 1_sm_    return scene_sm_}_sm__lt_/pre_gt__lt_p_gt_edit_dd_ I noticed something even stranger in the example I created above_dd_ setting the groupId to a lesser value works with the original mesh. But nothing else. This doesn_t_t make any sense _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2015-11-25T01_dd_03_dd_09Z_t_ title_eq__t_11/25/2015 01_dd_03  AM_t_ data-short_eq__t_3 yr_t__gt_November 25_co_ 2015_lt_/time_gt_ by styxxx_lt_/strong_gt_\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-11-25T14:25:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Does the problem occur in every browsers or only one particular ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-11-25T14:31:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The Instances takes into account the basic properties of objects_co_ it can not be changed individually. Trying to create a clone instead._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-11-25T17:30:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Dad72 is right_co_ instances are rendered in just one draw call. They cannot have different rendergroupId_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"styxxx","Date":"2015-11-25T22:27:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I understand that. But it_t_s about how the render group is mangled _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ The render group is changed when an Instance is created (although the variable stays the same_co_ it behaves as if had changed). Also setting the render group is very weird as you can see in the example code. _lt_br_gt__lt_br_gt_Example 1_dd__lt_br_gt_1. Create mesh _qt_original_qt_ and set renderGroupId_eq_1_lt_br_gt_2. Create Instance _qt_instance1_qt_ of former mesh_lt_br_gt_-&gt_sm_ original.renderGroupId and instance1.renderGroupId are ignored and both are rendered as if they had renderGroupId_eq_0_sm_ _lt_br_gt__lt_br_gt_Example 2_dd__lt_br_gt_1. Create mesh _qt_original_qt_ and set renderGroupId_eq_1_lt_br_gt_2. Create Instance _qt_instance1_qt_ of former mesh_lt_/p_gt__lt_p_gt_3. Create Instance _qt_instance2_qt_ of former mesh_co_ set instance2.renderGroupId_eq_2_lt_br_gt_-&gt_sm_ original.renderGroupId_co_ instance2.renderGroupId and instance1.renderGroupId are ignored and both are rendered as if they had renderGroupId_eq_2_sm_ _lt_br_gt__lt_br_gt_Example 3_dd__lt_/p_gt__lt_p_gt_1. Create mesh _qt_original_qt_ and set renderGroupId_eq_1_lt_br_gt_2. Create Instance _qt_instance1_qt_ of former mesh_lt_/p_gt__lt_p_gt_3. Set original.renderGroupId_eq_2_lt_br_gt_-&gt_sm_ original.renderGroupId_co_ instance2.renderGroupId and instance1.renderGroupId are ignored and both are rendered as if they had renderGroupId_eq_0_sm_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Example 4_dd__lt_/p_gt__lt_p_gt_1. Create mesh _qt_original_qt_ and set renderGroupId_eq_1_lt_br_gt_2. Create Instance _qt_instance1_qt_ of former mesh_lt_/p_gt__lt_p_gt_3. Create Instance _qt_instance2_qt_ of former mesh_lt_/p_gt__lt_p_gt_4. set instance1.renderGroupId_eq_2_lt_br_gt_-&gt_sm_ original.renderGroupId_co_ instance2.renderGroupId and instance1.renderGroupId are ignored and both are rendered as if they had renderGroupId_eq_0_sm_ _lt_br_gt_ _lt_/p_gt__lt_p_gt_Example 5_dd__lt_/p_gt__lt_p_gt_1. Create mesh _qt_original_qt_ and set renderGroupId_eq_1_lt_br_gt_2. Create Instance _qt_instance1_qt_ of former mesh_lt_/p_gt__lt_p_gt_3. Create Instance _qt_instance2_qt_ of former mesh_lt_/p_gt__lt_p_gt_4. set instance2.renderGroupId_eq_2_lt_/p_gt__lt_p_gt_5. set original.renderGroupId_eq_3_lt_br_gt_-&gt_sm_ original.renderGroupId_co_ instance2.renderGroupId and instance1.renderGroupId are ignored and both are rendered as if they had renderGroupId_eq_2_sm_ _lt_br_gt__lt_br_gt_Example 6_dd__lt_/p_gt__lt_p_gt_1. Create mesh _qt_original_qt_ and set renderGroupId_eq_1_lt_br_gt_2. Create Instance _qt_instance1_qt_ of former mesh_lt_/p_gt__lt_p_gt_3. Create Instance _qt_instance2_qt_ of former mesh_lt_/p_gt__lt_p_gt_4. set instance1.renderGroupId_eq_2_lt_/p_gt__lt_p_gt_5. set original.renderGroupId_eq_0_lt_br_gt_-&gt_sm_ original.renderGroupId_co_ instance2.renderGroupId and instance1.renderGroupId are ignored and both are rendered as if they had renderGroupId_eq_0_sm_ _lt_br_gt__lt_br_gt__lt_br_gt_It_t_s maybe hard to follow what_t_s happening_co_ in short_dd__lt_br_gt_- Creating clones resets the renderGroupId for all instances to 0 (at least it_t_s rendered as if this was the case although the varibale stays unchanged). _lt_br_gt_- Only setting the renderGroupId of the last created instance to a higher value has any effect (sets the renderGroupId for all instances)_lt_/p_gt__lt_p_gt_- Only setting the renderGroupId of the original mesh to a lower(!) value has any effect (sets the renderGroupId for all instances)_co_ you cannot set a higher value_lt_br_gt_- The actual variable shows a wrong value which does not reflect the rendering_lt_br_gt__lt_br_gt_I_t_m using chrome at the moment. _lt_/p_gt__lt_p_gt_edit_dd_ the same with firefox _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-11-25T22:43:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Maybe it would be easier if you reproduce your example directly on the playground please._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"styxxx","Date":"2015-11-25T23:07:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I wasn_t_t able to save it to the playground yesterday (an error message about some maintenance mode) but now it seems to work_dd__lt_br_gt__lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#CSUQV_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#CSUQV_lt_/a_gt__lt_br_gt__lt_br_gt_All spheres are rendered as if they had renderingGroupId_eq_0. You can play by with the code I commented out to reproduce the effects I was talking about._lt_/p_gt__lt_p_gt__lt_img src_eq__qt_http_dd_//styxxx.de/temp/babylon/rendergroupid.png_qt_ alt_eq__qt_rendergroupid.png_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-11-26T00:28:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Your link to your scene is not good. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"styxxx","Date":"2015-11-26T03:28:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Strange. I made another one and fixed the link _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-11-26T13:01:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_co_ I simplify your demo_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#CSUQV%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#CSUQV#1_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_When you change an instance_co_ all instances and the base object takes into account the change. this is normal behavior. Instances are not clones_co_ but references to the basic model that shares the same properties_co_ if one is to change the base object or an instance_co_ all take into account this change._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"styxxx","Date":"2015-11-27T04:03:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes_co_ that_t_s how it should be. But it doesn_t_t behave this way_co_ at least not always. _lt_br_gt_I made a few more examples._lt_br_gt__lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#JY2T5%2311_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#JY2T5#11_lt_/a_gt__lt_br_gt_Here I created a sphere_co_ set the renderGroupId and then created some intances without touching the renderingGroupId. As you can see all the instances and the base sphere are now rendered behind the ground. This means that creating an instance resets the internal renderGroupId. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#JY2T5%2312_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#JY2T5#12_lt_/a_gt__lt_br_gt_Here I did the same. Except this time I changed the renderingGroupId of one of the instances after they were created with no effect. _lt_br_gt__lt_br_gt__lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#JY2T5%2313_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#JY2T5#13_lt_/a_gt__lt_/p_gt__lt_p_gt_As before but this time I changed the rengerGroupId of the base sphere. Again no effect._lt_br_gt__lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#JY2T5%2314_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#JY2T5#14_lt_/a_gt__lt_br_gt_Now I set the renderingGroupId in the loop for every instance. This time it works and all spheres have renderingGroupId_eq_1_co_ including the base sphere (I made a second ground to make it visible). _lt_/p_gt__lt_p_gt_But if I don_t_t set it for every new instance it doesn_t_t work at all_dd__lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#JY2T5%2315_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#JY2T5#15_lt_/a_gt__lt_br_gt_In this example I skipped sphere 3. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Under other circumstances I noticed that only changing the last instance_t_s renderingGroupId has any effect. Couldn_t_t repdoduce it this time. Sometimes changing the base object_t_s renderingGroupId worked as long as the new value was lower than before. Now it seems that I have to change all instances to the same value_co_ different values has the same effect as setting them to 0_dd__lt_br_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#JY2T5%2316_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#JY2T5#16_lt_/a_gt__lt_br_gt_(this is exactly the same but I added console logging of the value_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#JY2T5%2317_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#JY2T5#17_lt_/a_gt_)_lt_br_gt__lt_br_gt__lt_br_gt_This doesn_t_t seem straight. If the value can_t_t be changed for single intances something like _qt_instance.renderingGroupId_eq_2_qt_ shouldn_t_t change the variable. Maybe throw an error in the console? Creating new instances shouldn_t_t reset the value for the base element. It isn_t_t the case for other attributes. New instances should inherit the _qt_parents_qt_ attributes (but this isn_t_t the case for all_co_ for example isPickable is also true regardless of the base element_t_s value). Changing the base elements renderingGroupId should maybe influence the one of the instances as well. This is the case for _qt_renderOverlay_qt_ where changing the base elements value changes the one for all instances_co_ but changing the value of the instances alone has no effect._lt_br_gt__lt_br_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-11-28T00:49:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This is a bug... instances should have the same renderingGroupID as source (And this is not updatable). I_t_ll fix it_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"styxxx","Date":"2015-11-28T02:30:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thank you  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-11-28T02:41:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok this is now in 2.3 _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ thanks for reporting this_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]