[{"Owner":"JCPalmer","Date":"2016-08-10T22:08:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI was trying to take advantage of the probably seldom used callback option when loading textures are complete.  I know about scene.getWaitingItemsCount()_co_ but wanted to see if could have better control for my TOB computer generated source code for when a mesh/meshes are first displayed.  Could be useful for adding meshes once a game begins in a professional way.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am hand modifying computer built code to nail down all the requirements first.  Added a module internal function to be the callback and properties_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_    var waitingMeshes _eq_ []_sm_\n    var pendingTextures _eq_ 0_sm_\n    function onTexturesLoaded(){\n    \tif (--pendingTextures &gt_sm_ 0){\n    \t\treturn_sm_\n    \t}\n\n    \tfor (var i _eq_ 0_co_ len _eq_ waitingMeshes.length_sm_ i &lt_sm_ len_sm_ i++){\n    \t\twaitingMeshes[i].setEnabled(true)_sm_\n    \t}\n    \twaitingMeshes _eq_ []_sm_\n    }\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tIn each Mesh class I added the lines starting with _t_++_t__co_ so the mesh will not initially be enabled the first instance_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_    var Voice_sync_female_Body _eq_ (function (_super) {\n        __extends(Voice_sync_female_Body_co_ _super)_sm_\n        function Voice_sync_female_Body(name_co_ scene_co_ materialsRootDir_co_ source) {\n            _super.call(this_co_ name_co_ scene_co_ null_co_ source_co_ true)_sm_\n\n++          this.setEnabled(matLoaded &amp_sm_&amp_sm_ true)_sm_\n++          if (!matLoaded) waitingMeshes.push(this)_sm_ // not present if should not be enabled\n            \n            if (!materialsRootDir) { materialsRootDir _eq_ _qt_./_qt__sm_ }\n            defineMaterials(scene_co_ materialsRootDir)_sm_ //embedded version check\n..._lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tIn the method defineMaterials_co_ every material which is still not loaded_co_ I bump the pendingTextures++.  It works_co_ but I also had to modify the texture constructor to add the onload arg like_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_texture _eq_ new B.Texture(_qt_skin.png_qt__co_ scene_co_ false_co_ false_co_ BABYLON.Texture.TRILINEAR_SAMPLINGMODE_co_ onTexturesLoaded)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tAlso have to say _qt__co_ false_co_ false_co_ BABYLON.Texture.TRILINEAR_SAMPLINGMODE_co_ _qt_ because the argument is way to the right.  This is what I get.  Any ideas_co_ please?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_08/Selection_002.jpg.4cd0126a3785e0e916f45a4ba953ffc4.jpg_qt_ data-fileid_eq__qt_8970_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_8970_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_08/Selection_002.thumb.jpg.dee5f930f02c21076b8cdcc5ae3109ee.jpg_qt_ alt_eq__qt_Selection_002.jpg_qt_ /_gt__lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tips4design","Date":"2016-08-11T08:04:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tLooks good to me _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-08-11T14:35:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWell_co_ slept on it.  While getting the texture is the part making everything async_co_ the material still needs to be compile/ bound to mesh once you have all the textures.  Maybe forget about the texture.  Would registering an onBind observable for each material maybe be the callback to use? \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you liked that image_co_ I made another one a while ago when I was attempting in Blender to merge textures to reduce draw calls that went horribly wrong.  Enjoy!  I have had some experiments_co_ especially in animation dev_co_ that I wish I had saved.  They were just spectacular.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_08/Selection_221.png.69831c7d9c0beabdbec936cab266d017.png_qt_ data-fileid_eq__qt_8976_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_8976_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_08/Selection_221.thumb.png.3ce0dc6f71c32b48b608eb44fa5d075c.png_qt_ alt_eq__qt_Selection_221.png_qt_ /_gt__lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-08-11T15:25:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tfound the problem.  It was how I filled in the extra constructor args to get to the onload callback arg.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_qt__co_ false_co_ true_co_ B.Texture.TRILINEAR_SAMPLINGMODE_qt_ worked.  Not sure why .  The typescript signature is _dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_constructor(\n    url_dd_ string_co_ \n    scene_dd_ Scene_co_ \n    noMipmap?_dd_ boolean_co_ \n    invertY?_dd_ boolean_co_ \n    samplingMode_dd_ number _eq_ Texture.TRILINEAR_SAMPLINGMODE_co_\n    onLoad_dd_ () _eq_&gt_sm_ void _eq_ null_co_ \n    onError_dd_ () _eq_&gt_sm_ void _eq_ null_co_ \n    buffer_dd_ any _eq_ null_co_ \n    deleteBuffer_dd_ boolean _eq_ false)_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\twouldn_t_t the implied default for noMipmap &amp_sm_ invertY be _lt_strong_gt_false_lt_/strong_gt_?  Must admit I did not think these were inverted.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-08-11T17:21:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\ti should explicitly set values instead of using _qt_?_qt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-08-11T17:54:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYes_co_ an _qt_arg _eq_ true_qt_ syntax is much easier_co_ especially with negative arguments like _qt_noMipmap_qt_.  BTW what is the default for that?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have it in computer built code now. Using isVisible instead of enabled gave exact results.  Any Mesh in a TOB export JS file now pops into being all at the exact same time along with any children.  Very clean.  I also put a hook in to let any hand written base class use the function _qt_grandEntrance_qt_ t instead.  This will handle any beam-in_co_ or kung-fu  animation shit you can dream up.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var waitingMeshes _eq_ []_sm_\nvar pendingTextures _eq_ 0_sm_\nfunction onTexturesLoaded(){\n    if (--pendingTextures &gt_sm_ 0) return_sm_\n    for (var i _eq_ 0_co_ len _eq_ waitingMeshes.length_sm_ i &lt_sm_ len_sm_ i++){\n        if (typeof waitingMeshes[i].grandEntrance _eq__eq_ _qt_function_qt_) waitingMeshes[i].grandEntrance()_sm_\n        else waitingMeshes[i].isVisible _eq_ true_sm_\n    }\n    waitingMeshes _eq_ []_sm_\n    matLoaded _eq_ true_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI have just looked up what a Mipmap is.  Pretending anyone but me uses Tower of Babel exporter_co_ would a _qt_Use Mipmap_qt_ check box be good?  Do not think it could not be in the .babylon exporter_co_ sorry.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-08-12T15:13:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYes mipmap is true by default so this is cool\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI mean_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tnoMipMap _eq_ false by default (stupid naming...)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tinvertY _eq_ false by default\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]