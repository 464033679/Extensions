[{"Owner":"Deltakosh","Date":"2017-12-11T19:41:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tit is babylonjs _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt_1_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt__gt_ and thank you for being part of our community\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JackFalcon","Date":"2017-12-11T19:44:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t--&gt_sm_out of likes&lt_sm_-- \n_lt_/p_gt_\n\n_lt_p_gt_\n\t _qt_afalcon cannot have any more reactions today._qt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\t...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_dd_ )\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JackFalcon","Date":"2017-12-12T15:40:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_. Very happy remix3D is BABYLON!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA contribution for that space is _t_cinematics_t__dd_ Animations _lt_em_gt_configurable_lt_/em_gt_ for remix3D through JSON.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOpens learning-path_dd_ learn JSON-Animation -&gt_sm_ learn BABYLON...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHave a great day!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JackFalcon","Date":"2017-12-23T15:51:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI never posted the code...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAdd i and k to key codes_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_                    case 73_dd_ //i\n                        keys.edit.inc _eq_ 1_sm_\n                        break_sm_\n                    case 75_dd_ //k\n                        keys.edit.dec _eq_ 1_sm_\n                        break_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t These will be used to edit vertex positions.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t The EditMode Keys fit within a larger key object which contains all the animations_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_        /*********************KEYS***********************/\n        var keys_eq_{ \n            move_dd_{fwd_dd_0_co_lft_dd_0_co_rgt_dd_0_co_jmp_dd_0}_co_ \n            jump_dd_{jumpMode_dd_0_co_ jumpIndex_dd_0_co_ preJumpMode_dd_0_co_ fallMode_dd_0}_co_/*jumpMax _eq_ 30_co_*/ \n            edit_dd_{inc_dd_0_co_dec_dd_0_co_ext_dd_0}//increment_co_ decrement_co_ extrude.\n        }_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tAnd here is all the Mesh Editing_co_ Click-RGB _eq__eq__eq_ XYZ Code_co_ for your adjustment_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\n\n\n       /**********************************CREATE-EDITABLE-RIBBON*****************************/\n            // var ribbon1_sm_\n            var meshEditor _eq_ {}_sm_\n\t\t\tvar createRibbon1 _eq_ function (){\n\n\n\t\t\t      var pl _eq_ new BABYLON.PointLight(_qt_pl_qt__co_ new BABYLON.Vector3(0_co_ 0_co_ 0)_co_ scene)_sm_\n\t\t\t      pl.diffuse _eq_ new BABYLON.Color3(0.8_co_ 0.5_co_ 1)_sm_\n\t\t\t      pl.specular _eq_ new BABYLON.Color3(0_co_ 0_co_ 1)_sm_\n\t\t\t      pl.intensity _eq_ 0.8_sm_\n\n\t\t\t      var mat _eq_ new BABYLON.StandardMaterial(_qt_mat1_qt__co_ scene)_sm_\n\t\t\t      mat.alpha _eq_ 1.0_sm_\n\t\t\t      mat.diffuseColor _eq_ new BABYLON.Color3(0.5_co_ 0.5_co_ 1.0)_sm_\n\t\t\t      mat.backFaceCulling _eq_ false_sm_\n\t\t\t      // mat.wireframe _eq_ true_sm_\n\t\t\t      var texture _eq_ new BABYLON.Texture(_qt_../../../3d/starbox5/starbox5_pz.jpg_qt__co_ scene)_sm_\n\t\t\t      texture.vScale _eq_ 1.0_sm_ //How many images span the surface.\n\t\t\t      texture.uScale _eq_ 30.0_sm_ //Lots of images squashed and stretched makes an interesting effect...\n\t\t\t      mat.diffuseTexture _eq_ texture_sm_\n\n\t\t\t }\n\n\n            /**********************************CREATE-EDIT-NODES*****************************/\n            // var selectedEditNodes _eq_ []_sm_\n    var editPoints _eq_ []_sm_\n\n    var track_sm_\n            var createEditPath1 _eq_ function (){\n\n                    /*-----------------------Path------------------------------------------*/ \n                    \n                    // Create array of points to describe the curve\n                    var n _eq_ 450_sm_ // number of points\n                    var r _eq_ 50_sm_ //radius\n                    for (var i _eq_ 0_sm_ i &lt_sm_ n + 1_sm_ i++) {\n                        // points.push( new BABYLON.Vector3((r + (r/6)*Math.sin(9*i*Math.PI/n))* Math.sin(3*i*Math.PI/n)_co_ 0_co_ (r + (r/11)*Math.sin(7*i*Math.PI/n)) * Math.cos(3*i*Math.PI/n)))_sm_\n                        editPoints.push( new BABYLON.Vector3((r + (r/5)*Math.sin(8*i*Math.PI/n))* Math.sin(2*i*Math.PI/n)_co_ 0_co_ (r + (r/10)*Math.sin(6*i*Math.PI/n)) * Math.cos(2*i*Math.PI/n)))_sm_\n                   }   \n                    \n\n\n                    // //Draw the curve\n                    track _eq_ BABYLON.MeshBuilder.CreateLines(_t_track_t__co_ {points_dd_ editPoints_co_ updatable_dd_true}_co_ scene)_sm_\n                    track.color _eq_ BABYLON.Color3.Blue()_sm_\n\n\n\n            }\n\n\n            /**********************************CREATE-EDIT-NODES*****************************/\n            var selectedEditNodes _eq_ []_sm_\n            var createEditNodes1 _eq_ function (){\n                // var numNodes _eq_ meshEditor.positions.length_sm_\n                var numNodes _eq_ editPoints.length_sm_\n\n                var greenMat _eq_ new BABYLON.StandardMaterial(_qt_green1_qt__co_ scene)_sm_\n                greenMat.diffuseColor _eq_ new BABYLON.Color3(0_co_ 1_co_ 0)_sm_\n\n                var redMat _eq_ new BABYLON.StandardMaterial(_qt_red1_qt__co_ scene)_sm_\n                redMat.diffuseColor _eq_ new BABYLON.Color3(1_co_ 0_co_ 0)_sm_\n\n                var blueMat _eq_ new BABYLON.StandardMaterial(_qt_blue1_qt__co_ scene)_sm_\n                blueMat.diffuseColor _eq_ new BABYLON.Color3(0_co_ 0_co_ 1)_sm_\n\n                // var editType_eq__qt_box_qt__sm_\n                var editType_eq__qt_sphere_qt__sm_\n                var editNode_sm_\n\n                // for (var i_eq_0_sm_ i &lt_sm_ numNodes_sm_ i+_eq_3){\n                for (var i_eq_0_sm_ i &lt_sm_ numNodes_sm_ i++){\n                    if(editType_eq__eq__eq__t_box_t_){\n                        editNode _eq_ BABYLON.Mesh.CreateBox(_qt_cube_qt_ + i_co_ 0.25_co_ scene)_sm_\n                    }\n\n                    if(editType_eq__eq__eq__t_sphere_t_){\n                        // Parameters_dd_ name_co_ subdivs_co_ size_co_ scene\n                        editNode _eq_ BABYLON.Mesh.CreateSphere(_qt_editNode_qt_+i_co_ 1_co_ 0.15_co_ scene)_sm_\n                    }\n                    editNode.actionManager _eq_ new BABYLON.ActionManager(scene)_sm_\n                    editNode.editMode _eq_ _qt_none_qt__sm_\n                    editNode.vectorIndex _eq_ i_sm_\n                    //place-editNodes-on-ribbon.\n                    // editNode.position _eq_ new BABYLON.Vector3(meshEditor.positions[i]_co_meshEditor.positions[i+1]_co_meshEditor.positions[i+2])\n                    editNode.position _eq_ editPoints[i]_sm_\n\n                    editNode.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPickTrigger_co_ function (evt) {\n                        var eNode _eq_ evt.meshUnderPointer_sm_\n                        if(eNode.editMode _eq__eq__eq_ _t_none_t_ ){\n                            eNode.material _eq_ greenMat_sm_\n                            eNode.editMode_eq__t_green_t_\n                            selectedEditNodes.push(eNode)_sm_\n                        }else if(eNode.editMode _eq__eq__eq_ _t_green_t_ ){\n                            eNode.material _eq_ blueMat_sm_\n                            eNode.editMode_eq__t_blue_t_\n                        }else  if(eNode.editMode _eq__eq__eq_ _t_blue_t_ ){\n                            eNode.material _eq_ redMat_sm_\n                            eNode.editMode_eq__t_red_t_\n                        }else  if(eNode.editMode _eq__eq__eq_ _t_red_t_ ){\n                            eNode.material _eq_ null_sm_\n                            eNode.editMode_eq__t_none_t_\n                        }\n                        if(eNode.editMode!_eq__qt_none_qt_){\n                            displayMeshAxis(eNode_co_ false)\n                        } else {\n                            displayMeshAxis(eNode_co_ true)\n                            var remove _eq_ selectedEditNodes.indexOf(eNode)\n                            selectedEditNodes.splice(remove_co_1)\n                        }\n\n                    }))_sm_\n\n                }\n            }\n\n            /*********************************DISPLAY-MESH-AXIS******************************/\n\n            var displayMeshAxis _eq_ function (mesh_co_ dispose) {\n                mesh.computeWorldMatrix()_sm_\n\n                var matrix _eq_ mesh.getWorldMatrix()_sm_\n                var origin _eq_ mesh.position_sm_\n                // find existing axis for this box and dispose\n                var xAxis _eq_ scene.getMeshByName(_qt_xAxis_qt_+mesh.name)_sm_\n                var yAxis _eq_ scene.getMeshByName(_qt_yAxis_qt_+mesh.name)_sm_\n                var zAxis _eq_ scene.getMeshByName(_qt_zAxis_qt_+mesh.name)_sm_\n                if (xAxis!_eq_null){ xAxis.dispose()_sm_}\n                if (yAxis!_eq_null){ yAxis.dispose()_sm_}\n                if (zAxis!_eq_null){ zAxis.dispose()_sm_}\n                //dispose-only\n                if(dispose){  return_sm_ }\n                // calculate new normals for this mesh in world coordinate system\n                var xNormal_eq_BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(100_co_0_co_0)_co_matrix)_sm_\n                var yNormal_eq_BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(0_co_100_co_0)_co_matrix)_sm_\n                var zNormal_eq_BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(0_co_0_co_-100)_co_matrix)_sm_\n                // create axis lines\n                xAxis _eq_ BABYLON.Mesh.CreateDashedLines(_qt_xAxis_qt_+mesh.name_co_ [origin_co_ xNormal]_co_3_co_10_co_200_co_ scene_co_ false)_sm_\n                xAxis.color _eq_ BABYLON.Color3.Red()_sm_\n                yAxis _eq_ BABYLON.Mesh.CreateDashedLines(_qt_yAxis_qt_+mesh.name_co_ [origin_co_ yNormal]_co_3_co_10_co_200_co_ scene_co_ false)_sm_\n                yAxis.color _eq_ BABYLON.Color3.Green()_sm_\n                zAxis _eq_ BABYLON.Mesh.CreateDashedLines(_qt_zAxis_qt_+mesh.name_co_ [origin_co_ zNormal]_co_3_co_10_co_200_co_ scene_co_ false)_sm_\n                zAxis.color _eq_ BABYLON.Color3.Blue()_sm_\n            }\n\n            /*********************************RENDER-MESH-EDITS******************************/\n            var renderMeshEdits _eq_ function(){\n                scene.registerAfterRender(function() {\n                    // var savemesh _eq_ meshEditor.positions_sm_\n                    if(selectedEditNodes.length){\n                        if(meshEditKeys.inc || meshEditKeys.dec){\n                            renderEdits()_sm_\n                        }\n                    }\n                })_sm_\n\n                var renderEdits _eq_ function(){\n                    var aNode_sm_\n                    var direction _eq_ (meshEditKeys.inc) ? 1 _dd_ (meshEditKeys.dec) ? -1 _dd_ 0_sm_\n                    var moveAmount _eq_ 0.25 * direction_sm__sm_\n                    //move-each-selected-node-in-the-direction-of-its-state.\n                    for(var i _eq_ 0_sm_ i&lt_sm_ selectedEditNodes.length_sm_ i++){\n                        aNode _eq_ selectedEditNodes[i]_sm_\n                        if(aNode.editMode_eq__eq__eq__qt_red_qt_){\n                            aNode.position.x +_eq_ moveAmount_sm_\n                            // editPoints[aNode.vectorIndex] +_eq_ moveAmount_sm_\n                            // meshEditor.positions[aNode.vectorIndex] +_eq_ moveAmount_sm_\n                        } else if(aNode.editMode_eq__eq__eq__qt_green_qt_){\n                            aNode.position.y +_eq_ moveAmount_sm_\n                            // editPoints[aNode.vectorIndex] _eq_ aNode.position_sm_\n                            // meshEditor.positions[aNode.vectorIndex+1] +_eq_ moveAmount_sm_\n                        } else if(aNode.editMode_eq__eq__eq__qt_blue_qt_){\n                            aNode.position.z +_eq_ moveAmount_sm_\n                            // editPoints[aNode.vectorIndex+2] +_eq_ moveAmount_sm_\n                            // meshEditor.positions[aNode.vectorIndex+2] +_eq_ moveAmount_sm_\n                        }\n                    }\n\n            var positions _eq_ []_sm_\n            editPoints.forEach(function (s) {\n                positions.push(s.x_co_ s.y_co_ s.z)_sm_\n\n            })_sm_\n\n\nvar indices _eq_ track.getIndices()_sm_\nvar normals _eq_ []_sm_\n\n                    track.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ positions_co_ false_co_ true)_sm_\n                    // BABYLON.VertexData.ComputeNormals(positions_co_ indices_co_ normals)_sm_\n                    // track.updateVerticesData(BABYLON.VertexBuffer.NormalKind_co_ normals_co_ false_co_ false)_sm_\n                    // track.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ editPoints_co_ false_co_ true)_sm_\n                    // updateMeshEdits(meshEditor.ribbon1_co_ meshEditor.positions_co_ meshEditor.normals_co_ meshEditor.indices)\n                }\n\n                var updatePathEdits _eq_ function(path_co_ positions_co_ normals_co_ indices) {\n                    ribbon.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ positions_co_ false_co_ true)_sm_\n                    BABYLON.VertexData.ComputeNormals(positions_co_ indices_co_ normals)_sm_\n                    ribbon.updateVerticesData(BABYLON.VertexBuffer.NormalKind_co_ normals_co_ false_co_ false)_sm_\n                }_sm_\n\n                var updateMeshEdits _eq_ function(ribbon_co_ positions_co_ normals_co_ indices) {\n                    ribbon.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ positions_co_ false_co_ true)_sm_\n                    BABYLON.VertexData.ComputeNormals(positions_co_ indices_co_ normals)_sm_\n                    ribbon.updateVerticesData(BABYLON.VertexBuffer.NormalKind_co_ normals_co_ false_co_ false)_sm_\n                }_sm_\n            }\n\n\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tadd createEditNodes1 and createEditPath1 to your createScene to edit mesh in BABYLON.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]