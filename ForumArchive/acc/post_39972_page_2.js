[{"Owner":"brianzinn","Date":"2018-10-04T16:48:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_230531_qt_ data-ipsquote-contentid_eq__qt_39972_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1538656342_qt_ data-ipsquote-userid_eq__qt_29687_qt_ data-ipsquote-username_eq__qt_Nodragem_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t4 hours ago_co_ Nodragem said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\twouldn_t_t it hinder performance to have a watcher watching for texture change?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIt_t_s not the Engine or BabylonJS watching_co_ just our dev server_co_ which answers the next question that there is no HMR in production\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_230531_qt_ data-ipsquote-contentid_eq__qt_39972_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1538656342_qt_ data-ipsquote-userid_eq__qt_29687_qt_ data-ipsquote-username_eq__qt_Nodragem_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t4 hours ago_co_ Nodragem said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tcan we make a general method that works for any game assets_dd_ mesh_co_ animation_co_ sounds_co_ fonts_co_ etc...?_lt_span_gt_﻿_lt_/span_gt_\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tPossibly that is a good way to do it.  Definitely the textures at least are cached at engine level_co_ although that presents a difficulty_co_ it also means hopefully that we can hot swap easier scene wide generically._lt_br /_gt_\n\t_lt_br /_gt_\n\tI am still trying to figure out how some logic will be able to participate in HMR.  One good example is the _qt_size_qt_ parameter of MeshBuilder.CreateBox() these factory methods create objects that have no concept of their constructor parameters.  Box is easy if you look at the position indices_co_ we can edit them directly_co_ but that_t_s why I have been experimenting for a few weeks already on intermediate _qt_proxy_qt_ classes.  I have no trouble setting _qt_size_qt_ directly when recreating _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt__lt_br /_gt_\n\t_lt_br /_gt_\n\tAnimations is interesting as well_co_ because if you change an animation then it could change the entire state you were in - or even make the current state invalid.  So_co_ I think it_t_s good for me to start with assets and work outwards.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Nodragem","Date":"2018-10-04T17:38:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tConcerning the code swapping_co_ I can see 2 kinds of code for now_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_- the code that is called only once_dd__lt_/strong_gt_ when reloading this kind of code_co_ nothing happens because it was already called once in the past. We need to re-execute the code. However_co_ some times_co_ the code won_t_t be re-executable without restarting the game_co_ or it won_t_t make sense to re-execute it. For instance_co_ you have a line of code that creates a blue box at position (x_co_ y). In game_co_ you move the box to position (x+10_co_ y+5). Then_co_ you want to change the color of the box. You go in your code and you change the line _qt_creates _lt_em_gt_blue_lt_/em_gt_ box at position (x_co_y)_qt_ to _qt_create _lt_em_gt_red_lt_/em_gt_ box at position (x_co_y)_qt_. It does not work_co_ and it would not make sense to re-execute that line of code to change the box_t_s color. In this situation_co_ what we would need is to edit object_t_s properties from the debugger (as in Vue.js).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_- the code that is called every frame or on events_dd_ _lt_/strong_gt_that case should be simple. I just need to reload the code_co_ and the code will be called on the next frame or event.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]