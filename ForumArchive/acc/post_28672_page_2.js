[{"Owner":"Temechon","Date":"2017-02-26T14:25:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI think fenomas is right. The playground code is running into an _t_eval_t__co_ which is not compilator-optimized i guess _dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Playground/index.js#L188_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Playground/index.js#L188_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-02-26T14:56:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tIt_t_s not as simple as just whether the code is eval_t_ed or not. Basically_co_ all the code samples in this thread probably _lt_em_gt_should_lt_/em_gt_ get fully optimized_co_ and the ones that don_t_t can probably be considered bugs for the JS engine. But realistically_co_ compiler bugs like that are going to happen more often when everything is being dynamically created and eval_t_ed and whatnot.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]