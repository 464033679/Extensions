[{"Owner":"jroosterman","Date":"2017-07-26T18:04:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI set up an OnKeyDownTrigger Action for my scene.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_scene.actionManager _eq_ new BABYLON.ActionManager(scene)_sm_\nscene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyDownTrigger_co_ keyDownAction))_sm_\n        \n...\n\n var keyDownAction _eq_ function (evt) {\n    \tif (evt.sourceEvent.keyCode _eq__eq_ 37) {\n    \t        evt.getSceneSomehow().doSomethingWithScene()_sm_\n\t} else if (evt.sourceEvent.keyCode _eq_ 39) {\n\t\tevt.getSceneSomehow().doSomethingELSEWithScene()_sm_\n\t}\n}_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tIn the keyDownAction I want to get a reference to the scene that registered the action.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCan I do this?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2017-07-27T03:26:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi JR.  I_t_m not sure why you would ever need to do that. \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var keyDownAction _eq_ function (evt) {\n    console.log(scene)_sm_     \n}_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThe actionManager is for the current scene.  This actionManager registered a func within THAT scene_t_s scope... called keyDownAction().  That func only exists in the scope of the current scene.  The global _lt_em_gt_scene _lt_/em_gt_variable is the scene you want_co_ and it is ready for _t_action_t_.  _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tFor more scenes...\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_scene2.actionManager _eq_ _lt_span_gt_new_lt_/span_gt_ BABYLON.ActionManager(scene2)_sm_\nscene2.actionManager.registerAction..._lt_/code_gt__lt_/pre_gt_\n\n_lt_pre_gt_\n_lt_code_gt_scene3.actionManager _eq_ _lt_span_gt_new_lt_/span_gt_ BABYLON.ActionManager(scene3)_sm_\nscene3.actionManager.registerAction..._lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1EMOTD%2325_qt_ rel_eq__qt_external nofollow_qt__gt_This playground_lt_/a_gt_ uses a scene.actionManager keydown func in lines 54-58. In line 57_co_ I change the scene_t_s background color... for every keydown.  Unless I am mistaken (often  I am)_co_ there is no need to derive/glean a ref to a scene object... from an evt object. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tPerhaps I have misunderstood_co_ or I am blind to potential use-cases.  It MIGHT be add-able to the BJS actionManager event object_co_ but I_t_m not sure if it will be used.  Using our 3-scene example above_co_ are you wishing that all 3 scenes... use the same _lt_em_gt_keyDownAction() _lt_/em_gt_handler?  *nod*.  I guess I can understand that.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSmarter people than I may comment soon.  Stay tuned.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2017-07-27T04:30:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI wouldn_t_t say that it_t_s a global scene variable_co_ but anything in scope where the function is declared will be available via Lexical Scoping_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//developer.mozilla.org/en/docs/Web/JavaScript/Closures_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//developer.mozilla.org/en/docs/Web/JavaScript/Closures_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tScene is not available from the OnKeyDownTrigger evt - here is what is available_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//doc.babylonjs.com/classes/3.0/actionevent_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/classes/3.0/actionevent_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ looks like best bet is to have it in scope and then just use it - unless evt._lt_span style_eq__qt_color_dd_#000000_sm__qt__gt_meshUnderPointer.scene will always work?_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]