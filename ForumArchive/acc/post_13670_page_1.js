[{"Owner":"vahith","Date":"2015-04-07T06:37:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_hi all_sm__lt_br_gt_i am trying to draw dynamic line by selecting mouse picking points and  also i want to show the length(size) above the line. How i can achieve this is it possible in babylon.js..?kindly suggest me some test case to achieve this.._lt_br_gt__lt_br_gt_thanks_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"TheFrenchieCake","Date":"2015-04-07T15:26:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m currently working on kind of the same problematic_dd_ I also want to draw a line between two points on an irregular plane_co_ and make the line follow the different heights of the plane while displaying the distance between the two points. So far I managed to display the line between the two points (dynamically_co_ meaning it is showed as soon as you picked the first point_co_ and between the first point and the user cursor) and show the distance in the navigator console when the second point is picked. Also_co_ thanks to a linear interpolation_co_ I managed to make the line follow the irregularities of my plane. Here_t_s the code to do so_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_//!\\\\ SEE NEW SHINY AND FULLY COMMENTED VERSION IN THE NEXT ANSWER TO THIS POST _dd_-) //!\\\\_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_    var _this _eq_ this_sm_    var firstPoint  _eq_ null_sm_    var secondPoint _eq_ null_sm_    _this._scene.onPointerDown _eq_ function(evt_co_ pickInfo){        if(pickInfo.hit){            if(firstPoint){ // meaning_dd_ first point already picked                secondPoint _eq_ pickInfo.pickedPoint_sm_                var distance _eq_ (secondPoint.subtract(firstPoint)).length()_sm_ // compute the distance between the two points                console.log(distance)_sm_ // show the distance in the console                $(_qt_#renderCanvas_qt_).off(_qt_mousemove_qt_)_sm_ // cancel the event handler you_t_ll see in the else statement below                // reinitialize the firstPoint                firstPoint _eq_ null_sm_            } else { // meaning_dd_ first point hasn_t_t been picked yet                firstPoint _eq_ pickInfo.pickedPoint_sm_                // create new line that will be used to display the distance between the two points                var distanceLine _eq_ null_sm_\t\t// update the line displaying when the user moves his mouse on the canvas                $(_qt_#renderCanvas_qt_).on(_qt_mousemove_qt__co_ function(evt){                    if(distanceLine){                        distanceLine.dispose()_sm_ // remove the previous drawn line_co_ if there is any                    }                    var mousePickInfo _eq_ _this._scene.pick(evt.clientX_co_ evt.clientY_co_ null_co_ null_co_ _this._scene.activeCamera)_sm_                    if(mousePickInfo.hit){                        var mousePickedPoint _eq_ mousePickInfo.pickedPoint.clone()_sm_                        // the following var will be used in the linear interpolation_sm_                         // modify its value for a more precise following of the irregularities of the terrain/plane_dd_                        // a higher value means a higher precision.                        var divider _eq_ 100_sm_                         coordinatesArray.push(firstPoint)_sm_                        // temporary var used for commodity                        var tempFirstPoint _eq_ firstPoint.clone()_sm_                        var tempSecondPoint _eq_ mousePickedPoint.clone()_sm_                        // increase the y position of the temporary points_co_ in order to use them                        // in the linear interpolation                        tempFirstPoint.y +_eq_ 1000_sm_                        tempSecondPoint.y +_eq_ 1000_sm_                        // the following array will contain the points of the white line between the two picked points                        var coordinatesArray _eq_ []_sm_ // Vector3[]                        coordinatesArray.push(firstPoint)_sm_                        // LINEAR INTERPOLATION - see BJS doc for more info on BABYLON.Vector3.Lerp                        // and Wikipedia for more on discrete values and linear interpolation                        for(var i _eq_ 1_sm_ i &lt_sm_ divider_sm_ i++){                            var tempPoint _eq_ BABYLON.Vector3.Lerp(tempFirstPoint_co_ tempSecondPoint_co_ i/divider)_sm_                            var minHeight _eq_ 0_sm_                            var ray _eq_ new BABYLON.Ray(tempPoint_co_ new BABYLON.Vector3(0_co_-1_co_0))_sm_                            var pickedPointInfo _eq_ _this._scene.pickWithRay(ray_co_ null)_sm_                            if(pickedPointInfo.hit){                                minHeight _eq_ pickedPointInfo.pickedPoint.y_sm_                                // push the point into the correct array                                coordinatesArray.push(new BABYLON.Vector3(tempPoint.x_co_ minHeight_co_ tempPoint.z))_sm_                            }                        }                        coordinatesArray.push(mousePickedPoint)_sm_                        distanceLine _eq_ new BABYLON.Mesh.CreateLines(_qt_distanceLine_qt__co_ coordinatesArray_co_ _this._scene)_sm_                        distanceLine.color _eq_ new BABYLON.Color3(1_co_ 1_co_ 1)_sm_ // colors the line in white                    }                })_sm_            }        }    }_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"TheFrenchieCake","Date":"2015-04-09T07:34:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi again! I_t_m back_co_ with a new_co_ shiny_co_ clean_co_ and fully commented measure tool _dd_-) you should be able to directly copy-paste the following parts of code into your own project and use it as you wish _sm_-)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_First_co_ some HTML to insert in your &lt_sm_body&gt_sm__dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint lang-html_qt__gt_&lt_sm_!--Measure Tool Indicator--&gt_sm_&lt_sm_div id_eq__qt_measureToolIndicator_qt_ class_eq__qt_hidden_qt_&gt_sm_&lt_sm_/div&gt_sm__lt_/pre_gt__lt_p_gt_The corresponding CSS_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint lang-css_qt__gt_.hidden{  display _dd_ none_sm_}#measureToolIndicator{  position         _dd_ absolute_sm_  color            _dd_ white_sm_ // feel absolutely free to change these...  background-color _dd_ black_sm_ // ... I_t_m not really a designer _sm_-)  z-index          _dd_ 10_sm_ // just make sure it_t_s above your canvas z-index  pointer-events   _dd_ none_sm_}_lt_/pre_gt__lt_p_gt_Now_co_ the good part_co_ the JS _dd_-) first of all_co_ the MeasureTool object with its prototype_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt__qt_use strict_qt__sm_/** * The mighty measure tool the user can use to... measure things. Like distance * between two picked points_co_ or the height of a building... In fact_co_ every distance * between two points picked on pickable material on the scene. * @param scene * @constructor */var MeasureTool _eq_ function(scene) {    // Determines if the tool is activated/deactivated    this.activated  _eq_ false_sm_    // The scene we_t_re working on    this._scene _eq_ scene_sm_    // The first clicked point    this.firstPoint _eq_ null_sm_}_sm_MeasureTool.prototype _eq_ {    /**     * Manage the actions of the measure tool     * @param evt     * @param pickInfo     */    manageMeasureTool _dd_ function(evt_co_ pickInfo) {        var _this _eq_ this_sm_        var distanceLine _eq_ null_sm_        if(pickInfo.hit &amp_sm_&amp_sm_ this.firstPoint){            // cancel the mousemove event_sm_ the last drawn line will be left on the scene_co_ until            // you pick an other point            $(_qt_#renderCanvas_qt_).off(_qt_mousemove_qt_)_sm_            // reinitialize the first picked point_co_ so an other measure can be launched            // by clicking on the scene            this.firstPoint _eq_ null_sm_        } else if(pickInfo.hit &amp_sm_&amp_sm_ !this.firstPoint){            // dispose of any already drawn line on the scene            if(_this._scene.getMeshByName(_qt_distanceLine_qt_)){                _this._scene.getMeshByName(_qt_distanceLine_qt_).dispose()_sm_            }            // clone the picked point and store it for further purpose            this.firstPoint _eq_ pickInfo.pickedPoint.clone()_sm_            /**             * Add a mousemove event listener on the canvas_co_ that will draw and display             * the line between your first picked point and your pointer. Also_co_ this event             * will trigger the display of the distance next to your pointer.             */            $(_qt_#renderCanvas_qt_).on(_qt_mousemove_qt__co_ function(evt){                // dispose of any already drawn line on the scene                if(_this._scene.getMeshByName(_qt_distanceLine_qt_)){                    _this._scene.getMeshByName(_qt_distanceLine_qt_).dispose()_sm_                }                // pick the position of the pointer on the scene                var mousePickInfo _eq_ _this._scene.pick(evt.clientX_co_ evt.clientY_co_ null_co_ null_co_ _this._scene.activeCameras[0])_sm_                if(mousePickInfo.hit){                    // clone the point on the scene on which the pointer is                    var mousePickedPoint _eq_ mousePickInfo.pickedPoint.clone()_sm_                    /**                      * The divider will be used for the linear interpolation below. It will determine the precision of the                     * interpolation_co_ and so the fidelity of the drawn line regarding the different heights of your terrain.                      * The higher it is_co_ the higher the precision will be. But as the linear interpolation is launched each                      * time you move the pointer_co_ it is wiser to keep it relatively low (100 is convenient for my purpose)                     */                    var divider _eq_ 100_sm_                    // this array will store every point that will form the drawn line between your first point and the pointer                    var coordinatesArray _eq_ []_sm_ // Vector3[]                    // push the first picked point into this array                    coordinatesArray.push(_this.firstPoint)_sm_                    // for the purpose of the linear interpolation_co_ clone &amp_sm_ store the points into                    // temporary Vector3 var_co_ which y position will be increased                    var tempFirstPoint _eq_ _this.firstPoint.clone()_sm_                    var tempSecondPoint _eq_ mousePickedPoint.clone()_sm_                    tempFirstPoint.y +_eq_ 1000_sm_                    tempSecondPoint.y +_eq_ 1000_sm_                    for(var i _eq_ 1_sm_ i &lt_sm_ divider_sm_ i++){                        // linear interpolation                        var tempPoint _eq_ BABYLON.Vector3.Lerp(tempFirstPoint_co_ tempSecondPoint_co_ i/divider)_sm_                        /**                         * Now_co_ we_t_ll launch a ray from our tempPoint_co_ perpendicularly toward the scene. This ray                         * will pick the first pickable object he will stumble upon (the ground_co_ a building_co_ etc...).                         * That way_co_ it will determine the height of the next point of our drawn line.                         */                        var minHeight _eq_ 0_sm_                        var ray _eq_ new BABYLON.Ray(tempPoint_co_ new BABYLON.Vector3(0_co_-1_co_0))_sm_                        var pickedPointInfo _eq_ _this._scene.pickWithRay(ray_co_ null)_sm_                        if(pickedPointInfo.hit){                            // retrieve the height of the first obstacle found by the ray                            minHeight _eq_ pickedPointInfo.pickedPoint.y_sm_                            // push the new point of the line in the coordinates array                            coordinatesArray.push(new BABYLON.Vector3(tempPoint.x_co_ minHeight_co_ tempPoint.z))_sm_                        }                    }                    // push the last point_co_ that is to say the point your pointer is pointing on the scene                    coordinatesArray.push(mousePickedPoint)_sm_                    // finally create the line                    distanceLine _eq_ new BABYLON.Mesh.CreateLines(_qt_distanceLine_qt__co_ coordinatesArray_co_ _this._scene)_sm_                    // color of the drawn line (here_dd_ white)                    distanceLine.color _eq_ new BABYLON.Color3(1_co_ 1_co_ 1)_sm_                    /** MEASURE TOOL INDICATOR **/                    // compute the distance                    var distance _eq_ (mousePickedPoint.subtract(_this.firstPoint)).length()_sm_                    // trim the distance value                    distance _eq_ distance.toFixed(2)_sm_                    // display the distance                    $(_qt_#measureToolIndicator_qt_).html(distance + _qt_m_qt_)_sm_                                        $(_qt_#measureToolIndicator_qt_).removeClass(_qt_hidden_qt_).css(_qt_top_qt__co_ evt.clientY + 10).css(_qt_left_qt__co_ evt.clientX + 10)_sm_                    /** END MEASURE TOOL INDICATOR **/                }            })_sm_        }    }}_sm__lt_/pre_gt__lt_p_gt_Finally_co_ the JS to activate/deactivate and use the measure tool_sm__lt_strong_gt_ you_t_ll have to create two controls on your HTML page_lt_/strong_gt_ to activate/deactivate the measure tool (here_co_ I use two buttons with convenient names)_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_// you may have to precise the following line if you have multiple camera on your scene // (the camera I personally use is the first created - don_t_t forget to change the following if// you have something different!)scene.cameraToUseForPointers _eq_ scene.activeCameras[0]_sm_var measureTool _eq_ new MeasureTool(scene)_sm_$(_qt_#activation_button_qt_).on(_qt_click_qt__co_ function(){    measureTool.activated _eq_ true_sm_    scene.onPointerDown _eq_ function(evt_co_ pickInfo){        measureTool.manageMeasureTool(evt_co_ pickInfo)_sm_    }_sm_})_sm_$(_qt_#deactivation_button_qt_).on(_qt_click_qt__co_ function(){    measureTool.activated _eq_ false_sm_    scene.onPointerDown _eq_ null_sm_})_sm__lt_/pre_gt__lt_p_gt_Hope this will help you with your problem _dd_-) tell me if you encounter any problem with the code _sm_-)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"vahith","Date":"2015-04-10T05:45:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_hi _lt_span_gt_Frenchie_co_ thanks for your solution... i made _lt_/span_gt_some demo in playground actually what i am trying to achieve is i want to create dynamic wall when i select two points...._lt_br_gt_check this play ground for creating lines.._lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1RCIXM%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1RCIXM#1_lt_/a_gt__lt_/p_gt__lt_p_gt_and if u having any playground demo..?kindly suggest me.._lt_br_gt_thanks_lt_br_gt__lt_br_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"TheFrenchieCake","Date":"2015-04-10T12:16:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Do you want the wall to appear dynamically as you move your mouse over the canvas? Or do you want it to be displayed only when the second point is picked? I don_t_t think I_t_ll have much time to work on it today_co_ maybe this WE if I get motivated enough x)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"vahith","Date":"2015-04-11T04:48:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_hi frenchie.. thanks for response. wall should appear when second point is picked..._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Jaskar","Date":"2015-04-11T16:15:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So_co_ in your playground_co_ you got it ?_lt_/p_gt__lt_p_gt_Do you need more help ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"vahith","Date":"2015-04-12T11:07:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_hi jaskar_co_ yet i didn_t_t find any thing regarding above.. if possible kindly suggest me .._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Jaskar","Date":"2015-04-14T19:01:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What do you want to add to this playground ? _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1RCIXM%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1RCIXM#1_lt_/a_gt__lt_/p_gt__lt_p_gt_I don_t_t understand. You have your dynamic wall and the measure._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"vahith","Date":"2015-04-15T08:08:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_hi jaskar_co__lt_br_gt_thanks for your reply. In above playground i creating line by selecting mouse point but what i trying is i want to create wall on mouse picking position.. could you suggest me how i can achieve..._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Jaskar","Date":"2015-04-15T13:47:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I start a playground here _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1U68CD_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1U68CD_lt_/a_gt__lt_/p_gt__lt_p_gt_It_t_s a start for your idea_co_ but I have no more time today to work on it. Hope it_t_ll be helpfull for you _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Jaskar","Date":"2015-04-16T06:52:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I update the playground for you (correct the x scaling of the wall) _dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1U68CD%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1U68CD#1_lt_/a_gt__lt_/p_gt__lt_p_gt_It something react weird_co_ due to the view_co_ but I think you can do it  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_happy.png_qt_ alt_eq__qt_^_^_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/happy@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_*_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Edit _dd_ Do not put your cursor out of the ground_co_ or it_t_ll fail  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-04-16T06:56:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The wall should be set in isPickable _eq_ false to avoid stuttering _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1U68CD%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1U68CD#2_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Nice work anyway _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]