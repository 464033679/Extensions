[{"Owner":"olrehm","Date":"2016-09-25T19:22:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am trying to use the BabylonJS npm package from Typescript with browserify. These are the issues I run into_dd_\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tIf I just `require(_t_babylonjs/babylon_t_)` without import_co_ Typescript complains  `error TS2304_dd_ Cannot find name _t_require_t_.`\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tIf I use `import BABYLON _eq_ require(_t_babylonjs/babylon_t_)` or `import BABYLON from _t_babylonjs/babylon_t_` I get `error TS2306_dd_ File _t_/home/olrehm/Code/civ.ts/node_modules/babylonjs/babylon.d.ts_t_ is not a module.`\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tIf I do not require at all_co_ but use tsconfig.json or `/// &lt_sm_reference path_eq__qt_..._qt_ /&gt_sm_` to pull in the babylon.d.ts_co_ Typescript happily compiles_co_ but I am missing any module loading statement for browserify to pull in the source\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\tI managed to somewhat make it work by adding `export _eq_ BABYLON_sm_` to the end of babylon.d.ts making it a module and then import...from it. But of course I would rather not have to change this file that is installed through npm.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI could also maybe make it work by passing babylonjs as _qt_external_qt_ to browserify_co_ to ensure that it is loaded though not required_co_ but that means I need to write the dependency on Babylon into my gulp files_co_ where I would much rather keep that information in my package.json.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow are others doing that? I guess adding module_dd_ _t_commonjs_t_ to BabylonJS_t_ gulp files would create a module that one can import/require - would that break some other approach?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOle\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-09-26T16:33:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey\n_lt_/p_gt_\n\n_lt_p_gt_\n\tModules should work (I know that many users are using it). We added these lines at the end of babylon.js_dd_\n_lt_/p_gt_\n\n_lt_pre style_eq__qt_color_dd_rgb(0_co_0_co_0)_sm_font-style_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_word-spacing_dd_0px_sm_white-space_dd_pre-wrap_sm__qt__gt_\nif (((typeof window !_eq_ _qt_undefined_qt_ &amp_sm_&amp_sm_ window.module) || (typeof module !_eq_ _qt_undefined_qt_)) &amp_sm_&amp_sm_ typeof module.exports !_eq_ _qt_undefined_qt_) {\n    module.exports _eq_ BABYLON_sm_\n}_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2016-09-26T17:25:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI can see where you have a task like that in your Gulp file_co_ but it does not seem to work_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_mkdir tmp &amp_sm_&amp_sm_ cd tmp\nnpm i babylonjs\ncat node_modules/babylonjs/babylon.d.ts | grep module.exports_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tReturns nothing. Nothing here either_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/f6b36e2a1abeee1e0fde239a9b62b16736b62b56/dist/babylon.2.4.d.ts_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/f6b36e2a1abeee1e0fde239a9b62b16736b62b56/dist/babylon.2.4.d.ts_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd only the gulp tasks here_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/search?utf8_eq_%E2%9C%93&amp_sm_q_eq_module.exports_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/search?utf8_eq_✓&amp_sm_q_eq_module.exports_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAre you sure this works?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2016-09-26T18:23:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNot sure I understand your Gulp setup completely_co_ but it seems to me that we should add `.pipe(addModuleExports(_qt_BABYLON_qt_))` here_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/5442cc9aa0b14a71a957db129b43062eafa041e4/Tools/Gulp/gulpfile.js#L101_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/5442cc9aa0b14a71a957db129b43062eafa041e4/Tools/Gulp/gulpfile.js#L101_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat at least results in gulp typescript outputting a d.ts file that has the module.exports you are talking about in it. I_t_ll send you a pull request after dinner...\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2016-09-26T18:59:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI see I have not read your answer carefully enough_dd_ You add this code to the JS files_co_ not to the *.d.ts.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat makes it possible to require babylon from JS_co_ but my problem is that I cannot require it from Typescript_co_ because the d.ts is not in module format. The d.ts would need to have a \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_rgb(39_co_42_co_52)_sm_font-family_dd__t_Helvetica Neue_t__co_ Helvetica_co_ Arial_co_ sans-serif_sm_font-size_dd_14px_sm_font-style_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm_background-color_dd_rgb(255_co_255_co_255)_sm_float_dd_none_sm__qt__gt_export _eq_ BABYLON_sm__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tsomewhere. I will close my pull request_co_ and see if I cannot make another one where I add the addition to the d.ts file.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-09-26T23:32:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tOk gotcha!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2016-09-28T20:36:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tNext try_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/pull/1372_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/pull/1372_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2017-02-15T22:40:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tTL_sm_DR_dd_ When I run gulp on a fork_co_ a file babylon.module.d.ts is created which is the one I would like to use. However_co_ when I `npm install babylonjs` there is only babylon.d.ts_co_ not the module version. Any idea why?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLong story_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA few months later_co_ I am revisiting this. My PR (_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/commit/b9218551147d0225feac0548214491f35b4f78e1_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/commit/b9218551147d0225feac0548214491f35b4f78e1_lt_/a_gt_) was rolled back because it was breaking something else. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe original problem is (if I am not mistaken)_dd_ The js and d.ts files of Babylon.js as provided by npm are incompatible.  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe JS source needs to be loaded like so_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var BABYLON _eq_ require(_t_babylonjs_t_)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThe corresponding TypeScript import would be\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import * as BABYLON from _t_babylonjs_t__sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tHowever_co_ that does not work with the given d.ts because it is not a module but instead uses ambient namespaces. One can get the types correctly like so_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import _t_babylonjs_t__sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t Which compiles fine to\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_require(_t_babylonjs_t_)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tBut the JS file does not put BABYLON into the global scope - it returns it from the require.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs the files are_co_ I cannot come up with a Typescript import statement that would do the right thing both for the types at compile time and for the JS source at runtime.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI forked the repo and ran `cd Tools/Gulp`_co_ `npm install` `gulp typescript-all`_co_ and that makes a file dist/preview release/babylon.module.d.ts_co_ which is the same as dist/preview release/babylon.d.ts except that it has the `export _eq_ BABYLON` line I need - however_co_ that file is not part of the the npm package that I install_co_ despite being listed here_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Tools/Npm/package.json#L27_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Tools/Npm/package.json#L27_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAny idea why that would be?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2017-02-15T22:50:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI think I may have my answer_dd_ That separate file is new (4 days ago)_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/commit/af71269db7a6f909b92124d02a615831480134e6_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/commit/af71269db7a6f909b92124d02a615831480134e6_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo it was just not released yet. Great_co_ then all I have to do is wait it seems. Do you have a release schedule?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-02-15T23:07:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tHello_co_ not yet but sometimes around end of march\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2017-02-16T08:06:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAny chance you could publish a tagged version of the prerelease? Something like\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_npm publish --tag next_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI see you are asking for feedback on the preview release on the GitHub repo home page_co_ and this would make it easy for people using npm to install it without breaking folks who are tracking latest. It would also fix my problem (at the cost of living on the bleeding edge_co_ but that_t_s okay).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI tried to point npm directly to your Github repo to get the current master_co_ but that only seems to work when you have the package.json at the root of the repo_dd_ _lt_a href_eq__qt_https_dd_//github.com/npm/npm/issues/2974_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/npm/npm/issues/2974_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOut of interest_dd_ Why do you have the package.json in the Tools/Npm subfolder. Wouldn_t_t it be much simpler to maintain a single package.json at the root instead of two in Tools/Gulp and Tools/Npm?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2017-02-16T11:41:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI unblocked myself by just putting the binaries along with the package.json into a github repo and pointing npm to that_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/rehmsen/babylon.js.2.6pre_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/rehmsen/babylon.js.2.6pre_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNot ideal_co_ but good enough until the next release is out.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-02-16T17:36:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tGood _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"CodingMadeEasy","Date":"2017-05-17T02:36:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ Could you please publish a preview release version of Babylon JS? It_t_s cumbersome to have to clone the repo to make our own package.json file just so we can get the latest features. BabylonJS is updating at a rapid rate and it would be nice to always have access to the latest changes easily.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sebavan","Date":"2017-05-17T03:10:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tCould you rely on the cdn_dd_ _lt_a href_eq__qt_http_dd_//preview.babylonjs.com/babylon.js_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//preview.babylonjs.com/babylon.js_lt_/a_gt_ for now (this is updated frequently and DK is in vacation) ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"CodingMadeEasy","Date":"2017-05-17T03:14:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/20193-sebavan/?do_eq_hovercard_qt_ data-mentionid_eq__qt_20193_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/20193-sebavan/_qt_ rel_eq__qt__qt__gt_@Sebavan_lt_/a_gt_ Thanks for the swift response but no. We_t_re using Typescript so having the type definitions is a must.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sebavan","Date":"2017-05-17T04:48:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tYep_co_ understood_co_ I ll try to push a new version end of the week if it works for you ?_lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"CodingMadeEasy","Date":"2017-05-17T05:09:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThe sooner the better but yes we can wait until the end of the week.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"CodingMadeEasy","Date":"2017-05-17T15:31:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/20193-sebavan/?do_eq_hovercard_qt_ data-mentionid_eq__qt_20193_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/20193-sebavan/_qt_ rel_eq__qt__qt__gt_@Sebavan_lt_/a_gt_ Even after publishing please don_t_t ignore the broader issue at hand. It_t_s imperative that we as developers have an easy way to access the nightlies. Having to wait months for an update doesn_t_t cut it when there are new features that we need.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sebavan","Date":"2017-05-17T17:00:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tYep_co_ for sure_co_ this is not what we are doing in BJS_co_ I ll update the deploy script to automatically publish from travis in the preview branch.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sebavan","Date":"2017-05-17T19:15:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe new version is available as 3.0.1-alpha\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe ll automate soon_co_ just a few more checks to do.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"CodingMadeEasy","Date":"2017-05-18T19:17:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThank you!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]