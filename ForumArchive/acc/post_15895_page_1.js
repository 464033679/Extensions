[{"Owner":"ancientholiday","Date":"2015-07-22T03:24:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I would like to animate my camera from current position to another pre-determined position._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Mattx264 posted the following function in 2014_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_According to Mattx264 function_co_ how does the script know where the end position is located?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Does toAlpha_co_ toBeta_co_ toRadius recieve a number?  If not_co_ how does the code know where the end value of these parameters are?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Can anyone demonstrate this code in the playground?  I dont understand how the end position of the radius_co_ alpha_co_ and beta are located in the script.  There is no variables declared about them._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks_co__lt_/p_gt__lt_p_gt_ah_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div style_eq__qt_margin_dd_0px 0px 0px 65px_sm_color_dd_rgb(90_co_90_co_90)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm_font-size_dd_13px_sm__qt__gt__lt_p style_eq__qt_font-size_dd_12px_sm_color_dd_rgb(89_co_89_co_89)_sm__qt__gt__lt_span style_eq__qt_font-size_dd_9px_sm_font-weight_dd_bold_sm_color_dd_rgb(255_co_255_co_255)_sm__qt__gt_BEST ANSWER_lt_/span_gt_ _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/user/7568-mattx264/_qt_ title_eq__qt__qt__gt_mattx264_lt_/a_gt__co_ _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/5738-arcrotatecamera-animation/#entry35206_qt__gt_23 April 2014 - 04_dd_20 AM_lt_/a_gt__lt_/p_gt__lt_p style_eq__qt_font-size_dd_12px_sm_color_dd_rgb(119_co_119_co_119)_sm__qt__gt_ _lt_/p_gt__lt_p_gt_Thank you @Deltakosh._lt_/p_gt__lt_p_gt_I wrote this function_co_ may be it will help somebody._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_var ArcAnimation _eq_ function (toAlpha_co_ toBeta_co_ toRadius_co_position) {_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_           _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            var animCamAlpha _eq_ new BABYLON.Animation(_qt_animCam_qt__co_ _qt_alpha_qt__co_ 30_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                                      BABYLON.Animation.ANIMATIONTYPE_FLOAT_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                                      BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE)_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_ _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            var keysAlpha _eq_ []_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            keysAlpha.push({_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                frame_dd_ 0_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                value_dd_ camera.alpha_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            })_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            keysAlpha.push({_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                frame_dd_ 100_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                value_dd_ toAlpha_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            })_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            var animCamBeta _eq_ new BABYLON.Animation(_qt_animCam_qt__co_ _qt_beta_qt__co_ 30_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                                     BABYLON.Animation.ANIMATIONTYPE_FLOAT_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                                     BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE)_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_ _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            var keysBeta _eq_ []_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            keysBeta.push({_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                frame_dd_ 0_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                value_dd_ camera.beta_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            })_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            keysBeta.push({_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                frame_dd_ 100_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                value_dd_ toBeta_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            })_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            var animCamRadius _eq_ new BABYLON.Animation(_qt_animCam_qt__co_ _qt_radius_qt__co_ 30_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                                    BABYLON.Animation.ANIMATIONTYPE_FLOAT_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                                    BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE)_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_ _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            var keysRadius _eq_ []_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            keysRadius.push({_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                frame_dd_ 0_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                value_dd_ camera.radius_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            })_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            keysRadius.push({_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                frame_dd_ 100_co__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_                value_dd_ toRadius_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            })_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            animCamAlpha.setKeys(keysAlpha)_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            animCamBeta.setKeys(keysBeta)_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            animCamRadius.setKeys(keysRadius)_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            camera.animations.push(animCamAlpha)_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            camera.animations.push(animCamBeta)_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            camera.animations.push(animCamRadius)_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            scene.beginAnimation(camera_co_ 0_co_ 100_co_ false_co_ 1_co_ function () {_lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_             _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_            })_sm__lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_ _lt_/div_gt__lt_div style_eq__qt_margin_dd_0px_sm__qt__gt_        }_lt_/div_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/5738-arcrotatecamera-animation/#entry35206_qt__gt__lt_span style_eq__qt_font-size_dd_9px_sm_font-weight_dd_bold_sm_color_dd_rgb(255_co_255_co_255)_sm__qt__gt_GO TO THE FULL POST _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/public/style_images/master/right_white_10px.png_qt_ alt_eq__qt_right_white_10px.png_qt__gt__lt_/span_gt__lt_/a_gt__lt_/div_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-07-22T06:39:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello_co_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This function is valid only for a camera which type is ArcRotateCamera. If you want to animate a FreeCamera (or another one)_co_ it won_t_t work._lt_/p_gt__lt_p_gt_Why ? Because alpha_co_ beta and radius are properties linked to the type ArcRotateCamera._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In its function_co_ Matt takes 4 parameters_dd_ the end value of alpha_co_ the end value of beta_co_ the end value of radius and position (which is not used actually)._lt_/p_gt__lt_p_gt_This block _dd_ _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var keysAlpha _eq_ []_sm_keysAlpha.push({  frame_dd_ 0_co_  value_dd_ camera.alpha})_sm_keysAlpha.push({  frame_dd_ 100_co_  value_dd_ toAlpha})_sm__lt_/pre_gt__lt_p_gt_is what determines the end value for the property _t_alpha_t_. You can see this block is repeated for properties beta and radius._lt_/p_gt__lt_p_gt_By creating an animation_co_ the system will start at the value given at frame 0_co_ and end at the value given at frame 100. In the meanwhile_co_ it will interpolate each value in this range. Everything is done automatically!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The first thing you need to check is the type of camera you are being using_dd_ is it a freeCamera_co_ an ArcRotate_co_ another one?_lt_/p_gt__lt_p_gt_Then_co_ find the property you wand to update_dd_ is it the camera position_co_ the camera target_co_ the camera rotation_co_ another one ?_lt_/p_gt__lt_p_gt_Finally_co_ create an animation (it is very well described in the playground or in the documentation)_co_ and _lt_strong_gt_party on!_lt_/strong_gt_ (as Wingnut use to say _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ )_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Good luck !_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ancientholiday","Date":"2015-07-22T11:31:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_89994_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_15895_qt_ data-ipsquote-username_eq__qt_Temechon_qt_ data-cite_eq__qt_Temechon_qt_ data-ipsquote-timestamp_eq__qt_1437547175_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Hello_co_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This function is valid only for a camera which type is ArcRotateCamera. If you want to animate a FreeCamera (or another one)_co_ it won_t_t work._lt_/p_gt__lt_p_gt_Why ? Because alpha_co_ beta and radius are properties linked to the type ArcRotateCamera._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In its function_co_ Matt takes 4 parameters_dd_ the end value of alpha_co_ the end value of beta_co_ the end value of radius and position (which is not used actually)._lt_/p_gt__lt_p_gt_This block _dd_ _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var keysAlpha _eq_ []_sm_keysAlpha.push({  frame_dd_ 0_co_  value_dd_ camera.alpha})_sm_keysAlpha.push({  frame_dd_ 100_co_  value_dd_ toAlpha})_sm__lt_/pre_gt__lt_p_gt_is what determines the end value for the property _t_alpha_t_. You can see this block is repeated for properties beta and radiusa_lt_/p_gt__lt_p_gt_By creating an animation_co_ the system will start at the value given at frame 0_co_ and end at the value given at frame 100. In the meanwndhile_co_ it will interpolate each value in this range. Everything is done automatically!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The first thing you need to check is the type of camera you are being using_dd_ is it a freeCamera_co_ an ArcRotate_co_ another one?_lt_/p_gt__lt_p_gt_Then_co_ find the property you wand to update_dd_ is it the camera position_co_ the camera target_co_ the camera rotation_co_ another one ?_lt_/p_gt__lt_p_gt_Finally_co_ create an animation (it is very well described in the playground or in the documentation)_co_ and _lt_strong_gt_party on!_lt_/strong_gt_ (as Wingnut use to say _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ )_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Good luck !_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Hello_co_  I understand that this is for an ArcRotate Camera.  however_co_ what is the numeric value of toAlpha? How is that being determined?  by a mouseclick or something else?  is toAlpha a keyword in Babylonsystem?  the key frame will start at camera.beta_co_ which is the current value of the the camera_t_s beta in the script_co_  and it ends at _qt_toBeta._qt_  What is the numeric value of toBeta if it is not pre-defined in a variable?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-07-22T11:39:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_They are defined in the function prototype you just wrote in your post_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var ArcAnimation _eq_ function (toAlpha_co_ toBeta_co_ toRadius_co_position)_lt_/pre_gt__lt_p_gt_This function can be called like this_dd_ ArcAnimation(Math.PI/2_co_ Math.PI_co_ 100)_lt_/p_gt__lt_p_gt_In this case_co_ toAlpha will take the value of Math.PI/2_co_ toBeta will have Math.PI_co_ and toRadius will be 100._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-07-22T22:16:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi guys.  Ancientholiday... just in case you want _qt_real_qt_ numbers...  generally...  arcRotate cams are created... aimed 0 .alpha radians by default.  This places them looking -x.  If you _lt_strike_gt_turn_lt_/strike_gt_ orbit the cam.alpha -Math.PI/2 (approx. -1.57 radians or -90 degrees)_co_ it is now aimed +z.  Use a _lt_strong_gt_+_lt_/strong_gt_Math.PI/2 .alpha orbit_co_ and the cam would be aiming -z._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Let_t_s go back to 0 radians alpha again (camera aiming -x default).  If you orbited the alpha either -Math.PI or +Math.PI... it would orbit -/+ 180 degrees or about 3.14 radians.  The camera would face +x_co_ opposite of the default direction.  So_co_ animating from 0 to Math.PI*2 ... would take you 360 degrees (6.28 radians) in a complete orbit around the target point._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Loosely speaking... 45 degree angles _eq_ Math.PI/4 _eq_ .707 radians._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I say all this just in case you were looking for genuine numeric values to play-with.  Be well_co_ good luck._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-07-23T14:05:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ AncientHoliday... let_t_s take a look at this...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#CYXXO_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#CYXXO_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLines 24-77... there is the _lt_em_gt__lt_em_gt_ArcAnimation_lt_/em_gt__lt_/em_gt_ function.  It is a _qt_tool_qt_.  A reusable tool.  So_co_ no camera numbers/values are hard-set in that function.  YOU must _lt_strong_gt_send it 4 variables or values yourself_lt_/strong_gt_ (line 79)... and then the tool will animate all the variables FOR you_co_ using interpolation for _t_tweening_t_ (determining the values for all the frames that happen be_lt_strong_gt_tween_lt_/strong_gt_ 0 and 100.)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLet_t_s look some more.  Line 6...\n_lt_/p_gt_\n\n_lt_pre class_eq__qt_ipsCode prettyprint prettyprinted_qt__gt_\n_lt_span class_eq__qt_kwd_qt__gt_var_lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ camera _lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__eq__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ _lt_/span_gt__lt_span class_eq__qt_kwd_qt__gt_new_lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ BABYLON_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span_gt_ArcRotateCamera_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_(_lt_/span_gt__lt_span class_eq__qt_str_qt__gt__qt_Camera_qt__lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__co__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ _lt_/span_gt__lt_span class_eq__qt_lit_qt__gt_0_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__co__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ _lt_/span_gt__lt_span class_eq__qt_lit_qt__gt_1.5_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__co__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ _lt_/span_gt__lt_span class_eq__qt_lit_qt__gt_50_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__co__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ BABYLON_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span_gt_Vector3_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span_gt_Zero_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_()_co__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ scene_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_)_sm__lt_/span_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tIn this camera creation line_co_ _lt_em_gt_.alpha_lt_/em_gt_ is set to 0_co_ _lt_em_gt_.beta_lt_/em_gt_ is set to 1.5_co_ and _lt_em_gt_.radius_lt_/em_gt_ is set to 50.  The _lt_em_gt__lt_em_gt_BABYLON.Vector3.Zero()_lt_/em_gt__lt_/em_gt_ is the TARGET for the camera_co_ NOT the camera.position. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tPosition is not important_co_ yet. ArcRotateCams and many other scene items... are created at position 0_co_0_co_0_co_ sometimes called _t_origin_t_.  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut remember that I said (in the last post) that ArcRotateCams begin... aiming -x_co_ by default?  Well_co_ our radius is set at 50_co_ which means the camera is backed-away from the target... a distance of 50 units.  Thus_co_ I know that the camera is positioned 50 units +x away-from its beginning position 0_co_ 0_co_ 0 (aiming -x). \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ by deduction_co_ I know that the camera is currently positioned at (50_co_ 0_co_ 0)... and still aiming -x.  The camera backed away from 0_co_ 0_co_ 0...  50 units +x (backwards).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOk_co_ it_t_s time to CALL our _lt_em_gt_ArcAnimation  _lt_/em_gt_tool function.  When you CALL the function... _lt_strong_gt__lt_u_gt_THAT is when you put-in the REAL numbers_lt_/u_gt__lt_/strong_gt_.  Let_t_s look carefully at line 79.\n_lt_/p_gt_\n\n_lt_pre class_eq__qt_ipsCode prettyprint prettyprinted_qt__gt_\n_lt_span_gt_ArcAnimation_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_(_lt_/span_gt__lt_span_gt_Math_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_PI _lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_*_lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ _lt_/span_gt__lt_span class_eq__qt_lit_qt__gt_2_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__co__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ _lt_/span_gt__lt_span class_eq__qt_lit_qt__gt_1.5_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__co__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ _lt_/span_gt__lt_span class_eq__qt_lit_qt__gt_50_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__co__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ camera_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_position_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_)_sm__lt_/span_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tMath.PI * 2_co_     1.5_co_            50_co_          camera.position\n_lt_/p_gt_\n\n_lt_p_gt_\n\t (toAlpha)     (toBeta)   (toRadius)        (position)        (position is not named toPosition because camera position is _lt_strong_gt_not_lt_/strong_gt_ animated in this func_co_ but easily COULD be.)\n_lt_/p_gt_\n\n_lt_p_gt_\n\ttoAlpha_dd_  Math.PI * 2 _eq_ 6.28 radians (approx).  Since the camera_t_s .alpha is currently set to 0 (in line 6)_co_ the .alpha will animate from 0 radians_co_ to 6.28 radians  -  a complete 360 degree circle around the target.  It does just that.\n_lt_/p_gt_\n\n_lt_p_gt_\n\ttoBeta_dd_  We want to animate from the current .beta... to the toBeta... 1.5 radians.  But line 6 has set the current .beta to 1.5 when the camera was created.  So the beta animation will go from 1.5 radians...  to 1.5 radians.  In other words_co_ it won_t_t animate at all.  In line 79_co_ if you change the 1.5 to be 0.8_co_ then the camera would raise... as it did its 100-frame_co_ 360-degree .alpha animation.  Two camera parameters animating at once.  Wow!  360 degrees alpha_co_ and about 10 degrees of camera tilt/height change.\n_lt_/p_gt_\n\n_lt_p_gt_\n\ttoRadius_dd_  Same situation as toBeta.  The camera was created with a radius of 50 in line 6.  In line 79_co_ _lt_em_gt_you_lt_/em_gt_ order the .radius to animate to 50 (across 100 frames).  The camera will not change radius at all... no animation for .radius.  But if you changed the 50 in line 79... to be.... oh... 30... then the camera would decrease its .radius from 50 to 30 in 100 frames.  _lt_u_gt_THREE_lt_/u_gt_ camera parameters animating at once.  Smokin_t_!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tShould we try a 3-parameter/value animation in a playground... just to see it?  I think so.  Here we go_co_ spinning alpha in the opposite direction this time_co_ and no use of Math.PI crap.  All radians.  We could use all degrees_co_ too_co_ but you_t_d need to use BABYLON_t_s handy degreesToRadians convertor.  It_t_s better to learn/use radians and derivations of PI.  Ok_co_ here comes our super animation_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#CYXXO%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#CYXXO#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNice_co_ huh?  Let_t_s look at our cam creation line and compare to our tool-caller line  (line 6 and line 79)...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tline 6_dd_    var camera _eq_ new BABYLON.ArcRotateCamera(_qt_Camera_qt__co_  0_co_      1.5_co_     50_co_    ...)_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tline 79_dd_                                                         ArcAnimation(               -6.28_co_    0.8_co_     30_co_    ...)_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYep_co_ we told our ArcAnimation tool to animate .alpha from 0 to -6.28 radians_co_ and we told it to animate .beta from 1.5 to 0.8 radians_co_ and we told it to animate .radius from 50 units to 30 units of distance. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ll stop talking now_co_ and you can take a moment to study this stuff.  I bet you understand it all_co_ now_co_ but let us know if there is still confusion.  I_t_ve been where you are... and it is easy to make this more complicated than it really is.  Hopefully_co_ with these examples_co_ and some more tests and experiments_co_ you_t_ll soon be a pro arcRotateCam animator.  Share your joys and discoveries with us_co_ if you please.  Thanks!  Good luck_co_ party on!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ancientholiday","Date":"2015-07-28T09:48:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYes_co_ wingnut_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tthat is exactly what I meant.  How to pass the numbers to the function.  It is moreso a basic programming question.  Anytime you call the function and pass the values to it_co_ then you will have the program run the function.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthat is what you did in line 79.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks very much for the example.  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAH\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]