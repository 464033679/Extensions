[{"Owner":"Dinkelborg","Date":"2015-01-14T15:43:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m trying to write a foliage shader of some sort_co__lt_/p_gt__lt_p_gt_but I_t_m completely new to GLSL and would need some help understanding how to achieve the desired behavior. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For now all the _t_plants_t_ should do is bend away from the player. The player is simplified to a sphere and for each vertex I do the following_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_font-size_dd_14px_sm__qt__gt__lt_u_gt_Vertex Shader Code_lt_/u_gt__lt_/span_gt__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_precision highp float_sm_// Attributesattribute vec3 position_sm_attribute vec3 normal_sm_// Uniformsuniform mat4 worldViewProjection_sm_uniform mat4 world_sm_uniform mat4 view_sm_uniform mat4 projection_sm_uniform vec3 playerPos_sm_// Varyingvarying vec3 vNormal_sm_void main(void) {vec4 v _eq_ world * vec4(position_co_1)_sm_vec4 d _eq_ v - vec4(playerPos_co_1)_sm_float l _eq_ length(d)_sm_if (l &lt_sm__eq_ 1.0){v _eq_ v*(normalize(-d))_sm_}gl_Position _eq_ projection * view * v_sm_vNormal _eq_ normal_sm_}_lt_/pre_gt__lt_p_gt_So what I do is to get the vertex_t_s world-position by multiplying it with the world matrix_co_ then I get the distance-vector between the vertex-position and the player position and then measure the distance by getting its length. Now_co_ if the distance length is smaller than 1 I am trying to move the vector one step into the opposite direction of the distance-vector... _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So for now I was expecting the Grass / Bamboo to kind of bend away from the player by building a curve or so because the most up vertices might be further away than 1 and so they would stay where they are_co_ that would have been fine for now and I could have searched a way to fix it later_co_ but I guess I_t_m calculating the _t_moving_t_ of the vertex wrong here is the scene as it is right now_dd_ _lt_a href_eq__qt_http_dd_//analogmadness.com/Demo/FoliageShader/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//analogmadness.com/Demo/FoliageShader/_lt_/a_gt__lt_br_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_01_2015/post-11235-0-71060700-1421245819.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_01_2015/post-11235-0-71060700-1421245819_thumb.png_qt_ data-fileid_eq__qt_3451_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-11235-0-71060700-1421245819_thumb.p_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dinkelborg","Date":"2015-01-15T13:30:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I think that the step calculation _qt__lt_span_gt_v _lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(102_co_102_co_0)_sm__qt__gt__eq__lt_/span_gt__lt_span_gt_ v_lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(102_co_102_co_0)_sm__qt__gt_*(_lt_/span_gt__lt_span_gt_normalize_lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(102_co_102_co_0)_sm__qt__gt_(-_lt_/span_gt__lt_span_gt_d_lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(102_co_102_co_0)_sm__qt__gt_))_sm__qt_ is where the problem is based_co_ at the beginning I_t_m converting v into world-space_co_ could it be that I have to convert d into another space too?_lt_br_gt__lt_br_gt_And in what _t_space_t_ is the uniform playerPos handed over? In my Update function I set the value to player.position_co_ where player is the sphere that is moving in the scene._lt_/span_gt__lt_br_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-01-15T13:46:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co__lt_br_gt_ _lt_br_gt_Your shader seems to work outside of the _qt_l &lt_sm_ 1.0_qt_ special case_co_ so I agree with you_dd_ there_t_s probably something wrong with the modification of v._lt_br_gt_ _lt_br_gt_Considering what you_t_re trying to achieve_co_ a vector multiplication (v _eq_ v*d) is not a good idea._lt_br_gt_What you need is a vector_lt_strong_gt_ addition_lt_/strong_gt_._lt_br_gt_ _lt_br_gt__lt_em_gt_Note_dd_ I_t_ll call the player radius _t_R_t__co_ to avoid misunderstanding. In your example_co_ R_eq_1_sm__lt_/em_gt__lt_br_gt_ _lt_br_gt_d is the vector going from the player to the current vertex. This is the direction in which the current vertex must be moved. Also_co_ if length(d) &lt_sm_ R_co_ we want to move the current vertex further by an amount of R-length(d)._lt_br_gt_ _lt_br_gt_You could try this_co_ see if it works_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint lang-auto_qt__gt_float R _eq_ 1.0_sm_if (l &lt_sm__eq_ R){v +_eq_ normalize(d)*(R-l)_sm_}_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dinkelborg","Date":"2015-01-15T15:02:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_YES! This is perfect! Thanks a whole lot! _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-01-15T15:08:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_No worries_co_ happy to help _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]