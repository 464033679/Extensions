[{"Owner":"noxoc","Date":"2016-09-05T22:36:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have to add some interactive 3d things to an existing project and I stumbled over Babylon and I_t_ll give it a try.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe exisiting project is a small React App and I_t_m using Webpack. However it seems like Babylon/Cannon are not (yet) compatible with Webpack. Well… babylon works fine for itself. But I want to add physics using cannon. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tHas anyone have experience with that? \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"noxoc","Date":"2016-09-05T23:55:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI ended up using this in the webpack.config.js and the prebuilt javascript files_dd_ \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_externals_dd_ {\n  _t_BABYLON_t__dd_ _t_BABYLON_t_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tWorks for now. However_dd_ are the best practices how to split up files etc? I currently have my objects set up like this_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import BABYLON_co_ {Mesh} from _t_BABYLON_t__sm_\n\nexport default class Ball {\n    constructor(name_co_ scene) {\n        const mesh _eq_ this.mesh _eq_ new Mesh.CreateSphere(name_co_ 8_co_ 2_co_ scene)_sm_\n        mesh.applyGravity _eq_ true_sm_\n        mesh.checkCollisions _eq_ true_sm_\n        mesh.physicsImpostor _eq_ new BABYLON.PhysicsImpostor(mesh_co_ BABYLON.PhysicsImpostor.SphereImpostor_co_ { mass_dd_ 1_co_ restitution_dd_ 0.5 }_co_ scene)_sm_\n    }\n\n    update() {\n        this.mesh.rotate.x +_eq_ 0.1_sm_\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]