[{"Owner":"Rasmus","Date":"2014-10-12T11:04:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Is there an example on how to organize bigger projects in multiple files and classes?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"joshcamas","Date":"2014-10-12T20:32:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This seems like more of a javascript question._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Multiple files is easy - just put them in multiple files_co_ and _qt_import_qt_ them in the HTML file just like any other javascript file._lt_/p_gt__lt_p_gt_For classes_co_ (Objects in javascript)_co_ go here_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This stuff is quite confusing for a while in javascript. _dd_/_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"OttoRobba","Date":"2014-10-12T21:54:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_EDIT_dd_ Aw_co_ sorry_co_ I thought it was a Phaser question. I_t_m not 100% sure of how BabylonJS works but it *should* be similar since it is a Javascript matter_co_ mostly._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Hey Rasmus_co_ I_t_ll try to be brief _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Working with multiple files is easy - like josh pointed out_co_ you just source them in your html_co_ like this_dd__lt_/p_gt__lt_p_gt__lt_img src_eq__qt_http_dd_//i.imgur.com/1ukehOO.png_qt_ alt_eq__qt_1ukehOO.png_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Working with multiple states is pretty easy in Phaser - not so sure about BabylonJS_co_ sorry _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As far as classes go_co_ I do pretty much what _lt_a href_eq__qt_http_dd_//toastedware.com/?p_eq_258_qt_ rel_eq__qt_external nofollow_qt__gt_ToastedWare taught in a tutorial_lt_/a_gt_. Here is how my folders look_dd__lt_/p_gt__lt_p_gt__lt_img src_eq__qt_http_dd_//i.imgur.com/PpEJ8ew.png_qt_ alt_eq__qt_PpEJ8ew.png_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The way the entities work is simple_co_ below is an example_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_Background _eq_ function(game) {    this.game _eq_ game_sm_}_sm_Background.prototype _eq_ {    create_dd_ function() {        this.background _eq_ game.add.tileSprite(0_co_ 0_co_ game.world.width_co_ 1363_co_ _t_background_t_)_sm_    }_co_    update_dd_ function() {        this.background.tilePosition.y +_eq_ player.sprite.speed / 5_sm_    }_co_}_sm__lt_/pre_gt__lt_p_gt_Then on the play.js file_co_ I do this_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var playState _eq_ {\tcreate_dd_ function() {\t\tbackground _eq_ new Background(game)_sm_\t\tbackground.create()_sm_\t}_co_\tupdate_dd_ function() {\t\tbackground.update()_sm_        }_co_}_sm__lt_/pre_gt__lt_p_gt_So far this has worked really well and has helped me get organized. No more getting lost looking for functions inside a file!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I hope this helps _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"joshcamas","Date":"2014-10-12T23:30:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Even though OttoRatta wrote his answer for phaser_co_ everything is still basically the same for any project in javascript_co_ and for games specifically. Good answer Otto. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"lukaszwojciak","Date":"2014-10-13T09:03:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I like this _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ _lt_br_gt__lt_a href_eq__qt_https_dd_//github.com/wojciak/dustPlaygroundApp_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/wojciak/dustPlaygroundApp_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-10-13T19:13:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The order of listing script files can be important.  Once you know what the correct order is you might want to make a little .bat or .sh to codify / document it.  If you want to put it in multiple html files_co_ having one consolidated .js may someday save you a lot of pain when things do not work on all your .html_t_s._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_in a build.sh_dd__lt_/p_gt__lt_p_gt_cat first.js second.js &gt_sm_combined.js_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_in a build.bat I think you use copy instead of cat &amp_sm_ the last arg is the output file_co_ so no need to redirect._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]