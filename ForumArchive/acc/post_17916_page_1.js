[{"Owner":"RaananW","Date":"2015-10-16T12:06:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi All_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I know this is due to the will to stay backwards-compatible_co_ but this code - _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts#L1424-L1455_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts#L1424-L1455_lt_/a_gt_ is totally not readable._lt_/p_gt__lt_p_gt_Lines like this_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_if (scene _eq__eq__eq_ undefined || !(scene instanceof Scene)) {   if (scene !_eq__eq_ undefined) {       sideOrientation _eq_ updatable || Mesh.DEFAULTSIDE_sm_       updatable _eq_ scene_sm_   }   scene _eq_ &lt_sm_Scene&gt_sm_subdivisions_sm_   subdivisions _eq_ 1_sm_}_lt_/pre_gt__lt_p_gt_are very problematic. For example_dd__lt_/p_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_scene _eq_ &lt_sm_Scene&gt_sm_subdivisions_sm__lt_/strong_gt_ ? Casing a number to a scene variable_co_ and then setting the subdivisions to a default 1._lt_/li_gt__lt_li_gt_using instanceof in Javascript (for example _dd_ _lt_strong_gt_!(scene instanceof Scene))_lt_/strong_gt_ is not the best possible solution. Sometimes instanceof is a must_co_ but JS is not a traditional OO language_co_ instanceof is NOT what you expect it to be._lt_/li_gt__lt_/ul_gt__lt_p_gt_Is it really a must to stay so backwards-compatible ? JS doesn_t_t have the possibility to overload a function (and the way it is done in TypeScript is a hack_co_ since you need to eventually cast some number variable to a scene variable due to arguments-handling)._lt_/p_gt__lt_p_gt_There is also a different way of doing that (using the arguments variable? using abstract variable names?)_co_ which will be readable (well_co_ a bit more than the current version). The question is - it is so important to leave everything as it was?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This has nothing to do with the one who wrote the code (Jerome? DK?) - it had to be implemented this way_co_ this is about the attempt to satisfy everyone _dd_-) I understand why this was done the way it was_co_ I just think it is problematic... Hard to debug_co_ hard to read_co_ hard to develop further. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-10-16T13:07:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I agree 200 %_lt_/p_gt__lt_p_gt_Its uglissimo. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wacko.png_qt_ alt_eq__qt__dd_wacko_dd__qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This part of code is a old backward compatibility from DK (adding the optional _lt_em_gt_subdivisions_lt_/em_gt_ parameter before the required _lt_em_gt_scene_lt_/em_gt_ parameter)_co_ that I over-loaded to ensure a new backward compatibility (adding the _lt_em_gt_{options}_lt_/em_gt_ parameter)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I initially got rid of this old backward compatibility by making  the _lt_em_gt_subdivisions_lt_/em_gt_ parameter then _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/16911-strange-behaviour-of-the-arccamera/?p_eq_98382_qt__gt__lt_u_gt_required_lt_/u_gt_ and no longer optional_lt_/a_gt_. This leaded to the same consistent code as for other _lt_em_gt_CreateXXX()_lt_/em_gt_ methods with both signatures _dd_ list of parameters or {options}._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But as you read in the linked topic_co_ the need for old-backward compatibility was expressed. So_co_ it is now necessary to have a double check on the signature and on what is optional or not... so unreadable code _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ and quite un-maintainable imho. I hate it._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Fortunately_co_ it_t_s only in _lt_em_gt_CreateCylinder()._lt_/em_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So only two ways _dd__lt_/p_gt__lt_ul_gt__lt_li_gt_convince everyone that _lt_em_gt_subdivisions_lt_/em_gt_ should become required in the parameter list signature (good luck)_lt_/li_gt__lt_li_gt_find any other elegant hack (in TS !) to recode this in a better readable way (good luck also _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ )_lt_/li_gt__lt_/ul_gt__lt_p_gt_I opted for the first choice because it was the lightest in my opinion and the change was quite minor _dd_ not full retro-compat_co_ but really little impact._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But I definitely agree with you._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"reddozen","Date":"2015-10-16T13:14:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_At some point the engine has to make the decision to break backwords compatibility for certain features if better methods of coding would not allow for it. As you said jerome_co_ the impact of this would be minimal I would think._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-16T13:24:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_It is not only the cylinder._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts#L1379_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts#L1379_lt_/a_gt_ - typeof options should never be number... _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts#L1398_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts#L1398_lt_/a_gt_ - instanceof scene... _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts#L1465_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts#L1465_lt_/a_gt_ - this is very confusing. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I can keep on searching _dd_-)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-10-16T13:36:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yep_lt_/p_gt__lt_p_gt_On every other _lt_em_gt_CreateXXX()_lt_/em_gt__co_ there is the double signature check but it_t_s more readable than the triple-optional check for the Cylinder._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As far as I read about TS signature overloading_co_ there_t_s no way to do differently._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I suggested once  _dd__lt_/p_gt__lt_ul_gt__lt_li_gt_to factorize the logic (the code dealing with the mesh geometry)_co_ and to call it_co_ say_co_ AbstractCylinderBuilder() for instance_lt_/li_gt__lt_li_gt_to provide two different public functions to create the mesh_co_ example _dd_ _lt_em_gt_CreateCylinder(listOfParameter)_lt_/em_gt_ - so nothing changes_co_ no overloading - and_lt_em_gt_ BuildCylinder({options})_lt_/em_gt__co_ or any more pertinent name_co_ each function calling the same AbstractBuilder with their own parameters._lt_/li_gt__lt_/ul_gt__lt_p_gt_but it increases the number of functions (not accepted) ... although the _lt_em_gt_BuildCylinder(_lt_/em_gt_) function would probably then slowly become the final one to be used because it is does the same than _lt_em_gt_CreateCylinder()_lt_/em_gt_ but it is extensible_co_ so further need to re-change its signature to extend its features._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"monkeyface","Date":"2015-10-16T15:09:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Personally I don_t_t see the need for Babylon to be that backwards compatible..._lt_/p_gt__lt_p_gt_Most games/demos coded against the old versions of Babylon will be able to continue to use those for as long as they need. Any new apps can benefit from better performance_co_ features and structure in the newer versions._lt_/p_gt__lt_p_gt_The only case where it_t_s useful is where people have ongoing projects that they_t_re still working on or maintaining_co_ but I think almost all of us in that situation are generally willing to do a little fixing up here and there in order to get the benefits of the latest. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think the importance should be placed on making sure that breaking changes are well documented and the fixes are explained with good quality examples_co_ rather than avoiding from making them at all._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-16T15:38:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m definitely the guy who wants the backward compatibility. This is something really important for people reading blogs_co_ comments or forums about babylon.js. We have NO WAY to guarantee that all the code out there will be updated if we break the compatibility. This will then lead to frustration for any new comers who just want to learn babylon.js. And we ALL know that no one reads the fucking manual._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But I_t_m also really concerned by the complexity induced by the TS overloads and I dislike it._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So this is what I suggest_dd_ let_t_s revert signatures to old version and add a new meshBuilder.ts which will be a static class providing all new signatures. I worked a lot recently to reduce the file size of babylon.js so we have more room to add files now _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What do you think ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-16T15:49:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok let_t_s see where this goes _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I created the meshBuilder and updated the createBox_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.meshBuilder.ts_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.meshBuilder.ts_lt_/a_gt__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts#L1374_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.ts#L1374_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think this is FAR better! thank you Raanan for starting this thread and thank you Jerome for the great idea_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-10-16T16:01:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_It seems really clear.. as for the user as for the coder_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Just wasted so much time to implement these f%*$%king overloaded signatures ! grrrr_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-10-16T16:02:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_How about a 2_co_ 3_co_ or N release rule?  Do whatever it takes to avert breaking in the release that introduced the change_co_ &amp_sm_ add a depreciation message including the version # it was changed in &amp_sm_ the version it will break in.  It is crucial that users not taking advantage of new features not be forced to make changes_co_ and then not be able go back because of instability later discovered._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Question is also_co_ does anyone ever display the browser console?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I recently depreciated Mesh.updateVerticesDataDirectly (I am probably the only user)_co_ did not say when it will die though.  Saw that an old setVerticesData arg order change message was still there from like 1.3._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-10-16T16:11:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_101163_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_17916_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt_ data-cite_eq__qt_JCPalmer_qt_ data-ipsquote-timestamp_eq__qt_1445011324_qt__gt__lt_div_gt__lt_p_gt__lt_/p_gt__lt_div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I recently depreciated Mesh.updateVerticesDataDirectly (I am probably the only user)_co_ did not say when it will die though.  Saw that an old setVerticesData arg order change message was still there from like 1.3._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Some doc somewhere about how to replace it ? I justly wanted to use it to improve the SPS later_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-10-16T16:46:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Basically_co_ setVerticesData() &amp_sm_ updateVerticesData() can now be passed a number[] or Float32Array.  If it is passed a Float32Array_co_ the throwaway Float32Array is never created for transmission to the GPU.  It is also now saved in the VertexBuffer class in whatever format you passed_co_ in case you did not save the reference.  You can use the same one over and over.  They hold the values from the last update.  This accomplishes what updateVerticesDataDirectly() was for._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_One trick I also added is to just same Float32Arrays used for CPU skinning_co_ by calling Mesh.setPositionsForCPUSkinning() &amp_sm_ Mesh.setNormalsForCPUSkinning().  These only do something the first time_co_ but return the arrays used for CPU skinning.  Just update those_co_ then pass them to updateVerticesData()._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you are actually performing CPU skinning_co_ do not do the updateVerticesData() call_co_ if you know for see that bones have also changed that frame.  Let Mesh.applySkeleton() do it for you later in the render process.  This means you can morph in a mesh with a skeleton_co_ where ever bone processing is performed._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You really need a high level of control to do both at the same mesh_co_ though._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-10-16T17:08:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_ok_co_ thank you_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-16T17:31:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I appreciate what you did on _lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_updateVerticesDataDirectly. I_t_m considering keeping this message for 1 major version. For instance the 1.3 warning was removed a few days ago_lt_/span_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-16T17:54:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I really like the MeshBuilder and the way it is now in the mesh. Now it is backwards compatible and looks really clean _dd_-)_lt_/p_gt__lt_p_gt_Sorry_co_ never meant to force more work on everyone_co_ I think the mesh class is already so big_co_ it is great to see it smaller _dd_-)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-16T17:59:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I can_t_t agree more_dd_)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_More shapes were moved_dd_ disc_co_ sphere_co_ lines_co_ ribbon_co_ dashed lines_co_ torus_co_ knot_co_ cylinder_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-10-16T18:20:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Just to know_co_ what_t_s the Babylon.core.js file? I tested and I got an error on the plugin physic Oimo._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-10-16T18:35:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_@dad72 _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/generals/Framework_versions#core-version-babyloncorejs-introduced-in-23_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/generals/Framework_versions#core-version-babyloncorejs-introduced-in-23_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_@DK_co_ Raanan _dd_ So MehsBuilder becomes the place to go_co_ right ?_lt_/p_gt__lt_p_gt_I guess this is where the upcoming things have then to be._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_btw_co_ I just had a look here _dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.meshBuilder.ts_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.meshBuilder.ts_lt_/a_gt__lt_/p_gt__lt_p_gt_it_t_s really clean now  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_div_gt_ _lt_/div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ll need to update the doc (next week)_co_ about the _lt_em_gt_CreateXXX()_lt_/em_gt_ functions with the _lt_em_gt_options_lt_/em_gt_ parameter also._lt_/p_gt__lt_p_gt_Some PG won_t_t work any longer (almost all mines only)_co_ but that doesn_t_t really matter. I_t_ll update the examples also._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Let me know_co_ dear users_co_ when a PG example link does_t_nt work._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-16T18:49:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok all shapes moved to MeshBuilder!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_@Jerome_dd_ yes this is the place to go now _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_. Thank you for updating the doc and your examples_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_One question_dd_ should we keep CreatePolyhedron in mesh now? this is a new function introduced in 2.3 and we are still in the alpha version so this kind of things can change. It is an open question actually_dd_ should we keep entry point in Mesh class even for new shapes that we can introduce in the future? I would say yes at least for the sake of logic _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-16T18:51:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_If all functions stay in the Mesh class for now_co_ I think the new one should be there as a reference as well. But for the sake of future support_co_ implement it in the MeshBuilder. When it is time to cleanup the mesh class completely_co_ this function can go away as well._lt_/p_gt__lt_p_gt_The documentation should direct to the mesh builder._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-10-16T18:53:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I suggest that every new (from 2.3) _lt_em_gt_CreateXXX()_lt_/em_gt_ is implemented directly and only in MeshBuilder... if it has only the _lt_em_gt_{options}_lt_/em_gt_ signature. This is the case for _lt_em_gt_CreatePolyhedron()_lt_/em_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The Mesh class could be the legacy class for the _lt_em_gt_CreateXXX(listOfParam)_lt_/em_gt_ methods and no longer grow._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_just my opinion_co_ as I didn_t_t intend to implement the future _lt_em_gt_CreateXXX()_lt_/em_gt_ methods with a list of parameters_co_ but only with an _lt_em_gt_options_lt_/em_gt_ object parameter_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-16T20:40:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The only problem is more for beginners who will find a discrepancy between mesh and meshbuilder._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I agree with Raanan here. Let_t_s just add a proxy in Mesh for now_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-10-17T05:08:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_ok_lt_/p_gt__lt_p_gt_I didn_t_t read the Mesh class so far_co_ I thought there was still some code creating the meshes inside_co_ but there are only references to MeshBuilder functions_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So I agree also  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt__qt_Creating stuff_qt_ code in MeshBuilder and light references (short list of parameters) in Mesh for future CreateXXX() methods. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-17T19:13:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_We_t_re good to go then gentlemen!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-10-18T12:25:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_So this is final_co_ right? Or are you guys still working on this? I think I found a bug_co_ or maybe I am misunderstanding something here. Playground_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2L5NQW_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2L5NQW_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I use the MeshBuilder to create parameter versions of boxes. For width (box2) and height (box1) it seems to work well_co_ but for length (box3) it somehow doesn_t_t. My fault or a bug? _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]