[{"Owner":"Hagop","Date":"2016-09-22T12:11:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tLet me start by stating that I have thousands of meshes to import into a scene.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSince the following  loop will not work because _lt_span style_eq__qt_font-size_dd_14px_sm__qt__gt__lt_strong_gt__lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_i_lt_/span_gt_ _lt_/strong_gt__lt_/span_gt_is incremented before the callback function of ImportMesh is complete\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_font-size_dd_12px_sm__qt__gt__lt_span style_eq__qt_color_dd_rgb(255_co_0_co_0)_sm__qt__gt_for (var i_dd__eq_0_sm_ i&lt_sm_ max_sm_i++)_lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_font-size_dd_12px_sm__qt__gt__lt_span style_eq__qt_color_dd_rgb(255_co_0_co_0)_sm__qt__gt_{_lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_font-size_dd_12px_sm__qt__gt__lt_span style_eq__qt_color_dd_rgb(255_co_0_co_0)_sm__qt__gt_BABYLON.SceneLoader.ImportMesh(_qt__qt__co_ _qt_products/_qt__co_ productBabylonName_co_ scene_co_ function (newMeshes) {})_sm__lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_font-size_dd_12px_sm__qt__gt__lt_span style_eq__qt_color_dd_rgb(255_co_0_co_0)_sm__qt__gt_newMeshes.position _eq_ new BABYLON.Vector3(x_co_y_co_z)_lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_font-size_dd_12px_sm__qt__gt__lt_span style_eq__qt_color_dd_rgb(255_co_0_co_0)_sm__qt__gt_}_lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI solved the problem by creating a recursive loop. Here  is my code\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_em_gt__lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_productLocationData _lt_/span_gt_(JSON format) _lt_/em_gt_&amp_sm__lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_ productCount  _lt_/span_gt_are retrieved from database using a AJAX-PHP-MySQL call\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_var Pindex_eq_0_sm__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_populateRack _lt_/span_gt_ ( _lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_productLocationData_lt_/span_gt_ _co_ _lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_productCount_co_Pindex_lt_/span_gt_ )_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_var populateRack _eq_ function(productLocationData_co_productCount_co_Pindex)_lt_br /_gt_\n\t            {_lt_br /_gt_\n\t                var popRackProdPositionX _eq_ parseFloat(productLocationData.products[Pindex].positionX)_sm__lt_br /_gt_\n\t                var popRackProdPositionY _eq_ parseFloat(productLocationData.products[Pindex].positionY)_sm__lt_br /_gt_\n\t                var popRackProdPositionZ _eq_ parseFloat(productLocationData.products[Pindex].positionZ)_sm__lt_br /_gt_\n\t                var productBabylonName   _eq_ productLocationData.products[Pindex].productBabylonName_sm__lt_br /_gt_\n\t                                                                                _lt_br /_gt_\n\t                                        BABYLON.SceneLoader.ImportMesh(_qt__qt__co_ _qt_productshr/_qt__co_ productBabylonName_co_ scene_co_ function (newMeshes) {_lt_br /_gt_\n\t                                                     newMeshes[0].position _eq_ new BABYLON.Vector3(popRackProdPositionX_co_popRackProdPositionY_co_popRackProdPositionZ)_sm__lt_br /_gt_\n\t                                                                     _lt_br /_gt_\n\t                                        })_sm_//end import_lt_br /_gt_\n\t                         _lt_br /_gt_\n\t                Pindex +_eq_1_sm__lt_br /_gt_\n\t                if (Pindex &lt_sm_ productCount)_lt_br /_gt_\n\t                {_lt_br /_gt_\n\t                populateRack(productLocationData_co_productCount_co_Pindex)_sm_    _lt_br /_gt_\n\t                }_lt_/span_gt__lt_br /_gt_\n\t           _lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_ }_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEverything works fine. However_co_ if there is a simpler way please advise.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_HOWEVER my MAIN question is the following. Can I run many instances of the above code in parallel ? Reason being of course to have everything load faster. I know that javascript is a sinle-threaded language. Could HTML5 web workers be of help here? Or any other plug-in such as parallel.js ? Has anybody applied parallel processing to _lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_BABYLON.SceneLoader.ImportMesh_lt_/span_gt_. I am aware that Web Workers has been applied to collisions. Does anybody have an example?_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2016-09-22T12:37:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tJS is indeed single-threaded_co_ so the only way to parse multiple things in parallel would be workers. Workers don_t_t share memory with the main thread though_co_ so this would only be beneficial if parsing took significantly longer than copying the memory for the results back into the main thread. Have you measured where the time is being spent currently? If most of the time is being spent waiting for the files to load_co_ then I_t_d expect the browser already does those in parallel_co_ so code changes might not help much.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIncidentally_co_ you can fix your initial loop with closures_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_for (var i_eq_0_sm_ i&lt_sm_max_sm_ i++) {\n    var callback _eq_ makeHandler(i)\n    BABYLON.SceneLoader.ImportMesh(_qt__qt__co_ somePath_co_ someName_co_ scene_co_ callback)\n}\n\nfunction makeHandler(i) {\n    return function() {\n        console.log(_t_Value of i_dd_ _t__co_ i)\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Hagop","Date":"2016-09-22T13:10:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThanks Fenomas. Indeed most of the _qt_time_qt_ is spent_co_ waiting for one mesh to load before the other. So if i could run multiple  Import Meshes in parallel_co_ then I would save precious time. I would segment my database so that each ImportMesh command accesses  a different chunk of data. I will test the loop closure trick.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-09-22T13:29:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\twebworkers can handle this as well.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Hagop","Date":"2016-09-22T14:55:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tPryme8 Will the worker file be able to access the _lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt__lt_strong_gt_BABYLON _lt_/strong_gt__lt_/span_gt_engine and the _lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt__lt_strong_gt_scene _lt_/strong_gt__lt_/span_gt_which is a DOM element ?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-09-22T15:55:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tUnfortunately no and this is a shame _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Hagop","Date":"2016-09-22T17:10:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tBad news. Delkatosh do you have any suggestions on workaround?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-09-22T17:22:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis could be helpful_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/optimalisatie/webworker-preload_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/optimalisatie/webworker-preload_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-09-22T17:35:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tthis is a constraint from WebWorkers...Not sure how to work around it in a performant way _lt_img alt_eq__qt__dd_(_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ title_eq__qt__dd_(_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Hagop","Date":"2016-09-22T18:20:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tDelkatosh. I meant workaround solution on parallel import.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAdam. Interesting link. I will look into it\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-09-23T17:33:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tIt is impossible to do parallel things with JS as it is mono thread by essence\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-09-23T17:55:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_ve always understood that a webworker runs in its own thread.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt looks like that webworker-preload can be used to load images_co_ js_co_ css to cache in a separate thread.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is the example that webworker-preload was built from_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//gist.github.com/mseeley/9321422_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//gist.github.com/mseeley/9321422_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"X3MC2","Date":"2016-09-23T18:16:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_145015_qt_ data-ipsquote-contentid_eq__qt_25361_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1474546303_qt_ data-ipsquote-userid_eq__qt_15947_qt_ data-ipsquote-username_eq__qt_Hagop_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 9/22/2016 at 1_dd_11 PM_co_ Hagop said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tLet me start by stating that I have thousands of meshes to import into a scene\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tAre you really importing _lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt__lt_u_gt__lt_strong_gt_thousands_lt_/strong_gt__lt_/u_gt__lt_/span_gt_ of models in a single scene ? Because that is beyond imaginable_co_ I can_t_t imagine a web browser handling such a tedious task.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf I were you_co_ I would have included all the models in a single .babylon scene and loaded it using the SceneLoader.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Hagop","Date":"2016-09-23T19:47:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_h3_gt_\n\t_lt_span style_eq__qt_font-size_dd_14px_sm__qt__gt__lt_strong_gt_X3MC2_lt_/strong_gt__co_ _lt_strong_gt_yes indeed_co_ thousands. I am thinking as a workaround as you mentioned to group them is babylon files_co_ store in a database and load them with SceneLoader using the data_dd_ command. I will check if Web Worker could be helpful in this scenario as XMLHTTP is supported in Worker._lt_/strong_gt__lt_/span_gt_\n_lt_/h3_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Adam_lt_/strong_gt__co_ how would the webworker-preload example be applied _lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_BABYLON.SceneLoader.ImportMesh _lt_/span_gt_callback function_co_ which is the main reason for delay?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-09-23T20:06:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m not sure how it would work with .babylon files.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTowerOfBabel exports js files_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/tree/master/Exporters/Blender_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/tree/master/Exporters/Blender_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-09-23T21:38:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI linked to the wrong repo_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Extensions/tree/master/QueuedInterpolation/Blender_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Extensions/tree/master/QueuedInterpolation/Blender_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-09-30T06:17:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tYou would just use the webworker to load the file and then serlialize it to pass to the main thread. If your not familiar with webworkers then it might be tough. Also you could do a recursive function to load.  JavaScript is single thread so you would have to fake it or use webworkers.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-09-30T06:19:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tAlso why so many models? Why not package them into groups and load a smaller batch of files then just separate then on runtime.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-09-30T13:19:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_145922_qt_ data-ipsquote-contentid_eq__qt_25361_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1475216258_qt_ data-ipsquote-userid_eq__qt_19199_qt_ data-ipsquote-username_eq__qt_Pryme8_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t7 hours ago_co_ Pryme8 said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tYou would just use the webworker to load the file and then serlialize it to pass to the main thread.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIt doesn_t_t appear that you have to do that.  Once the webworker loads the file_co_ it is available from cache.  So as long as you go to access it after the webworker has loaded it_co_ you are good.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-09-30T14:05:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_09/webworker-preload.png.34b3335b1efd074a860b6acc1105962f.png_qt_ class_eq__qt_ipsAttachLink ipsAttachLink_image_qt__gt__lt_img data-fileid_eq__qt_9681_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_09/webworker-preload.png.34b3335b1efd074a860b6acc1105962f.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_webworker-preload.png_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-09-30T15:53:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI just did some tests with some large images and I didn_t_t see any performance gains using webworkers.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-09-30T16:26:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ I agree with Adam that textures &amp_sm_ audio are just as important as geometry.  If coming from Blender_co_ you can in-line (base64) textures.  Assuming you have gzip on your server_co_ only a slight increase in total transfer.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs far as using JIT (Tower of Babel in-line source code) as opposed to JSON (babylon file)_co_ I am not sure if dynamically added script files in a worker are going to be visible in main thread.  Might even vary by browser. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have a tool to generate in-line (base64) audio_co_ but have not committed it.  It is Javascript source code.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-10-01T15:46:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe way I was handeling passing objects with webworkers is always Serialize them _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4289-adam/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4289_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4289-adam/_qt_ rel_eq__qt__qt__gt_@adam_lt_/a_gt__co_ I have a recursive loop function that checks the the objects keys and then that_t_s keys keys and so on an so forth until it_t_s completely a string then you can pass what ever.   A lot of the confusion I had initally with web workers was what data actually needs to be passed back and forth_co_ if you just have the web worker grab the file and stringify it then pass that over to the main thread to an array for a file loading stack you should be good to go and get async loading of objects.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tand I guess you won_t_t see any performance increase really using webworkers to load a file because that_t_s not really considered a intensive operation.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2016-10-01T17:23:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m lost. Generally the point of webworker is to do things without blocking the UI thread. Loading assets doesn_t_t block the UI thread_co_ so what_t_s the benefit of doing it in a worker?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI mean - the browser has a network stack running underneath the JS VM that knows how to async load multiple assets in parallel. When you load assets from a webworker_co_ the requests go to the same network stack_co_ don_t_t they? All it does is add overhead for copying memory back and forth. Am I missing something?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t(Of course if you _lt_em_gt_parsed_lt_/em_gt_ the results in a worker_co_ that might have some benefit_co_ but that_t_s not what_t_s under discussion here_co_ right?)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-10-01T17:59:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThat_t_s what I was discussing I_t_m not sure what they are trying to do though.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]