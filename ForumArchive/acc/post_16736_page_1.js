[{"Owner":"Statics","Date":"2015-08-25T19:30:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co_ I_t_m trying to build a project to show internal forces in a truss._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_However_co_ after I click the box_co_ if I zoom in or change view points the lines will disappear as soon as all the cylinders are no longer shown._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#PDWUQ%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#PDWUQ#1_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m not quite sure why this is happening_co_ any ideas?_lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-08-26T00:59:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi Statics_co_ good to see you again._lt_/p_gt__lt_p_gt_   I think this is caused by a type of z-fighting between inactive/null Lines (Lines set to draw from 0_co_0_co_0 to 0_co_0_co_0)... and active Lines.  You actually have 10 Lines in the scene after the button press (box click).  You have 3 active Lines and 7 null-Lines.  Keep in mind that BJS adds mesh to the scene as soon as it is created.  So... lines 70-77 put five null-LINES into the scene... even if you DO _lt_u_gt_re_lt_/u_gt_-define their variable names in the executeCodeAction.  Those 5 null-Lines _lt_u_gt_are in the scene_lt_/u_gt__co_ even if they are set to draw from origin to origin (from 0_co_0_co_0 to 0_co_0_co_0)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It makes no sense that they are z-fighting because the null-lines are not in the same position as the active lines.  All z-fighting I have seen... was due to one mesh being atop another_co_ position-wise.  Your null-Lines are not positioned atop your active Lines (Or maybe the are!  See my retarded theory further below).  All in all_co_ removing the null-Lines seems to have improved things._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#PDWUQ%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#PDWUQ#2_lt_/a_gt_  -  Here I have remarked-out the code-lines 70-77_co_ and it seems to be working much better.  Now your box click produces 5 Lines_co_ 3 are positioned and 2 are null.  Generally speaking_co_ I would avoid making null Lines (Lines between 0_co_0_co_0 and 0_co_0_co_0).  They seem to be getting in the way of the active Lines._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Speaking-of _qt_getting in the way_qt__co_ here is a theory.  ALL Lines... are probably positioned at 0_co_0_co_0... no matter where they stride FROM/TO.  They probably use vertexData to set the positioning of the Line.  This same-positioning could cause a z-fighting phenomena_co_ regarding null-Lines.  _lt_strong_gt_But_lt_/strong_gt__co_ _lt_strong_gt_more likely_lt_/strong_gt__co_ there is an issue with depthRendering_co_ here.  The null-Lines are actually blocking the active Lines... from view.  No z-fighting.  Actually_co_ z-_lt_u_gt_ordering_lt_/u_gt_.  The world famous hidden line algorithm (determining what is visible in a scene and what is hidden)... has come to haunt you.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Avoid null-Lines is my advice.  Hope this helps.  If not_co_ we_t_ll keep experimenting and talking about it... because you made us this cool playground where we could easily see the issue.  Well done.  You have a good looking truss_co_ an interesting subject-matter_co_ and a fine start to your structural stress visualizer.  Keep us posted._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Statics","Date":"2015-08-26T13:17:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks for the help_co_ and for the nice comments._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m going to continue experimenting with this today and hopefully complete it. I_t_ll keep in mind what you said about null-Lines and I_t_ll let you know how everything goes._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I may just predefine the lines and have them change visibility like I do for all of the trusses_co_ unfortunately this will just mean more lines of code_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Statics","Date":"2015-08-26T14:34:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_here is the finished product_co_ a bit more lines of code than I wanted_co_ but there are some ways I can slim it down if I want._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#PDWUQ%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#PDWUQ#4_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]