[{"Owner":"valepu","Date":"2016-05-27T20:31:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo get the angle between a mesh rotation (or better_co_ its _qt_facing_qt_) and the current camera facing on the y plane i am using this code_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_function getFacingAngle(camera_co_ mesh) {\n        var rotation _eq_ mesh.rotationQuaternion.normalize().toEulerAngles()_sm_\n\tvar cameraRot _eq_ ((camera.alpha * 180 / Math.PI)) % 360_sm_\n\tvar objectRot _eq_ ((rotation.y * 180 / Math.PI) + 180) % 360_sm_\n\n\tvar rotDiff _eq_ cameraRot - objectRot_sm_\n\tvar rounds _eq_ 360_sm_\n\tvar roundsI _eq_ 1_sm_\n\t//to avoid cases where rotDiff gets very high negative values\n\twhile (rotDiff + (rounds * roundsI) &lt_sm_ 0) {\n\t\troundsI++_sm_\n\t}\n\n\trounds _eq_ rounds * roundsI_sm_\n\treturn Math.ceil((rounds + (rotDiff)) % 360)_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhich i have extensively tested and it works_co_ i_t_m sure it can be optimized though!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs you may have noticed this works only with ArcRotateCameras since it uses the alpha value.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow would you generalize this to work with any kind of camera? Or even to get a vector of angles for every axis on the plane?_lt_br /_gt_\n\tIs there some way to get the camera type?_lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-05-28T13:02:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHeya _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/16238-valepu/?do_eq_hovercard_qt_ data-mentionid_eq__qt_16238_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/16238-valepu/_qt_ rel_eq__qt__qt__gt_@valepu_lt_/a_gt__co_ how_t_s it going?  I hope well.  Cool code_co_ well done.  I don_t_t have any juicy math/tech for you_co_ but there is one thing you COULD consider - parenting your camera to an invisible plane or box (a cam gizmo).  Then_co_ you have just one function to write and not so much camera type testing.  You need to calculate the angle between some _qt_forward_qt_ face on your camera gizmo... and whatever you are calling the _qt_front_qt_ of that torus knot.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tY-axis facing camera_co_ you say?  Direct overhead view of the mesh?  Or did I misunderstand that part?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAll in all_co_ I just wanted to remind you that all our cameras can be parented to an invisible plane or mesh_co_ and knowing that might help with future _qt_angling wrangling_qt_.  Others will comment soon_co_ I_t_m sure.  We might need some playground examples to test with_co_ so feel free to make us one_co_ val. (thx)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-05-29T18:55:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tto get the type of a camera just call camera. _lt_span style_eq__qt_color_dd_rgb(121_co_93_co_163)_sm_font-family_dd_Consolas_co_ _t_Liberation Mono_t__co_ Menlo_co_ Courier_co_ monospace_sm_font-size_dd_12px_sm_font-style_dd_normal_sm_font-variant_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_line-height_dd_16.8px_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_pre_sm_word-spacing_dd_0px_sm_float_dd_none_sm_background-color_dd_rgb(255_co_255_co_255)_sm__qt__gt_getTypeName_lt_/span_gt_ ()\n_lt_/p_gt_\n\n_lt_p_gt_\n\tfor targetCamera (like free or arcrotate)_co_ you can always get camera position and target and then deduce angle forward by doing a dot product with (0_co_ 0_co_ 1)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"valepu","Date":"2016-06-04T13:15:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks for your answers! And i am fine_co_ thanks for asking _lt_img alt_eq__qt__dd_P_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ title_eq__qt__dd_P_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tI swear i did not disappear_co_ but i didn_t_t have the time to test it yet_co_ i_t_m pretty sure attaching an object to the camera will work  by comparing their rotation vectors but i_t_m trying to make a generic library. So I wanted to know the most generic way to compare the rotation between a mesh and any kind of camera\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBy the way no it_t_s not overhead it_t_s in front actually_co_ the rotation is on the Y plane but the meshes are in front of the camera\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"valepu","Date":"2016-06-04T18:03:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tOn secound though_co_ the issue is actually more complicated than i first thought_co_ i_t_ll try and post some code soon(er or later _lt_img alt_eq__qt__dd_(_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ title_eq__qt__dd_(_qt_ width_eq__qt_20_qt_ /_gt_ very busy these days )\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"valepu","Date":"2016-06-07T21:49:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello again _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tLet me say sorry in advance for my noobishness_co_ my english and because i_t_m probably going to use the wrong terms to describe things...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI finally got time to explain my situation. I am making a library that changes a plane_t_s texture based on the difference between the camera rotation (alpha for ArcRotateCamera) and a mesh facing to make it look like it_t_s a 3d-ish image even though it_t_s a set of 2d sprites that _qt_rotates_qt_ together with the camera\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//mjzone.net/game/game.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//mjzone.net/game/game.html_lt_/a_gt_ (this is an early alpha done while experimenting with babylon_co_ i am heavily rewriting the code now) It uses _lt_a href_eq__qt_https_dd_//github.com/andyhall/babylon-atlas_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/andyhall/babylon-atlas_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ while i was using an ArcRotateCamera that had the character as target everything went fine because the vector between the mesh and the camera is the same that defines the camera facing_co_ so comparing the alpha value and the mesh rotation did the job . When i tested with a FreeCamera (comparing camera rotation and mesh rotation) i realized that it wouldn_t_t work because i need to get the angle between the mesh facing vector and the camera-mesh vector since a FreeCamera_co_ like the name suggests_co_ is free and can go whenever it wants to go _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt_ Checking this angle should be camera independant as long as i can get the vector between the camera and the mesh_co_ isn_t_t it?_lt_br /_gt_\n\tThe attached image should clarify what i mean\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ truth be told_co_ i suck at vectorial math and i am kinda clueless on what i have to do for this to work and i will really appreciate your help\n_lt_/p_gt_\n\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_06/camera.png.6cdea9879dcccb12851e3a85a8714d95.png_qt_ class_eq__qt_ipsAttachLink ipsAttachLink_image_qt__gt__lt_img data-fileid_eq__qt_8031_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_06/camera.png.6cdea9879dcccb12851e3a85a8714d95.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_camera.png_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-06-08T08:04:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIf you know the direction or leading vector of your camera (maybe with getTarget() )_co_ you could compute this angle with a dot product _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.4/Vector3#static-dot-left-right-rarr-number_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.4/Vector3#static-dot-left-right-rarr-number_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tsay_co_ in pseudo code _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tcamDirection _eq_ (camera.position - camera.getTarget).normalize()  // your green vector normalized\n_lt_/p_gt_\n\n_lt_p_gt_\n\tmeshDirectiion _eq_ (camera.position -mesh.position).normalize()      // your red vector normalized\n_lt_/p_gt_\n\n_lt_p_gt_\n\td _eq_ cos(angle) _eq_ dot(camDirection_co_ meshDirection)  _eq_&gt_sm_ angle _eq_ acos(d)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"valepu","Date":"2016-06-18T08:24:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_131646_qt_ data-ipsquote-contentid_eq__qt_22825_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1465373059_qt_ data-ipsquote-userid_eq__qt_5453_qt_ data-ipsquote-username_eq__qt_jerome_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 8/6/2016 at 10_dd_04 AM_co_ jerome said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tIf you know the direction or leading vector of your camera (maybe with getTarget() )_co_ you could compute this angle with a dot product _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.4/Vector3#static-dot-left-right-rarr-number_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.4/Vector3#static-dot-left-right-rarr-number_lt_/a_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tsay_co_ in pseudo code _dd_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tcamDirection _eq_ (camera.position - camera.getTarget).normalize()  // your green vector normalized\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tmeshDirectiion _eq_ (camera.position -mesh.position).normalize()      // your red vector normalized\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\td _eq_ cos(angle) _eq_ dot(camDirection_co_ meshDirection)  _eq_&gt_sm_ angle _eq_ acos(d)\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tHi again _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tI finally managed to work on this and your answer was very enlightening. I didn_t_t really need the green vector_co_ that was just for visual. What i needed was the angle of the red vector on the X axis (i said Y earlier but i got it wrong)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tso what i did was\n_lt_/p_gt_\n\n_lt_p_gt_\n\tcameraPos _eq_ camera.position.clone()_lt_br /_gt_\n\tcameraPos.y _eq_ mesh.position.y (as if they were at the same height)_lt_br /_gt_\n\tmeshDirection _eq_ (cameraPos - mesh.position).normalize()\n_lt_/p_gt_\n\n_lt_p_gt_\n\tangle _eq_ acos(dot(meshDirection_co_ Vector3(1_co_ 0_co_ 0))\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthis (with some adjustments) gives you the same values of the ArcRotate_t_s alpha but for any camera\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-06-18T08:43:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tglad it helped you _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]