[{"Owner":"Spankied","Date":"2017-10-18T01:47:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHow do I setup express server with bablyon? Any demo repos?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPerhaps this isnt feasible. If so_co_ what are my options for dynamically serving bablyon scenes? \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe goal is to design scenes_co_ then run them on schedule.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2017-10-18T09:07:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tBabylon is a frontend framework (thou deltakosh just released the nullEngine for server-side usage_co_ but I don_t_t think this is what you wanted).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou need to simply serve the js and .babylon scenes (or whatever format you want to use)_co_ and produce an html file for your visitors. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fort","Date":"2017-10-18T18:05:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m building something similar at the moment. Here_t_s the basic setup_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import express from _t_express_t__sm_\nimport { json_co_ urlencoded } from _t_body-parser_t__sm_\nimport cors from _t_cors_t__sm_\n\nconst app _eq_ express()_sm_\n\n// this allows us to accept big JSON objects via POST request_dd_\napp.use(json({\n  limit_dd_ _t_50mb_t__co_\n  parameterLimit_dd_ 1000000\n}))_sm_\n\napp.use(urlencoded({\n  extended_dd_ true_co_\n  limit_dd_ _t_50mb_t__co_\n  parameterLimit_dd_ 1000000\n}))_sm_\n\napp.use(cors({ origin_dd_ _t_*_t_ }))_sm_ // this is optional_co_ but I need it for my specific setup\n\napp.use(_t_/_t__co_ express.static(_t_public_t_))_sm_ // I_t_m serving static html/js/css here_co_ which renders the bjs scene\n\napp.post(_t_/scene_t__co_ async (req_co_ res) _eq_&gt_sm_ {\n  // in your front-end JS_co_ do the following_dd_\n  // 1. Serialize your scene. ex_dd_ let sceneAsJSON _eq_ BABYLON.SceneSerializer.Serialize(scene)_sm_\n  // 2. make a POST request to _t_http_dd_//[host ip_dd_port]/scene_t_ that includes the serialized JSON you created in step #1 in the body of the request.\n  // \n  // That JSON object (your serialized scene) will show up here in req.body.[your post variable name]. Now you can do whatever you want with it—save to a database_co_ cram it in a .babylon file_co_ etc.\n\n  // don_t_t forget something to reply to the browser_t_s request\n  res.json({ whatever_dd_ _t_bacon_t_ })_sm_\n})_sm_\n\napp.listen(3000_co_ function () {\n  console.log(_t_app is listening on port 3000._t_)_sm_\n})_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Spankied","Date":"2017-10-18T20:17:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThanks fort_co_ this gives me an idea of things would work. \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]