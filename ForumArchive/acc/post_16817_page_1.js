[{"Owner":"altreality","Date":"2015-08-28T14:05:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_I am building this simple train game where i make a locomotive(or a box that represents one) follow a curving track._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Preview here_dd_ _lt_a href_eq__qt_http_dd_//synth2014.github.io/Age-of-Steam/babylon/rk4.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//synth2014.github.io/Age-of-Steam/babylon/rk4.html_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have only straight and circular segments. Somewhat realistic train movement is achieved by having a front point and a back point for the locomotive. The loco is positioned and oriented using these points. Its parallel to the line joining these points and positioned in the midpoint of the line. These points are marked by the red sphere(front) &amp_sm_ grey sphere(back) respectively in the link above_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The front point is moved along the current curve(straight or circular)_co_ then the back point is calculated. The algorithm for that uses sphere intersection with straight lines or circular segments._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I use BABYLON.Vector3.RotationFromAxis(xAxis_co_ yAxis_co_ zAxis) to rotate the box representing the locomotive. The code for it is_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_// forwardVecWS is the line joining the front point and the back point_co_// and pointing towards the front point.    var xAxis _eq_ forwardVecWS.clone()_sm_  // the new x-axis of the loco                                        // relative to World Space is simply the forward axis    var yAxis _eq_ new BABYLON.Vector3(0_co_ 0_co_ 0)_sm_    var zAxis _eq_ new BABYLON.Vector3(0_co_ 0_co_ 0)_sm_    zAxis _eq_ BABYLON.Vector3.Cross(xAxis_co_ frontSegment.upAxis).normalize()_sm_    yAxis _eq_ BABYLON.Vector3.Cross(zAxis_co_ xAxis).normalize()_sm_    xAxis _eq_ BABYLON.Vector3.Cross(yAxis_co_ zAxis).normalize()_sm_    console.debug(_qt_x(_qt_ + xAxis.x + _qt__co__qt_ + xAxis.y + _qt__co__qt_ + xAxis.z +                _qt_)_co_ y(_qt_ + yAxis.x + _qt__co__qt_ + yAxis.y + _qt__co__qt_ + yAxis.z +               _qt_)_co_ z(_qt_ + zAxis.x + _qt__co__qt_ + zAxis.y + _qt__co__qt_ + zAxis.z + _qt_)_qt_)_sm__lt_/pre_gt__lt_p_gt_I seem to be calculating the local-axes of the box in world space correctly as can be seen from the developer tools view_dd__lt_/p_gt__lt_div_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_GET _lt_a href_eq__qt_http_dd_//synth2014.github.io/Age-of-Steam/babylon/js/utils.js%C2%A0babylon.2.1.debug.js_dd_4703BJS_qt__gt_http_dd_//synth2014.github.io/Age-of-Steam/babylon/js/utils.js babylon.2.1.debug.js_dd_4703BJS_lt_/a_gt_ - [19_dd_29_dd_02]_dd_ Babylon.js engine (v2.1.0) launchedbabylon.2.1.debug.js_dd_3072 GET _lt_a href_eq__qt_http_dd_//synth2014.github.io/Age-of-Steam/babylon/scenes/dummy.babylon.manifest?1440770342473_qt__gt_http_dd_//synth2014.github.io/Age-of-Steam/babylon/scenes/dummy.babylon.manifest?1440770342473_lt_/a_gt_ 404 (Not Found)Database.checkManifestFile @ babylon.2.1.debug.js_dd_3072Database @ babylon.2.1.debug.js_dd_3032SceneLoader.Append @ babylon.2.1.debug.js_dd_18734SceneLoader.Load @ babylon.2.1.debug.js_dd_18684startGame @ mainRK4.js_dd_34Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_466 x(0.9994770317996606_co_0_co_0.03233671141195854)_co_ y(0_co_1_co_0)_co_ z(-0.03233671141195854_co_0_co_0.9994770317996606)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_466 x(0.9994350227871951_co_0_co_0.033610046509320576)_co_ y(0_co_1_co_0)_co_ z(-0.03361004650932058_co_0_co_0.9994350227871953)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_466 x(0.9993905467884464_co_0_co_0.03490752053483967)_co_ y(0_co_1_co_0)_co_ z(-0.03490752053483967_co_0_co_0.9993905467884464)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1_lt_/pre_gt__lt_/div_gt__lt_p_gt_Yet somehow_co_ the box keeps disappearing for some the values. I had faced this earlier if the Vector3 for the axes were not normalized or the frame supplied wasn_t_t orthogonal. From what I can see_co_ thats not the case here._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Anyone has any idea what may be going on? The code in question is here_dd_ _lt_a href_eq__qt_https_dd_//github.com/synth2014/Age-of-Steam/blob/gh-pages/babylon/js/FastLoco.js#L451_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/synth2014/Age-of-Steam/blob/gh-pages/babylon/js/FastLoco.js#L451_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_There are some steps for the calculation that should be irrelevant if the final x_co_y &amp_sm_ z axis values are normalized and the frame is orthogonal._lt_/p_gt__lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-08-28T14:30:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The 3 axis must be normalized_co_ orthogonal and left-handed in the order axis1_co_ axis2_co_ axis3_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_roller coaster train example here _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1HH4OJ%235_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1HH4OJ#5_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"altreality","Date":"2015-08-28T15:54:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well_co_ I added some code to check the orthogonality and normalization and they seem to be correct_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9994770317996606_co_0_co_0.03233671141195854)_co_ y(0_co_1_co_0)_co_ z(-0.03233671141195854_co_0_co_0.9994770317996606)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9994350227871951_co_0_co_0.033610046509320576)_co_ y(0_co_1_co_0)_co_ z(-0.03361004650932058_co_0_co_0.9994350227871953)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_0.9999999999999999_co_ y_eq_1_co_ z_eq_1.0000000000000002Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9993905467884464_co_0_co_0.03490752053483967)_co_ y(0_co_1_co_0)_co_ z(-0.03490752053483967_co_0_co_0.9993905467884464)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9993435115829765_co_0_co_0.03622907474674426)_co_ y(0_co_1_co_0)_co_ z(-0.036229074746744264_co_0_co_0.9993435115829767)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_0.9999999999999999_co_ y_eq_1_co_ z_eq_1.0000000000000002Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9992938168341208_co_0_co_0.037574827173187275)_co_ y(0_co_1_co_0)_co_ z(-0.037574827173187275_co_0_co_0.9992938168341208)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1_lt_/pre_gt__lt_p_gt_The dot products of the axes with each other are 0. The lengths of each axis is 1(within floating point precision)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_ var xDotz _eq_ BABYLON.Vector3.Dot(xAxis_co_ zAxis)_sm_    var xDoty _eq_ BABYLON.Vector3.Dot(xAxis_co_ yAxis)_sm_    var yDotz _eq_ BABYLON.Vector3.Dot(yAxis_co_ zAxis)_sm_    console.debug(_qt_x(_qt_ + xAxis.x + _qt__co__qt_ + xAxis.y + _qt__co__qt_ + xAxis.z +                _qt_)_co_ y(_qt_ + yAxis.x + _qt__co__qt_ + yAxis.y + _qt__co__qt_ + yAxis.z +               _qt_)_co_ z(_qt_ + zAxis.x + _qt__co__qt_ + zAxis.y + _qt__co__qt_ + zAxis.z + _qt_)_qt_)_sm_    console.debug(_qt_x.z_eq__qt_ + xDotz + _qt__co_ x.y_eq__qt_ + xDoty + _qt__co_ y.z_eq__qt_ + yDotz)_sm_    console.debug(_qt_Length x_eq__qt_ + xAxis.length() + _qt__co_ y_eq__qt_ + yAxis.length() + _qt__co_ z_eq__qt_ + zAxis.length())_sm__lt_/pre_gt__lt_/div_gt__lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-08-28T16:40:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_could you please log the rotation angles returned by RotationFromAxis() in the same time so we could check its values when the loco disappear ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_or do a PG ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"altreality","Date":"2015-08-28T17:50:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks Jerome. Seems you were spot on. The rotation angles sometimes have a NaN in one of the angles. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Updated _lt_a href_eq__qt_http_dd_//synth2014.github.io/Age-of-Steam/babylon/rk4.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//synth2014.github.io/Age-of-Steam/babylon/rk4.html_lt_/a_gt_ to print out the rotation and position too_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_Failed to load resource_dd_ the server responded with a status of 404 (Not Found)babylon.2.1.debug.js_dd_4703BJS - [23_dd_17_dd_20]_dd_ Babylon.js engine (v2.1.0) launchedhttp_dd_//synth2014.github.io/Age-of-Steam/babylon/scenes/dummy.babylon.manifest?1440784040518 Failed to load resource_dd_ the server responded with a status of 404 (Not Found)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9994770317996606_co_0_co_0.03233671141195854)_co_ y(0_co_1_co_0)_co_ z(-0.03233671141195854_co_0_co_0.9994770317996606)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1FastLoco.js_dd_482 Rotation x_eq_0_co_ y_eq_-0.032342349615338765_co_ z_eq_NaNFastLoco.js_dd_483 Position(15.050137463756561_co_ 0_co_ 0.3233671188354492)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9994350227871951_co_0_co_0.033610046509320576)_co_ y(0_co_1_co_0)_co_ z(-0.03361004650932058_co_0_co_0.9994350227871953)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_0.9999999999999999_co_ y_eq_1_co_ z_eq_1.0000000000000002FastLoco.js_dd_482 Rotation x_eq_-1.4901161193847656e-8_co_ y_eq_-0.03361637757690891_co_ z_eq_NaNFastLoco.js_dd_483 Position(15.147261049621582_co_ 0_co_ 0.3361004590988159)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9993905467884464_co_0_co_0.03490752053483967)_co_ y(0_co_1_co_0)_co_ z(-0.03490752053483967_co_0_co_0.9993905467884464)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1FastLoco.js_dd_482 Rotation x_eq_0_co_ y_eq_-0.0349146137642364_co_ z_eq_-1.4901161193847656e-8FastLoco.js_dd_483 Position(15.244280262470246_co_ 0_co_ 0.34907519817352295)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9993435115829765_co_0_co_0.03622907474674426)_co_ y(0_co_1_co_0)_co_ z(-0.036229074746744264_co_0_co_0.9993435115829767)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_0.9999999999999999_co_ y_eq_1_co_ z_eq_1.0000000000000002FastLoco.js_dd_482 Rotation x_eq_0_co_ y_eq_-0.036237004818494976_co_ z_eq_NaNFastLoco.js_dd_483 Position(15.341193910209656_co_ 0_co_ 0.36229074001312256)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9992938168341208_co_0_co_0.037574827173187275)_co_ y(0_co_1_co_0)_co_ z(-0.037574827173187275_co_0_co_0.9992938168341208)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1FastLoco.js_dd_482 Rotation x_eq_NaN_co_ y_eq_-0.03758367457586275_co_ z_eq_NaNFastLoco.js_dd_483 Position(15.438000300746918_co_ 0_co_ 0.37574827671051025)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9992413735216208_co_0_co_0.03894454316877913)_co_ y(0_co_1_co_0)_co_ z(-0.03894454316877913_co_0_co_0.9992413735216208)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1FastLoco.js_dd_482 Rotation x_eq_0_co_ y_eq_-0.03895439427871502_co_ z_eq_0FastLoco.js_dd_483 Position(15.534699540012358_co_ 0_co_ 0.389445424079895)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9991860780093766_co_0_co_0.04033833799551142)_co_ y(0_co_1_co_0)_co_ z(-0.04033833799551142_co_0_co_0.9991860780093766)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1FastLoco.js_dd_482 Rotation x_eq_NaN_co_ y_eq_-0.04034928564659717_co_ z_eq_0FastLoco.js_dd_483 Position(15.631288637889863_co_ 0_co_ 0.40338337421417236)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9991278314631757_co_0_co_0.041756153985874)_co_ y(0_co_1_co_0)_co_ z(-0.041756153985874_co_0_co_0.9991278314631757)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1FastLoco.js_dd_482 Rotation x_eq_0_co_ y_eq_-0.04176829769043192_co_ z_eq_0FastLoco.js_dd_483 Position(15.727766104263305_co_ 0_co_ 0.41756153106689453)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9990665362840676_co_0_co_0.04319787121324316)_co_ y(0_co_1_co_0)_co_ z(-0.04319787121324316_co_0_co_0.9990665362840676)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1FastLoco.js_dd_482 Rotation x_eq_NaN_co_ y_eq_-0.04321131744913273_co_ z_eq_NaNFastLoco.js_dd_483 Position(15.824132141109466_co_ 0_co_ 0.431978702545166)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9990020884231274_co_0_co_0.044663489857264344)_co_ y(0_co_1_co_0)_co_ z(-0.044663489857264344_co_0_co_0.9990020884231274)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1FastLoco.js_dd_482 Rotation x_eq_0_co_ y_eq_-0.044678352527951666_co_ z_eq_-1.4901161193847656e-8FastLoco.js_dd_483 Position(15.920383662265778_co_ 0_co_ 0.4466348886489868)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9989343793541373_co_0_co_0.046153068634325126)_co_ y(0_co_1_co_0)_co_ z(-0.046153068634325126_co_0_co_0.9989343793541373)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1FastLoco.js_dd_482 Rotation x_eq_NaN_co_ y_eq_-0.04616946951298599_co_ z_eq_NaNFastLoco.js_dd_483 Position(16.016519773662566_co_ 0_co_ 0.4615306854248047)Integrator.js_dd_37 Verlet_dd_ Position_dd_ 0.1_co_ velocity_dd_0.1FastLoco.js_dd_470 x(0.9988633097128881_co_0_co_0.047666429585350605)_co_ y(0_co_1_co_0)_co_ z(-0.047666429585350605_co_0_co_0.9988633097128881)FastLoco.js_dd_474 x.z_eq_0_co_ x.y_eq_0_co_ y.z_eq_0FastLoco.js_dd_475 Length x_eq_1_co_ y_eq_1_co_ z_eq_1FastLoco.js_dd_482 Rotation x_eq_0_co_ y_eq_-0.04768449845694656_co_ z_eq_0FastLoco.js_dd_483 Position(16.112539283206942_co_ 0_co_ 0.47666430473327637)_lt_/pre_gt__lt_p_gt_I wonder why there should be a NaN returned for a valid(as far as I can see)_co_  set of axes._lt_/p_gt__lt_p_gt_Maybe these are some sort of floating point issue. Sometimes z_eq_1.0000000000000002 for example._lt_/p_gt__lt_p_gt_I don_t_t think that such a small difference should throw off the calculation leading to a NaN though!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Setting up a Play Ground here_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1HH4OJ%2311_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1HH4OJ#11_lt_/a_gt__lt_/p_gt__lt_p_gt_Anyone knows how to print debug values in PG?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-08-28T18:59:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I will have to check accurately these values. Maybe is there a bug due to floating approximations in the algo ..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In the PG_co_ you can just do a console.log and everyone can check the values in his own browser_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-08-28T21:24:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_lt_/p_gt__lt_p_gt_it seems to be something missing either in the approximation either in the dot product (second case_co_ I guess)_lt_/p_gt__lt_p_gt_probably we need to normalize first the _lt_em_gt_u1_lt_/em_gt_ vector here _dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Math/babylon.math.ts#L1111_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Math/babylon.math.ts#L1111_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"altreality","Date":"2015-08-29T05:30:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks Jerome._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I will try a temporary fix in that function till its in the mainline._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_One thing I have noticed with the Cross product function_co__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var cross _eq_  Vector3.Cross(u_co_ v)_sm__lt_/pre_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(51_co_51_co_51)_sm_font-family_dd_Consolas_co_ _t_Liberation Mono_t__co_ Menlo_co_ Courier_co_ monospace_sm_font-size_dd_12px_sm__qt__gt_Even if u &amp_sm_ v are unit vectors_co_ the cross vector isn_t_t necessarily a unit vector and should be normalized anyway to be safe._lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(51_co_51_co_51)_sm_font-family_dd_Consolas_co_ _t_Liberation Mono_t__co_ Menlo_co_ Courier_co_ monospace_sm_font-size_dd_12px_sm__qt__gt_----------------_lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt__lt_p_gt_Hmm_co_ normalizing in that function does not fix the issue. I will check what else is going on there._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_u1 _eq_ new Vector3(x_co_ y_co_ z)_sm_u1.normalize()_sm_v1 _eq_ Vector3.Cross(w_co_ u1)_sm_ // v1 image of v through rotation around wv1.normalize()_sm_cross _eq_ Vector3.Cross(u_co_ u1)_sm_ // returns same direction as w (_eq_local z) if positive angle _dd_ cross(source_co_ image)cross.normalize()_sm__lt_/pre_gt__lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-08-29T08:43:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Actually I guess the problem is in the dot product. _lt_/p_gt__lt_p_gt_If the dot product isn_t_t in the range [-1_co_ 1]_co_  _lt_em_gt_Math.acos(dot)_lt_/em_gt_ will return _lt_em_gt_NaN_lt_/em_gt__co_ what is happening in your PG._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So as _lt_em_gt_u_lt_/em_gt_ is already normalized_co_ if we normalize _lt_em_gt_u1_lt_/em_gt__co_ then _lt_em_gt_dot(u_co_ u1)_lt_/em_gt_ should be between -1 and 1 in all cases._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The other solution would be to compare parameter axis coordinate values not to zero (limit case_co_ as currently) but to epsilonToZero (almost zero) to avoid near limit cases going bad due to floating computation approximations. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ll check it as monday._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"altreality","Date":"2015-08-30T08:18:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks Jerome. I can confirm that clamping the 3 dot products does work_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_dot _eq_ (Math.min(1_co_ Math.max(-1_co_ dot)))_sm__lt_/pre_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/synth2014/Age-of-Steam/commit/3bceef2305f659914aa494679f306b175d700b35#diff-209db2e32be0b3025625186a20545bc2L836_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/synth2014/Age-of-Steam/commit/3bceef2305f659914aa494679f306b175d700b35#diff-209db2e32be0b3025625186a20545bc2L836_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Updated movement_dd_ _lt_a href_eq__qt_http_dd_//synth2014.github.io/Age-of-Steam/babylon/rk4.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//synth2014.github.io/Age-of-Steam/babylon/rk4.html_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-08-30T08:36:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_co_ thank you for the fix _dd_-)_lt_/p_gt__lt_p_gt_I will PR it in the mainstream ... unless you want to do it to get credit of course_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I was wrong when I said initially that _lt_em_gt_axis1_co_ axis2_co_ axis3_lt_/em_gt_ parameters should be normalized when passed to _lt_em_gt_RotationFromAxis()_lt_/em_gt_. _lt_/p_gt__lt_p_gt__lt_em_gt_Axis1_co_ axis2_lt_/em_gt_ and _lt_em_gt_axis3_lt_/em_gt_ are vectors that belong to the user_co_ they aren_t_t modified by the function but just copied and these copies only are then normalized._lt_/p_gt__lt_p_gt_So they don_t_t need to be normalized_co_ but they have to be orthogonal and left-handed oriented._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"altreality","Date":"2015-08-30T13:32:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_To submit a change_co_ I just check out the repo_co_ change the proper typescript file and submit a patch? Is there any unit test suite I need to run or a packaging process?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-08-30T14:24:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_no _dd_ nothing more than you just said_lt_/p_gt__lt_p_gt_you just have to test it in your browser on your own example what was bugged_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Was the dot product clamping still necessary once each temp vector (cross) was normalized ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"altreality","Date":"2015-08-31T17:46:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_Was the dot product clamping still necessary once each temp vector (cross) was normalized ?_lt_/pre_gt__lt_p_gt_Yes_co_ it was. Normalization of the vectors did not work._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-01T08:36:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_lt_/p_gt__lt_p_gt_I_t_m on it_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_There_t_s a weird approximation problem in the _lt_em_gt_Dot_lt_/em_gt_ product function ... unless it is in the BJS _lt_em_gt_normalize()_lt_/em_gt_ method or a genuine js approximation problem_lt_/p_gt__lt_p_gt_With your set of values_co_ if _lt_em_gt_u_lt_/em_gt_ and _lt_em_gt_u1_lt_/em_gt_ are explicitly normalized _lt_em_gt_Vector3.Dot(u_co_ u1)_lt_/em_gt_ returns here 1.0000000002 what shouldn_t_t be possible ... It shoud be 0.0000009 or 1.0_co_ but not greater than 1.0_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_that_t_s why you had then to clamp the dot product although it shoudn_t_t be necessary with normalized vectors_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Well_co_ I guess that I will PR a fix with the clamping stuff before we investigate where the approximation is wrong (dot_co_ normalize_co_ js math)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-01T10:05:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_fix PRed_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-09-01T13:24:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Oh_co_ too much math...  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_merged. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-01T14:43:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_After a look at BJS _lt_em_gt_normalize()_lt_/em_gt_ and _lt_em_gt_dot product_co_ _lt_/em_gt_I just couldn_t_t see anything wrong._lt_/p_gt__lt_p_gt_So these were only javascript math approximations in a bad lucky context._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Everything should now be fixed with the usage of _lt_em_gt_WithinEpsilon_lt_/em_gt_() comparisons and explicit clamping in the right interval._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]