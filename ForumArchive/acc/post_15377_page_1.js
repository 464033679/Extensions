[{"Owner":"qqdarren","Date":"2015-06-25T09:52:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_(Pulled out of another thread_dd_ _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/15154-mesh-based-particle-system/?p_eq_87087)_qt__gt_http_dd_//www.html5gamedevs.com/topic/15154-mesh-based-particle-system/?p_eq_87087)_lt_/a_gt__lt_/p_gt__lt_p_gt_(There is also an older thread here_dd_ _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/14166-computenormals-optimization/)_qt__gt_http_dd_//www.html5gamedevs.com/topic/14166-computenormals-optimization/)_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The current _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.mesh.vertexData.ts#L1206_qt_ rel_eq__qt_external nofollow_qt__gt_computeNormals()_lt_/a_gt_ function is very neat and tidy_co_ but as it seems like it gets called a lot_co_ I wonder if that is at the expense of speed/memory._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_First_co_ I wondered what this is doing_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_normals[i1 * 3] _eq_ normals[i1 * 3] || 0.0_sm_normals[i1 * 3 + 1] _eq_ normals[i1 * 3 + 1] || 0.0_sm_normals[i1 * 3 + 2] _eq_ normals[i1 * 3 + 2] || 0.0_sm_//repeat for i2 and i3_lt_/pre_gt__lt_p_gt_It seems to be guarding against bad data? Does bad data ever exist under normal usage? Could this clean-up operation be moved to another function_co_ which could be called at the top of computeNormals()_co_ and then a boolean parameter to say _qt_skip the clean-up_co_ I know my data is clean_qt_?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Next question was about this code_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_Vector3.FromFloatsToRef(normals[i1 * 3]_co_ normals[i1 * 3 + 1]_co_ normals[i1 * 3 + 2]_co_ vertexNormali1)_sm_//ditto for i2 and i3 into vertexNormali2 and vertexNormali3vertexNormali1 _eq_ vertexNormali1.addInPlace(faceNormal)_sm_//ditto for vertexNormali2 and vertexNormali3normals[i1 * 3] _eq_ vertexNormali1.x_sm_normals[i1 * 3 + 1] _eq_ vertexNormali1.y_sm_normals[i1 * 3 + 2] _eq_ vertexNormali1.z_sm_//ditto for i2 and i3_lt_/pre_gt__lt_p_gt_The two functions being called actually don_t_t do anything_sm_ they look like this_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_Vector3.FromFloatsToRef _eq_ function (x_co_ y_co_ z_co_ result) {    result.x _eq_ x_sm_    result.y _eq_ y_sm_    result.z _eq_ z_sm_}_sm__lt_/pre_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_Vector3.prototype.addInPlace _eq_ function (otherVector) {    this.x +_eq_ otherVector.x_sm_    this.y +_eq_ otherVector.y_sm_    this.z +_eq_ otherVector.z_sm_    return this_sm_}_sm__lt_/pre_gt__lt_p_gt_My inlining we get_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_vertexNormali1.x _eq_ normals[i1 * 3] + faceNormal.x_sm_vertexNormali1.y _eq_ normals[i1 * 3 + 1] + faceNormal.y_sm_vertexNormali1.z _eq_ normals[i1 * 3 + 2] + faceNormal.z_sm_//Repeat for i2 and i3_lt_/pre_gt__lt_p_gt_But they are then just assigned back_co_ and vertexNormali1 is not used anywhere else! So we can do away with it completely_co_ and the code reduces to_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_normals[i1 * 3] +_eq_ faceNormal.x_sm_normals[i1 * 3 + 1] +_eq_ faceNormal.y_sm_normals[i1 * 3 + 2] +_eq_ faceNormal.z_sm__lt_/pre_gt__lt_p_gt_OR_co_ if the _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_|| 0.0_lt_/span_gt_ code _lt_em_gt_has_lt_/em_gt_ to be done in this loop_co_ then it can be_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_normals[i1 * 3] _eq_ (normals[i1 * 3] || 0.0) + faceNormal.x_sm_normals[i1 * 3 +1] _eq_ (normals[i1 * 3 +1] || 0.0) + faceNormal.y_sm_normals[i1 * 3 +2] _eq_ (normals[i1 * 3 +2] || 0.0) + faceNormal.z_sm_//Repeat for i2 and i3_lt_/pre_gt__lt_p_gt_So_co_ fewer lines_co_ more clarity_co_ saving 6 function calls_co_ possibly saving the creation of a few temporaries_co_ and doing away with three local vars. Have I broken anything?  _dd_-)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-06-25T12:58:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_AFAIRemember_co_ the || 0.0 assignation was done not to prevent bad values_co_ but to set initial values in a loop where some values weren_t_t defined then._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You are right on the rest _dd_ we could get rid off internal Vector3 methods and re-implement them in computeNormals(). We could also re-implement the cross vector product and the normalize method which are finally only coordinates multiplications and additions._lt_/p_gt__lt_p_gt_I asked these questions to myself when re-coding the old algo._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Actually it has absolutely no visible impact on the execution. There are far more other bottlenecks in the BJS process_co_ like making draw calls_co_ etc. So the gain isn_t_t pertinent._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The real gain might be in terms of object creation. If we don_t_t create 9 _lt_em_gt_Vector3_lt_/em_gt_ each call_co_ the GC won_t_t handle them. It is better for it to deal with scalar type variables (floats_co_ integers)._lt_/p_gt__lt_p_gt_So we could get rid off the creation of 9 vectors3 and recode everything with only additions and multiplications. Won_t_t be very DRY._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The problem to me is that I am not sure that these 9 vectors3 are the cause of the GC._lt_/p_gt__lt_p_gt_Nine vector3 objects are just a speck of dust for the GC. We shouldn_t_t even remark them in the CPU profiler._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-06-25T13:02:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Looks good to me._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The _qt_|| 0_qt_ check is because the passed-in normals array may start out empty_co_ or not large enough. It would probably be quicker to do a preliminary loop filling it with zeroes to the correct sizebefore the main loop that sums normals together for each point. That would avoid the array reads_co_ as well as the (presumably unwanted) weird results if someone passed in an array that wasn_t_t zeroed._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-06-25T13:24:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_We don_t_t really care about the fact that someone could pass a wrong array as _lt_em_gt_computeNormals()_lt_/em_gt_ is a kind of internal tool_co_ although it is public and static._lt_/p_gt__lt_p_gt_AFAIR_co_ reducing the number of passes when iterating on big arrays had a very sensitive effect._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In other words_co_ a single _lt_em_gt_for{}_lt_/em_gt_ loop on 30K elements doing two assignations is faster than 2 _lt_em_gt_for{}_lt_/em_gt_ loops each making one assignation._lt_/p_gt__lt_p_gt_That_t_s what I remember when I was working on it ..._lt_/p_gt__lt_p_gt_Maybe I am wrong._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I mean that _lt_em_gt_computeNormals(_lt_/em_gt_) can be optimized again with direct calculations and maybe float32Array usage but the gains to get are now quite small._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I really need to chek if the GC activity is really related to _lt_em_gt_computeNormals()_lt_/em_gt_ or not._lt_/p_gt__lt_p_gt_Many tests on the ribbon example can_t_t make me conclude... the browser (or the CPU profiler) doesn_t_t react the same each test with or without _lt_em_gt_freezeNormals()_lt_/em_gt_. I stressed this example for days in many browsers and didn_t_t notice any real GC issue until now._lt_/p_gt__lt_p_gt_So I feel a little confused._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Imho_co_ the current _lt_em_gt_computeNormals()_lt_/em_gt_ should be enough to deal properly with the GC. So there might be another issue somewhere else... if we can call this an issue because it runs pretty well at 60 fps._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think I will go on with this state (for the SPS) and_co_ only finally and if needed_co_ check if deep optimizations can get things better._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-06-25T14:38:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Jerome_co_ I don_t_t think qqdarren was talking about the GC so much as the number of reads/writes to object properties and array elements. Modern VMs do a lot of optimizing so it_t_s hard to predict what will be fast_co_ but in general we can expect that math on local vars will usually be done in registers_co_ while code like_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_normals[i] +_eq_ myvec.x_sm__lt_/pre_gt__lt_p_gt_usually means the VM has to look up property i from array normals_co_ read it_co_ then look up property x from myvec_co_ read that_co_ then do the math_co_ then assign the array value. Basically there are a lot more reads and writes than necessary._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Also_co_ re_dd_GC_co_ there can be cases where innocuous-looking code might (behind the scenes) force the VM to_co_ say_co_ convert a number from int representation into a boxed double. Even if the value doesn_t_t outlive the function call_co_ if that double went onto the heap then it can lead to GCs. It varies by VM so it_t_s hard to say anything for sure without experimenting._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_To that end_co_ here is a simple A/B test of the current compute normals compared to one which zeroes out the normals array and then makes the changes darren suggested_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#XQ7J4_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#XQ7J4_lt_/a_gt__lt_/p_gt__lt_p_gt_To compare just run a cpu profile and compare the time spent in _qt_ComputeNormals_qt_ vs _qt_ComputeNormals2_qt_. On my machine in chrome the latter is roughly twice as fast_co_ but I think it could be improved more_co_ e.g. by changing the normalization at the end to do the math directly rather than via Vector3 methods._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt__lt_p_gt_ _lt_/p_gt__lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-06-25T15:08:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Seems to be a good optimization (and really simple to implement)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I just couldn_t_t see the difference until now on my machine with 1000 segments. Both functions ran at 60 fps. I need to check the CPU profiler._lt_/p_gt__lt_p_gt_If you get an improvement of twice the speed it_t_s really worth it ...! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I really need to check this in deep._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"qqdarren","Date":"2015-06-25T15:29:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_My interest was in why performance on Firefox is worse than Chrome. E.g. perhaps the Chrome JS interpreter is doing the inlining and Firefox isn_t_t. So we should inline for it (except where there is an obvious downside_co_ such as dramatically increasing the number of lines). Here inlining showed the temporary wasn_t_t even needed_co_ so the code also got simpler._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_br_gt_BTW_co_ regarding the DRY principle_dd_ this has to be balanced against another principle_co_ called _qt_Don_t_t Over-Engineer_qt_. That is judged by experience and common-sense. You should only be making small functions for everything if you are working in Java Middleware with an over-zealous manager who has put in place every metric he could find_co_ and you are therefore forbidden from having functions with more than six lines. Another sign you are in over-engineered-coding-hell is you are being forced to write unit tests for the getters and setters_co_ just so you can get 100% code coverage. _sm_-)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-06-25T16:10:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_ _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_promise_co_ I will go in under-engineering !_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Actually_co_ I was just lazy (as usual) and used the BJS vector3 functions instead of re-implemented them (cross vector product_co_ etc) because I thought they were no real gain._lt_/p_gt__lt_p_gt_Need to check gain in fact and if it has an impact on the GC... or not (maybe other cause)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I know the FF VM is far behind the Chrome one (and the IE one under Windows too). Moreover Chrome (and IE_co_ I guess) has a VM process or thread per browser tab_co_ whereas FF shares the JS VM among all open tabs._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-06-25T16:11:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hm. Well_co_ I_t_m reasonably familiar with v8_co_ and there_co_ it_t_s usually best to just write straightforward JS and not worry about optimization until you know which functions are hot. v8 will do a fair amount of inlining and so on on its own_co_ provided your functions meet certain criteria_co_ so it_t_s often best to just worry about meeting those criteria_co_ and letting it work its magic._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But if you can isolate stress tests with real world data where the it spends 90% of its time in one function_co_ then it_t_s sometimes worthwhile to temporarily throw DRY out the window and micro-optimize the hottest code path. Personally I think this is fine for stuff that_t_s intended to be the _qt_internals_qt_ of something like BJS_co_ which _qt_users_qt_ shouldn_t_t normally need to look at. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_With all that said I know very little about FF. I know they have an engine (IonMonkey) that does a lot of the same optimizations as v8 but I don_t_t know if FF uses by default yet. And for IE I know even less._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-06-25T16:23:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well the good new is that we could probably get some micro-seconds and maybe some GC rest by recoding (again) some parts of _lt_em_gt_computeNormals()_lt_/em_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The bad new is that I will have to do this  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_laugh.png_qt_ alt_eq__qt__dd_lol_dd__qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Well_co_ I will go on for now a little on SPS work (+ my real job  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ ) and then only I will review _lt_em_gt_computeNormals()_lt_/em_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"KevinBLT","Date":"2015-06-26T09:11:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey there_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_you only talk about _qt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_micro-seconds_qt_._lt_/span_gt__lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_I don_t_t know your testing machines_co_ but for me this means a lot_co_ because I always watch my applications running on _lt_/span_gt__lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_slow android smartphones._lt_/span_gt__lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_And there _lt_/span_gt__qt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_micro-seconds_qt_ can result in 1ms per frame_co_ which is a lot._lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So never stop investigating in any performance stuff  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_So just wanted to say thanks! _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-06-26T09:25:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Actually this optimization would only concern meshes that re-compute their normals (because they are morphed for instance) each frame_lt_/p_gt__lt_p_gt_Only exotic cases _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"KevinBLT","Date":"2015-06-26T11:09:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yea that actually makes sence  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_happy.png_qt_ alt_eq__qt_^_^_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/happy@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Nevertheless don_t_t stop investigating in performance  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_Thanks!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"reddozen","Date":"2015-06-26T13:18:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_KevinBLT_co__lt_/p_gt__lt_p_gt_I_t_ve found that FireFox for android is better for webGL than Chrome or the built in default browser._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-09-04T15:57:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Just added a little fix _dd_ _lt_/p_gt__lt_ul_gt__lt_li_gt_got rid off some temporary vectors and reduced the computation step number_lt_/li_gt__lt_li_gt_made sure that the _lt_em_gt_normals_lt_/em_gt_ array is now initially filled with zeros in case it would be passed non empty as a parameter_lt_/li_gt__lt_/ul_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-11-13T10:49:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_As ASM.js tests aren_t_t as promising as expected_co_ I_t_m about to do a final optimization on ComputeNormals() _dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_it will now only handle scalar values (and no more js objects) and reduce again the temporary variables used_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This improvement will probably give just a really tiny gain and would have an small effect only when the function is called within the render loop on huge meshes needed to be updated._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I did it because I just couldn_t_t let things yet optimizable but not optimized _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-11-13T16:07:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Merged _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]