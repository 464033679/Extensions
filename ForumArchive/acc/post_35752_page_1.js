[{"Owner":"ozRocker","Date":"2018-02-16T14:41:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI get that we can_t_t export armature to .babylon from Blender if some of the meshes attached don_t_t have transformations applied.  I_t_m trying to find the best way to solve this issue.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have a separate head and body attached to the same armature.  When I try to export to .babylon it will complain about the head mesh not having transformations applied.  When I check the mesh properties I see location_co_ rotation all zero and scale all 1. Applying transformations to that mesh does nothing.  However_co_ when I clear parent I notice Rotation X goes from 0 to -0.  I can then apply rotation and it_t_ll set that back to 0.  Then I can parent mesh back to armature and export works fine.  However_co_ I used _qt_automatic weighting_qt_ so now I_t_ve lost all the weighting that was important to me. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis isn_t_t a Babylon.js problem but I didn_t_t know where to ask.  Does anyone know how to stop that nonsense that results in a -0?  Or does anyone know how I can clear parent then re-attach to parent using the same weighting as before?  Or is it possible to edit the plugin to treat -0 as 0?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2018-02-17T05:53:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI produced a workaround with the Blender exporter.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn json_exporter.py I commented out the lines that check for unapplied transformations_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_#if mesh.hasUnappliedTransforms and hasattr(mesh_co_ _t_#    self.fatalError _eq_ _t_Mesh_dd_ _t_ + mesh.name + _t_ has un-applied transformations.  This will never work for a mesh with an armature.  Export cancelled_t_\n#    Logger.log(self.fatalError)\n#    return\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-02-18T17:22:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tA better place to change would be where _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Exporters/blob/master/Blender/src/babylon-js/mesh.py#L101_qt_ rel_eq__qt_external nofollow_qt__gt_hasUnAppliedTransforms_lt_/a_gt_ is determined.  I did quite follow all that work flow.  An armature modifier can be on a mesh &amp_sm_ exported where the parent is not also the armature_co_ but I do not know how to get automatic weights that way.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPerhaps_co_ abs() could be used in the check to mitigate this -0 stuff. \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_# ensure no unapplied rotation or scale_co_ when there is an armature\nself.hasUnappliedTransforms _eq_ (self.scaling.x !_eq_ 1 or self.scaling.y !_eq_ 1 or self.scaling.z !_eq_ 1 or\n        (hasattr(self_co_ _t_rotation_t_          ) and (abs(self.rotation          .x) !_eq_ 0 or abs(self.rotation          .y) !_eq_ 0 or abs(self.rotation          .z) !_eq_ 0)) or \n        (hasattr(self_co_ _t_rotationQuaternion_t_) and (abs(self.rotationQuaternion.x) !_eq_ 0 or abs(self.rotationQuaternion.y) !_eq_ 0 or abs(self.rotationQuaternion.z) !_eq_ 0 or self.rotationQuaternion.w !_eq_ 1))\n        )_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"FunFetched","Date":"2018-03-05T21:00:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_205226_qt_ data-ipsquote-contentid_eq__qt_35752_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1518974545_qt_ data-ipsquote-userid_eq__qt_8492_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 2/18/2018 at 9_dd_22 AM_co_ JCPalmer said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tA better place to change would be where _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Exporters/blob/master/Blender/src/babylon-js/mesh.py#L101_qt_ rel_eq__qt_external nofollow_qt__gt_hasUnAppliedTransforms_lt_/a_gt_ is determined.  I did quite follow all that work flow.  An armature modifier can be on a mesh &amp_sm_ exported where the parent is not also the armature_co_ but I do not know how to get automatic weights that way.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tPerhaps_co_ abs() could be used in the check to mitigate this -0 stuff. \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tHoly moly. I had been having problems with this as well. I un-parented everything_co_ cleared all transformations_co_ confirmed that everything was indeed 0 and W was 1. Re-parented_co_ re-weighted_co_ tried the abs() solution and _lt_em_gt_STILL_lt_/em_gt_ got this error.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFinally_co_ I logged the actual rotation data stored in the mesh in question. Simply logging self.rotation showed nothing of note_dd_ 0_co_ 0_co_ 0. _lt_em_gt_THEN_lt_/em_gt_ I decided to get specific and log each component (x_co_ y_co_ z) by themselves. Here_t_s what I got when I hit Y_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_3.552713678800501e-15_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_That_t_s right_sm_ 0.0000000000000035527blahblahblah._lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_Ridiculous! So_co_ Blender has a rounding problem when it comes to clearing transformations_co_ and clearing them is no guarantee of anything_co_ apparently._lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_SO_co_ in addition to the abs() solution that JCPalmer proposed_co_ I added round(n_co_ 3) to each one of them_co_ and it finally worked. I_t_ll issue a pull request when I get a chance._lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_ Actually_co_ I don_t_t think abs() is entirely necessary. Every Python version I have access to throws True when I compare -0 to 0. Maybe it_t_s best to be on the safe side?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-03-05T21:06:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tTry _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/36076-blender-exporter-version-56/_qt_ rel_eq__qt__qt__gt_Blender exporter 5.6 _lt_/a_gt_released last Friday.  I round to the precision that rotation is rounded to when exported.  This is even better than my first thought above.  No need to PM.  You could test it_co_ since I did not have a real world example though.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"FunFetched","Date":"2018-03-05T21:08:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_207130_qt_ data-ipsquote-contentid_eq__qt_35752_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1520284000_qt_ data-ipsquote-userid_eq__qt_8492_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t3 hours ago_co_ JCPalmer said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tTry _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/36076-blender-exporter-version-56/_qt_ rel_eq__qt__qt__gt_Blender exporter 5.6 _lt_/a_gt_released last Friday.  I round to the precision that rotation is rounded to when exported.  This is even better than my first thought above.  No need to PM.  You could test it_co_ since I did not have a real world example though.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tOh_co_ great_sm_ I_t_ll do that!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_ Works perfectly!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]