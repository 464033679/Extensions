[{"Owner":"olsibob","Date":"2018-05-21T22:28:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_ I_t_m just getting started with babylon.js. I_t_ve used node on the backend before_co_ but I_t_m new to using it on the frontend with webpack_co_ it_t_s also my first time using typescript. I_t_m using Visual Studio Code as my IDE.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m looking for tips for creating a development environment that will allow fast_co_ iterative development. I_t_m aware that TypeScript involves transpiling_co_ so perhaps it_t_s not quite a _qt_hot reload_qt__co_ but _qt_pretty quick reload_qt_ would be great. In addition_co_ I sometimes work offline_co_ so everything needs to be able to run locally.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAt the moment I just have a super simple scene for testing purposes_co_ held in a single `main.ts` file. Everything builds and runs as it should_co_ but the build process can be very slow. I have a few questions\n_lt_/p_gt_\n\n_lt_ol_gt_\n\t_lt_li_gt_\n\t\tIn particular_co_ the step that can take a minute or so is `92% chunk asset optimization UglifyJSPlugin`. I_t_m not sure what is running UglifyJS_co_ it_t_s not something I_t_ve specified in my build steps. Is it possible to disable it for non-production builds? (not that I_t_ve got as far as setting up anything like environment variables).\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tGiven that my `main.ts` is so simple_co_ it feels like it must be running uglify on the whole of babylonjs. Is it possible to just transpile the files that have been changed?\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tIs it really necessary with the webpack workflow to bundle everything into a single file? (I thought that if a user was navigating between several sites using babylonjs_co_ the browser might cache babylonjs? Wouldn_t_t it bundling everything into a single file block this caching)?\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tAny other tips for speeding up builds/ creating a nice_co_ speedy dev environment?\n\t_lt_/li_gt_\n_lt_/ol_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_webpack.config.js_lt_/strong_gt__dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_const path _eq_ require(_t_path_t_)\n\nmodule.exports _eq_ {\n    entry_dd_ {\n        _t_project_t__dd_ _t_./src/main.ts_t_\n    }_co_\n    output_dd_ {\n        filename_dd_ _t_[name].js_t_\n    }_co_\n    resolve_dd_ {\n        extensions_dd_ [_t_.ts_t__co_ _t_.tsx_t__co_ _t_.js_t_]\n    }_co_\n    devtool_dd_ _t_source-map_t__co_\n    plugins_dd_ [\n    ]_co_\n    externals_dd_ {\n        oimo_dd_ _t_OIMO_t__co_ //why do I need to declare this as external if it_t_s included with the npm install?\n        cannon_dd_ _t_CANNON_t__co_ //or true\n        earcut_dd_ _t_EARCUT_t_\n    }_co_\n    module_dd_ {\n        rules_dd_ [{\n            test_dd_ /\\.tsx?$/_co_\n            include_dd_ path.resolve(__dirname_co_ _qt_src_qt_)_co_\n            loader_dd_ _t_awesome-typescript-loader_t__co_ // I_t_ve tried ts-loader too\n            exclude_dd_ /node_modules/\n        }]\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_tsconfig.json_dd__lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_{\n    _qt_compilerOptions_qt__dd_ {\n        _qt_target_qt__dd_ _qt_es6_qt__co_\n        _qt_module_qt__dd_ _qt_commonjs_qt__co_\n        _qt_noImplicitAny_qt__dd_ true_co_\n        _qt_sourceMap_qt__dd_ true_co_\n        _qt_outDir_qt__dd_ _qt_app_qt__co_\n        _qt_types_qt__dd_ [\n            _qt_babylonjs_qt_\n        ]\n    }_co_\n    _qt_include_qt__dd_ [\n        _qt_src/**/*_qt_\n    ]_co_\n    _qt_exclude_qt__dd_ [\n        _qt_node_modules_qt_\n    ]\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_package.json_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_{\n  _qt_name_qt__dd_ _qt_babylondemo_qt__co_\n  _qt_version_qt__dd_ _qt_1.0.0_qt__co_\n  _qt_description_qt__dd_ _qt__qt__co_\n  _qt_main_qt__dd_ _qt_main.ts_qt__co_\n  _qt_scripts_qt__dd_ {\n    _qt_test_qt__dd_ _qt_echo \\_qt_Error_dd_ no test specified\\_qt_ &amp_sm_&amp_sm_ exit 1_qt__co_\n    _qt_build_qt__dd_ _qt_webpack --progress -p_qt__co_\n    _qt_watch_qt__dd_ _qt_webpack --progress --watch_qt_\n  }_co_\n  _qt_author_qt__dd_ _qt__qt__co_\n  _qt_license_qt__dd_ _qt_ISC_qt__co_\n  _qt_dependencies_qt__dd_ {\n    _qt_babylonjs_qt__dd_ _qt_^3.2.0_qt__co_\n    _qt_babylonjs-loaders_qt__dd_ _qt_^3.2.0_qt_\n  }_co_\n  _qt_devDependencies_qt__dd_ {\n    _qt_awesome-typescript-loader_qt__dd_ _qt_^5.0.0_qt__co_\n    _qt_typescript_qt__dd_ _qt_^2.8.3_qt__co_\n    _qt_webpack_qt__dd_ _qt_^4.8.3_qt__co_\n    _qt_webpack-cli_qt__dd_ _qt_^2.1.3_qt_\n  }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-05-22T16:18:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello not sure this belongs to Babylon.js forum but more in a vscode forum _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe wrote a doc that perhaps can help you_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/how_to/how_to_start_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/how_to/how_to_start_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"HoloLite","Date":"2018-05-22T17:41:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tFYI_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am not using webpack directly. Instead I am using angular which uses webpack under the hood.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWith angular it is quite easy to configure both release and debug build (which allows fast build and watch + auto browser refresh).\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olsibob","Date":"2018-05-23T10:27:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ thanks_co_ that document is super helpful. Perhaps there should be a doc that is explicitly aimed at _qt_environments for developing using BabylonJS_qt__co_ in addition to this one on contributing to BabylonJS? (I would of course eventually like to contribute_co_ but I need to get to know it first). I don_t_t think what I_t_m doing is specific to vscode_t_s handling of tyoescript_co_ I think I_t_d get similar results in Atom.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/28694-hololite/?do_eq_hovercard_qt_ data-mentionid_eq__qt_28694_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/28694-hololite/_qt_ rel_eq__qt__qt__gt_@HoloLite_lt_/a_gt_ thanks for the suggestion about Angular. That led me to the Angular docs_co_ which has one of the nicest introductions to webpack I_t_ve found. _lt_a href_eq__qt_https_dd_//angular.io/guide/webpack#entries-and-outputs_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//angular.io/guide/webpack#entries-and-outputs_lt_/a_gt_ it_t_s for webpack 3_co_ but it wasn_t_t too painful to update it for webpack 4.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think part of the issue I_t_ve been having is that the js ecosystem evolves so fast that even tuorials that are a couple of months old can be out-of-date. I think I_t_ve found solutions to some of my problems. I_t_ve got some fairly nice results (as in fairly fast reloading) by taking these steps\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. The main one is that I_t_m using webpack 4 (but was following webpack 3 tutorials). 4 introduces support for environment modes_co_ and the default is `production`_co_ which runs the minification step _lt_a href_eq__qt_https_dd_//medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a_lt_/a_gt_. Additionally_co_ my npm build script was invoking webpack with the -p flag_co_ which also sets the environment to production. So this was why minification was running even though I had an empty plugins array. By creating a config that runs webpack in development mode_co_ I can skip minification.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. using the webpack-dev-server really helped here\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3. Splitting the output bundles into app (my tiny main.ts file) and vendor (babylonjs)_co_ with the splitChunks optimization seems to help as well\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m sure there are many more refinements I could make. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat I might do is create a WIP GitHub repo of the setup I have. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tCan anyone recommend any repos that demonstrate their development setup?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m keen to get a fairly solid development environment in place_co_ so I_t_d like to get an idea of what _qt_good_qt_ looks like. How do other forum users use BabylonJS with typescript?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2018-05-23T10_dd_28_dd_56Z_t_ title_eq__t_05/23/2018 10_dd_28  AM_t_ data-short_eq__t_May 23_t__gt_May 23_lt_/time_gt_ by olsibob_lt_/strong_gt_\n\t\n\t\t_lt_br_gt_add link\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-05-23T18:55:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tcant you use Grunt to watch if a file has been changed and automatically compile?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"HoloLite","Date":"2018-05-23T20:28:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have a template to configure minimal angular with babylonjs which also includes the npm packages and how to reference the ts api from your ng ts files. If I find my free time again I will upload it for the forum. In fact you can easily expand this to make a HTML tags/element based Dom model api for babylonjs. And you can combine both Dom style and procedural approach. I am not much of Dom person so I never bother going there even though it_t_s really not too hard to do it. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tYes the webpack dev server is best for dev env. It autobuilds and auto refreshes the browser for debug build. No need to configure gulp/grunt etc. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olsibob","Date":"2018-05-24T07:50:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI just found this_co_ will play around with it later today to see if it speeds things up_dd_ \n_lt_/p_gt_\n_lt_iframe allowfullscreen_eq__qt__qt_ data-controller_eq__qt_core.front.core.autosizeiframe_qt_ data-embedcontent_eq__qt__qt_ data-embedid_eq__qt_embed6553626664_qt_ scrolling_eq__qt_no_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/topic/31563-hot-reloading-engine/?tab_eq_comments&amp_sm_do_eq_embed&amp_sm_comment_eq_181332&amp_sm_embedComment_eq_181332&amp_sm_embedDo_eq_findComment#comment-181332_qt_ style_eq__qt_height_dd_261px_sm_max-width_dd_502px_sm__qt__gt__lt_/iframe_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olsibob","Date":"2018-05-24T21:17:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI think I_t_ve got a setup now that I_t_m happy with. It automatically reloads pretty quick (usually before I_t_ve had time to cmd-tab back to the browser)_co_ and requires IMO minimal setup. The key was realising that webpack 4_t_s _qt_mode_qt_ variable pretty much takes care of everything for you_co_ and can be passed in from the npm scripts_co_ so there_t_s no need (for small projects anyway) to have different config scripts for different environments.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere you run _lt_strong_gt_npm start_lt_/strong_gt_ for develop mode with hot reloading_co_ and _lt_strong_gt_npm build_lt_/strong_gt_ for production.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere are the config files_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_package.json_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_{\n  _qt_name_qt__dd_ _qt_babylondemo_qt__co_\n  _qt_version_qt__dd_ _qt_1.0.0_qt__co_\n  _qt_description_qt__dd_ _qt__qt__co_\n  _qt_main_qt__dd_ _qt_main.ts_qt__co_\n  _qt_scripts_qt__dd_ {\n    _qt_start_qt__dd_ _qt_webpack-dev-server --mode development --inline --progress --port 8080_qt__co_\n    _qt_test_qt__dd_ _qt_echo \\_qt_Error_dd_ no test specified\\_qt_ &amp_sm_&amp_sm_ exit 1_qt__co_\n    _qt_build_qt__dd_ _qt_webpack --mode production --progress_qt__co_\n    _qt_watch_qt__dd_ _qt_webpack --progress --watch_qt_\n  }_co_\n  _qt_author_qt__dd_ _qt__qt__co_\n  _qt_license_qt__dd_ _qt_ISC_qt__co_\n  _qt_dependencies_qt__dd_ {\n    _qt_babylonjs_qt__dd_ _qt_^3.2.0_qt__co_\n    _qt_babylonjs-loaders_qt__dd_ _qt_^3.2.0_qt_\n  }_co_\n  _qt_devDependencies_qt__dd_ {\n    _qt_awesome-typescript-loader_qt__dd_ _qt_^5.0.0_qt__co_\n    _qt_html-webpack-plugin_qt__dd_ _qt_^3.2.0_qt__co_\n    _qt_typescript_qt__dd_ _qt_^2.8.3_qt__co_\n    _qt_webpack_qt__dd_ _qt_^4.8.3_qt__co_\n    _qt_webpack-cli_qt__dd_ _qt_^2.1.3_qt__co_\n    _qt_webpack-dev-server_qt__dd_ _qt_^3.1.4_qt_\n  }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_tsconfig.json_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_{\n    _qt_compilerOptions_qt__dd_ {\n        _qt_target_qt__dd_ _qt_es6_qt__co_\n        _qt_module_qt__dd_ _qt_commonjs_qt__co_\n        _qt_noImplicitAny_qt__dd_ true_co_\n        _qt_sourceMap_qt__dd_ true_co_\n        _qt_outDir_qt__dd_ _qt_app_qt__co_\n        _qt_types_qt__dd_ [\n            _qt_babylonjs_qt_\n        ]\n    }_co_\n    _qt_include_qt__dd_ [\n        _qt_src/**/*_qt_\n    ]_co_\n    _qt_exclude_qt__dd_ [\n        _qt_node_modules_qt_\n    ]\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_webpack.config.js_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_const path _eq_ require(_t_path_t_)_sm_\nconst HtmlWebpackPlugin _eq_ require(_t_html-webpack-plugin_t_)_sm_\n\nmodule.exports _eq_ {\n    entry_dd_ {\n        _t_app_t__dd_ _t_./src/main.ts_t__co_\n        _t_vendor_t__dd_ _t_./src/vendor.ts_t_\n    }_co_\n    externals_dd_ {\n        oimo_dd_ _t_OIMO_t__co_ //or true\n        cannon_dd_ _t_CANNON_t__co_ //or true\n        earcut_dd_ _t_EARCUT_t_\n    }_co_\n    plugins_dd_ [\n        new HtmlWebpackPlugin({\n            template_dd_ _t_src/index.html_t_\n          })\n    ]_co_\n    module_dd_ {\n        rules_dd_ [{\n            test_dd_ /\\.tsx?$/_co_\n            include_dd_ path.resolve(__dirname_co_ _qt_src_qt_)_co_\n            loader_dd_ _t_awesome-typescript-loader_t__co_\n            exclude_dd_ /node_modules/\n        }]\n    }\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"HoloLite","Date":"2018-05-24T22:04:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNice progress _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]