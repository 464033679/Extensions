[{"Owner":"fenomas","Date":"2017-06-25T11:06:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have a question about using an SPS to manage merged scenery - i.e. trees and bushes and whatnot.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo start with_co_ let_t_s say that my scene has 50 trees and 50 bushes. They are all static_co_ so rather than use instances I want to merge them all into one big _qt_scenery_qt_ mesh. I_t_d like to use SPS for this_co_ for convenience so that I don_t_t have to manually mess with vertex lists_co_ etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ I create an SPS_co_ call _qt_addShape(tree_co_ 50)_sm_ addShape(bush_co_ 50)_sm__qt__co_ and then I set each particle position_co_ and I call _qt_buildMesh()_qt_. Once created_co_ the scenery is essentially static_co_ so there_t_s no need for any update functions_co_ particle recycling_co_ etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow_co_ my question_dd_  Suppose that later on I need to add a flower to this scenery mesh_co_ or I need more trees beyond my initial number. Is it possible to add new shapes to the SPS after creation like this_co_ or do I need to dispose and recreate the SPS?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFollow up_dd_ if it is possible_co_ would it make sense in my situation? If there is a performance benefit to having the SPS be immutable_co_ I_t_d rather have it perform faster in the general case even if there_t_s a cost to re-creating it. But if there_t_s no performance benefit I_t_d rather update it incrementally.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-06-25T11:55:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tquick answer _dd_ the SPS can be seen as an API to access/modify one big mesh from its subparts (the solid particles)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ it has one fix-sized geometry once created. This means you can_t_t add any particles once built. If this need exists_co_ then two options _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- dispose and recreate a new SPS with more particles if you feel OK with this delay (or create the new one before disposing the first and just swap them when ok)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- create in advance all the particles in a single SPS_co_ even if they aren_t_t visible initially (you can manage the per particle visibility and/or the per particle processing _dd_ you can choose to update only some kinds of particles or only some ranges of particles to go faster)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAn immutable SPS is simply an non-updatable mesh. _lt_s_gt_Its performance gain is the same than the one in the comparison between updatable/non-updatable meshes. _lt_/s_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#272a34_sm__qt__gt_The performance differences are comparable to other/any updatable/non-updatable meshes_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMoreover_co_ an immutable SPS doesn_t_t store the particle data (positions_co_ rotations_co_ velocities_co_ colors_co_ uvs_co_ etc)_co_ so it_t_s also less consumed memory. It_t_s really designed for creating things that will never evolve once created_co_ like maze walls_co_ asteroid fields_co_ trees and buildings in the distance_co_ etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNote well that a standard (not immutable) SPS is updated only when you call setParticles()_co_ what is not required to be called each frame. So I think the performance gain between an immutable SPS and a standard one is really really low if you don_t_t update the standard one at all (or very rarely).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDepending on the frequency or the probability of the need for the landscape update_co_ I would opt for single SPS with a large pool of possible things to be spawned.\n_lt_/p_gt_\n\n_lt_p_gt_\n\texample here (not static but same principle) _dd_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/Starfighter/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/Starfighter/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe blue laser lights in the distance_co_ the laser impacts on the enemies_co_ the enemy explosions_co_ the enemy laser crosses_co_ and the stars are all the same SPS. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-06-25T12:17:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ thanks!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn my case the player can add meshes to the scenery_co_ so it_t_s probably not feasible to pre-allocate a pool since I can_t_t know what will be needed. So it sounds like I will need to re-create the SPS each time it changes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut on the other hand_co_ I might as well make it immutable - since there_t_s no need to leave the duplicated vertex arrays in the JS heap if I won_t_t be updating them.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDoes that sound right?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-06-25T12:57:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tfully right ! _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]