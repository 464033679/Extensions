[{"Owner":"celian-garcia","Date":"2014-07-02T12:43:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello !_lt_/p_gt__lt_p_gt_I made a createSubdividedCylinder() function and I am relatively proud of me ^^ Here is the result _dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-70547200-1404302564.jpeg_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-70547200-1404302564.jpeg_qt_ data-fileid_eq__qt_2118_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-8511-0-70547200-1404302564.jpeg_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But making it_co_ I found some issues _dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_ul_gt__lt_li_gt_firstly_co_ the diameterTop_co_ and diameterBottom are inversed ! For example _dd_ when I write it_lt_/li_gt__lt_/ul_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_// My function var myVertexData _eq_ createSubdividedCylinder(1_co_ 1_co_ 0.5_co_ 16)_sm_var myCylinder _eq_ new BABYLON.Mesh(_qt_myCylinder_qt__co_ scene)_sm_myVertexData.applyToMesh(myCylinder)_sm_myCylinder.position.x _eq_ -2_sm_// Babylon functionvar babylonVertexData _eq_ new BABYLON.VertexData.CreateCylinder(1_co_ 1_co_ 0.5_co_ 16)_sm_var babylonCylinder _eq_ new BABYLON.Mesh(_qt_babylonCylinder_qt__co_ scene)_sm_babylonVertexData.applyToMesh(babylonCylinder)_sm_babylonCylinder.position.x _eq_ 2_sm__lt_/pre_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-61889700-1404303395.jpeg_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-61889700-1404303395.jpeg_qt_ data-fileid_eq__qt_2120_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-8511-0-61889700-1404303395.jpeg_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_We do not obtain the same result whereas both functions have the same header _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var createSubdividedCylinder _eq_ function (height_co_ diameterTop_co_ diameterBottom_co_ tessellation_co_ subdivisions) {...}_sm_VertexData.CreateCylinder _eq_ function (height_co_ diameterTop_co_ diameterBottom_co_ tessellation) {...}_sm__lt_/pre_gt__lt_ul_gt__lt_li_gt_Secondly_co_ when we do not have the same diameterBottom &amp_sm_ diameterTop_co_ normals are not really the good ones._lt_/li_gt__lt_/ul_gt__lt_p_gt_- The first picture shows us what we_lt_strong_gt_ want_lt_/strong_gt__lt_/p_gt__lt_p_gt_- second one shows what we _lt_strong_gt_have currently_lt_/strong_gt_._lt_/p_gt__lt_p_gt_Of course blue arrows materializes normals and gray trapeze is the cylinder_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-19263200-1404304688.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-19263200-1404304688.png_qt_ data-fileid_eq__qt_2121_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-8511-0-19263200-1404304688.png_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I fixed the first bug but the second is harder to fix so I prefered make a _qt_BABYLON.VertexData.ComputeNormals_qt_ after creation to have the good normals._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-07-02T17:33:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Just for the sake of my comprehension_dd_ the bug is your code or mine?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-07-02T19:06:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_From what I understand he was in Babylon_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"celian-garcia","Date":"2014-07-02T21:23:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Both of them are from your code but I only fixed the first one (about inversed diameters) in my createSubdividedCylinder() function_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"celian-garcia","Date":"2014-07-02T21:37:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_In fact I could try to resolve the second bug (about normals) and prepare a pull request. _lt_/p_gt__lt_p_gt_It would add at the same time the possibility to create subdivided cylinder too. I precise than the function would have exactly the same behaviour than yours but with an additionnal and optionnal parameter _dd_ subdivisions_co_ by default equal to 1._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-07-02T23:46:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Sounds good _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"celian-garcia","Date":"2014-07-03T06:34:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Cool ! I_t_m working on it_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"celian-garcia","Date":"2014-07-07T10:20:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I surrender ! In fact I had nice values for the normals but these normals was coming from vertices and not faces. And I saw in the computeNormals function that normals have to be computed for faces. So my results are very closed to computeNormals ones but not exactly sames. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_strong_gt_It is not really surrending_lt_/strong_gt_ cause I_t_ll make a simple call to the magical computeNormals function at the end like it has be done for the torusknot ^^. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So the new CreateCylinder function is coming soon !_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Here is a comparison in pictures _dd_ _lt_/p_gt__lt_p_gt_With old function CreateCylinder _dd__lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-79380900-1404728169.jpeg_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-79380900-1404728169.jpeg_qt_ data-fileid_eq__qt_2147_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-8511-0-79380900-1404728169.jpeg_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_With the new function (trying to compute normals)_lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-39079800-1404728169.jpeg_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-39079800-1404728169.jpeg_qt_ data-fileid_eq__qt_2146_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-8511-0-39079800-1404728169.jpeg_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_With the new function and computeNormals function (_lt_strong_gt_the one I_t_ll make finally_lt_/strong_gt_)_lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-87018400-1404728168.jpeg_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2014/post-8511-0-87018400-1404728168.jpeg_qt_ data-fileid_eq__qt_2145_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-8511-0-87018400-1404728168.jpeg_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"celian-garcia","Date":"2014-07-07T12:34:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Pull request done ! _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"celian-garcia","Date":"2014-07-07T12:36:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Here is the code of the new function CreateCylinder if somebody want _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_VertexData.CreateCylinder _eq_ function (height_co_ diameterTop_co_ diameterBottom_co_ tessellation_co_ subdivisions) {    var radiusTop _eq_ diameterTop / 2_sm_    var radiusBottom _eq_ diameterBottom / 2_sm_    var indices _eq_ []_sm_    var positions _eq_ []_sm_    var normals _eq_ []_sm_    var uvs _eq_ []_sm_    height          _eq_ height || 1_sm_    diameterTop     _eq_ diameterTop || 0.5_sm_    diameterBottom  _eq_ diameterBottom || 1_sm_    tessellation    _eq_ tessellation || 16_sm_    subdivisions    _eq_ subdivisions || 1_sm_    subdivisions    _eq_ (subdivisions &lt_sm_ 1) ? 1 _dd_ subdivisions_sm_    var getCircleVector _eq_ function (i) {        var angle _eq_ (i * 2.0 * Math.PI / tessellation)_sm_        var dx _eq_ Math.cos(angle)_sm_        var dz _eq_ Math.sin(angle)_sm_        return new BABYLON.Vector3(dx_co_ 0_co_ dz)_sm_    }_sm_    var createCylinderCap _eq_ function (isTop) {        var radius _eq_ isTop ? radiusTop _dd_ radiusBottom_sm_        if (radius _eq__eq_ 0) {            return_sm_        }        var vbase _eq_ positions.length / 3_sm_        var offset _eq_ new BABYLON.Vector3(0_co_ height / 2_co_ 0)_sm_        var textureScale _eq_ new BABYLON.Vector2(0.5_co_ 0.5)_sm_        if (!isTop) {            offset.scaleInPlace(-1)_sm_            textureScale.x _eq_ -textureScale.x_sm_        }        // Positions_co_ normals &amp_sm_ uvs        for (i _eq_ 0_sm_ i &lt_sm_ tessellation_sm_ i++) {            var circleVector _eq_ getCircleVector(i)_sm_            var position _eq_ circleVector.scale(radius).add(offset)_sm_            var textureCoordinate _eq_ new BABYLON.Vector2(                circleVector.x * textureScale.x + 0.5_co_                circleVector.z * textureScale.y + 0.5            )_sm_            positions.push(position.x_co_ position.y_co_ position.z)_sm_            uvs.push(textureCoordinate.x_co_ textureCoordinate.y)_sm_        }        // Indices        for (var i _eq_ 0_sm_ i &lt_sm_ tessellation - 2_sm_ i++) {            if (!isTop) {                indices.push(vbase)_sm_                indices.push(vbase + (i + 2) % tessellation)_sm_                indices.push(vbase + (i + 1) % tessellation)_sm_            } else {                indices.push(vbase)_sm_                indices.push(vbase + (i + 1) % tessellation)_sm_                indices.push(vbase + (i + 2) % tessellation)_sm_            }        }    }_sm_    var base    _eq_ new BABYLON.Vector3(0_co_ -1_co_ 0).scale(height / 2)_sm_    var offset  _eq_ new BABYLON.Vector3(0_co_ 1_co_ 0).scale(height / subdivisions)_sm_    var stride  _eq_ tessellation + 1_sm_    // Positions_co_ normals &amp_sm_ uvs    for (var i _eq_ 0_sm_ i &lt_sm__eq_ tessellation_sm_ i++) {        var circleVector _eq_ getCircleVector(i)_sm_        var textureCoordinate _eq_ new BABYLON.Vector2(i / tessellation_co_ 0)_sm_        var position_co_ radius _eq_ radiusBottom_sm_        for (var s _eq_ 0_sm_ s &lt_sm__eq_ subdivisions_sm_ s++) {            // Update variables            position _eq_ circleVector.scale(radius)_sm_            position.addInPlace(base.add(offset.scale(s)))_sm_            textureCoordinate.y +_eq_ 1 / subdivisions_sm_            radius +_eq_ (radiusTop - radiusBottom)/subdivisions_sm_            // Push in arrays            positions.push(position.x_co_ position.y_co_ position.z)_sm_            uvs.push(textureCoordinate.x_co_ textureCoordinate.y)_sm_        }    }    subdivisions +_eq_ 1_sm_    // Indices    for (var s _eq_ 0_sm_ s &lt_sm_ subdivisions - 1_sm_ s++) {        for (var i _eq_ 0_sm_ i &lt_sm__eq_ tessellation_sm_ i++) {            indices.push( i * subdivisions + s)_sm_            indices.push((i * subdivisions + (s + subdivisions)) % (stride * subdivisions))_sm_            indices.push( i * subdivisions + (s + 1))_sm_            indices.push( i * subdivisions + (s + 1))_sm_            indices.push((i * subdivisions + (s + subdivisions)) % (stride * subdivisions))_sm_            indices.push((i * subdivisions + (s + subdivisions + 1)) % (stride * subdivisions))_sm_        }    }    // Create flat triangle fan caps to seal the top and bottom.    createCylinderCap(true)_sm_    createCylinderCap(false)_sm_    // Normals    BABYLON.VertexData.ComputeNormals(positions_co_ indices_co_ normals)_sm_    // Result    var vertexData _eq_ new BABYLON.VertexData()_sm_    vertexData.indices _eq_ indices_sm_    vertexData.positions _eq_ positions_sm_    vertexData.normals _eq_ normals_sm_    vertexData.uvs _eq_ uvs_sm_    return vertexData_sm_}_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]