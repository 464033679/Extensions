[{"Owner":"ua4192","Date":"2017-06-19T17:58:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tDear all.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIs it possible to fully free memory taken by browser when creating a new scene?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have tried everything like create a new engine_co_ reseting scene and even dispose all meshes in the scene.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy feeling is that firefox_co_ Iexplorer_co_ GoogleChrome are not aware about this memory release and they increment the memory already taken by the previous scene with the next one.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is very annoyance_co_ finally the browser get all PC RAM memory.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWith ther bis scenes I am working with (1_co_5 GB RAM each scene) the behaviour is as expected not so good as expected.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBest regards\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-06-19T23:11:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tTheorically_co_ if you call engine.dispose() everything should be removed \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ua4192","Date":"2017-06-20T17:18:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI can guaranty you that at least in firefox this is not the case.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen I load the scene_co_ the memory taken by the previous loaded one (in the same firefox tab) is not released.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe only way ir to kill the firefox process linked to this tab and load the page again.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am using engine.dispose() and it doesn_t_t work.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTry just to load a moderate GLTF or babylon file multiple time by reloading the page and you will see the same behaviour.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBest regards\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-06-20T20:08:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI do not need to do this_co_ but I modified the button of one of my scenes to do a engine.dispose() to see what happens.  In Firefox_co_ there is a memory snapshot thing.  I snap before and after the dispose_co_ and only small amount of the typed array / ArrayBuffer_co_ and JS array data goes down.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBefore_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_13482_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2017_06/before.jpg.ffa8ee30d5c12a53eb547e8b66a7e9a6.jpg_qt_ alt_eq__qt_before.jpg.ffa8ee30d5c12a53eb547e8b66a7e9a6.jpg_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tAfter_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_13483_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2017_06/after.jpg.0a2c41d785209b7d2089fd6772e99bf7.jpg_qt_ alt_eq__qt_after.jpg.0a2c41d785209b7d2089fd6772e99bf7.jpg_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tArrayBuffers &amp_sm_ Arrays do not have a dispose_co_ the GC is supposed to clean when they go out of scope.  The only thing being actively disposed is GPU resources.  Not sure you can actually request a GC like in Java (even then Java can just ignore you).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI even actively re-assigned the Float32Array member_co_ _data_co_ of _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.buffer.ts#L93_qt_ rel_eq__qt_external nofollow_qt__gt_Buffer.ts_lt_/a_gt_ in the dispose().  This build yielded the same results.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen I load a different URL or even reload the same in the same tab_co_ everything is cleaned up.  You might be looking at system memory though.  One thing I noticed is Firefox lets you go back to previous scenes. IT DOES NOT reload them.  If you do a lot of refreshing during Firefox will log something like _qt_max webgl sessions of 16 exceeded_co_ last one dropped_qt_.  It_t_s a feature!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ua4192","Date":"2017-06-21T16:44:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn my case when I reload the page in the same tab or open another url the memory is not released.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaybe I have not watched you properly.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBest regards\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-06-21T17:12:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHow are you measuring memory?  If you are using a tool external to FireFox like Windows Resource Monitor_co_ then you should probably see memory move from free to standby as succeeding scenes load.  That is so you may hit the back button.  As I said before firefox does not reload scenes when you go back.  Click this _lt_a href_eq__qt_https_dd_//palmer-jc.github.io/scenes/QueuedInterpolation/flying_carpet/index.html_qt_ rel_eq__qt_external nofollow_qt__gt_scene_lt_/a_gt_.  There is an effect (1 of 3 randomly decided) run at the beginning_co_ then animation.  In the middle_co_ go to any other page.  Then hit the back button.  In Firefox_co_ it picks up right from where it left off.  Other browsers reload &amp_sm_ start over.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo do this_co_ it must keep the memory for the scene.  You might not like it_co_ but I see no problem_co_ per say.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-06-21T19:27:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tFor doc purposes_co_ I just got the Firefox 16 message_dd_\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tQuote\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tError_dd_ WebGL warning_dd_ Exceeded 16 live WebGL contexts for this principal_co_ losing the least recently used one.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"max123","Date":"2017-06-22T08:31:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSame in Chrome_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#95a5a6_sm__qt__gt_WARNING_dd_ Too many active WebGL contexts. Oldest context will be lost._lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]