[{"Owner":"jerome","Date":"2015-04-29T09:27:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_After having monitored in many browsers the CPU profiler_co_ I noticed_co_ when _lt_a href_eq__qt_http_dd_//babylondoc.azurewebsites.net/page.php?p_eq_25096_qt_ rel_eq__qt_external nofollow_qt__gt_morphing meshes_lt_/a_gt__co_ that the _lt_em_gt_computeNormals()_lt_/em_gt_ method called in each frame was the bottleneck. There was a _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/13258-animate-or-morph-mesh-dynamically/?p_eq_76591_qt__gt_previous topic_lt_/a_gt_ where this performance issue was talked about with JCPalmer._lt_/p_gt__lt_p_gt_No real improvement were found._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So I decided to hack this method to check if something could be done._lt_/p_gt__lt_p_gt_Remember this method was designed long time ago before dynamic morphing was added to BJS_co_ so it wasn_t_t designed to be used in a render loop 60 times per second._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_&lt_sm_tl_sm_dr_sm_&gt_sm__lt_/p_gt__lt_p_gt_current computeNormals() _dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#ZOSGB_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#ZOSGB_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_local computeNormals() _dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#ZOSGB%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#ZOSGB#1_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If this mesh is too heavy (48 000 vertices !) for your computer_co_ please adjust your mesh size line 147 _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_ var nbPaths _eq_ 80_sm__lt_/pre_gt__lt_p_gt_&lt_sm_/tl_sm_td_sm_&gt_sm__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What did I find ?_lt_/p_gt__lt_p_gt_I found many inexpensive changes could be done._lt_/p_gt__lt_p_gt_For instance_co_ the _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/Mesh/babylon.mesh.vertexData.ts#L1163_qt_ rel_eq__qt_external nofollow_qt__gt_current computeNormals()_lt_/a_gt_ method does _dd__lt_/p_gt__lt_p_gt_- 3 passes _dd_ the first for _lt_em_gt_positions.length_lt_/em_gt_ times_co_ the second for _lt_em_gt_faces number_lt_/em_gt_ times and the last _lt_em_gt_vertices number * faces of vertices number_lt_/em_gt_ times_lt_/p_gt__lt_p_gt_- allocate 3 intermediate arrays _dd_ one will be filled with _lt_em_gt_number of vertices_lt_/em_gt_ new Vector3 objects_co_ another one will be filled _lt_em_gt_number of vertices _lt_/em_gt_arrays (an array of arrays) containing faces indexes._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This makes the code very readable (if I can understand it at first sight not being an expert_co_ I consider it very readable) but may be improved in term of passes and created objects._lt_/p_gt__lt_p_gt_This is quite important because I noticed that Chromium_co_ which has for now better general perfs in js execution and rendering than FF_co_ starts to consume more and more in GC after a while on a morphing running for minutes... up to 70% CPU on some examples on long duration. The framerate finally decreases..._lt_/p_gt__lt_p_gt_Since FF keeps a constant lower framerate and a constant GC usage._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Well_co_ for now_co_ I reduced the method down to 2 passes only (the first for _lt_em_gt_nb of faces_lt_/em_gt_ times and the second for _lt_em_gt_nb of vertices_lt_/em_gt_ times) and the memory allocation down to 6 Vector3 objects and one array of Vector3 sized _lt_em_gt_nb of vertices length_lt_/em_gt_._lt_/p_gt__lt_p_gt_The 6 intermediate Vector3 could be not used if I would re-implement vector3 methods locally (add_co_ subtract_co_ cross product_co_ normalize) but I don_t_t think it_t_s worth it in term of GC gain._lt_/p_gt__lt_p_gt_I would like to eliminate the second pass and the intermediate array whose use is only to normalize each normal_co_ but I have no idea for now. The CPU profiler doesn_t_t show this pass has a noticeable impact_co_ so it may not be worth it either._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_That said... how much is this improvement ?_lt_/p_gt__lt_p_gt_Well_co_ it depends on the mesh size and on your computer/browser capabilities._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So please in this very heavy example (done in purpose to stress the method)_co_ change the mesh size (nb of vertices) line 147 and you_t_ll probably find a value where the improvement is really really noticeable._lt_/p_gt__lt_p_gt_On my own computer_co_ with Chromium_co_ I can have 60 fps (and no GC at all) for minutes with the new function since the legacy one will decrease the framerate downto 28 fps after minutes and the GC will increase up to 70% CPU._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You can also compare both method durations by opening your browser console _dd__lt_/p_gt__lt_p_gt_new method _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#ZOSGB%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#ZOSGB#2_lt_/a_gt__lt_/p_gt__lt_p_gt_legacy _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#ZOSGB%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#ZOSGB#3_lt_/a_gt__lt_/p_gt__lt_p_gt_On my computer_co_ with local examples (outside PG and PG editor running scripts)_co_ I get between x3 and x5 speed increase !_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So please make your own tests and let me know what you think about this improvement before I dare a PR_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-04-29T12:27:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Without looking into the implementation - the new variant is 30-40% slower on my computer. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T12:30:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_ _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_mmhh.. which browser ?_lt_/p_gt__lt_p_gt_I noticed the gain was quite null_co_ even sometimes negative_co_ in the PG (maybe the PG editor has side effects ?)._lt_/p_gt__lt_p_gt_I will publish a direct link._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T12:38:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I have a lead to get rid the intermediate Vector3 array also._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-04-29T13:13:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Both chrome and IE_co_almost  same 30% reduction._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-04-29T13:33:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi Jerome_co_ in chrome v. 42 (windows 7) the new version gives 6 FPS_co_ versus 12 FPS for the legacy one._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It_t_s weird since it looks like you_t_ve optimized the method quite well..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I tried copy-pasting the original function into your custom one and then the FPS drops to around 4_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#ZOSGB%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#ZOSGB#4_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So I_t_d say your method is definitely an improvement_co_ but there is something weird in how the PG behaves!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T13:43:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_OK_co__lt_/p_gt__lt_p_gt_Please use Chrome (I don_t_t have IE) so we can compare for now (I hope IE will react the same then)._lt_/p_gt__lt_p_gt_Please open the Developer Tools._lt_/p_gt__lt_p_gt_In the lower panel_co_ click on the Rendering tab_co_ then opt in for _qt_Show FPS meter_qt_._lt_/p_gt__lt_p_gt_In the upper tab_co_ opt in for _qt_Collect Javascript CPU Profile_qt_. Don_t_t start it for now please._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Now_co_ you can just check the FPS with this example (I tuned for the results are very sensible on my machine _eq_ 28800 vertices) _dd__lt_/p_gt__lt_p_gt_legacy _eq_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/computeNormals/legacy.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/computeNormals/legacy.html_lt_/a_gt__lt_/p_gt__lt_p_gt_optimized _eq_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/computeNormals/optimized.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/computeNormals/optimized.html_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_My results here are _dd__lt_/p_gt__lt_p_gt_constant 28 FPS with legacy ...then decreasing_lt_/p_gt__lt_p_gt_constant 60 FPS with optimized_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If now you go back into the Developer Tools and you start the CPU profiler for_co_ say_co_ 3 minutes._lt_/p_gt__lt_p_gt_You_t_ll see the GC will remain at very low level_co_ quite null_co_ with optimized but will increase drastically with legacy version._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_04_2015/post-5453-0-79117900-1430314987.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_04_2015/post-5453-0-79117900-1430314987_thumb.png_qt_ data-fileid_eq__qt_4180_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-5453-0-79117900-1430314987_thumb.pn_qt__gt__lt_/a_gt__lt_/div_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_04_2015/post-5453-0-79117900-1430314987.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_04_2015/post-5453-0-79117900-1430314987_thumb.png_qt_ data-fileid_eq__qt_4180_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-5453-0-79117900-1430314987_thumb.pn_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-04-29T13:47:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_For me too_co_ I get 3fps with _lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_Chrome and the link of Jahow_lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_edite_dd_ _eq_&gt_sm_ _lt_/span_gt__lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/computeNormals/optimized.html_qt_ title_eq__qt_External link_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousqu.../optimized.html_lt_/a_gt_ is ok_dd_ 60 FPS_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T13:52:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Please test the direct links and let me know_lt_/p_gt__lt_p_gt_I will add a way to tune the mesh size so you will find a good value to see the difference_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For those wanting to to read the code_co_ here_t_s the last commented version _dd__lt_/p_gt__lt_p_gt_Two passes only (_lt_em_gt_nb of faces_lt_/em_gt_ times then _lt_em_gt_nb of normal_lt_/em_gt_ vectors times) and no more intermediate array._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_  var localComputeNormals _eq_ function(positions_co_ indices_co_ normals) {    var index _eq_ 0_sm_    // temp Vector3    var p1 _eq_ BABYLON.Vector3.Zero()_sm_    var p2 _eq_ BABYLON.Vector3.Zero()_sm_    var p3 _eq_ BABYLON.Vector3.Zero()_sm_    var p1p2 _eq_ BABYLON.Vector3.Zero()_sm_    var p3p2 _eq_ BABYLON.Vector3.Zero()_sm_    var faceNormal _eq_ BABYLON.Vector3.Zero()_sm_    var vertexNormali1 _eq_ BABYLON.Vector3.Zero()_sm__sm_    var vertexNormali2 _eq_ BABYLON.Vector3.Zero()_sm__sm_    var vertexNormali3 _eq_ BABYLON.Vector3.Zero()_sm__sm_    // indice triplets _eq_ 1 face    var nbFaces _eq_ indices.length / 3_sm_    for (index _eq_ 0_sm_ index &lt_sm_ nbFaces_sm_ index++) {      var i1 _eq_ indices[index * 3]_sm_      var i2 _eq_ indices[index * 3 + 1]_sm_      var i3 _eq_ indices[index * 3 + 2]_sm_      // setting the temp V3      BABYLON.Vector3.FromFloatsToRef(positions[i1 * 3]_co_ positions[i1 * 3 + 1]_co_ positions[i1 * 3 + 2] _co_ p1)_sm_      BABYLON.Vector3.FromFloatsToRef(positions[i2 * 3]_co_ positions[i2 * 3 + 1]_co_ positions[i2 * 3 + 2] _co_ p2)_sm_      BABYLON.Vector3.FromFloatsToRef(positions[i3 * 3]_co_ positions[i3 * 3 + 1]_co_ positions[i3 * 3 + 2] _co_ p3)_sm_      p1.subtractToRef(p2_co_ p1p2)_sm_      p3.subtractToRef(p2_co_ p3p2)_sm_      BABYLON.Vector3.CrossToRef(p1p2_co_ p3p2_co_ faceNormal)_sm_      faceNormal.normalize()_sm_      // All intermediate results are stored in the normals array _dd_      // get the normals at i1_co_ i2 and i3 indexes      normals[i1 * 3]     _eq_ normals[i1 * 3]     || 0_sm_      normals[i1 * 3 + 1] _eq_ normals[i1 * 3 + 1] || 0_sm_      normals[i1 * 3 + 2] _eq_ normals[i1 * 3 + 2] || 0_sm_      normals[i2 * 3]     _eq_ normals[i2 * 3]     || 0_sm_      normals[i2 * 3 + 1] _eq_ normals[i2 * 3 + 1] || 0_sm_      normals[i2 * 3 + 2] _eq_ normals[i2 * 3 + 2] || 0_sm_      normals[i3 * 3]     _eq_ normals[i3 * 3]     || 0_sm_      normals[i3 * 3 + 1] _eq_ normals[i3 * 3 + 1] || 0_sm_      normals[i3 * 3 + 2] _eq_ normals[i3 * 3 + 2] || 0_sm_      // make intermediate vectors3 from normals values      BABYLON.Vector3.FromFloatsToRef(normals[i1 * 3]_co_ normals[i1 * 3 + 1]_co_ normals[i1 * 3 + 2] _co_ vertexNormali1)_sm_      BABYLON.Vector3.FromFloatsToRef(normals[i2 * 3]_co_ normals[i2 * 3 + 1]_co_ normals[i2 * 3 + 2] _co_ vertexNormali2)_sm_      BABYLON.Vector3.FromFloatsToRef(normals[i3 * 3]_co_ normals[i3 * 3 + 1]_co_ normals[i3 * 3 + 2] _co_ vertexNormali3)_sm_      // add the current normal to the face to these intermediate vectors3      vertexNormali1 _eq_ vertexNormali1.addInPlace(faceNormal)_sm_      vertexNormali2 _eq_ vertexNormali2.addInPlace(faceNormal)_sm_      vertexNormali3 _eq_ vertexNormali3.addInPlace(faceNormal)_sm_      // store back intermediate vectors3 into the normals array      normals[i1 * 3]     _eq_ vertexNormali1.x_sm_      normals[i1 * 3 + 1] _eq_ vertexNormali1.y_sm_      normals[i1 * 3 + 2] _eq_ vertexNormali1.z_sm_      normals[i2 * 3]     _eq_ vertexNormali2.x_sm_      normals[i2 * 3 + 1] _eq_ vertexNormali2.y_sm_      normals[i2 * 3 + 2] _eq_ vertexNormali2.z_sm_      normals[i3 * 3]     _eq_ vertexNormali3.x_sm_      normals[i3 * 3 + 1] _eq_ vertexNormali3.y_sm_      normals[i3 * 3 + 2] _eq_ vertexNormali3.z_sm_    }        // last normalization    for (index _eq_ 0_sm_ index &lt_sm_ normals.length / 3_sm_ index++) {      BABYLON.Vector3.FromFloatsToRef(normals[index * 3]_co_ normals[index * 3 + 1]_co_ normals[index * 3 + 2] _co_ vertexNormali1)_sm_      vertexNormali1.normalize()_sm_      normals[index * 3]     _eq_ vertexNormali1.x_sm_      normals[index * 3 + 1] _eq_ vertexNormali1.y_sm_      normals[index * 3 + 2] _eq_ vertexNormali1.z_sm_        }  }_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-04-29T14:03:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_You_t_ve put double semicolons here_dd__lt_/p_gt__lt_p_gt__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint lang-auto_qt__gt_     var vertexNormali1 _eq_ BABYLON.Vector3.Zero()_sm__sm_    var vertexNormali2 _eq_ BABYLON.Vector3.Zero()_sm__sm_    var vertexNormali3 _eq_ BABYLON.Vector3.Zero()_sm__sm__lt_/pre_gt_I tend to avoid multiplying the key word “var” when i can. that optimizes the code slightly._lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint lang-auto_qt__gt_    var index _eq_ 0_co_        p1 _eq_ BABYLON.Vector3.Zero()_co_        p2 _eq_ BABYLON.Vector3.Zero()_co_        p3 _eq_ BABYLON.Vector3.Zero()_co_        p1p2 _eq_ BABYLON.Vector3.Zero()_co_        p3p2 _eq_ BABYLON.Vector3.Zero()_co_        faceNormal _eq_ BABYLON.Vector3.Zero()_co_        vertexNormali1 _eq_ BABYLON.Vector3.Zero()_co_        vertexNormali2 _eq_ BABYLON.Vector3.Zero()_co_        vertexNormali3 _eq_ BABYLON.Vector3.Zero()_co_        nbFaces _eq_ indices.length / 3_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-04-29T14:07:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_works wonderfully! I wonder what the problem is with the playground. Your code is 3 times faster._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T14:23:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Use now this (Q&amp_sm_D) link to tune it to your computer _dd_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/computeNormals/menu.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/computeNormals/menu.html_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Please guys let me know how it behaves in your browsers (Chrome_co_ IE_co_ FF_co_ etc)._lt_/p_gt__lt_p_gt_I feel a bit afraid to modify _lt_em_gt_computeNormals()_lt_/em_gt_ in the main repo  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wacko.png_qt_ alt_eq__qt__dd_wacko_dd__qt__gt_ and I need to know before if it works on your platforms as well as on mine._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T14:26:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_@dad72 _dd_ thank you for the semi-colons_co_ copy-cut bug _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_I prefer keep every var declaration apart... personal preference for readibility_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-04-29T14:29:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Excellent optimization Jerome_co_ nice work!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You could maybe set up a few test cases to prove that your new function replaces perfectly the current one? Something link_dd__lt_/p_gt__lt_p_gt_1/ compute normals on a ribbon (your current test case)_lt_/p_gt__lt_p_gt_2/ compute normal on another base shape_co_ for example _dd_ a height map_lt_/p_gt__lt_p_gt_3/ compute normal on an imported mesh_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T14:30:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_here in chrome_co_ I get a enormous gap between the two functions for a mesh sized 60 (28 800 vertices) and more _dd_ 60 fps  / 20 fps_lt_/p_gt__lt_p_gt_3 times faster !_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_size 70 _dd_ 60 fps / 12 fps  _eq_&gt_sm_    _lt_strong_gt_5 times faster !_lt_/strong_gt__lt_/p_gt__lt_p_gt_size 90 _dd_ 50 fps / 9 fps  _eq_&gt_sm_     5_co_5 times faster_lt_/p_gt__lt_p_gt_size 120 _dd_ 30 fps / 4 fps _eq_&gt_sm_ _lt_strong_gt_7_co_5 times faster !!! with the last acceptable framerate _dd_ 30 fps_lt_/strong_gt__lt_/p_gt__lt_p_gt_size 150 (135 200 vertices !) _dd_ 25 fps / 3 fps. well 8_co_33 times faster.. but 25 fps only_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T14:31:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_thank you Jahow_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_arf_co_ I just dig in this because I noticed my morphing tests reached 80% CPU in Chrome Garbage collection !_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-04-29T14:43:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_That_t_s the benefit of open source projects _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Another test case I just thought of_dd_ computing normals after a mesh has been converted to flat shaded._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T14:46:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_If someone could test please on a imported mesh (never done this)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I will do it on a height map_co_ ok._lt_/p_gt__lt_p_gt_I tested on a ribbon because it is intended to be morphed then with _lt_em_gt_CreateRibbon()_lt_/em_gt_ and because it is highly parametric._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_On a height map_co_ I will probably recompute the same normals each frame... well_co_ it is not visible but a big computation._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T14:49:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Actually the mesh type doesn_t_t really matter._lt_/p_gt__lt_p_gt_The _lt_em_gt_computeNormals() _lt_/em_gt_method only knows about a _lt_em_gt_positions_lt_/em_gt_ and a _lt_em_gt_indices_lt_/em_gt_ array as input._lt_/p_gt__lt_p_gt_It only depends upon the size of these two arrays._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This example generates meshes sized dozen of thousands of vertices which is quite big compared to usual meshes having hundreds or thousands of vertices only._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T15:16:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Differences are more difficult to notice in FF because when debugLayer is visible_co_ it doesn_t_t go higher than 30 fps here._lt_/p_gt__lt_p_gt_Tests should be done with no debugLayer and FF profiler to register the average fps._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I will test later ... (I_t_m in Toulouse tomorrow for a conf about systems and networks  supervision_co_ will try to make a demo of my 3D weathermap _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ )_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-29T15:20:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_80699_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_14166_qt_ data-ipsquote-username_eq__qt_jerome_qt_ data-cite_eq__qt_jerome_qt_ data-ipsquote-timestamp_eq__qt_1430318792_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_If someone could test please on a imported mesh (never done this)_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_.babylon files contain normals_co_ so this is unlikely to be called by them._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-04-29T17:06:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_THIS IS INCREDIBLY GOOD JOB!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I really appreciate what you did_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Can you just be sure that this optimization works well on every browser? (safari_co_ IE_co_ Chrome and firefox as well)_lt_/p_gt__lt_p_gt_once this is done_co_ please do a PR to replace the previous one _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-29T17:09:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Re-tested on another old computer. _lt_/p_gt__lt_p_gt_Well_co_ it seems to work well also._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Improvements are far more noticeable in Chrome than in FF._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I can_t_t test in IE as I_t_m on Linux._lt_/p_gt__lt_p_gt_I_t_m waiting for IE users feedback..._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-29T18:04:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_My OSX / machine is pretty old_co_ so I_t_ll leave that for someone with a newer retina display machine. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_On iOS 8.x iPad Air 2_co_  fps is about double of legacy._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-04-30T09:30:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Awesome ! I go from 4 FPS on chrome on legacy version to 35 FPS with the optimized version. Really really awesome !_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]