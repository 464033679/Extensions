[{"Owner":"webGLmmk","Date":"2015-09-07T16:36:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_For now_co_ I_t_m basically just trying to understand some of the code behind the _qt_drag and drop_qt_ sample in the Babylon.js playground.  I would eventually like to create a 3d arcade style game_co_ starting here by being able to move the meshes around WITHOUT the camera moving._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But first things first tho_co_ I need to understand the code thats here. I_t_ve read as much of the documentation and tutorials as I could_co_ and I didn_t_t see any previous post really related to what I_t_m looking for. There_t_s are some things I dont get with the event listeners_dd_ getGroundPosition()_co_ onPointerDown_co_ onPointerMove._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I altered the scene and added it to my hosting. I removed everything but the sphere. _lt_a href_eq__qt_http_dd_//portfolio.blenderandgame.com/draganddrop.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//portfolio.blenderandgame.com/draganddrop.html_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Posting the code here_co_ I commented the parts of the code I dont get_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_With getGroundPosition()_co_ I dont get the predicate. Not sure i entirely grasp the concept of _qt_predicate_qt_. I know that its a callback that returns a boolean value_dd_ returns true if ground was clicked. I just dont know what purpose that boolean serves. What other piece of code is that impacting? Not sure how it ties in.  I notice that if you comment that part out_co_ so that x and y are the only parameters_co_ then the meshes will _qt_sink_qt_ in into the ground instead of staying on the surface. I want to understand it on a code level tho._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var getGroundPosition _eq_ function () {                var pickinfo _eq_ scene.pick(scene.pointerX_co_ scene.pointerY_co_ function (mesh) { return mesh _eq__eq_ ground_sm_ })_sm_ //?? dont understand purpose of predicate                if (pickinfo.hit) {                       return pickinfo.pickedPoint_sm_                }                         return null_sm_            }_lt_/pre_gt__lt_p_gt_I have the  same question about the scene.pick predicate in onPointerDown (this one returns true if the ground was NOT what was clicked on. )_lt_/p_gt__lt_p_gt_One OTHER question about this_dd_  startingPoint is assigned a value of getGroundPosition(evt). I know its passing the event. But getGroundPosition was defined WITHOUT parameters. So why is a parameter being passed to it? And what difference does that make? I_t_ve never seen an example like that with addEventListener._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_            var onPointerDown _eq_ function (evt) {                if (evt.button !_eq__eq_ 0) {                       return_sm_                }                                          var pickInfo _eq_ scene.pick(scene.pointerX_co_ scene.pointerY_co_ function (mesh) { return mesh !_eq__eq_ ground_sm_ })_sm_ //dont understand purpose of predicate again                if (pickInfo.hit) {                    currentMesh _eq_ pickInfo.pickedMesh_sm_                    startingPoint _eq_ getGroundPosition(evt)_sm_ //dont understand why argument is passed if fucntion was defined with no parameters..                             if (startingPoint) {                          setTimeout(function () {                            camera.detachControl(canvas)_sm_                        }_co_ 0)_sm_                    }                }            }_lt_/pre_gt__lt_p_gt_         _lt_br_gt_Because of those two questions. There is a LOT I dont get about onPointerMove. But hopefully once I understand the above_co_ it will help me figure out the rest. Dont want to bombard with my questions here on my first post _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Muchas Gracias to anyone that can help. Can_t_t get any further with this and I dont want to give up and move on.  Everything else I see with regard to movement is actually just moving the camera_co_ not translating a mesh with a static camera view. This is the only sample I_t_ve come across that actually disengages the camera (at least only when the mesh is being moved)._lt_br_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-09-08T12:51:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi gson78_co_ welcome to the forum!  Good to have you with us.  And may I say_co_ you are doing just fine at having a grasp of this.  In fact_co_ you found a minor bug in _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/?18_qt_ rel_eq__qt_external nofollow_qt__gt_our drag_t_n_t_drop playground demo_lt_/a_gt_.  Well done!  Line 83 and 106 should indeed be _lt_em_gt_getGroundPosition()_lt_/em_gt__sm_  No _t_evt_t_ needs to be sent to getGroundPosition().  If you remove them_co_ it still works fine_co_ as you likely know.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYeah_co_ predicates.  Strange word_co_ eh?  *nod*  Simply put_co_ _lt_em_gt_return mesh _eq__eq_ ground_lt_/em_gt_ ensures that ONLY a pickInfo.hit on the mesh reffed in variable _t_ground_t_ is allowed/accepted.  If a hit on a mesh-var _t_ground_t_ DOESN_t_T happen_co_ the OTHER return branch is taken... which returns null.  It is important for a dragging feature to know WHERE on the ground that the drag is going to start.  You can see some interesting things_co_ here...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#279FW9_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#279FW9_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t[i tried to add an initial camera.attachControl(canvas_co_ true)_sm_ in the line 9 area... failed.  Maybe someone can help ME on that one.  thx!]\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBack on topic_co_ if you pointerDown on a part of a mesh that is NOT _qt_atop_qt_ (in front-of_co_ ray-wise) a section of ground_co_ the getGroundPosition() returns null_co_ and then line 85 fails to trigger.  Then if you _lt_u_gt_move_lt_/u_gt_ the pointer (while still pointerDown on a ground-miss)... onPointer_lt_strong_gt_MOVE_lt_/strong_gt_ is called_co_ but line 102 sees NO ground startingPoint_co_ so it returns without doing anything.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn line 80_co_ the current picked mesh that is NOT the _t_ground_t_ mesh... is established.  The fact that pickInfo is spelled differently than it was inside of getGroundPosition()... is inconsequential... it doesn_t_t matter.  Even if they were identical_co_ there would be no variable collision because they each declare their pickinfo/pickInfo variables in different functions_co_ which keeps them isolated from each other.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOk_co_ the dreaded predicate.  Here is MY understanding of it.  When you click on a mesh to drag it_co_ the FIRST picking point that the picking ray hits... is the picked mesh.  That will make the getGroundPosition() func _lt_u_gt_NOT_lt_/u_gt_ satisfied... because it_t_s NOT a mesh in a variable named _t_ground_t_.  But_co_ because of the cool way our picking system works_co_ the predicate is saying...  _qt_If the picked mesh is NOT a ground_co_ keep extending the ray until it hits a ground_co_ if possible_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tGenerally_co_ what we_t_re talking about here... is scene.pick.  Let_t_s take a trip to the src code for Babylon_t_s Scene-class object.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.scene.js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.scene.js_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt_t_s a big fat object with the power to take over the world_co_ but that doesn_t_t scare us one bit_co_ eh?  Do a browser search (control f) for _qt_pick_qt_ and F3 yourself thru the hits... see what can be learned.   Notice line 360... a predicate func with MANY _qt_requirements_qt_ in it.    Line 1641 area... more predicate work.  You can tell that the predicate works as a type of _qt_discriminator_qt_ or criteria checker.  Line 1668 says _qt_used to determine eligible meshes_qt_.  Yeah_co_ that_t_s another fine way of wording it.  At line 1663 just above it... there it is... the world famous Scene.pick function.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m not sure how correct I am about any of this_co_ and I don_t_t know if I have helped with any of your questions.  I hope so.  What I state can be verified/kyboshed with tests.  Others will surely help_co_ too.  Feel free to ask as many questions as you wish... don_t_t worry about that at all.  Don_t_t forget how well a search of our github source code... can bring knowledge_co_ too. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tTell us about discoveries_co_ projects_co_ anything.  Nice job finding the playground demo mistake_co_ you have good eyes!   Again_co_ welcome aboard and party on!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"webGLmmk","Date":"2015-09-13T06:22:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-cite_eq__qt_Wingnut_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_95686_qt_ data-ipsquote-contentid_eq__qt_16994_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1441716688_qt_ data-ipsquote-username_eq__qt_Wingnut_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 9/8/2015 at 7_dd_51 AM_co_ Wingnut said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_div_gt_\n\t\t\t_lt_div_gt_\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tHi gson78_co_ welcome to the forum!  Good to have you with us.  And may I say_co_ you are doing just fine at having a grasp of this.  In fact_co_ you found a minor bug in _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/?18_qt_ rel_eq__qt_external nofollow_qt__gt_our drag_t_n_t_drop playground demo_lt_/a_gt_.  Well done!  Line 83 and 106 should indeed be _lt_em_gt_getGroundPosition()_lt_/em_gt__sm_  No _t_evt_t_ needs to be sent to getGroundPosition().  If you remove them_co_ it still works fine_co_ as you likely know.\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tYeah_co_ predicates.  Strange word_co_ eh?  *nod*  Simply put_co_ _lt_em_gt_return mesh _eq__eq_ ground_lt_/em_gt_ ensures that ONLY a pickInfo.hit on the mesh reffed in variable _t_ground_t_ is allowed/accepted.  If a hit on a mesh-var _t_ground_t_ DOESN_t_T happen_co_ the OTHER return branch is taken... which returns null.  It is important for a dragging feature to know WHERE on the ground that the drag is going to start.  You can see some interesting things_co_ here...\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\t_lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#279FW9_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#279FW9_lt_/a_gt_\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\t[i tried to add an initial camera.attachControl(canvas_co_ true)_sm_ in the line 9 area... failed.  Maybe someone can help ME on that one.  thx!]\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\t \n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tBack on topic_co_ if you pointerDown on a part of a mesh that is NOT _qt_atop_qt_ (in front-of_co_ ray-wise) a section of ground_co_ the getGroundPosition() returns null_co_ and then line 85 fails to trigger.  Then if you _lt_u_gt_move_lt_/u_gt_ the pointer (while still pointerDown on a ground-miss)... onPointer_lt_strong_gt_MOVE_lt_/strong_gt_ is called_co_ but line 102 sees NO ground startingPoint_co_ so it returns without doing anything.\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tIn line 80_co_ the current picked mesh that is NOT the _t_ground_t_ mesh... is established.  The fact that pickInfo is spelled differently than it was inside of getGroundPosition()... is inconsequential... it doesn_t_t matter.  Even if they were identical_co_ there would be no variable collision because they each declare their pickinfo/pickInfo variables in different functions_co_ which keeps them isolated from each other.\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tOk_co_ the dreaded predicate.  Here is MY understanding of it.  When you click on a mesh to drag it_co_ the FIRST picking point that the picking ray hits... is the picked mesh.  That will make the getGroundPosition() func _lt_u_gt_NOT_lt_/u_gt_ satisfied... because it_t_s NOT a mesh in a variable named _t_ground_t_.  But_co_ because of the cool way our picking system works_co_ the predicate is saying...  _qt_If the picked mesh is NOT a ground_co_ keep extending the ray until it hits a ground_co_ if possible_qt_.\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tGenerally_co_ what we_t_re talking about here... is scene.pick.  Let_t_s take a trip to the src code for Babylon_t_s Scene-class object.\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.scene.js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.scene.js_lt_/a_gt_\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\t...\n\t\t\t\t_lt_/p_gt_\n\t\t\t_lt_/div_gt_\n\t\t_lt_/div_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThanks for all the help_co_ Wingnut. It took a bit to reply because I wanted to make sure I pretty much understood everything. It was a relief to know that the (evt) passed was a bug and not necessary. Your playground example was a huge help. I_t_m basically able to read and understand this code now. (mostly...) I can get rid of or  change the size of the ground_co_ change  camera and mesh positions_co_ add a plane_co_ etc. I did check out all your references to the source code. I_t_d love to be able to confidently read all of it_co_ and be able to get answers from source code in the future. Reading through _qt_You Don_t_t Know JS_qt_ right now. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI also realized in playing around with it that the scene.pick predicate in the onPointerDown function made sure that the ground doesn_t_t move - the  _qt_!mesh_eq__eq_ground_sm__qt_ statement keeps the ground mesh from qualifying as _qt_pickInfo.hit_qt_. I had been trying to understand what kept the ground from moving like the other meshes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere_t_s one last thing_co_ I_t_m not confident about yet.  In onPointerMove_dd_\n_lt_/p_gt_\n\n_lt_div_gt_\n\t_lt_pre class_eq__qt_ipsCode prettyprint prettyprinted_qt__gt_\n_lt_span class_eq__qt_kwd_qt__gt_var_lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ diff _lt_/span_gt__lt_span class_eq__qt_pun_qt__gt__eq__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_ current_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_subtract_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_(_lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_startingPoint_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_)_sm__lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_        currentMesh_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_position_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_._lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_addInPlace_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_(_lt_/span_gt__lt_span class_eq__qt_pln_qt__gt_diff_lt_/span_gt__lt_span class_eq__qt_pun_qt__gt_)_sm__lt_/span_gt__lt_/pre_gt_\n\n\t_lt_p_gt_\n\t\tI know this is what makes the meshes change position when the pointer moves. Not sure if my question comes from a lack of understanding about vectors(probably)_co_ or something I dont know about how the vector3 class works_dd_  \n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\t1. The initial position is stored in startingPoint when onPointerDown is invoked. (terminology?)  \n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\t2. A new pointer position is stored in _qt_current_qt_ when the pointer moves_co_ with onPointerMove.\n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\tHere_t_s where I get lost_dd_ \n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\t3. _qt_startingPoint_qt_ is subtracted from _qt_current_qt_  ---  the original _qt_startingPoint_qt_ vector is subtracted from the _qt_current_qt_ vector and that value is basically a new vector that gets stored in _qt_diff_qt_   ??? \n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\t4. addInPlace_dd_ the selected mesh_t_s position is replaced with the new _qt_diff_qt_ vector position\n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\tI found a site to brush up on vectors.  I didnt have much trouble in math_co_ but I just didn_t_t pursue it as far I could have. (rural high school that wasn_t_t very motivating.) I_t_ve been reviewing_co_ but it looks like I_t_ll have to jump ahead and crash course (expected that_co_ just didn_t_t know when.)\n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\tMaybe I just dont know how that _qt_subtract_qt_ method is working. I_t_m not sure why the mesh position isn_t_t just directly being reassigned the new pointer position_dd_ (_qt_current_qt_ i guess). Why is there a need for the _qt_diff_qt_?  \n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\tUPDATE_dd_ i just tried to do that. In a scene with just the ground and the sphere_co_ commented out the diff line and  passed in current_sm_   addInPlace(current) . The sphere zipped off really quickly into nowhere when I tried to move it_co_ and now I can_t_t find it. Obviously that doesn_t_t work_co_ i just dont know why. \n\t_lt_/p_gt_\n\n\t_lt_p_gt_\n\t\tThanks again. I hope to build a bunch of 3D arcade style games_co_ include blogs and tutorials on them as I go.\n\t_lt_/p_gt_\n_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-09-13T14:06:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi again gson78_co_ my pleasure.  You have it figured perfectly... except for...\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tQuote\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_div_gt_\n\t\t\t_lt_p_gt_\n\t\t\t\t4. addInPlace_dd_ the selected mesh_t_s position is replaced with the new _qt_diff_qt_ vector position\n\t\t\t_lt_/p_gt_\n\t\t_lt_/div_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThat statement is slightly incorrect_co_ maybe.  It_t_s replaced with diff + _lt_em_gt_current_lt_/em_gt_.  Keep in mind that during a drag... many many render frames happen. onPointerMove is called once per frame during a drag_co_ and _lt_em_gt_current_lt_/em_gt_ is being continuously updated by calls to getGroundPosition()... as the drag happens. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI used a little playground output reporter... to show how _lt_em_gt_current_lt_/em_gt_ is continuously changing during onPointerMove.  _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#279FW9%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#279FW9#4_lt_/a_gt_  \n_lt_/p_gt_\n\n_lt_p_gt_\n\t(drag some mesh and watch the value of _lt_em_gt_current_lt_/em_gt_... constantly changing in the numbers on the PG menu)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNotice line 137.  A NEW startingPoint is set... over and over... from the value of _lt_em_gt_current_lt_/em_gt_.  Maybe if you changed the _lt_em_gt_current_lt_/em_gt_ variable... to be more descriptive... such as naming it _lt_em_gt_currentDragProgressPosition_lt_/em_gt_... that might make your life more fun.  _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tI didn_t_t explain this very well... but maybe enough.  _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt_  Generally speaking_co_ try to understand that a drag (an onPointerMove) is a sequence of many little moves... done once per frame.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNice job with the code analysis!  You have it figured-out quite well... good work.  Don_t_t hesitate to ask more questions and report your discoveries.  Essentially_co_ you have written a pretty good tutorial about dragging.  Maybe we can add some of that information to our help files... based-upon your discoveries.  Be well_co_ good luck.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"webGLmmk","Date":"2015-09-20T19:43:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-cite_eq__qt_Wingnut_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_96393_qt_ data-ipsquote-contentid_eq__qt_16994_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1442153164_qt_ data-ipsquote-username_eq__qt_Wingnut_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 9/13/2015 at 9_dd_06 AM_co_ Wingnut said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_div_gt_\n\t\t\t_lt_div_gt_\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tHi again gson78_co_ my pleasure.  You have it figured perfectly... except for...\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tThat statement is slightly incorrect_co_ maybe.  It_t_s replaced with diff + _lt_em_gt_current_lt_/em_gt_.  Keep in mind that during a drag... many many render frames happen. onPointerMove is called once per frame during a drag_co_ and _lt_em_gt_current_lt_/em_gt_ is being continuously updated by calls to getGroundPosition()... as the drag happens. \n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tI used a little playground output reporter... to show how _lt_em_gt_current_lt_/em_gt_ is continuously changing during onPointerMove.  _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#279FW9%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#279FW9#4_lt_/a_gt_  \n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\t(drag some mesh and watch the value of _lt_em_gt_current_lt_/em_gt_... constantly changing in the numbers on the PG menu)\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tNotice line 137.  A NEW startingPoint is set... over and over... from the value of _lt_em_gt_current_lt_/em_gt_.  Maybe if you changed the _lt_em_gt_current_lt_/em_gt_ variable... to be more descriptive... such as naming it _lt_em_gt_currentDragProgressPosition_lt_/em_gt_... that might make your life more fun.  _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt__lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tI didn_t_t explain this very well... but maybe enough.  _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt_  Generally speaking_co_ try to understand that a drag (an onPointerMove) is a sequence of many little moves... done once per frame.\n\t\t\t\t_lt_/p_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\tNice job with the code analysis!  You have it figured-out quite well... good work.  Don_t_t hesitate to ask more questions and report your discoveries.  Essentially_co_ you have written a pretty good tutorial about dragging.  Maybe we can add some of that information to our help files... based-upon your discoveries.  Be well_co_ good luck.\n\t\t\t\t_lt_/p_gt_\n\t\t\t_lt_/div_gt_\n\t\t_lt_/div_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tActually that was perfect_co_ thanks again. I was forgetting about the game loop and frames per second. That makes sense of the difference/ subtract on line 129.  We_t_ve stored the pointer position_co_ but the mesh position needs to be updated in each frame_sm_ thus the position.addInPlace. I need to create a tutorial page on my blog_co_ so maybe I_t_ll start with what I_t_ve learned from this. I think I have a somewhat unique _qt_newbie self-taught_qt_ perspective that could be pretty useful if I document the things that confuse me and how I sorted them out.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"paleRider","Date":"2017-08-28T08:09:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Wingnut_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFollowing on from this thread_co_ let me raise a question about the proper way to implement_lt_strong_gt_ pointer event handling in BJS_lt_/strong_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe PG example (_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#279FW9%2333_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#279FW9#33_lt_/a_gt_) is showing what a think can be the preferred way (with the current version of the engine_co_ 3.0) to tackle this kind of functionalities_dd_\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tnot to use HTML5 canvas event handling mechanism (canvas.addEventListener()) at all in order to avoid cross-browsing inconsistencies_sm_\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\timplement _qt_pointerdown_qt_ and _qt_pointerup_qt_ by means of (powerful and high-level) Action Managers as it provides a convenient mesh-oriented functionality (making the use of scene.pick not necessary and by the way cursor-pointer change for free)_sm_\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\t_lt_u_gt_because of the lack of _qt_pointermove_qt_ implementation with Action Managers_lt_/u_gt__co_ to use an Observable (scene-oriented) to manage it.\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\tObviously this is a working solution_co_ by I find it not very elegant_co_ as we are mixing two functionalities in the very same _qt_block of code_qt__dd_ Action Managers with Observables.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI would be grateful if you were to share your opinion about this.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBest regards.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2017-08-28T10:42:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi PaleRider_co_ thanks for the fine comments/questions.  I hope you allow others to help me answer_co_ because I_t_m certainly no expert.  I am not the author of our drag_t_n_t_drop demo_co_ and I believe it was created BEFORE observables and actionManagers existed in BJS.  It would be a fun challenge to try to reproduce the same drag_t_n_t_drop functionality... using all actionManagers.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI haven_t_t had morning coffee yet_co_ but I _qt_suspect_qt_ that _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/3.0/actionmanager#static-oneveryframetrigger-number_qt_ rel_eq__qt_external nofollow_qt__gt_actionManager.onEveryFrameTrigger_lt_/a_gt_ COULD be used as an onPointerMove trigger.  First line of our handler might be...  if (scene.pointerX _eq__eq_ previousPointerX &amp_sm_&amp_sm_ scene.pointerY _eq__eq_ previousPointerY) return_sm_  If it falls-thru that_co_ we have a moved pointer_co_ yes?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s an unloved basic drag_t_n_t_drop PG we can mess-with_dd_  _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#17EGSU%233_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#17EGSU#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLet_t_s make it the _qt_Monday Challenge_qt_.  The first person to create an all-actionManager drag_t_n_t_drop demo... wins a BRAND NEW... umm... level of admiration from fellow forumers.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t.onEveryFrameTrigger used for a pointerMove checker?  Seems goofy_co_ eh?  But why not?  Let_t_s see what blows-up.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tAgain_co_ great questions and thoughts.  PR_co_ I hope you_t_re cool-with welcoming comments/ideas from _lt_u_gt_everyone_lt_/u_gt_.  I_t_m not overly-qualified to answer these things.  We need all the power experts we can get_co_ for this one.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-08-28T17:57:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tIn the same topic_co_ I plan to add a new behavior soon_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/issues/2697_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/issues/2697_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"paleRider","Date":"2017-08-28T19:51:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Deltakosh_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ I didn_t_t hear nothing about _qt_behaviors_qt_ in BJS until now_co_ but reviewing the new v3.1 additions in the docs (_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/overviews/behaviors_qt_ rel_eq__qt_external nofollow_qt__gt_Behaviors doc_lt_/a_gt_) I can see this is a (let say) high-level functionality in the line a modern and productive (code less do more) engine must have.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOf course I will try it when available.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for your continuous enhancements.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2017-08-29T23:21:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYay!  Hi-tech drag_t_n_t_drop!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_qt_behavior_qt_... what a nasty word to type.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  Can_t_t we call them _qt_jigs_qt_?  Jigs and rigs!  How cool is that?  _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tLet_t_s see how it _qt_sounds_qt_.  BouncingJig_co_ AutoRotationJig_co_ FramingJig...  not bad.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tJumpJig_co_ ScaleJig_co_ BounceJig_co_ PositionJig_co_ NavJig_co_ MotorJig_co_ ColorJig_co_ FaderJig_co_ ParticleJig_co_ GodraysJig_co_ MythrosSlipperySlopeJig.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tYEAH!  heh.  _qt_Jig_qt_ is probably not _qt_industry standard_qt_ though_co_ huh?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn a way_co_ that_t_s what my _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/debug#PBVEM%23158_qt_ rel_eq__qt_external nofollow_qt__gt_bobsled_lt_/a_gt__t_s _qt_flyerframe_qt_ is supposed to be... a jig.  Parent ANY mesh to the white box_co_ and suddenly it becomes a 24 thruster micro-grav physics-active spacecraft.  UncleWingysPhysicsFlyerJig  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd the small-but-dedicated group that cares-for all our jigs?  The Jig-Pigs.  _lt_img alt_eq__qt__dd_rolleyes_dd__qt_ data-emoticon_eq__qt__qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_rolleyes.gif_qt_ title_eq__qt__dd_rolleyes_dd__qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tAhhh_co_ maybe not.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JackFalcon","Date":"2018-01-07T21:47:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t+1 for jig. Looks I_t_ll be exploring d_t_n_t_d... jigs.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]