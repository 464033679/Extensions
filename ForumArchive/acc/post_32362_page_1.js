[{"Owner":"paleRider","Date":"2017-08-14T11:48:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi everybody_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI need to know about what is the preferred approach to handle the mouse/touch events (for example _lt_strong_gt_onclick_lt_/strong_gt_)_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t(1) via the _lt_strong_gt_canvas_lt_/strong_gt_ by means of\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_em_gt__lt_strong_gt_myCanvas.addEventListener_lt_/strong_gt_(_qt__lt_strong_gt_pointerdown_lt_/strong_gt__qt__co_ function (evt) {_lt_br /_gt_\n\t    ..._lt_br /_gt_\n\t    var pickInfo_eq_myScene.pick(myScene.pointerX_co_myScene.pointerY_co_function(mesh){_lt_br /_gt_\n\t            return (mesh_eq__eq__eq_myMesh)_sm__lt_br /_gt_\n\t  })_sm__lt_br /_gt_\n\t        _lt_br /_gt_\n\t    if(pickInfo.hit){_lt_br /_gt_\n\t            alert(_qt_Mesh picked_qt_)_sm__lt_br /_gt_\n\t    }_lt_br /_gt_\n\t})_sm__lt_/em_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t(2) via the mesh using the powerful _lt_strong_gt_ActionManager_lt_/strong_gt_ functionality\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_em_gt__lt_strong_gt_myMesh_lt_/strong_gt_.actionManager.registerAction(new BABYLON.ExecuteCodeAction(_lt_strong_gt_BABYLON.ActionManager.OnPickDownTrigger_lt_/strong_gt__co_function(evt){_lt_br /_gt_\n\t    alert(_qt_Mesh picked_qt_)_sm__lt_br /_gt_\n\t}))_sm__lt_/em_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThank you for your time.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-08-14T15:11:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello there is a third alternative_dd_ using scene._lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_onPointerObservable_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_This way the scene will handle all events for you and you will just have to add your own observer to get all events._lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_That_t_s the way used by all cameras for instance_dd__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Cameras/Inputs/babylon.arcRotateCameraPointersInput.ts#L141_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Cameras/Inputs/babylon.arcRotateCameraPointersInput.ts#L141_lt_/a_gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"paleRider","Date":"2017-08-14T15:42:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ very interesting.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m going to study right now this third option in order to have a comprehensive mental map of all this subject of _qt_event interfacing_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnyway_co_ let me ask you about what is the best option in terms of _qt_good practices_qt__co_ _qt_performance_qt_ and last but not least _qt_cross-browsing support_qt_ (considering here even Android and iOS_co_ by means of hybrid apps and embedded browsers)?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor example I think that the _qt__lt_strong_gt_canvas_lt_em_gt_ _lt_/em_gt__lt_/strong_gt__lt_em_gt__lt_strong_gt_addEventListener_lt_/strong_gt__lt_/em_gt_ _qt_ way is going to be a _qt_cross-browsing_qt_ problematic solution_co_ as the implementation of web events between different browser vendors is always a little nightmare. Anyway I need to take this approach when _qt_onmousemove_qt_ functionality is a must (for example in order to drag a mesh)_co_ as ActionManger doesn´t support mouse-move triggering).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOn the other hand I assume that _lt_strong_gt_ActionManager_lt_/strong_gt_  and the mentioned _lt_strong_gt_onPointerObservable_lt_/strong_gt__co_ implement a more _qt_common-interface_qt_ solution_co_ as based on WebGL. Isn´t it?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2017-08-14T15_dd_49_dd_46Z_t_ title_eq__t_08/14/2017 03_dd_49  PM_t_ data-short_eq__t_1 yr_t__gt_August 14_co_ 2017_lt_/time_gt_ by paleRider_lt_/strong_gt_\n\t\n\t\t_lt_br_gt_Completion\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-08-14T15:56:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tCorrect\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"paleRider","Date":"2017-08-16T07:47:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIn order to use the BJS implementation of the (famous) Observable Pattern_co_ with pointer events_co_ I see two ways are possible_dd_\n_lt_/p_gt_\n\n_lt_ol_gt__lt_li_gt_\n\t\tTo use an already implemented (dedicated) BJS Observer. I can´t find in the docs a Mesh callback method but a Scene_t_s one (_lt_em_gt_myScene.onPointerObservable_lt_/em_gt_). Is this correct? If _qt_yes_qt__co_ do I need to use myScene.meshUnderPointer to get my mesh?\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tTo define my own myMesh-Observable.\n\t_lt_/li_gt_\n_lt_/ol_gt__lt_p_gt_\n\tKeeping the things as simple as possible (a good reason to use an engine) and so taking the first approach_co_ something like the following would be written_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_myScene.onPointerObservable.add(callback_co_ mask_co_ insertFirst)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI need some help in order to understand the way to write the callback param in JS_co_ as the arcRotateCamera implementation link (_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Cameras/Inputs/babylon.arcRotateCameraPointersInput.ts#L141_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Cameras/Inputs/babylon.arcRotateCameraPointersInput.ts#L141_lt_/a_gt_) you sent me to study_co_ is of course in TS (bellow code shown simplified)_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_observer _eq_ scene.onPointerObservable.add(pointerInput_co_ PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE)_sm_ _lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\twhere\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_pointerInput_dd_ (p_dd_ PointerInfo_co_ s_dd_ EventState)_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tbeing the docs (_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/3.0/observable_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/3.0/observable_lt_/a_gt_) already focused on TS implementation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2017-08-16T08_dd_14_dd_56Z_t_ title_eq__t_08/16/2017 08_dd_14  AM_t_ data-short_eq__t_1 yr_t__gt_August 16_co_ 2017_lt_/time_gt_ by paleRider_lt_/strong_gt_\n\t\n\t\t_lt_br_gt_Completion\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"paleRider","Date":"2017-08-16T08:39:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ I see now that this kind of functionalities are already addressed and well solved by _lt_strong_gt_Wingnut_lt_/strong_gt_ and _lt_strong_gt_iiceman_lt_/strong_gt_ in another thread of this forum_dd_ _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/27410-need-a-sample-for-dragging-and-collision-detection-implemented-by-actionmanager/_qt_ rel_eq__qt__qt__gt_http_dd_//www.html5gamedevs.com/topic/27410-need-a-sample-for-dragging-and-collision-detection-implemented-by-actionmanager/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBest regards.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_em_gt_P.S. I agree that to add some kind of onPointerMove trigger to ActionManager would be fine._lt_/em_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]