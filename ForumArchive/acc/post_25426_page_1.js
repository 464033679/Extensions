[{"Owner":"olrehm","Date":"2016-09-25T19:35:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am using BabylonJS from Typescript_co_ and ran into the following problem_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t      const canvas _eq_ $element.find(_t_canvas_t_)[0] as HTMLCanvasElement_sm__lt_br /_gt_\n\t      const engine _eq_ new BABYLON.Engine(canvas_co_ true)_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFails to compile with the message\n_lt_/p_gt_\n\n_lt_p_gt_\n\terror TS2345_dd_ Argument of type _t_HTMLCanvasElement_t_ is not assignable to parameter of type _t_HTMLCanvasElement_t_._lt_br /_gt_\n\t  Property _t_msRequestPointerLock_t_ is missing in type _t_HTMLCanvasElement_t_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy interpretation of this is that HTMLCanvasElement as defined in lib.d.ts does not have this property_co_ and that I am casting to that definition of HTMLCanvasElement_co_ while BABYLON.Engine expects the one defined in babylon.d.ts_co_ which does have this property. The problem is that BabylonJS does not export its own mixin version of HTMLCanvasElement_co_ so I cannot even cast to that to pass it into BABYLON.Engine. So I am left with casting to any_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t      const canvas _eq_ $element.find(_t_canvas_t_)[0] as any_sm__lt_br /_gt_\n\t      const engine _eq_ new BABYLON.Engine(canvas_co_ true)_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhich works but is somewhat ugly. I wonder if it would not be possible and better for babylons mixin to be defined like this_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tinterface HTMLCanvasElement {_lt_br /_gt_\n\t    requestPointerLock()_dd_ void_sm__lt_br /_gt_\n\t    msRequestPointerLock?()_dd_ void_sm__lt_br /_gt_\n\t    mozRequestPointerLock?()_dd_ void_sm__lt_br /_gt_\n\t    webkitRequestPointerLock?()_dd_ void_sm__lt_br /_gt_\n\t}\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnyways the calling code seems to be trying through all vendor prefixes_co_ so marking these optional sounds like it would actually more accurately describe the situation - and it would mean that the type is compatible with libxml.d.ts_t_ version.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAny concerns? Should I send a pull request?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCheers\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOle\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-09-26T16:16:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi!\n_lt_/p_gt_\n\n_lt_p_gt_\n\twe already have our mixin here_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.mixins.ts#L48_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.mixins.ts#L48_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2016-09-26T17:15:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI know that you do - that is exactly the problem_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou have a mixin which is not compatible with lib.d.ts and which you do not expose but still use for parameters in your API. So callers cannot cast their HTML elements to your mixin - and then their calling code fails to compile.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat is why I suggest to either make your mixin compatible to lib.d.ts by making the things you add optional - I think this would be accurate in this case since you really do not know if these properties exist_co_ and you do have code checking that before relying on it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe other option is to export your mixin. But that is the worse solution in my opinion.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2016-10-01T07:14:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/pull/1384_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/pull/1384_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-10-03T15:09:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tMerged _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"olrehm","Date":"2016-10-03T15:11:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThanks David! What is your current release schedule? It looks like the last release was in June... is there any way to get the nightly through NPM?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-10-04T17:09:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tNext one would be around december. \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]