[{"Owner":"ozRocker","Date":"2016-05-11T12:24:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI_t_m wondering if there_t_s an implementation of Babylon.js that runs as a server_co_ or more specifically_co_ its physics engine.  Making a networked game without physics is easy.  No _qt_engine_qt_ is required.  The only calculations the server has to do is figuring out a new position when moving an object in a certain direction and collision.  That_t_s just simple trigonometry and can be done by hand.  The tricky part is if you have objects that react to physics.  Both the client and server need to use the same engine to calculate movement via physics.  If such thing does not exist_co_ can someone point me in the direction of how I could implement the same physics that Babylon.js uses for my server?  For now I just want gravity.  I don_t_t need joints_co_ bounce_co_ cloth_co_ etc..\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2016-05-11T13:45:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tLet me take a leap without looking. My knowledge of coding for networked games using a server is non-existent.  However if in a game without physics the only calculations the server has to do is figure out new positions for an object then these calculations could include changes in position due to gravity.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#4B0082_sm__qt__gt_These calculations are based on Newton_t_s equations of motion - extract below from _lt_/span_gt__lt_a href_eq__qt_https_dd_//en.wikipedia.org/wiki/Equations_of_motion_qt_ rel_eq__qt_external nofollow_qt__gt__lt_span style_eq__qt_color_dd_#4B0082_sm__qt__gt_https_dd_//en.wikipedia.org/wiki/Equations_of_motion_lt_/span_gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#4B0082_sm__qt__gt_Here _lt_span_gt__lt_i_gt_a_lt_/i_gt__lt_/span_gt_ is _lt_i_gt_constant_lt_/i_gt_ acceleration_co_ or in the case of bodies moving under the influence of gravity_lt_/span_gt__lt_span style_eq__qt_color_dd_#4B0082_sm__qt__gt__co_ the standard gravity_lt_/span_gt__lt_span style_eq__qt_color_dd_#4B0082_sm__qt__gt_ _lt_span_gt__lt_i_gt_g_lt_/i_gt__lt_/span_gt_ is used. Note that each of the equations contains four of the five variables_co_ so in this situation it is sufficient to know three out of the five variables to calculate the remaining two._lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#4B0082_sm__qt__gt_In elementary physics the same formulae are frequently written  as_dd__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_dl_gt__lt_dd_gt_\n\t\t_lt_span style_eq__qt_color_dd_#4B0082_sm__qt__gt__lt_img alt_eq__qt_\\begin{align} v &amp_sm_ _eq_ u + at \\quad [1] \\\\ s &amp_sm_ _eq_ ut + \\tfrac12 at^2 \\quad [2] \\\\ s &amp_sm_ _eq_ \\tfrac{1}{2}(u + v)t \\quad [3] \\\\ v^2 &amp_sm_ _eq_ u^2 + 2as \\quad [4] \\\\ s &amp_sm_ _eq_ vt - \\tfrac12 at^2 \\quad [5] \\\\ \\end{align}_qt_ src_eq__qt_https_dd_//upload.wikimedia.org/math/e/3/2/e327b372b8d65e2120f48b10210fe567.png_qt_ /_gt__lt_/span_gt_\n\t_lt_/dd_gt_\n_lt_/dl_gt__lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#4B0082_sm__qt__gt_They are often referred to as the _qt_SUVAT_qt_ equations_co_ where _qt_SUVAT_qt_ is an _lt_/span_gt__lt_a href_eq__qt_https_dd_//en.wikipedia.org/wiki/Acronym_qt_ title_eq__qt_Acronym_qt_ rel_eq__qt_external nofollow_qt__gt__lt_span style_eq__qt_color_dd_#4B0082_sm__qt__gt_acronym_lt_/span_gt__lt_/a_gt__lt_span style_eq__qt_color_dd_#4B0082_sm__qt__gt_ from the variables_dd_ _lt_span_gt__lt_i_gt_s_lt_/i_gt__lt_/span_gt_ _eq_ displacement_co_ _lt_span_gt__lt_i_gt_u_lt_/i_gt__lt_/span_gt_ _eq_ initial velocity_co_ _lt_span_gt__lt_i_gt_v_lt_/i_gt__lt_/span_gt_ _eq_ final velocity_co_ _lt_span_gt__lt_i_gt_a_lt_/i_gt__lt_/span_gt_ _eq_ acceleration_co_ _lt_span_gt__lt_i_gt_t_lt_/i_gt__lt_/span_gt_ _eq_ time_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow it may be that you knew this already_co_ if so I apologise_co_ if not and you want some help with the maths let me know.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2016-05-11T13:58:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThese look familiar! Going all the way back to my high school physics. Thanks for the tip! _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ I_t_m happy to start with something like this then eventually add more if the client/server architecture holds up.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2016-05-12T04:39:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_ve been looking at the physics engines for Babylon.js.  My server is in C# so if I use one of those engines I_t_d need to port it to C#.  Typescript is pretty similar to C#.  What would be the best way to do this?  Should I use babylon.oimoJSPlugin.ts ?  This could be weird because there is no Babylon.js in my server whatsoever.  All I have are position and rotation vectors.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe other option is to write my own from scratch with just the basics.  This website seems to be a good resource_dd_ _lt_a href_eq__qt_http_dd_//buildnewgames.com/gamephysics/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//buildnewgames.com/gamephysics/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-05-17T13:06:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi oz_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tboth engines that are being used in Babylon are written in JavaScript and are not ports of any engine you can run on a .NET/C# server (Oimo is a port from an ActionScript engine_co_ but that doesn_t_t really matter in your case_dd_) ).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy best suggestion would probably be - use node.js fas your server. Then you have JavaScript context/engine and you can use either one of the engines to calculate anything you want.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-05-18T21:39:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/10310-raananw/?do_eq_hovercard_qt_ data-mentionid_eq__qt_10310_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/10310-raananw/_qt_ rel_eq__qt__qt__gt_@RaananW_lt_/a_gt_ has provided the best solution we_t_ve found. Buiding upon node.js allows us to overcome ANY conflicts. And we use WebsocketIO to maintain an open connection - or as many connections as you wish when pairing with node.js!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNot a simple task by any means_co_ but if you aren_t_t familiar with node.js_co_ there is loads of code out there to get you started. And if you sign onto a node.js web provider_co_ they give a framework to get up and running almost immediately - and it_t_s open source of course. But the real power is in the modifications and extensions to the node.js server.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2016-05-18T23:20:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tyes_co_ I did consider nodejs.  I_t_ve used it before for other projects.  I was tossing up between nodejs and C# for a server and all the benchmarks I saw showed that C# was faster for more intensive projects\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-05-19T04:00:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOf course any compiled code will run faster_co_ however_co_ it takes allot of work to write routines for threading processes descretly. In our benchmark tests_co_ we found practically no difference whatsoever for the end user. However_co_ what we_t_re able to support using node.js is endless_co_ rather than running into all kinds of issues with OS and browser as far as compatability. So my personal advice is to use node.js if you want complete versatility and compliance without limits_sm_ and without a whole lot of coding and debugging.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2016-05-19T08:12:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI_t_ll consider it depending on how much physics I want to get into cos physics is the only tricky area.  My back-end server doesn_t_t serve HTML so there_t_s no browser issues.  It just keeps track of the assets and players in the virtual world.  It communicates with the website by sending JSON through web sockets.  Also_co_ C# is cross-platform . i work on it on my Windows computer_co_ compile it_co_ copy the .exe and any extra DLLs to my Linux server and it just runs.  Its 1 .exe and 3 DLLs.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-05-19T08:57:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/12544-ozrocker/?do_eq_hovercard_qt_ data-mentionid_eq__qt_12544_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/12544-ozrocker/_qt_ rel_eq__qt__qt__gt_@ozRocker_lt_/a_gt_ It all depends on your needs. From your description_co_ it appears that you are so very close to making an easy transition to node.js and already implemented WebsocetsIO - so to move to a node_co_js server should be an easy task - perhaps easier than you might think. And I can promise that once you go node_co_ you_t_ll optimize code - to be able to send any process across threads and cpu priorities can multitask to the nth degree. But I can ony tell you about the past 4 years of testing what ihas been the best server configuration for us to use for complete versatility. But of course there are always other factors we all have to prioritize. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo perhaps your current server is able to handle all operations you might now need seamlessly. However_co_ I bet that within 2 years you are using node.js. Just my own opinion_co_ and I love it when I_t_m wrong - but I can_t_t see any scenario where this might not be the case in the near future for most WebGL development considering the new devices coming online in the next 2 years.. Please let us know how you proceed_co_ although it appears that you_t_ve already made up your mind. If so_co_ we_t_ll look at both solutions in another year and compare performance and versatility between our node.js server and your C# server. I don_t_t believe I can add anything more to this subject. We all make it work the best way we can.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2016-05-19T09:23:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWe might be on different pages here_co_ but yes_co_ I will switch to another language if its necessary to proceed.  It sounds like you_t_re talking about a web server.  I have a web server which is serving javascript / PHP / Babylon.js.  That_t_s the client that deals with webGL_co_ browsers and devices.  The C# server is an asset manager that keeps track of in-world objects and players.  It simply tells the clients where things are and which direction they are facing.  Its get more complicated when I add gravity.  There are a few good C# physics libraries available_co_ however_co_ the server and the client need to have the same calculations (well_co_ with error rate of 0.01).  As I see it I have 3 options_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1 - change server to nodejs / javascript so I can use the exact code Babylon.js uses for physics.  This could get very weird though because there_t_s no GUI_co_ so no actual canvas / engine / scene.  I_t_m not sure anyone has actually used Babylon.js purely as a server or if it can even work like that without much hacking\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2 - come up with my own algorithms and port it to both Javascript and C#.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3 - use Babylon.js physics on client and some other library such as Jitter for C# backend.  Doesn_t_t matter that the code or even the process is different_co_ as long as the results are within 0.01 of eachother\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/11286-dbawel/?do_eq_hovercard_qt_ data-mentionid_eq__qt_11286_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/11286-dbawel/_qt_ rel_eq__qt__qt__gt_@dbawel_lt_/a_gt_ if you know how to do no. 1 I_t_d be interested to see an example of Babylon.js running in server mode.  Is it easy to do?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-05-19T10:28:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_129025_qt_ data-ipsquote-contentid_eq__qt_22498_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1463649792_qt_ data-ipsquote-userid_eq__qt_12544_qt_ data-ipsquote-username_eq__qt_ozRocker_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t1 hour ago_co_ ozRocker said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t2 - come up with my own algorithms and port it to both Javascript and C#.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tBefore you do this_co_ take a look at BabylonHx.  _lt_a href_eq__qt_http_dd_//babylonhx.com/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonhx.com/_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-05-19T10:30:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_129025_qt_ data-ipsquote-contentid_eq__qt_22498_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1463649792_qt_ data-ipsquote-userid_eq__qt_12544_qt_ data-ipsquote-username_eq__qt_ozRocker_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t1 hour ago_co_ ozRocker said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t3 - use Babylon.js physics on client and some other library such as Jitter for C# backend.  Doesn_t_t matter that the code or even the process is different_co_ as long as the results are within 0.01 of eachother\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/vujadin/OimoHx_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/vujadin/OimoHx_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2016-05-19T10:41:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_129031_qt_ data-ipsquote-contentid_eq__qt_22498_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1463653808_qt_ data-ipsquote-userid_eq__qt_4289_qt_ data-ipsquote-username_eq__qt_adam_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t8 minutes ago_co_ adam said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_https_dd_//github.com/vujadin/OimoHx_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/vujadin/OimoHx_lt_/a_gt_\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tWoh!  So with Haxe I can port Babylon.js functions to C#??  This is like magic!  Its the solution to my original question\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-05-19T10:47:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//haxe.org/documentation/introduction/compiler-targets.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//haxe.org/documentation/introduction/compiler-targets.html_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-05-19T10:49:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5954-gamestudiohx/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5954_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5954-gamestudiohx/_qt_ rel_eq__qt__qt__gt_@gamestudiohx_lt_/a_gt_ is the developer of BabylonHx\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2016-05-19T10:53:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI wonder how up-to-date it is.  That guy is going to be busy every time a new Babylon.js version comes out!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-05-19T11:09:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/vujadin/BabylonHx/commits/master_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/vujadin/BabylonHx/commits/master_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-05-19T16:03:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/12544-ozrocker/?do_eq_hovercard_qt_ data-mentionid_eq__qt_12544_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/12544-ozrocker/_qt_ rel_eq__qt__qt__gt_@ozRocker_lt_/a_gt_ - I believe I understood what you initially asked_co_ however_co_ as the post progressed I was thinking strictly server requests and threads. BabylonHX is interesting_co_ however you nailed the issue - which is updates and support. As this is not a product_co_ I would be afraid of working on code that can potentially be obsolete - unless you personally take control of it yourself. You can certainly run WebGL extensions on your node.js server_co_ but to handle computations such as physics_co_ if you_t_re seeking any user reaction_co_ then the delay to send the result to the user can be as long as 60ms - which is not practical unless it is strictly for visualization.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI hope I_t_ve understood the issue. Bottom line for us is that CPU speed is doubling every year_co_ and right now the performance is good on practically every device made in the last year - unless you are computing highly complex simulations. Even then_co_ you can generally optimize your devices to accellerate these processes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2016-05-20T01:55:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_129073_qt_ data-ipsquote-contentid_eq__qt_22498_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1463673796_qt_ data-ipsquote-userid_eq__qt_11286_qt_ data-ipsquote-username_eq__qt_dbawel_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t9 hours ago_co_ dbawel said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tYou can certainly run WebGL extensions on your node.js server_co_ but to handle computations such as physics_co_ if you_t_re seeking any user reaction_co_ then the delay to send the result to the user can be as long as 60ms - which is not practical unless it is strictly for visualization.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tyep_co_ this is the lag problem that exists with all multiplayer games.  Everything the user sees on the screen is 60ms (or whatever lag time) ago.  That_t_s why the client has to also run the same computations_co_ so it can _qt_predict_qt_ where the object will be and instantly move it there_co_ then make any corrections if required when it receives the positions/rotations from the server.  Prediction is not perfect though_co_ which is why in Call of Duty or Quake there_t_s a small chance you can get shot in the head if you_t_ve jumped behind a wall within the lag timeframe.  You either get speed or accuracy_co_ but not both. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2016-07-07T03:53:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/11286-dbawel/?do_eq_hovercard_qt_ data-mentionid_eq__qt_11286_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/11286-dbawel/_qt_ rel_eq__qt__qt__gt_@dbawel_lt_/a_gt_ so it looks like this guy is trying to do what I_t_m doing_co_ but without any success _dd_/ I_t_m still looking for a framework to let me handle 3D maths (local to absolute conversions) and bounding boxes and collisions.  I did find a Babylonjs DLL that runs with .NET but its also asking for a canvas and engine in order to create a scene\n_lt_/p_gt_\n_lt_iframe data-embedcontent_eq__qt__qt_ frameborder_eq__qt_0_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/topic/7038-nodejs-with-babylon/?do_eq_embed_qt__gt__lt_/iframe_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-07-10T22:25:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/12544-ozrocker/?do_eq_hovercard_qt_ data-mentionid_eq__qt_12544_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/12544-ozrocker/_qt_ rel_eq__qt__qt__gt_@ozRocker_lt_/a_gt_ - The only way this would be possible_co_ is to use both node.js and WebsocketIO - otherwise you won_t_t get the speed you_t_re potentially looking for as you will require the constant open connection between the server and the user. Also_co_ I highly advise that you calculate simple physics on the user_t_s device_co_ and then check the accuracy on the server. Using this method_co_you should have perhaps 90% of correct calculations_co_ and the server can make the additional 10% corrections for any minor errors. And using Websocket will minimize any delay to 1 second or less over a normal connection.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere will be much for you to write in node.js to accomplish this_co_ but it is a next step in gaming technology - especially WebGL. Some MMOs already do this_co_ and you should find the right balance so that any correction shouldn_t_t be noticed by the user.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCheers_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2016-07-11T01:55:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_129020_qt_ data-ipsquote-contentid_eq__qt_22498_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1463645536_qt_ data-ipsquote-userid_eq__qt_12544_qt_ data-ipsquote-username_eq__qt_ozRocker_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 19/05/2016 at 6_dd_12 PM_co_ ozRocker said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tIt communicates with the website by sending JSON through web sockets.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tYes_co_ I am using web sockets.  My server already does basic movement calculations_co_ same with the client_co_ so the client can move the character instantly then fix any corrections coming back from the server (maybe I didn_t_t mention that before).  It is up and running here _lt_a href_eq__qt_http_dd_//www.punkoffice.com/webiverse_qt_ rel_eq__qt_external nofollow_qt__gt_www.punkoffice.com/webiverse_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe only issue is that I can_t_t use the Babylon.js physics code on the server to match with the client because you can_t_t run Babylon.js in headless mode.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-07-11T04:19:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_ve talked with developers who have run three.js in headless mode without much additional code. Although we shouldn_t_t be permitted to run extensions_co_ this post clearly shows progress with cannon.js.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tGood luck - perhaps it_t_s a little early to move in this direction. But certainly worth a try.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s the link_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_iframe data-embedcontent_eq__qt__qt_ frameborder_eq__qt_0_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/topic/19895-babylonjs-multiplayer-code/?do_eq_embed_qt__gt__lt_/iframe_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-07-11T10:38:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_135637_qt_ data-ipsquote-contentid_eq__qt_22498_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1468202101_qt_ data-ipsquote-userid_eq__qt_12544_qt_ data-ipsquote-username_eq__qt_ozRocker_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t8 hours ago_co_ ozRocker said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tbecause you can_t_t run Babylon.js in headless mode\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tYou could run Oimo or Cannon on the server and then sync the meshes with the bodies on the client side.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]