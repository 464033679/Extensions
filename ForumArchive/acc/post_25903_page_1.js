[{"Owner":"MackeyK24","Date":"2016-10-20T10:41:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWhat are all the babylon possible shader attributes and uniforms_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_// Attributes\nattribute vec3 position_sm_\nattribute vec3 normal_sm_\nattribute vec2 uv_sm_\n\n// Uniforms\nuniform mat4 worldViewProjection_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\ti assume they will all be equiv to some webgl attribute (if you had to do in strait webgl). \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo i assume_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tposition _eq_ gl_Vertex -&gt_sm_ To vec3\n_lt_/p_gt_\n\n_lt_p_gt_\n\tnormal _eq_ gl_Normal -&gt_sm_ To vec3\n_lt_/p_gt_\n\n_lt_p_gt_\n\tuv _eq_ gl_MultiTexCoord0 - To vec2\n_lt_/p_gt_\n\n_lt_p_gt_\n\tand \n_lt_/p_gt_\n\n_lt_p_gt_\n\tworldViewProjection _eq_ gl_ProjectionMatrix * gl_ModelViewMatrix\n_lt_/p_gt_\n\n_lt_p_gt_\n\tand so on...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat are all the other possible attributes and uniforms_co_ and most importantly what do they equal in regular GLSL.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA... I just would to really understand where each attribute and uniform comes from.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tB... I am trying to make a _t_Universal Unity Babylon GLSL Shader Template_t_ for use directly in the Unity for creating Babylon shaders.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMinimal Example Shader For Unity_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_Shader _qt_BabylonJS/Sample basic shader_qt_ { // defines the name of the shader \n   SubShader { // Unity chooses the subshader that fits the GPU best\n      Pass { // some shaders require multiple passes\n         GLSLPROGRAM // here begins the part in Unity_t_s GLSL\n\n         #ifdef VERTEX // here begins the vertex shader\n\n         void main() // all vertex shaders define a main() function\n         {\n            gl_Position _eq_ gl_ModelViewProjectionMatrix * gl_Vertex_sm_\n               // this line transforms the predefined attribute \n               // gl_Vertex of type vec4 with the predefined\n               // uniform gl_ModelViewProjectionMatrix of type mat4\n               // and stores the result in the predefined output \n               // variable gl_Position of type vec4.\n         }\n\n         #endif // here ends the definition of the vertex shader\n\n\n         #ifdef FRAGMENT // here begins the fragment shader\n\n         void main() // all fragment shaders define a main() function\n         {\n            gl_FragColor _eq_ vec4(0.0_co_ 1.0_co_ 0.0_co_ 1.0)_sm_ \n               // this fragment shader just sets the output color \n               // to opaque red (red _eq_ 1.0_co_ green _eq_ 0.0_co_ blue _eq_ 0.0_co_ \n               // alpha _eq_ 1.0)\n         }\n\n         #endif // here ends the definition of the fragment shader\n\n         ENDGLSL // here ends the part in GLSL \n      }\n   }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tMy intent was to parse the shader text blocks for the vertex and fragment sections during export. Then do some kind _t_key text replace_t_ in the vertex part that reads all the attributes and uniforms replace with babylon.js equivalent at export. I would also love to base64 encode this vertex and fragment program right in the ShaderMaterial section of the .babylon son file. I posted a topic on this_co_ hopefully others can see the benefits as well.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnyways... Any info on all the BUILT-IN attributes and uniforms that babylon.js exposes (and how they are calculated so i can duplicate that calculation when running in unity editor)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTHANK YOU VERY MUCH _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-10-20T15:44:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tare you asking in the context of the ShaderMaterial? Or a custom material?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor ShaderMaterial_co_ you can have the list here_dd_ _lt_a href_eq__qt_https_dd_//www.eternalcoding.com/?p_eq_113#2_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.eternalcoding.com/?p_eq_113#2_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor a custom material_co_ you decide what you want to use so you are on point for it _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2016-10-20T21:35:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSo are you saying these are EVERYTHING the ShaderMaterial provides as _t_Built-In_t_ attributes and uniforms\n_lt_/p_gt_\n\n_lt_pre style_eq__qt_margin-top_dd_0px_sm_margin-bottom_dd_10px_sm_padding_dd_9.5px_sm_border_dd_1px solid rgb(204_co_204_co_204)_sm_font-size_dd_13px_sm_font-family_dd_Menlo_co_ Monaco_co_ Consolas_co_ _t_Courier New_t__co_ monospace_sm_vertical-align_dd_baseline_sm_line-height_dd_1.42857143_sm_background-color_dd_rgb(245_co_245_co_245)_sm_clear_dd_both_sm_color_dd_rgb(51_co_51_co_51)_sm__qt__gt_\n_lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_#000000_sm__qt__gt_attributes_dd_ [_lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_rgb(163_co_21_co_21)_sm__qt__gt__qt_position_qt__lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_#000000_sm__qt__gt__co_ _lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_rgb(163_co_21_co_21)_sm__qt__gt__qt_normal_qt__lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_#000000_sm__qt__gt__co_ _lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_rgb(163_co_21_co_21)_sm__qt__gt__qt_uv_qt__lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_#000000_sm__qt__gt_]_co_\nuniforms_dd_ [_lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_rgb(163_co_21_co_21)_sm__qt__gt__qt_world_qt__lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_#000000_sm__qt__gt__co_ _lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_rgb(163_co_21_co_21)_sm__qt__gt__qt_worldView_qt__lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_#000000_sm__qt__gt__co_ _lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_rgb(163_co_21_co_21)_sm__qt__gt__qt_worldViewProjection_qt__lt_/span_gt__lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_#000000_sm__qt__gt_]_lt_/span_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_#000000_sm__qt__gt_What about _t_color_t_ is that an attribute?_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_margin_dd_0px_sm_padding_dd_0px_sm_border_dd_0px_sm_font-style_dd_inherit_sm_font-family_dd_inherit_sm_vertical-align_dd_baseline_sm_background-color_dd_#FFFFFF_sm_color_dd_#000000_sm__qt__gt_What about _t_view_t_ and _t_projection_t_ are those uniforms?_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMost importantly_co_ how are they computed?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTake a look at _t_MACRO SECTION_t_ i am creating for BabylonJS Unity GLSL Shaders... I need to know EXACTLY how each _qt_well known_t_ babylonjs attribute and uniform is computed. That way i can declare a _t_MACRO_t_ block that uses the normal _t_gl__t_ api in unity then when exported i simple replace the _t_MACRO_t_ block with BabylonJS version_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_//&lt_sm_-- DO NOT MODIFY VERTEX MACROS --&gt_sm_\n//&lt_sm_-- BABYLON VERTEX MACROS START --&gt_sm_\nvec4 GL_POSITION_ATTRIBUTE() { return gl_Vertex_sm_ }\nvec3 GL_NORMAL_ATTRIBUTE() { return gl_Normal_sm_ }\nvec4 GL_COLOR_ATTRIBUTE() { return gl_Color_sm_ }\nvec2 GL_UV_ATTRIBUTE() { return vec2(gl_MultiTexCoord0.xy)_sm_ }\nmat4 GL_WORLDVIEWPROJECTION_UNIFORM() { return gl_ProjectionMatrix * gl_ModelViewMatrix_sm_ }\n//&lt_sm_-- BABYLON VERTEX MACROS END --&gt_sm_\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI need to be able to create GL MACRO functions for all possible Built-In ShaderMaterial attributes and uniforms that babylon js exposes\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTake a look at my _t_AmigaShader.shader_t_ (from CYOS basic shader example)... This is what i got so far_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_Shader _qt_BabylonJS/AmigaShader_qt_ {\n\tProperties {\n\t\ttextureSampler (_qt_Texture_qt__co_ 2D) _eq_ _qt_white_qt_ {}\n\t}\n\tSubShader {\n\t\tPass {\n\t \n        \tGLSLPROGRAM // here begins the part in Unity_t_s GLSL\n\n\t        #ifdef VERTEX // here begins the vertex shader\n\t\t\t\tprecision highp float_sm_\n\n\t\t\t\t//&lt_sm_-- DO NOT MODIFY VERTEX MACROS --&gt_sm_\n\t\t\t\t//&lt_sm_-- BABYLON VERTEX MACROS START --&gt_sm_\n\t\t\t\tvec4 GL_POSITION_ATTRIBUTE() { return gl_Vertex_sm_ }\n\t\t\t\tvec3 GL_NORMAL_ATTRIBUTE() { return gl_Normal_sm_ }\n\t\t\t\tvec4 GL_COLOR_ATTRIBUTE() { return gl_Color_sm_ }\n\t\t\t\tvec2 GL_UV_ATTRIBUTE() { return vec2(gl_MultiTexCoord0.xy)_sm_ }\n\t\t\t\tmat4 GL_WORLDVIEWPROJECTION_UNIFORM() { return gl_ProjectionMatrix * gl_ModelViewMatrix_sm_ }\n\t\t\t\t//&lt_sm_-- BABYLON VERTEX MACROS END --&gt_sm_\n\n\t\t\t\t// Varying\n\t\t\t\tvarying vec2 vUV_sm_\n\n\t\t\t\tvoid main(void) {\n\t\t\t\t\tvec2 uv _eq_ GL_UV_ATTRIBUTE()_sm_\n\t\t\t\t\tvec4 pos _eq_ GL_POSITION_ATTRIBUTE()_sm_\n\t\t\t\t\tmat4 wvp _eq_ GL_WORLDVIEWPROJECTION_UNIFORM()_sm_\n\n\t\t\t\t    gl_Position _eq_ wvp * pos_sm_\n\t\t\t\t    vUV _eq_ uv_sm_\n\t\t\t\t}\n\n\t        #endif // here ends the definition of the vertex shader\n\n\n\t        #ifdef FRAGMENT // here begins the fragment shader\n\t\t\t\tprecision highp float_sm_\n\n\t\t\t\tvarying vec2 vUV_sm_\n\t\t\t\tuniform sampler2D textureSampler_sm_\n\n\t\t\t\tvoid main(void) {\n\t\t\t\t    gl_FragColor _eq_ texture2D(textureSampler_co_ vUV)_sm_\n\t\t\t\t}\n\n\t        #endif // here ends the definition of the fragment shader\n\n\t        ENDGLSL // here ends the part in GLSL \n\t\t}\n\t}\n\t//&lt_sm_-- REQUIRES ATTRIBUTE AND UNIFROM --&gt_sm_\n\tCustomEditor _qt_BabylonMaterialInspector_qt_\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tWorks great so far... just need the rest of the macro created _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2016-10-21T14:56:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSTILL NEED HELP WITH BABYLON JS GL_ATTRIBUTES_dd_ Need to know all the attributes and uniforms (See several little snippets_co_ but can_t_t seems to find a list that has ALL the built-in attributes and uniforms... Like position_co_ normal and worldViewProjection)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo far everything is working great (Using just those few GL_ATTRIBUTES i know about).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCheck this out... You can now use unity editor to fully layout your scene with materials and the new universal babylonjs glsl shaders and see the shader on meshes in unity. Then when exported using the unity babylon export tool... Parse the universal shader and formats babylon js .fx shaders.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn unity_co_ i dropped cube on scene_co_ made a material_co_ specify the _t_BabylonJs/Templates/AmigaShader_t_ (from the babylonjs example)_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe BabylonJS Unity Shader_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_Shader _qt_BabylonJS/Templates/Amiga Shader_qt_ {\nProperties {\n\t[NoScaleOffset] textureSampler (_qt_Texture_qt__co_ 2D) _eq_ _qt_white_qt_ {}\n\tscaleFactor (_qt_Scale Factor_qt__co_ Range (1.0_co_5.0)) _eq_ 1.0\n}\nSubShader {\nPass {\nGLSLPROGRAM\n\n#ifdef BABYLON\n\tattributes_dd_ [_qt_position_qt__co_ _qt_normal_qt__co_ _qt_uv_qt_]\n\tuniforms_dd_ [_qt_world_qt__co_ _qt_worldView_qt__co_ _qt_worldViewProjection_qt_]\n#endif //BABYLON-END\n\n\n#ifdef VERTEX\n//BABYLON-VERTEX-MACROS-START\nvec4 GL_POSITION_ATTRIBUTE() { return gl_Vertex_sm_ }\nvec3 GL_NORMAL_ATTRIBUTE() { return gl_Normal_sm_ }\nvec4 GL_COLOR_ATTRIBUTE() { return gl_Color_sm_ }\nvec2 GL_UV_ATTRIBUTE() { return vec2(gl_MultiTexCoord0.xy)_sm_ }\nmat4 GL_WORLDVIEWPROJECTION_UNIFORM() { return gl_ProjectionMatrix * gl_ModelViewMatrix_sm_ }\n//BABYLON-VERTEX-MACROS-END\nprecision highp float_sm_\n\nvarying vec2 vUV_sm_\n\nvoid main(void)\n{\n\tvec2 uv _eq_ GL_UV_ATTRIBUTE()_sm_\n\tvec4 pos _eq_ GL_POSITION_ATTRIBUTE()_sm_\n\tmat4 wvp _eq_ GL_WORLDVIEWPROJECTION_UNIFORM()_sm_\n\n    gl_Position _eq_ wvp * pos_sm_\n    vUV _eq_ uv_sm_\n}\n#endif //VERTEX-END\n\n\n#ifdef FRAGMENT\nprecision highp float_sm_\n\nvarying vec2 vUV_sm_\nuniform float scaleFactor_sm_\nuniform sampler2D textureSampler_sm_\n\nvoid main(void)\n{\n    gl_FragColor _eq_ texture2D(textureSampler_co_ vUV * scaleFactor)_sm_\n}\n#endif //FRAGMENT-END \n\nENDGLSL\n}}}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tNote_dd_ Uses the standard unity GLSLPROGRAM format (with and added #ifdef BABYLON section for attributes and uniforms)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis shaders works great in unity so you can see your water or whatever right in the designer. When exported to .fx files... Looks like this_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_//BABYLON-VERTEX-MACROS-START\nattribute vec3 position_sm_\nvec4 GL_POSITION_ATTRIBUTE() { return vec4(position_co_ 1.0)_sm_ }\nattribute vec3 normal_sm_\nvec3 GL_NORMAL_ATTRIBUTE() { return normal_sm_ }\nattribute vec2 uv_sm_\nvec2 GL_UV_ATTRIBUTE() { return uv_sm_ }\nuniform mat4 world_sm_\nmat4 GL_WORLD_UNIFORM() { return world_sm_ }\nuniform mat4 worldView_sm_\nmat4 GL_WORLDVIEW_UNIFORM() { return worldView_sm_ }\nuniform mat4 worldViewProjection_sm_\nmat4 GL_WORLDVIEWPROJECTION_UNIFORM() { return worldViewProjection_sm_ }\n//BABYLON-VERTEX-MACROS-END\nprecision highp float_sm_\n\nvarying vec2 vUV_sm_\n\nvoid main(void)\n{\n\tvec2 uv _eq_ GL_UV_ATTRIBUTE()_sm_\n\tvec4 pos _eq_ GL_POSITION_ATTRIBUTE()_sm_\n\tmat4 wvp _eq_ GL_WORLDVIEWPROJECTION_UNIFORM()_sm_\n\n    gl_Position _eq_ wvp * pos_sm_\n    vUV _eq_ uv_sm_\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t And\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_precision highp float_sm_\n\nvarying vec2 vUV_sm_\nuniform float scaleFactor_sm_\nuniform sampler2D textureSampler_sm_\n\nvoid main(void)\n{\n    gl_FragColor _eq_ texture2D(textureSampler_co_ vUV * scaleFactor)_sm_\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tFreakin Sweet _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tJust need the rest of those GL_ATTRIBUTES \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-10-21T16:09:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI would just do a text search for GL_ATTRIBUTES on your local repository directory src/Shaders.  File Explorer does a good job for Win_co_ or whatever you use for text searching.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOtherwise_co_ you are asking someone else to do that for you.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-10-21T16:22:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tStill not sure to understand what you are looking for.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut about attributes_co_ you can define the attributes required by your shader using this syntax_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Materials/babylon.shaderMaterial.ts#L27_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Materials/babylon.shaderMaterial.ts#L27_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe list of attributes you can set in your vertex buffer_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.vertexBuffer.ts#L118_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.vertexBuffer.ts#L118_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2016-10-21T16:48:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWhat i am try to make are _t_universal_t_ GL_ATTRIBUTE MACRO functions for BabylonJS shaders that will work with BOTH Unity (for design time) and Babylon (for runtime).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo far its working great for the few attributes i know the _t_gl__t_ equivalent for... For example_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn Babylon i have a GL_POSITION_ATTRIBUTE macro function_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_attribute vec3 position_sm_\nvec4 GL_POSITION_ATTRIBUTE() { return vec4(position_co_ 1.0)_sm_ }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThat simple returns the _t_position_t_ attribute (cast to vec4)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow in Unity (using regular gl_Vertex for position)\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_vec4 GL_POSITION_ATTRIBUTE() { return gl_Vertex_sm_ }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tSo i can safely use GL_POSITION_ATTRIBUTE() instead of the platform specific (babylon _eq_ _t_position_t_ and unity _eq_ _t_gl_Vertex_t_)\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_void main(void)\n{\n\tvec2 uv _eq_ GL_UV_ATTRIBUTE()_sm_\n\tvec4 pos _eq_ GL_POSITION_ATTRIBUTE()_sm_\n\tmat4 wvp _eq_ GL_WORLDVIEWPROJECTION_UNIFORM()_sm_\n\n    gl_Position _eq_ wvp * pos_sm_\n    vUV _eq_ uv_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t This shader will work in both unity and babylon. My problem is that i have to KNOW and DUPLICATE all the BUILT-IN attributes and uniforms so i can make macros for each. No babylon hide all the low level GLSL stuff to make things easier... So instead of have to use the GLSL gl_Vertex attribute_co_ BABYLON JS will expose that attribute as _t_position_t_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow i am no shader guy... but i can tell the real simple ones_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBJS_dd_ position _eq_ GLSL_dd_ gl_Vertex\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBJS_dd_ normal _eq_ GLSL_dd_ gl_Normal\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBJS_dd_ uv _eq_ GLSL_dd_ gl_MultiTexCoord0.xy\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAND uniforms  AS WELL\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBJS_dd_ worldViewProjection _eq_ GLSL_dd_ gl_ProjectionMatrix * gl_ModelViewMatrix\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSO WHAT ARE ALL THE REST.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1... Is there a BJS_dd_ color _eq_ GLSL_dd_ gl_Color\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2... What is the calculation for BJS_dd_ worldView_co_ world_co_ view_co_ projection AND whatever other ones that are build-in to babylon like _t_worldViewProjection_t_\n_lt_/p_gt_\n\n_lt_p_gt_\n\ti need to know the EXACT calculations for EVERY BUILT-IN (babylon is doing the hard work and exposing as some attribute) so i can make the unity version of macro do the exact same things... That way if you texture up a mesh at design time using the universal shader_co_ when exported THEY SHOULD LOOK WORK EXACTLY THE SAME.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy hope was to simple REPLACE the GL_ATRTIBUTE MACRO BLOCKS_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo Unity BLOCK_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_//BABYLON-VERTEX-MACROS-START\nvec4 GL_POSITION_ATTRIBUTE() { return gl_Vertex_sm_ }\nvec3 GL_NORMAL_ATTRIBUTE() { return gl_Normal_sm_ }\nvec4 GL_COLOR_ATTRIBUTE() { return gl_Color_sm_ }\nvec2 GL_UV_ATTRIBUTE() { return vec2(gl_MultiTexCoord0.xy)_sm_ }\nmat4 GL_WORLDVIEWPROJECTION_UNIFORM() { return gl_ProjectionMatrix * gl_ModelViewMatrix_sm_ }\n//BABYLON-VERTEX-MACROS-END_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tWould get replaced with Babylon BLOCK ON EXPORT_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_//BABYLON-VERTEX-MACROS-START\nattribute vec3 position_sm_\nvec4 GL_POSITION_ATTRIBUTE() { return vec4(position_co_ 1.0)_sm_ }\nattribute vec3 normal_sm_\nvec3 GL_NORMAL_ATTRIBUTE() { return normal_sm_ }\nattribute vec2 uv_sm_\nvec2 GL_UV_ATTRIBUTE() { return uv_sm_ }\nuniform mat4 worldViewProjection_sm_\nmat4 GL_WORLDVIEWPROJECTION_UNIFORM() { return worldViewProjection_sm_ }\n//BABYLON-VERTEX-MACROS-END_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tAs you can see_co_ with my limited knowledge... I currently only support these FEW attributes... Because i don_t_t know what are all the built-in ones and how they were computed.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHope that explains better _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-10-21T16:51:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tyep and now you have the list of attributes supported by babylon (my second link)\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2016-10-21T16:51:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tSo so long winded _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2016-10-21T16:53:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNote... the URLS with vertex links not working\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-10-21T16:56:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tWhich one?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2016-10-21T17:08:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tBoth... this url says can_t_t find server_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.vertexBuffer.ts#L118_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.vertexBuffer.ts#L118_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2016-10-21T20:03:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYo... I think the urls might be fine... Github is getting Denial Of Service Attacked _lt_img alt_eq__qt__dd_(_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ title_eq__qt__dd_(_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-10-24T16:49:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tYep _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MrVR","Date":"2017-02-20T19:53:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Guys_co_ I_t_m playing further with the Shaders and I can not figure how to use this ones can somebody help me\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI need the equivalents of this ones thanks  \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_gl_NormalMatrix \ngl_ModelViewProjectionMatrix _lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t-- _lt_span style_eq__qt_color_dd_#c0392b_sm__qt__gt_UPDATE_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOk Seem to work with this normal as the gl_NormalMatrix and gl_ModelViewProjectionMatrix _eq_ projMat * viewMat * modelMat please correct me if IM wrong\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut I can find the way to set up the cube texture _lt_span style_eq__qt_color_dd_#16a085_sm__qt__gt_envMap_lt_/span_gt_ on my exporter\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\n    uniform samplerCube envMap_sm_\n\n            void main(void) {\n                vec3 eye _eq_ normalize(eyePos - position)_sm_\n                vec3 r _eq_ reflect(eye_co_ worldNormal)_sm_\n                vec4 color _eq_ textureCube(envMap_co_ r)_sm_\n                color.a _eq_ 0.5_sm_\n                gl_FragColor _eq_ color_sm_\n            }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t--UPDATE 2\n_lt_/p_gt_\n\n_lt_p_gt_\n\tok I think i figure that worldViewProjection is the gl_ModelViewProjectionMatrix  but i need to understand how to set up a new property for a uniform _lt_span style_eq__qt_color_dd_#e74c3c_sm__qt__gt_samplerCube _lt_/span_gt__MainTex_sm_ instead 2d\n_lt_/p_gt_\n\n_lt_p_gt_\n\tcan anyone help me with this please _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ ?  I need to set up a cubemap texture to finish my shader _lt_span style_eq__qt_color_dd_#c0392b_sm__qt__gt_uniform samplerCube _MainTex_lt_/span_gt__sm_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_Shader _qt_BabylonJS/waterShader_qt_ {\n\tProperties {\n\t\t_Color (_qt_Color_qt__co_ Color) _eq_ (1_co_1_co_1_co_1)\n\t\t_Brightness (_qt_Intensity_qt__co_ Range(1.0_co_ 10.0)) _eq_ 1.0\n\t\t[NoScaleOffset] _MainTex (_qt_Albedo (RGB)_qt__co_ 2D) _eq_ _qt_white_qt_ {}\n\t\t_ScaleX (_qt_Scale Factor X_qt__co_ Range (0.0_co_ 10.0)) _eq_ 1.0\n\t\t_ScaleY (_qt_Scale Factor Y_qt__co_ Range (0.0_co_ 10.0)) _eq_ 1.0\n\t\t_Metallic (_qt_Metallic_qt__co_ Range(0_co_1)) _eq_ 0.0\n\t\t_Glossiness (_qt_Smoothness_qt__co_ Range(0_co_1)) _eq_ 0.5\n\t\t[ToggleOff] _NeedsAlphaTesting (_qt_Needs Alpha Testing_qt__co_ Int) _eq_ 0\n\t\t[ToggleOff] _NeedsAlphaBlending (_qt_Needs Alpha Blending_qt__co_ Int) _eq_ 0\n\t\t[Enum(Disable_co_0_co_Additive_co_1_co_Combine_co_2_co_Subtract_co_3_co_Multiply_co_4_co_Maximized_co_5_co_OneOne_co_6)] _AlphaMode (_qt_Alpha Blending Mode_qt__co_ int) _eq_ 2\n\t}\n\tSubShader {\n\t\tTags { _qt_RenderType_qt__eq__qt_Opaque_qt_ }\n\t\t\n\t\t\tCGPROGRAM\n\n\t\t\t//////////////////////////////////////////////////////////\n\t\t\t// BABYLON WEBGL RUNTIME SHADER PROGRAM SECTIONS (GLSL) //\n\t\t\t//////////////////////////////////////////////////////////\n\n\t\t\t#ifdef BABYLON\n\t\t\n\t\t\t\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\there is where i puts the cube map\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\n\t\t\t#ifdef FRAGMENT\n\t\t\t\n\t\t\tvarying vec3 position_sm_\n\t\t\tvarying vec3 worldNormal_sm_\n\t\t\tvarying vec3 eyeNormal_sm_\n\t\t\tuniform vec3 eyePos_sm_\n\t\t\t// uniform samplerCube envMap_sm_\n\t\t\tuniform samplerCube _MainTex_sm_\n\n\t\t\tvoid main(void) {\n\t\t\t\tvec3 eye _eq_ normalize(eyePos - position)_sm_\n\t\t\t\tvec3 r _eq_ reflect(eye_co_ worldNormal)_sm_\n\t\t\t\tvec4 color _eq_ textureCube(_MainTex_co_ r)_sm_\n\t\t\t\tcolor.a _eq_ 0.5_sm_\n\t\t\t\tgl_FragColor _eq_ color_sm_\n\t\t\t}\n\n\t\t\t\n\t\t\t#endif //FRAGMENT-END \n\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tHere is list of the build in transformations if some one now the equivalences in the shader please let me know_co_ I will calculate the ones I need if there not available in babylon shader\n_lt_/p_gt_\n\n_lt_ul style_eq__qt_color_dd_rgb(58_co_58_co_58)_sm_font-family_dd_Roboto_co_ Arial_co_ sans-serif_sm_font-size_dd_18px_sm_font-style_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm_background-color_dd_rgb(254_co_254_co_254)_sm__qt__gt__lt_li_gt_\n\t\tworld \n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tview \n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tprojection \n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tworldView \n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tworldViewProjection \n\t_lt_/li_gt_\n_lt_/ul_gt__lt_pre style_eq__qt_font-family_dd_monospace_co_ Courier_sm_color_dd_rgb(0_co_0_co_0)_sm_background-color_dd_rgb(248_co_249_co_250)_sm_border_dd_1px solid rgb(234_co_236_co_240)_sm_padding_dd_1em_sm_white-space_dd_pre-wrap_sm_line-height_dd_1.3em_sm_font-size_dd_14px_sm_font-style_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_word-spacing_dd_0px_sm__qt__gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ModelViewMatrix_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ProjectionMatrix_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ModelViewProjectionMatrix_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_TextureMatrix_lt_/span_gt__lt_span_gt_[_lt_/span_gt__lt_span_gt_gl_MaxTextureCoords_lt_/span_gt__lt_span_gt_]_sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat3_lt_/span_gt_ _lt_span_gt_gl_NormalMatrix_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_ _lt_span style_eq__qt_color_dd_rgb(64_co_128_co_128)_sm_font-style_dd_italic_sm__qt__gt_// transpose of the inverse of the_lt_/span_gt_\n   _lt_span style_eq__qt_color_dd_rgb(64_co_128_co_128)_sm_font-style_dd_italic_sm__qt__gt_// upper left 3x3 matrix of gl_ModelViewMatrix_lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ModelViewMatrixInverse_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ProjectionMatrixInverse_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ModelViewProjectionMatrixInverse_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_TextureMatrixInverse_lt_/span_gt__lt_span_gt_[_lt_/span_gt__lt_span_gt_gl_MaxTextureCoords_lt_/span_gt__lt_span_gt_]_sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ModelViewMatrixTranspose_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ProjectionMatrixTranspose_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ModelViewProjectionMatrixTranspose_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_TextureMatrixTranspose_lt_/span_gt__lt_span_gt_[_lt_/span_gt__lt_span_gt_gl_MaxTextureCoords_lt_/span_gt__lt_span_gt_]_sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ModelViewMatrixInverseTranspose_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ProjectionMatrixInverseTranspose_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_ModelViewProjectionMatrixInverseTranspose_lt_/span_gt__lt_span_gt__sm__lt_/span_gt_\n_lt_span style_eq__qt_color_dd_rgb(0_co_128_co_0)_sm_font-weight_dd_bold_sm__qt__gt_uniform_lt_/span_gt_ _lt_span_gt_mat4_lt_/span_gt_ _lt_span_gt_gl_TextureMatrixInverseTranspose_lt_/span_gt__lt_span_gt_[_lt_/span_gt__lt_span_gt_gl_MaxTextureCoords_lt_/span_gt__lt_span_gt_]_sm__lt_/span_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]