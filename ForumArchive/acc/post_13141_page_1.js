[{"Owner":"fenomas","Date":"2015-03-15T09:44:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co_ two questions_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_1. Which is the intended way to correctly render a texture with an alpha channel? The docs say to set _qt_texture.hasAlpha_qt__co_ but this appears to render the texture opaquely while dropping pixels under some threshold. Am I supposed to be setting tex.opacityTexture_eq_tex.diffuseTexture? (opacityTexture doesn_t_t seem to be in any of the tutorials so it_t_s hard to tell..)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_2. When I set an opacityTexture on a mesh_co_ it messes up other parts of my scene - for example_co_ sprites get drawn on top of the mesh regardless of position (_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#5RPNC_qt_ rel_eq__qt_external nofollow_qt__gt_thusly_lt_/a_gt_). Is this avoidable?_lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-03-15T16:49:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_1. set your texture to mat.opacityTexture as well. In this case alpha blending is used instead of alpha testing_lt_/p_gt__lt_p_gt_2. The problem with opacity is that they have to be drawn after everything to ensure correct alpha blending. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-03-15T17:05:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi.  SOME info about Opacity Texture can be found in _lt_a href_eq__qt_http_dd_//blogs.msdn.com/b/eternalcoding/archive/2013/07/01/babylon-js-unleash-the-standardmaterial-for-your-babylon-js-game.aspx_qt_ rel_eq__qt_external nofollow_qt__gt_our _qt_Unleash_qt_ document_lt_/a_gt_. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The lack of mention of Opacity Texture in our _lt_a href_eq__qt_http_dd_//babylondoc.azurewebsites.net/page.php?p_eq_22051_qt_ rel_eq__qt_external nofollow_qt__gt_basic Materials tutorial_lt_/a_gt_ has been noted.  Coming soon (maybe).  Thanks for the tip_co_ Fen._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-03-16T03:11:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_75385_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_13141_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt_ data-cite_eq__qt_Deltakosh_qt_ data-ipsquote-timestamp_eq__qt_1426438169_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_2. The problem with opacity is that they have to be drawn after everything to ensure correct alpha blending. _lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Sure_co_ but in this case they aren_t_t. Are sprites drawn after transparencies?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-03-16T06:43:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hmm_co_ another oddity - if a sprite has alpha_co_ it masks out other sprites rather than being composited._lt_/p_gt__lt_p_gt_Thus_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#5RPNC%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#5RPNC#1_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Is the lesson here that sprites occupy their own rendering layer_co_ so if you want something that renders in with the rest of the scene you need to create a bunch of planes and manage your own u/v scales and offsets?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-03-16T18:27:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_For textures with alpha_dd_ they are drawn only in color buffer and not in depth buffer to not block blending. So because sprites are rendered after and because there is no depth buffer they cannot take care of their position._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This is done by this instruction_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/Rendering/babylon.renderingGroup.ts#L74_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/Rendering/babylon.renderingGroup.ts#L74_lt_/a_gt__lt_/p_gt__lt_p_gt_which in turn call this one_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/babylon.engine.ts#L1373_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/babylon.engine.ts#L1373_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_We should perhaps add a parameter to allow depth rendering for alpha objects._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For sprites_dd_ because they are not designed to get alpha_co_ they are not sorted. So alpha sprites may be rendered first and so block the depth buffer._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]