[{"Owner":"royibernthal","Date":"2017-02-24T16:57:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m working on a feature to contribute to the bjs core - precompiling shaders for materials. It_t_d be great if you could help with issues that arise as I develop it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMany thanks to _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ for his support and detailed responses in the mail.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_The problem_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere are many parameters that can trigger shader recompilation for a material_co_ e.g. using bones_co_ adding a new light_co_ etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSince the shader compilation is a sync process_co_ it can be problematic if it happens during gameplay_co_ as it_t_ll result in lags that_t_re noticeable to the user.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor instance_co_ imagine you have a mesh with bones_co_ suddenly walking in the game into a certain point light for the first time_co_ at that moment_co_ a new shader will have to be recompiled for a mesh with bones and with that point light.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow imagine having multiple meshes_co_ many lights and other parameters.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_The solution_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPrecompiling all possible shader combinations for each mesh_t_s material_co_ so when a certain shader combination is suddenly required during the game_co_ it already exists and doesn_t_t need to be compiled again.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s a list of all the possible parameters that affect shader precompilation_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Materials/babylon.standardMaterial.ts#L2_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Materials/babylon.standardMaterial.ts#L2_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tOf course_co_ shaders for all the possible combinations even for a single material is an unacceptable number.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMore practically_co_ each game has certain requirements_co_ which are usually not too much. Ideally it_t_d have a few fixed parameters - e.g. a hemispheric light that_t_s always on_co_ and a few varying parameters_co_ e.g. a point light which can be turned on and off.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe idea is to only precompile shaders that would_t_ve been compiled during gameplay anyway_co_ and thus precompiling a very acceptable number of shaders.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEach game will be able to define for itself what parameters it should take into account_co_ and specify for each parameter the possible values that should be precompiled.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA single value means the parameter is fixed_co_ which makes the calculation for it almost negligible_co_ as it doesn_t_t require more than 1 combination_co_ e.g. a light that_t_s always on.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_What I have so far_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAt the moment I_t_m developing it in a separate project_co_ and once it_t_s complete I_t_ll migrate it to the bjs core.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink_qt_ data-fileid_eq__qt_11785_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/applications/core/interface/file/attachment.php?id_eq_11785_qt_ rel_eq__qt__qt__gt_shaderCompiler.ts_lt_/a_gt_ - actual implementation\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink_qt_ data-fileid_eq__qt_11787_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/applications/core/interface/file/attachment.php?id_eq_11787_qt_ rel_eq__qt__qt__gt_shaderCompilerTest.ts_lt_/a_gt_ - how it should look to the user\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI intend to start with a few common parameters (hemipheric lights_co_ point lights and bones)_co_ and extend the options with time. (hopefully with your help)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEach supported parameter is a class implementing the IShaderCompilerEntity interface_co_ at the moment there_t_s only ShaderCompilerHemisphericLight.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_What_t_s next_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m struggling with the heart of the solution - calculating all the possible combinations for a specified configuration. In other words_co_ implementing ShaderCompiler/getConfigurations().\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor example_co_ if I have 3 varying lights_co_ each can be on or off_co_ I_t_d need to calculate all the possible combinations_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t0_co_ 0_co_ 0_lt_br /_gt_\n\t0_co_ 0_co_ 1_lt_br /_gt_\n\t0_co_ 1_co_ 0_lt_br /_gt_\n\t0_co_ 1_co_ 1_lt_br /_gt_\n\t1_co_ 0_co_ 0_lt_br /_gt_\n\t1_co_ 1_co_ 0_lt_br /_gt_\n\t1_co_ 1_co_ 1_lt_br /_gt_\n\t1_co_ 0_co_ 1\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m not sure how to calculate all possible combinations when I have more parameters_co_ with each parameter having its own number of possible values (which can be more than just 2 values - on/off).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAny idea how such a thing can be achieved?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MrVR","Date":"2017-02-24T21:46:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_164865_qt_ data-ipsquote-contentid_eq__qt_28677_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1487955475_qt_ data-ipsquote-userid_eq__qt_8420_qt_ data-ipsquote-username_eq__qt_royibernthal_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t4 hours ago_co_ royibernthal said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tI intend to start with a few common parameters (hemipheric lights_co_ point lights and bones)_co_ and extend the options with time. (hopefully with your help)\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tEach supported parameter is a class implementing the IShaderCompilerEntity interface_co_ at the moment there_t_s only ShaderCompilerHemisphericLight.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_strong_gt_What_t_s next_lt_/strong_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tI_t_m struggling with the heart of the solution - calculating all the possible combinations for a specified configuration. In other words_co_ implementing ShaderCompiler/getConfigurations().\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tFor example_co_ if I have 3 varying lights_co_ each can be on or off_co_ I_t_d need to calculate all the possible combinations_dd_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t0_co_ 0_co_ 0_lt_br /_gt_\n\t\t\t0_co_ 0_co_ 1_lt_br /_gt_\n\t\t\t0_co_ 1_co_ 0_lt_br /_gt_\n\t\t\t0_co_ 1_co_ 1_lt_br /_gt_\n\t\t\t1_co_ 0_co_ 0_lt_br /_gt_\n\t\t\t1_co_ 1_co_ 0_lt_br /_gt_\n\t\t\t1_co_ 1_co_ 1_lt_br /_gt_\n\t\t\t1_co_ 0_co_ 1\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tI_t_m not sure how to calculate all possible combinations when I have more parameters_co_ with each parameter having its own number of possible values (which can be more than just 2 values - on/off).\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tAny idea how such a thing can be achieved?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tHey this is a great Idea_co_ I added the _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/tree/master/materialsLibrary/src_qt_ rel_eq__qt_external nofollow_qt__gt_procedural materials library_lt_/a_gt_ _co_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/tree/master/postProcessLibrary_qt_ rel_eq__qt_external nofollow_qt__gt_Post-process library _lt_/a_gt_and the _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/tree/master/proceduralTexturesLibrary_qt_ rel_eq__qt_external nofollow_qt__gt_procedural textures library_lt_/a_gt_ to the UNITY exporter (coming soon for the next version of the UNITY toolkit exporter).\\\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI created this _lt_a href_eq__qt_http_dd_//brandsocialguru.com/materials/_qt_ rel_eq__qt_external nofollow_qt__gt_scene_lt_/a_gt_ with most of the materials without pre-compiling (water_co_ lava_co_ grid_co_ gradient _co_ fur etc..shaders)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow I would like to understand better your sample so I can tested in my code and here is a java script _lt_a href_eq__qt_https_dd_//gist.github.com/axelpale/3118596_qt_ rel_eq__qt_external nofollow_qt__gt_combination_lt_/a_gt_ library we may use for this or something similar\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_module ASSETS {\n\n\texport class ShaderCompilerTest {\n\n\t\tconstructor() {\n\t\t\tvar mesh_dd_ BABYLON.Mesh_sm_\n\t\t\tvar shaderCompiler_dd_ ASSETS.ShaderCompiler _eq_ new ASSETS.ShaderCompiler(mesh)_sm_\n\n\t\t\tvar lightA_dd_ BABYLON.HemisphericLight_sm_\n\t\t\tvar lightB_dd_ BABYLON.HemisphericLight_sm_\n\t\t\tvar lightC_dd_ BABYLON.HemisphericLight_sm_\n\n\t\t\tshaderCompiler.compile([\n\t\t\t\tnew ASSETS.ShaderCompilerTask(new ASSETS.ShaderCompilerHemisphericLight(lightA)_co_ ASSETS.ShaderCompilerHemisphericLight.ON)_co_\n\t\t\t\tnew ASSETS.ShaderCompilerTask(new ASSETS.ShaderCompilerHemisphericLight(lightA)_co_ ASSETS.ShaderCompilerHemisphericLight.ALL)_co_\n\t\t\t\tnew ASSETS.ShaderCompilerTask(new ASSETS.ShaderCompilerHemisphericLight(lightA)_co_ ASSETS.ShaderCompilerHemisphericLight.ALL)\n\t\t\t]_co_ () _eq_&gt_sm_ console.log(_t_complete_t_)_co_ (progress_dd_ number) _eq_&gt_sm_ console.log(_t_progress_t__co_ progress))_sm_\n\t\t}\n\n\t}\n\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tBut I dont understand if we are talking about the same shaders_co_ can you please explain further with another example ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"royibernthal","Date":"2017-02-25T16:12:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey_co_ Is there a way for me to view your code there?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt seems that in your scene your materials only need 1 configuration_co_ e.g. you apply a lava material which uses certain parameters and these parameters don_t_t need to change. Correct me if I_t_m wrong.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn that case_co_ all you need to do is wait for material.isReady() for each material_co_ which is what I refer to as _qt_precompiling_qt__co_ regardless of how complex that material is_co_ it only consists of 1 combination of parameters to compile.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn the test I attached there is 1 mesh_co_ which has 3 lights_co_ 1 is always on_co_ which means it doesn_t_t affect the number of combinations_co_ and the other 2 can be either on/off_co_ meaning there are 4 (2^2) combinations and thus 4 shaders that need to be precompiled.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat combinations library looks good_co_ how_t_d you use it in this case? It looks like it can possibly be part of the solution but there_t_re still gaps to fill.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MrVR","Date":"2017-02-25T22:31:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_164973_qt_ data-ipsquote-contentid_eq__qt_28677_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488039170_qt_ data-ipsquote-userid_eq__qt_8420_qt_ data-ipsquote-username_eq__qt_royibernthal_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t6 hours ago_co_ royibernthal said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tHey_co_ Is there a way for me to view your code there?\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tIt seems that in your scene your materials only need 1 configuration_co_ e.g. you apply a lava material which uses certain parameters and these parameters don_t_t need to change. Correct me if I_t_m wrong.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tIn that case_co_ all you need to do is wait for material.isReady() for each material_co_ which is what I refer to as _qt_precompiling_qt__co_ regardless of how complex that material is_co_ it only consists of 1 combination of parameters to compile.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tIn the test I attached there is 1 mesh_co_ which has 3 lights_co_ 1 is always on_co_ which means it doesn_t_t affect the number of combinations_co_ and the other 2 can be either on/off_co_ meaning there are 4 (2^2) combinations and thus 4 shaders that need to be precompiled.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThat combinations library looks good_co_ how_t_d you use it in this case? It looks like it can possibly be part of the solution but there_t_re still gaps to fill.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tSure here is the module I used to create the shaders and the images _lt_a href_eq__qt_https_dd_//drive.google.com/open?id_eq_0B6S-ywLEQkbnT2tJOElrSTRKNW8_qt_ rel_eq__qt_external nofollow_qt__gt_ZIP_lt_/a_gt_ dont forget to install the libraries in the library folder and ref on the index \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_/* Babylon this.scene Controller Template */\n/* &lt_sm_reference path_eq__qt_{*path*}/Assets/Babylon/Library/babylon.d.ts_qt_ /&gt_sm_ */\n\nmodule PROJECT {\n    export class SceneController extends BABYLON.SceneController {\n\n        public ready()_dd_ void {\n            // this.scene execute when ready\n            var scene _eq_ this.scene_sm_\n            let camera _dd_BABYLON.Camera _eq_ new BABYLON.UniversalCamera(_t_gamepad_t__co_ new BABYLON.Vector3(0_co_0_co_0)_co_this.scene)_sm_\n            camera.position _eq_ this.scene.activeCamera.position_sm_             \n            this.scene.activeCamera _eq_ camera_sm_\n            this.scene.activeCamera.attachControl(this.engine.getRenderingCanvas())_sm_\n            this.manager.enableUserInput()_sm_\n            // // 6 SIDED SKYBOX ////////////////////////////////////////////////////////////////////////////////////////////////////////////// \n            let skybox _eq_ BABYLON.Mesh.CreateBox(_qt_skyBox_qt__co_ 1000.0_co_ scene)_sm_\n            let skyboxMaterial _eq_ new BABYLON.StandardMaterial(_qt_skyBox_qt__co_ scene)_sm_\n            skyboxMaterial.backFaceCulling _eq_ false_sm_\n            skyboxMaterial.reflectionTexture _eq_ new BABYLON.CubeTexture(_qt_SkyBox/TropicalSunnyDay_qt__co_ scene)_sm_\n            skyboxMaterial.reflectionTexture.coordinatesMode _eq_ BABYLON.Texture.SKYBOX_MODE_sm_\n            skyboxMaterial.diffuseColor _eq_ new BABYLON.Color3(0_co_ 0_co_ 0)_sm_\n            skyboxMaterial.specularColor _eq_ new BABYLON.Color3(0_co_ 0_co_ 0)_sm_\n            skyboxMaterial.disableLighting _eq_ true_sm_\n            skybox.material _eq_ skyboxMaterial_sm_\n\n\n            // SKY  MATERIAL //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            var skyMaterial2 _eq_ new BABYLON.SkyMaterial(_qt_skyMaterial_qt__co_ scene)_sm_\n            skyMaterial2.backFaceCulling _eq_ false_sm_\n\n            var skybox2 _eq_ BABYLON.Mesh.CreateBox(_qt_skyBox_qt__co_ 1000.0_co_ scene)_sm_\n            skybox2.material _eq_ skyMaterial2_sm_\n\n\n            // LAVA MATERIAL //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            let ground _eq_ BABYLON.Mesh.CreateGround(_qt_ground_qt__co_ 1000_co_ 1000_co_ 10_co_ scene)_sm_\n            let lavaMaterial _eq_ new BABYLON.LavaMaterial(_qt_lava_qt__co_ scene)_sm_\n            lavaMaterial.noiseTexture _eq_ new BABYLON.Texture(_qt_scenes/cloud.png_qt__co_ scene)_sm_ // Set the bump texture\n            lavaMaterial.diffuseTexture _eq_ new BABYLON.Texture(_qt_scenes/lavatile.jpg_qt__co_ scene)_sm_ // Set the diffuse texture\n            // lavaMaterial.diffuseTexture _eq_ new BABYLON.Texture(_qt_scenes/water.jpg_qt__co_ scene)_sm_ // Set the diffuse texture\n            lavaMaterial.speed _eq_ 1.5_sm_\n            lavaMaterial.fogColor _eq_ new BABYLON.Color3(1_co_ 0_co_ 0)_sm_\n            ground.material _eq_ lavaMaterial_sm_\n\n            // WATER MATERIAL //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n            let groundMaterial _eq_ new BABYLON.StandardMaterial(_qt_groundMaterial_qt__co_ scene)_sm_\n            groundMaterial.diffuseTexture _eq_ new BABYLON.Texture(_qt_Scenes/ground.jpg_qt__co_ scene)_sm_\n            // groundMaterial.uScale _eq_ groundMaterial.diffuseTexture.vScale _eq_ 4_sm_\n\n            ground _eq_ BABYLON.Mesh.CreateGround(_qt_ground_qt__co_ 512_co_ 550_co_ 32_co_ scene_co_ false)_sm_\n            ground.position.y _eq_ -1_sm_\n            ground.material _eq_ groundMaterial_sm_\n\n            let waterMesh _eq_ BABYLON.Mesh.CreateGround(_qt_waterMesh_qt__co_ 512_co_ 512_co_ 32_co_ scene_co_ false)_sm_\n            let water _dd_ any _eq_ new BABYLON.WaterMaterial(_qt_water_qt__co_ scene)_sm_\n            water.bumpTexture _eq_ new BABYLON.Texture(_qt_Scenes/waterbump.png_qt__co_ scene)_sm_\n\n            // Water properties\n\n            water.colorBlendFactor _eq_ 0.5_sm_\n            water.windForce _eq_ -5_sm_\n            water.waveHeight _eq_ 1.3_sm_\n            water.windDirection _eq_ new BABYLON.Vector2(1_co_ 1)_sm_\n            water.waterColor _eq_ new BABYLON.Color3(0.1_co_ 0.1_co_ 0.6)_sm_\n            water.colorBlendFactor _eq_ 0.3_sm_\n            water.bumpHeight _eq_ 0.1_sm_\n            water.waveLength _eq_ 0.1_sm_\n\n            // Add skybox and ground to the reflection and refraction\n            water.addToRenderList(skybox)_sm_\n            water.addToRenderList(ground)_sm_\n\n            // Assign the water material\n            waterMesh.material _eq_ water_sm_\n\n            // GRID MATERIAL ////////////////////////////////////////////////////////////////////////////////////////////////////////////// \n            var defaultGridMaterial _eq_ new BABYLON.GridMaterial(_qt_default_qt__co_ scene)_sm_\n            defaultGridMaterial.majorUnitFrequency _eq_ 5_sm_\n            defaultGridMaterial.gridRatio _eq_ 0.5_sm_\n\n            var sphere _eq_ BABYLON.Mesh.CreateSphere(_qt_sphere_qt__co_ 20_co_ 9_co_ scene)_sm_\n            sphere.position.y _eq_ 12_sm_\n            sphere.position.x _eq_ -6_sm_\n            sphere.material _eq_ defaultGridMaterial_sm_\n\n            var knotMaterial _eq_ new BABYLON.GridMaterial(_qt_knotMaterial_qt__co_ scene)_sm_\n            knotMaterial.majorUnitFrequency _eq_ 8_sm_\n            knotMaterial.minorUnitVisibility _eq_ 0.45_sm_\n            knotMaterial.gridRatio _eq_ 0.3_sm_\n            knotMaterial.mainColor _eq_ new BABYLON.Color3(0_co_ 0_co_ 0)_sm_\n            knotMaterial.lineColor _eq_ new BABYLON.Color3(0.0_co_ 1.0_co_ 0.0)_sm_\n\n            var knot _eq_ BABYLON.Mesh.CreateTorusKnot(_qt_knot_qt__co_ 3_co_ 1_co_ 128_co_ 64_co_ 2_co_ 3_co_ scene)_sm_\n            knot.position.y _eq_ 30.0_sm_\n            knot.position.x _eq_ 6_sm_\n            knot.material _eq_ knotMaterial_sm_\n\n            var groundMaterial2 _eq_ new BABYLON.GridMaterial(_qt_groundMaterial2_qt__co_ scene)_sm_\n            groundMaterial2.majorUnitFrequency _eq_ 5_sm_\n            groundMaterial2.minorUnitVisibility _eq_ 0.45_sm_\n            groundMaterial2.gridRatio _eq_ 2_sm_\n            groundMaterial2.backFaceCulling _eq_ false_sm_\n            groundMaterial2.mainColor _eq_ new BABYLON.Color3(1_co_ 1_co_ 1)_sm_\n            groundMaterial2.lineColor _eq_ new BABYLON.Color3(1.0_co_ 1.0_co_ 1.0)_sm_\n            groundMaterial2.opacity _eq_ 0.98_sm_\n\n            var ground2 _eq_ BABYLON.Mesh.CreateGroundFromHeightMap(_qt_ground_qt__co_ _qt_Scenes/heightMap.png_qt__co_ 100_co_ 100_co_ 100_co_ 0_co_ 10_co_ scene_co_ false)_sm_\n            ground2.material _eq_ groundMaterial2_sm_\n\n            var skyMaterial _eq_ new BABYLON.GridMaterial(_qt_skyMaterial_qt__co_ scene)_sm_\n            skyMaterial.majorUnitFrequency _eq_ 6_sm_\n            skyMaterial.minorUnitVisibility _eq_ 0.43_sm_\n            skyMaterial.gridRatio _eq_ 0.5_sm_\n            skyMaterial.mainColor _eq_ new BABYLON.Color3(0_co_ 0.05_co_ 0.2)_sm_\n            skyMaterial.lineColor _eq_ new BABYLON.Color3(0_co_ 1.0_co_ 1.0)_sm_\n            skyMaterial.backFaceCulling _eq_ false_sm_\n\n            var skySphere _eq_ BABYLON.Mesh.CreateSphere(_qt_skySphere_qt__co_ 30_co_ 110_co_ scene)_sm_\n            skySphere.material _eq_ skyMaterial_sm_\n\n\n            // NORMAL MATERIAL //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            var sphere2 _eq_ BABYLON.Mesh.CreateSphere(_qt_sphere2_qt__co_ 16_co_ 20_co_ scene)_sm_\n            sphere2.position.y _eq_ 12_sm_\n            sphere2.position.x _eq_ 6_sm_\n            var normalMaterial _eq_ new BABYLON.NormalMaterial(_qt_normalMat_qt__co_ scene)_sm_\n            sphere2.material _eq_ normalMaterial_sm_\n\n\n            //   FUR MATERIAL //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            var sphere _eq_ BABYLON.Mesh.CreateSphere(_qt_sphere1_qt__co_ 48_co_ 10_co_ scene)_sm_\n            sphere.position.y _eq_ 25_sm_\n            sphere.position.x _eq_ 12_sm_\n            // Fur Material\n            var furMaterial _eq_ new BABYLON.FurMaterial(_qt_fur_qt__co_ scene)_sm_\n            furMaterial.furLength _eq_ 4_sm_\n            furMaterial.furAngle _eq_ 0_sm_\n            furMaterial.furColor _eq_ new BABYLON.Color3(1_co_ 1_co_ 1)_sm_\n            furMaterial.diffuseTexture _eq_ new BABYLON.Texture(_qt_Scenes/fur.jpg_qt__co_ scene)_sm_\n            furMaterial.furTexture _eq_ BABYLON.FurMaterial.GenerateTexture(_qt_furTexture_qt__co_ scene)_sm_\n            furMaterial.furSpacing _eq_ 6_sm_\n            furMaterial.furDensity _eq_ 10_sm_\n            furMaterial.furSpeed _eq_ 200_sm_\n            // furMaterial.furGravity _eq_ new BABYLON.Vector3(0_co_ -1_co_ 0)_sm_\n\n            sphere.material _eq_ furMaterial_sm_\n\n            // Furify the sphere to create the high level fur effect\n            // The first argument is sphere itself. The second represents\n            // the quality of the effect\n            var quality _eq_ 20_sm_\n            var shells _eq_ BABYLON.FurMaterial.FurifyMesh(sphere_co_ quality)_sm_\n\n            furMaterial.highLevelFur _eq_ false_sm_\n\n\n            // FIRE MATERIAL //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            var sphere3 _eq_ BABYLON.Mesh.CreateSphere(_qt_sphere1_qt__co_ 48_co_ 10_co_ scene)_sm_\n            sphere3.position.y _eq_ 25_sm_\n            sphere3.position.x _eq_ -12_sm_\n            var fire _eq_ new BABYLON.FireMaterial(_qt_fire_qt__co_ scene)_sm_\n            fire.diffuseTexture _eq_ new BABYLON.Texture(_qt_Scenes/fire.png_qt__co_ scene)_sm_\n            fire.distortionTexture _eq_ new BABYLON.Texture(_qt_Scenes/distortion.png_qt__co_ scene)_sm_\n            fire.opacityTexture _eq_ new BABYLON.Texture(_qt_Scenes/candleOpacity.png_qt__co_ scene)_sm_\n            fire.speed _eq_ 5.0_sm_\n            sphere3.material _eq_ fire_sm_\n\n            // GRADIENT MATERIAL //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            var sphere4 _eq_ BABYLON.Mesh.CreateSphere(_qt_sphere_qt__co_ 32_co_ 2_co_ scene)_sm_\n            sphere4.position.y _eq_ 10_sm_\n            sphere4.position.x _eq_ -12_sm_\n            var gradientMaterial _eq_ new BABYLON.GradientMaterial(_qt_grad_qt__co_ scene)_sm_\n            gradientMaterial.topColor _eq_ BABYLON.Color3.Blue()_sm_ // Set the gradient top color\n            gradientMaterial.bottomColor _eq_ BABYLON.Color3.Red()_sm_ // Set the gradient bottom color\n            gradientMaterial.offset _eq_ 0.5_sm_\n\n            sphere4.material _eq_ gradientMaterial_sm_\n\n        }\n\n\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"royibernthal","Date":"2017-02-28T01:45:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tYour case seems to be what I described in my previous post_co_ to the best of my understanding.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"royibernthal","Date":"2017-03-04T21:35:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIs there any demand for such a feature whatsoever?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou don_t_t have to contribute to it_co_ but it_t_d take time and effort to develop so I_t_d like to know I_t_m not doing it for nothing.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"leanderr","Date":"2017-03-05T10:54:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tSo far I worked around using multiple Materials and Shaders and Z-Stacking them.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"royibernthal","Date":"2017-03-06T03:23:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tNot sure I understand how this is related_co_ care to elaborate?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MrVR","Date":"2017-03-06T20:00:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_166011_qt_ data-ipsquote-contentid_eq__qt_28677_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488770618_qt_ data-ipsquote-userid_eq__qt_8420_qt_ data-ipsquote-username_eq__qt_royibernthal_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t16 hours ago_co_ royibernthal said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tNot sure I understand how this is related_co_ care to elaborate?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tHey man_co_ so did the code work or you need it a more like playground example??\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have many samples of shaders that I_t_m currently working on to create an standard shader to choose from and combined different materials and options_co_  _lt_a href_eq__qt_http_dd_//brandsocialguru.com/pbr/_qt_ rel_eq__qt_external nofollow_qt__gt_here is my first PBR material shaders_lt_/a_gt_ but I stop doing this because I_t_m using the shader program _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/24012-mackeyk24/?do_eq_hovercard_qt_ data-mentionid_eq__qt_24012_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/24012-mackeyk24/_qt_ rel_eq__qt__qt__gt_@MackeyK24_lt_/a_gt_ created on the unity toolkit. so I put this together with the unity toolkit. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tif you want to work on this and need help let me know send me a PM may I can help\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"royibernthal","Date":"2017-03-07T02:11:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tHey_co_ to the best of my understanding it_t_s not really related to what I_t_m doing. Correct me if I_t_m wrong.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MrVR","Date":"2017-03-07T19:08:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_166151_qt_ data-ipsquote-contentid_eq__qt_28677_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488852702_qt_ data-ipsquote-userid_eq__qt_8420_qt_ data-ipsquote-username_eq__qt_royibernthal_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t16 hours ago_co_ royibernthal said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tHey_co_ to the best of my understanding it_t_s not really related to what I_t_m doing. Correct me if I_t_m wrong.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tHey man. so what do you want to do is a pre-compile materials library using the shaders programs from babylon?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MasterK","Date":"2017-03-15T08:00:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/8420-royibernthal/?do_eq_hovercard_qt_ data-mentionid_eq__qt_8420_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/8420-royibernthal/_qt_ rel_eq__qt__qt__gt_@royibernthal_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHey man. I understand you.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMe also have this need. in loading screen. precompile most probable Effect. To make the running lag less.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you have new progress. Let us know..\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m now doing the same thing. we can share about it.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BitOfGold","Date":"2017-03-15T09:09:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI do have the same problem._lt_br /_gt_\n\tI_t_m not using babylon_t_s sceneoptimizers_co_ I have different render qualities insted like low_co_ normal_co_ high and ultra._lt_br /_gt_\n\tdifferent qualities have different maximum lights_co_ shadow qualities and material settings. Different quantity of lights are switched on. (from 2 point lights to 16)_lt_br /_gt_\n\tThe game switches between qualities every 1s if the FPS is out of 40 - 55 range. It works_co_ the game runs steadily after a while on different computers from 4 old laptop to gamer PC_co_ but in the first 30s_co_ when I recompile all shaders again and again with calling isReady()_co_ sometimes it takes compiling 5s (!!!!!) on a gamer PC_co_ sometimes just 100ms._lt_br /_gt_\n\tAnd sometimes on a laptop_co_ it grind halts the operating system with ventillators stirring up until it stops dead with too high temperature....\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI plan to solve this somehow_co_ maybe storing the different _qt_versions_qt_ of every material with every quality setting._lt_br /_gt_\n\tI tried this_co_ but even if i freeze the material_co_ it still recomplies the shader because I enable different number of point lights with differrent quality settings._lt_br /_gt__lt_br /_gt_\n\tIf you have some progress of pre-compiling or caching different versions of shaders (Or should I say materials?)_co_ please let us know!_lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BitOfGold","Date":"2017-03-15T12:06:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNow I had some success with caching materials. The problem solved by setEnabled -ing lights on and off before compiling material._lt_br /_gt_\n\tI store every material in the scene_co_ for every possible render parameter in a material cache._lt_br /_gt_\n\tThis works_co_ and now I switch precompiled shaders without slowing down_co_ the only problem is now that reattaching standard pipeline and other post-processes still takes time. But that is only a few msecs_co_ not really a problem._lt_br /_gt_\n\tI use material.markDirty() and material.freeze() now_co_ so materials are freezed after compilation._lt_br /_gt__lt_br /_gt_\n\tParts of my code_dd__lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_// Renderparams store things like shadow map size_co_ max point lights etc.\n// when renderparams change_co_ I set every parameter like shadow map size_co_ turn lights on/off_co_ and // after that I run this_dd_\n//(calculates a hash of every parameter_co_ so when it is the same_co_ the pre-compiled materials come // from the cache)\n\n...\n\n\tif (renderparams_change) {\n\t\tthis._prev_renderparam_hash _eq_ this._renderparam_hash_sm_\n\t\tthis._renderparam_hash _eq_ JSON.stringify(this.renderparams)+_t_saltypepper_t__sm_\n\t\tthis._renderparam_hash _eq_ this._renderparam_hash.hashCode()_sm_\n\t\tthis._refresh_materials()_sm_\n\t\tthis.log( _t_RENDERPARAMS CHANGE_dd__t_ + rpc + _t_ /// hash_dd__t_+this._renderparam_hash)_sm_\n\t}\n\n\n_refresh_materials_dd_ function () {\n\tfor ( var i _eq_ 0_sm_ i &lt_sm_ this.scene.materials.length_sm_ i ++ ) {\n\t\tvar mat _eq_ this.scene.materials[i]_sm_\n\t\tvar matnew _eq_ this._get_cached_material(mat)_sm_\n\t\tvar save _eq_ false_sm_\n\t\tif (!matnew) {\n\t\t\tmatnew _eq_ mat.clone()_sm_\n\t\t\tif (!mat.nocache) {\n\t\t\t\tmat.markDirty()_sm_\n\t\t\t\tmat.freeze()_sm_\n\t\t\t}\n\t\t\tthis.scene.materials[i] _eq_ matnew_sm_\n\t\t\tsave _eq_ true_sm_\n\t\t}\n\t\tif (save) {\n\t\t\tthis._save_cached_material(matnew)_sm_\n\t\t}\n\t}\n\t}_co_\n\n\n//The caching functions_dd_\n\nthis._materialcache _eq_ {}_sm_\n\n_get_cached_material_dd_ function(mat) {\n\tvar hash _eq_ this._renderparam_hash_sm_\n\tif (typeof(this._materialcache[hash]) _eq__eq_ _t_undefined_t_) {\n\t\tthis._materialcache[hash] _eq_ {}_sm_\n\t\treturn(false)_sm_\n\t}\n\tvar matfound _eq_ this._materialcache[hash][mat.id]_sm_\n\tif (typeof(matfound) _eq__eq_ _t_undefined_t_) {\n\t\treturn(false)_sm_\n\t} else {\n\t\treturn(matfound)_sm_\n\t}\n}_co_\n\n_save_cached_material_dd_ function(mat) {\n\tvar hash _eq_ this._renderparam_hash_sm_\n\tif (typeof(this._materialcache[hash]) _eq__eq_ _t_undefined_t_) {\n\t\tthis._materialcache[hash] _eq_ {}_sm_\n\t}\n\tthis._materialcache[hash][mat.id] _eq_ mat_sm_\n}_co_\n\n//and a simple string hash_dd_\n\nString.prototype.hashCode _eq_ function() {\n\tvar hash _eq_ 0_sm_\n\tif (this.length _eq__eq_ 0) return hash_sm_\n\tfor (i _eq_ 0_sm_ i &lt_sm_ this.length_sm_ i++) {\n\t\tchar _eq_ this.charCodeAt(i)_sm_\n\t\thash _eq_ ((hash&lt_sm_&lt_sm_5)-hash)+char_sm_\n\t\thash _eq_ hash &amp_sm_ hash_sm_ // Convert to 32bit integer\n\t}\n\treturn hash_sm_\n\t}_sm_\n\n\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-03-15T14:25:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tTaking a break from shoveling out for 2 feet of snow &amp_sm_ 3 foot drifts (dreading what the street and sidewalk plows have done to me).  If shadows are not critical to you_co_ you might try a different tack.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHave as many static lights_co_ shining on non-moving meshes as you like.  If the mesh does not move_co_ then the lights are not going to change.  No problem for these meshes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor meshes that move_co_ assign one of the 4 _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/layermasks_and_multi-cam_textures_qt_ rel_eq__qt_external nofollow_qt__gt_layermasks _lt_/a_gt_out of range of the default layermask.  The static lights will then never affect these meshes_co_ so no recompile.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAssign a light or perhaps 2 or 3 points_co_ that move with the camera.  _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/18485-3d-fashion-retail-website/#comment-105247_qt_ rel_eq__qt__qt__gt_For timing purposes_lt_/a_gt__co_ you need to move them using a scene.beforeCameraRender().  Assign the same Layermask to the lights_co_ and they will only shine on the moving meshes_co_ and always perfectly light them. Again_co_ no recompile.  I am not yet building full scenes_co_ so not using layermasks for lighting yet.  Here is code I am using now.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var camera _eq_ new BABYLON.ArcRotateCamera(_qt_Camera_qt__co_ -Math.PI / 2_co_ 1.6_co_ 15_co_ BABYLON.Vector3.Zero()_co_ scene)_sm_\ncamera.wheelPrecision _eq_ 50_sm_\ncamera.fov _eq_ 0.265103 // 120mm focal length\ncamera.angularSensibilityY _eq_ Infinity_sm_\ncamera.attachControl(canvas)_sm_   \n\nvar camlight _eq_ new BABYLON.PointLight(_qt_Lamp_qt__co_ BABYLON.Vector3.Zero()_co_ scene)_sm_        \nscene.beforeCameraRender _eq_ function () {\n    var cam _eq_ (scene.activeCameras.length &gt_sm_ 0) ? scene.activeCameras[0] _dd_ scene.activeCamera_sm_\n    // move the light to match where the camera is\n    camlight.position _eq_ cam.position_sm_\n    camlight.rotation _eq_ cam.rotation_sm_\n}_sm_\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tLighting is not the only cause for recompile_co_ but the most common.  Can solve most of the need for something like this_co_ and is a lot less complicated.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BitOfGold","Date":"2017-03-15T14:44:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tWhat a great idea!_lt_br /_gt_\n\tI will use a combination_co_ where static lights affect only static objects_co_ and dynamic lights affect dynamic objects + the closest static lights and the sunlight is simulated using dynamic lights._lt_br /_gt_\n\t(I used only dynamic lights sorted by intensity and distance_co_ to simulate the closest static lights.)_lt_br /_gt_\n\tThis will work._lt_br /_gt_\n\tThank you!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-03-15T15:57:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tOne more thing_co_ in order for the camera to see all meshes its layer mask must be 0xFFFFFFFF_co_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-03-16T18:38:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tAlso_co_ layermask for cameras does not look like it is being cascaded down to sub cameras.  That means in order to use any 3D rigs with a layerrmask_co_ would probably want to change layermask to a setter_co_ which also sets any sub-cameras.  Assigning the current layermask at the time the rig is assigned would make it leak proof.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]