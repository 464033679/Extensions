[{"Owner":"exc_html5","Date":"2016-07-16T15:57:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Everyone! Can someone explain how BabylonJS calculates the resolution of the shadow map? I think I understand it but just want to be sure because I_t_m having difficulties getting sharp shadows in one of our projects. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tFirst off see the overall 3D area of the game/project_co_ I pointed out the dark spots are baked shadows_co_ so ignore those. Also_co_ the area you see in the camera (where most of the objects are located) is circled. Also_co_ the items marked #1 and #2 are two spheres i made that were moved out to the far edges of the area. _lt_br /_gt__lt_img alt_eq__qt_game_area.png_qt_ class_eq__qt_ipsImage_qt_ height_eq__qt_498_qt_ src_eq__qt_http_dd_//client.elementxcreative.com/bjs/shadows/game_area.png_qt_ title_eq__qt__qt_ width_eq__qt_1000_qt_ /_gt_ - \n_lt_/p_gt_\n\n_lt_p_gt_\n\tNext_co_ you see what it looks like in the BJS camera if the spheres at the edges (1 and 2) are NOT casting shadows. The shadow generator (set to 4k shadow map size) looks nice and crisp. (These are realtime shadows_co_ not baked)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img alt_eq__qt_edge_spheres_notcasting.png_qt_ class_eq__qt_ipsImage_qt_ height_eq__qt_672_qt_ src_eq__qt_http_dd_//client.elementxcreative.com/bjs/shadows/edge_spheres_notcasting.png_qt_ title_eq__qt__qt_ width_eq__qt_1000_qt_ /_gt_ - \n_lt_/p_gt_\n\n_lt_p_gt_\n\tHowever_co_ the minute I turn enable casting shadows for those two sphere_t_s at the edge of the map_co_ the same exact shadow generator now produces this_dd__lt_br /_gt__lt_img alt_eq__qt_edge_spheres_casting.png_qt_ class_eq__qt_ipsImage_qt_ height_eq__qt_672_qt_ src_eq__qt_http_dd_//client.elementxcreative.com/bjs/shadows/edge_spheres_casting.png_qt_ title_eq__qt__qt_ width_eq__qt_1000_qt_ /_gt_ - \n_lt_/p_gt_\n\n_lt_p_gt_\n\tObviously this looks less than desirable. So initial assumption is that the _qt_resolution_qt_ of objects on the shadow map (which I_t_m assuming is one single dyanmic texture) is calculated by the bounding boxes of the objects casting shadows? Where the edge of the texture goes to the edge of bounding box on the furthest object from the directional lights field of view? \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dal","Date":"2016-07-17T22:30:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYep_co_ this is a limitation in the shadows system at the moment... As I understand its just represented with one image. To fit in the new stuff you add_co_ it has to sort of _qt_zoom out_qt_ everything else to make space_co_ and if those things are far away_co_ it has to zoom out even further_co_ resulting in everything getting more pixelated._lt_br /_gt_\n\t@Deltakosh has a solution planned for this which is to implement CSM shadows (which hopefully is coming for the 2.5 release) which will allow Babylon to give more detail to the nearby shadows and less detail to the ones far away._lt_br /_gt__lt_br /_gt_\n\tYou can work around this limit a bit for now though by_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\ta) Increase the shadowmap size to the absolute maximum you can get away with\n_lt_/p_gt_\n\n_lt_p_gt_\n\tb) Write a little script which simply adds things to the shadow map when the player gets within 50m or so_co_ and removes them again when they_t_re outside that radius (far away things won_t_t be shadowed_co_ but I think it_t_s a better solution than having ugly shadows). Combine that with baked shadows and distance fog and you can get away with it.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"exc_html5","Date":"2016-07-17T23:46:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tRegarding item B_co_ thanks for the tip! Never occurred to me that you could remove add stuff on the fly to the list of things being shadowed. But makes total sense. I_t_ll give that a whirl. \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-07-18T16:06:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t@Dal is correct. If you are using a directional light_co_ babylon.js try to compute the perfect point of view to embrace all objects in your shadow map (_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Lights/babylon.directionalLight.ts#L45_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Lights/babylon.directionalLight.ts#L45_lt_/a_gt_)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou can turn this behavior off by using light.autoUpdateExtends _eq_ false\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut you can also consider having various directional lights_dd_ one for the closed range objects and one for the far objects.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"exc_html5","Date":"2016-07-18T16:12:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t@@deltakosh if I turn the behavior off using that switch_co_ how to I tell it how big to make shadow map scale? (or how do I manually make the shadow map?)\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-07-18T16:14:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tYou can scale it with light.shadowOrthoScale\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"exc_html5","Date":"2016-07-18T16:16:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThanks!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]