[{"Owner":"BlackMojito","Date":"2018-01-31T10:05:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Guys_co_ I updated from 3.2.0-alpha4 to alpha6 and this function seems not to work anymore. Just want to confirm if it is the case though...\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-31T17:44:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYeah..we had to introduce  breaking change by removing RenderPass in the Pipeline. But this should not break this function\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWould you mind to share your use case and code to see how we can fix it?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPinging _lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/29361-trevordev/?do_eq_hovercard_qt_ data-mentionid_eq__qt_29361_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/29361-trevordev/_qt_ rel_eq__qt__qt__gt_@trevordev_lt_/a_gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"trevordev","Date":"2018-01-31T23:00:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI am unable to repro using v3.2.0-alpha7 (see _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1VI6WV%230_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1VI6WV#0_lt_/a_gt_ ). If you are still able to repro it let me know how you are using it and I can take another look.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2018-02-01T15:21:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_pre_gt_\n_lt_code_gt_import * as BABYLON from _t_babylonjs_t_\nimport { RenderOptions_co_ SceneOptions } from _t_../../Preferences_t_\nimport { RenderScene } from _t_../../Scene/RenderScene_t_\n\nimport * as Capabilities from _t_../Device/Capabilities_t_\nimport * as ssao_frag from _t_../Shaders/glsl/custom_ssao_frag.glsl_t_\nimport * as gamma_correction_frag from _t_../Shaders/glsl/gamma_correction_frag.glsl_t_\nimport * as final_merge_frag from _t_../Shaders/glsl/final_merge_frag.glsl_t__sm_\nimport * as WebUtils from _t_../../../Utils/WebUtils_t_\n\nexport class BasicPostProcessRenderPipeline extends BABYLON.PostProcessRenderPipeline {\n\n    private _renderScene_dd_ RenderScene_sm_\n\n    private _selectionGroupRenderTarget_dd_ BABYLON.RenderTargetTexture_sm_\n    private _overlayGroupRenderTarget_dd_ BABYLON.RenderTargetTexture_sm_\n\n    // SSAO\n    readonly SSAOOriginalSceneColorEffect_dd_ string _eq_ _t_SSAOOriginalSceneColorEffect_t__sm_\n    readonly SSAORenderEffect_dd_ string _eq_ _t_SSAORenderEffect_t__sm_\n    readonly SSAOBlurHRenderEffect_dd_ string _eq_ _t_SSAOBlurHRenderEffect_t__sm_\n    readonly SSAOBlurVRenderEffect_dd_ string _eq_ _t_SSAOBlurVRenderEffect_t__sm_\n    readonly SSAOCombineRenderEffect_dd_ string _eq_ _t_SSAOCombineRenderEffect_t__sm_\n\n    private _originalColorPostProcess_dd_ BABYLON.PassPostProcess_sm_\n    private _ssaoPostProcess_dd_ BABYLON.PostProcess_sm_\n    private _blurHPostProcess_dd_ BABYLON.BlurPostProcess_sm_\n    private _blurVPostProcess_dd_ BABYLON.BlurPostProcess_sm_\n    private _ssaoCombinePostProcess_dd_ BABYLON.PostProcess_sm_\n\n    private _firstUpdate_dd_ boolean _eq_ true_sm_\n\n    private _ssaoFallOff_dd_ number_sm_\n    private _ssaoArea_dd_ number_sm_\n    private _ssaoRadius_dd_ number_sm_\n    private _ssaoTotalStrength_dd_ number_sm_\n    private _ssaoBase_dd_ number_sm_\n\n    private _depthTexture_dd_ BABYLON.Texture_sm_\n    private _normalTexture_dd_ BABYLON.Texture | null _eq_ null_sm_\n    private _randomTexture_dd_ BABYLON.DynamicTexture_sm_\n\n\n    // FXAA\n    readonly FxaaPostProcessId_dd_ string _eq_ _t_FxaaPostProcessEffect_t__sm_\n    private _fxaaEnabled_dd_ boolean _eq_ true_sm_\n    private _fxaa_dd_ BABYLON.FxaaPostProcess_sm_\n\n    // Tone Mapping\n    readonly ToneMappingPostProcessId_dd_ string _eq_ _t_ToneMappingPostProcessEffect_t__sm_\n    private _toneMappingEnabled_dd_ boolean _eq_ true_sm_\n    private _toneMapping_dd_ BABYLON.TonemapPostProcess_sm_\n\n    // Final Merge\n    readonly FinalMergePostProcessId_dd_ string _eq_ _t_FinalMergePostProcessEffect_t__sm_\n    private _finalMerge_dd_ BABYLON.PostProcess_sm_\n\n    // Gamma Correction\n    readonly GammaCorrectionPostProcessId_dd_ string _eq_ _t_GammaCorrectionPostProcessEffect_t__sm_\n    private _gammaCorrection_dd_ BABYLON.PostProcess_sm_\n\n    private _defaultPipelineTextureType_dd_ number_sm_\n    private _hdr_dd_ boolean _eq_ false_sm_\n\n\n    /**\n     * @constructor\n     * @param {string} name - The rendering pipeline name\n     * @param {BABYLON.Scene} scene - The scene linked to this pipeline\n     * @param {any} ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision_dd_ { ssaoRatio_dd_ 0.5_co_ blurRatio_dd_ 1.0 }\n     * @param {BABYLON.Camera[]} cameras - The array of cameras that the rendering pipeline will be attached to\n     */\n    constructor(name_dd_ string_co_ renderScene_dd_ RenderScene_co_ ratio_dd_ any_co_ cameras?_dd_ BABYLON.Camera[]_co_ hdr?_dd_ boolean) {\n        super(renderScene.scene.getEngine()_co_ name)_sm_\n\n        this._renderScene _eq_ renderScene_sm_\n\n        var caps _eq_ this.internalScene.getEngine().getCaps()_sm_\n        if (hdr) {\n            this._hdr _eq_ hdr &amp_sm_&amp_sm_ (caps.textureHalfFloatRender || caps.textureFloatRender)_sm_\n        }\n\n        if (this._hdr) {\n            if (caps.textureHalfFloatRender) {\n                this._defaultPipelineTextureType _eq_ BABYLON.Engine.TEXTURETYPE_HALF_FLOAT_sm_\n            }\n            else if (caps.textureFloatRender) {\n                this._defaultPipelineTextureType _eq_ BABYLON.Engine.TEXTURETYPE_FLOAT_sm_\n            }\n        } else {\n            this._defaultPipelineTextureType _eq_ BABYLON.Engine.TEXTURETYPE_UNSIGNED_INT_sm_\n        }\n\n        this._ssaoFallOff _eq_ RenderOptions.ssaoFallOff_sm_\n        this._ssaoArea _eq_ RenderOptions.ssaoArea_sm_\n        this._ssaoRadius _eq_ RenderOptions.ssaoRadius_sm_\n        this._ssaoTotalStrength _eq_ RenderOptions.ssaoTotalStrength_sm_\n        this._ssaoBase _eq_ RenderOptions.ssaoBase_sm_\n\n        var ssaoRatio _eq_ ratio.ssaoRatio || ratio_sm_\n        var combineRatio _eq_ ratio.combineRatio || ratio_sm_\n\n        // Set up assets\n        this._createRandomTexture()_sm_\n\n        if (Capabilities.isMRTSupported()) {\n            let geometryBufferRenderer _eq_ &lt_sm_BABYLON.GeometryBufferRenderer&gt_sm_renderScene.scene.enableGeometryBufferRenderer()_sm_\n            this._depthTexture _eq_ geometryBufferRenderer.getGBuffer().textures[0]_sm_\n            this._normalTexture _eq_ geometryBufferRenderer.getGBuffer().textures[1]_sm_\n        } else {\n            let depthRenderer _eq_ this.internalScene.enableDepthRenderer()_sm_\n            this._depthTexture _eq_ depthRenderer.getDepthMap()_sm_\n        }\n\n        this._createColorBufferPostProcess()_sm_\n        this._createSSAOPostProcess(ssaoRatio)_sm_\n        this._createBlurPostProcess(ssaoRatio)_sm_\n        this._createSSAOCombinePostProcess(combineRatio)_sm_\n        this._createFinalMergePostProcess()_sm_\n        this._createFXAAPostProcess()_sm_\n        this._createToneMappingPostProcess()_sm_\n        this._createGammaCorrectionPostProcess()_sm_\n\n        // Set up pipeline\n        this._setupPipeline()_sm_\n\n        // Finish\n        this.internalScene.postProcessRenderPipelineManager.addPipeline(this)_sm_\n        if (cameras) {\n            this.internalScene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name_co_ cameras)_sm_\n        }\n\n        this._createSelectionRenderTarget()_sm_\n        this._createOverlayRenderTarget()_sm_\n    }\n\n    private get internalScene()_dd_ BABYLON.Scene {\n        return this._renderScene.scene_sm_\n    }\n\n    get fxaaEnabled()_dd_ boolean {\n        return this._fxaaEnabled_sm_\n    }\n\n    set fxaaEnabled(enabled_dd_ boolean) {\n        if (this._fxaaEnabled _eq__eq__eq_ enabled) {\n            return_sm_\n        }\n        this._fxaaEnabled _eq_ enabled_sm_\n\n        this._setupPipeline()_sm_\n    }\n\n    get ssaoFallOff()_dd_ number {\n        return this._ssaoFallOff_sm_\n    }\n\n    set ssaoFallOff(value_dd_ number) {\n        this._ssaoFallOff _eq_ value_sm_\n    }\n\n    get ssaoArea()_dd_ number {\n        return this._ssaoArea_sm_\n    }\n\n    set ssaoArea(value_dd_ number) {\n        this._ssaoArea _eq_ value_sm_\n    }\n\n    get ssaoRadius()_dd_ number {\n        return this._ssaoRadius_sm_\n    }\n\n    set ssaoRadius(value_dd_ number) {\n        this._ssaoRadius _eq_ value_sm_\n    }\n\n    get ssaoTotalStrength()_dd_ number {\n        return this._ssaoTotalStrength_sm_\n    }\n\n    set ssaoTotalStrength(value_dd_ number) {\n        this._ssaoTotalStrength _eq_ value_sm_\n    }\n\n    get ssaoBase()_dd_ number {\n        return this._ssaoBase_sm_\n    }\n\n    set ssaoBase(value_dd_ number) {\n        this._ssaoBase _eq_ value_sm_\n    }\n\n    enableSSAO(enabled_dd_ boolean)_dd_ void {\n        if (enabled) {\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.SSAORenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.SSAOBlurHRenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.SSAOBlurVRenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.SSAOCombineRenderEffect_co_ this.internalScene.activeCamera)_sm_\n        } else {\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.SSAORenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.SSAOBlurHRenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.SSAOBlurVRenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.SSAOCombineRenderEffect_co_ this.internalScene.activeCamera)_sm_\n        }\n    }\n\n    enableToneMapping(enabled_dd_ boolean)_dd_ void {\n        if (enabled) {\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.ToneMappingPostProcessId_co_ this.internalScene.activeCamera)_sm_\n        } else {\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.ToneMappingPostProcessId_co_ this.internalScene.activeCamera)_sm_\n        }\n    }\n\n    enableGammaCorrection(enabled_dd_ boolean)_dd_ void {\n        if (enabled) {\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.GammaCorrectionPostProcessId_co_ this.internalScene.activeCamera)_sm_\n        } else {\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.GammaCorrectionPostProcessId_co_ this.internalScene.activeCamera)_sm_\n        }\n    }\n\n    private _setupPipeline()_dd_ void {\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.SSAOOriginalSceneColorEffect_co_ () _eq_&gt_sm_ { return this._originalColorPostProcess_sm_ }_co_ true))_sm_\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.SSAORenderEffect_co_ () _eq_&gt_sm_ { return this._ssaoPostProcess_sm_ }_co_ true))_sm_\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.SSAOBlurHRenderEffect_co_ () _eq_&gt_sm_ { return this._blurHPostProcess_sm_ }_co_ true))_sm_\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.SSAOBlurVRenderEffect_co_ () _eq_&gt_sm_ { return this._blurVPostProcess_sm_ }_co_ true))_sm_\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.SSAOCombineRenderEffect_co_ () _eq_&gt_sm_ { return this._ssaoCombinePostProcess_sm_ }_co_ true))_sm_\n\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.ToneMappingPostProcessId_co_ () _eq_&gt_sm_ { return this._toneMapping_sm_ }_co_ true))_sm_\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.FinalMergePostProcessId_co_ () _eq_&gt_sm_ { return this._finalMerge_sm_ }_co_ true))_sm_\n\n        if (this.fxaaEnabled) {\n            this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.FxaaPostProcessId_co_ () _eq_&gt_sm_ { return this._fxaa_sm_ }_co_ true))_sm_\n        }\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.GammaCorrectionPostProcessId_co_ () _eq_&gt_sm_ { return this._gammaCorrection_sm_ }_co_ true))_sm_\n    }\n\n    // Public Methods\n    /**\n     * Removes the internal pipeline assets and detatches the pipeline from the scene cameras\n     */\n    dispose(disableDepthRender_dd_ boolean _eq_ false)_dd_ void {\n        for (var i _eq_ 0_sm_ i &lt_sm_ this.internalScene.cameras.length_sm_ i++) {\n            var camera _eq_ this.internalScene.cameras[i]_sm_\n\n            this._originalColorPostProcess.dispose(camera)_sm_\n            this._ssaoPostProcess.dispose(camera)_sm_\n            this._blurHPostProcess.dispose(camera)_sm_\n            this._blurVPostProcess.dispose(camera)_sm_\n            this._ssaoCombinePostProcess.dispose(camera)_sm_\n            this._fxaa.dispose(camera)_sm_\n            this._toneMapping.dispose(camera)_sm_\n            this._finalMerge.dispose(camera)_sm_\n            this._gammaCorrection.dispose(camera)_sm_\n        }\n\n        this._randomTexture.dispose()_sm_\n\n        if (disableDepthRender) {\n            this.internalScene.disableDepthRenderer()_sm_\n        }\n\n        this.internalScene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name_co_ this.internalScene.cameras)_sm_\n\n        this._selectionGroupRenderTarget.dispose()_sm_\n        this._overlayGroupRenderTarget.dispose()_sm_\n\n        super.dispose()_sm_\n    }\n\n    private _createSelectionRenderTarget()_dd_ void {\n        let canvas _eq_ this.internalScene.getEngine().getRenderingCanvas()_sm_\n\n        this._selectionGroupRenderTarget _eq_ new BABYLON.RenderTargetTexture(_t_selectionRenderTarget_t__co_ { width_dd_ canvas.width_co_ height_dd_ canvas.height }_co_\n            this.internalScene_co_ false_co_ false_co_ this._defaultPipelineTextureType_co_ false_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE)_sm_\n\n        this._selectionGroupRenderTarget.wrapU _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm_\n        this._selectionGroupRenderTarget.wrapV _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm_\n\n        this._selectionGroupRenderTarget.hasAlpha _eq_ true_sm_\n\n        this._selectionGroupRenderTarget.clearColor _eq_ new BABYLON.Color4(0.0_co_ 0.0_co_ 0.0_co_ 0.0)_sm_\n        this.internalScene.customRenderTargets.push(this._selectionGroupRenderTarget)_sm_\n\n        this._selectionGroupRenderTarget.onBeforeRender _eq_ () _eq_&gt_sm_ {\n            let overlayMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes().slice()_sm_\n            overlayMeshes _eq_ overlayMeshes.filter(e _eq_&gt_sm_ e.renderingGroupId _eq__eq__eq_ 2 &amp_sm_&amp_sm_ (!e.metadata || e.metadata[_t_renderTarget_t_] _eq__eq_ _t_selection_t_))_sm_\n            this._selectionGroupRenderTarget.renderList _eq_ []_sm_\n            for (let mesh of overlayMeshes) {\n                this._selectionGroupRenderTarget.renderList.push(mesh)_sm_\n            }\n\n            let secondaryMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes(false)_sm_\n            for (let mesh of secondaryMeshes) {\n                if (mesh.renderingGroupId _eq__eq__eq_ 2 &amp_sm_&amp_sm_ (!mesh.metadata || mesh.metadata[_t_renderTarget_t_] _eq__eq_ _t_selection_t_)) {\n                    mesh.visibility _eq_ 1.0_sm_\n                }\n            }\n        }_sm_\n\n        this._selectionGroupRenderTarget.onAfterRender _eq_ () _eq_&gt_sm_ {\n            let secondaryMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes(false)_sm_\n            for (let mesh of secondaryMeshes) {\n                if (mesh.renderingGroupId _eq__eq__eq_ 2 &amp_sm_&amp_sm_ (!mesh.metadata || mesh.metadata[_t_renderTarget_t_] _eq__eq_ _t_selection_t_)) {\n                    mesh.visibility _eq_ 0.0_sm_\n                }\n            }\n        }_sm_\n\n        if (this.supportsMultiSampleRenderTargets()) {\n            this._selectionGroupRenderTarget.samples _eq_ RenderOptions.msaaSampleCount_sm_\n        }\n    }\n\n    private _createOverlayRenderTarget()_dd_ void {\n        let canvas _eq_ this.internalScene.getEngine().getRenderingCanvas()_sm_\n\n        this._overlayGroupRenderTarget _eq_ new BABYLON.RenderTargetTexture(_t_overlayRenderTarget_t__co_ { width_dd_ canvas.width_co_ height_dd_ canvas.height }_co_\n            this.internalScene_co_ false_co_ false_co_ this._defaultPipelineTextureType_co_ false_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE)_sm_\n        this._overlayGroupRenderTarget.wrapU _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm_\n        this._overlayGroupRenderTarget.wrapV _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm_\n        this._overlayGroupRenderTarget.hasAlpha _eq_ true_sm_\n        this._overlayGroupRenderTarget.clearColor _eq_ new BABYLON.Color4(0.0_co_ 0.0_co_ 0.0_co_ 0.0)_sm_\n        this.internalScene.customRenderTargets.push(this._overlayGroupRenderTarget)_sm_\n        this._overlayGroupRenderTarget.onBeforeRender _eq_ () _eq_&gt_sm_ {\n            let overlayMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes().slice()_sm_\n            overlayMeshes _eq_ overlayMeshes.filter(e _eq_&gt_sm_ e.renderingGroupId _eq__eq__eq_ 2 &amp_sm_&amp_sm_ (e.metadata &amp_sm_&amp_sm_ e.metadata[_t_renderTarget_t_] _eq__eq_ _t_overlay_t_))_sm_\n            this._overlayGroupRenderTarget.renderList _eq_ []_sm_\n            for (let mesh of overlayMeshes) {\n                this._overlayGroupRenderTarget.renderList.push(mesh)_sm_\n            }\n            let secondaryMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes(false)_sm_\n            for (let mesh of secondaryMeshes) {\n                if (mesh.renderingGroupId _eq__eq__eq_ 2 &amp_sm_&amp_sm_ (mesh.metadata &amp_sm_&amp_sm_ mesh.metadata[_t_renderTarget_t_] _eq__eq_ _t_overlay_t_)) {\n                    mesh.visibility _eq_ 1.0_sm_\n                }\n            }\n        }_sm_\n        this._overlayGroupRenderTarget.onAfterRender _eq_ () _eq_&gt_sm_ {\n            let secondaryMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes(false)_sm_\n            for (let mesh of secondaryMeshes) {\n                if (mesh.renderingGroupId _eq__eq__eq_ 2 &amp_sm_&amp_sm_ (mesh.metadata &amp_sm_&amp_sm_ mesh.metadata[_t_renderTarget_t_] _eq__eq_ _t_overlay_t_)) {\n                    mesh.visibility _eq_ 0.0_sm_\n                }\n            }\n        }_sm_\n\n        if (this.supportsMultiSampleRenderTargets()) {\n            this._overlayGroupRenderTarget.samples _eq_ RenderOptions.msaaSampleCount_sm_\n        }\n    }\n\n    private _createColorBufferPostProcess()_dd_ void {\n        this._originalColorPostProcess _eq_ new BABYLON.PassPostProcess(_t_SSAOOriginalSceneColor_t__co_ 1.0_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ this.internalScene.getEngine()_co_ false_co_ this._defaultPipelineTextureType)_sm_\n\n        if (this.supportsMultiSampleRenderTargets()) {\n            this._originalColorPostProcess.samples _eq_ RenderOptions.msaaSampleCount_sm_\n        }\n    }\n\n    // Private Methods\n    private _createBlurPostProcess(ratio_dd_ number)_dd_ void {\n        var size _eq_ 16_sm_\n\n        this._blurHPostProcess _eq_ new BABYLON.BlurPostProcess(_t_BlurH_t__co_ new BABYLON.Vector2(1_co_ 0)_co_ size_co_ ratio_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ this.internalScene.getEngine()_co_ false_co_ this._defaultPipelineTextureType)_sm_\n        this._blurVPostProcess _eq_ new BABYLON.BlurPostProcess(_t_BlurV_t__co_ new BABYLON.Vector2(0_co_ 1)_co_ size_co_ ratio_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ this.internalScene.getEngine()_co_ false_co_ this._defaultPipelineTextureType)_sm_\n\n        this._blurHPostProcess.onActivateObservable.add(() _eq_&gt_sm_ {\n            let dw _eq_ this._blurHPostProcess.width / this.internalScene.getEngine().getRenderWidth()_sm_\n            this._blurHPostProcess.kernel _eq_ size * dw_sm_\n        })_sm_\n\n        this._blurVPostProcess.onActivateObservable.add(() _eq_&gt_sm_ {\n            let dw _eq_ this._blurVPostProcess.height / this.internalScene.getEngine().getRenderHeight()_sm_\n            this._blurVPostProcess.kernel _eq_ size * dw_sm_\n        })_sm_\n\n        if (this.supportsMultiSampleRenderTargets()) {\n            this._blurHPostProcess.samples _eq_ RenderOptions.msaaSampleCount_sm_\n            this._blurVPostProcess.samples _eq_ RenderOptions.msaaSampleCount_sm_\n        }\n    }\n\n    _rebuild() {\n        this._firstUpdate _eq_ true_sm_\n        super._rebuild()_sm_\n    }\n\n    private _createSSAOPostProcess(ratio_dd_ number)_dd_ void {\n        var numSamples _eq_ 16_sm_\n        var sampleSphere _eq_ [\n            0.5381_co_ 0.1856_co_ -0.4319_co_\n            0.1379_co_ 0.2486_co_ 0.4430_co_\n            0.3371_co_ 0.5679_co_ -0.0057_co_\n            -0.6999_co_ -0.0451_co_ -0.0019_co_\n            0.0689_co_ -0.1598_co_ -0.8547_co_\n            0.0560_co_ 0.0069_co_ -0.1843_co_\n            -0.0146_co_ 0.1402_co_ 0.0762_co_\n            0.0100_co_ -0.1924_co_ -0.0344_co_\n            -0.3577_co_ -0.5301_co_ -0.4358_co_\n            -0.3169_co_ 0.1063_co_ 0.0158_co_\n            0.0103_co_ -0.5869_co_ 0.0046_co_\n            -0.0897_co_ -0.4940_co_ 0.3287_co_\n            0.7119_co_ -0.0154_co_ -0.0918_co_\n            -0.0533_co_ 0.0596_co_ -0.5411_co_\n            0.0352_co_ -0.0631_co_ 0.5460_co_\n            -0.4776_co_ 0.2847_co_ -0.0271\n        ]_sm_\n        var samplesFactor _eq_ 1.0 / numSamples_sm_\n\n        let shader _eq_ BABYLON.Effect.ShadersStore[_t_custom_ssao_t_ + _t_FragmentShader_t_]_sm_\n        if (!shader) {\n            let ssao_frag_shader_dd_ string _eq_ ssao_frag_sm_\n            BABYLON.Effect.ShadersStore[_t_custom_ssao_t_ + _t_FragmentShader_t_] _eq_ ssao_frag_shader_sm_\n        }\n\n        let uniforms _eq_ [\n            _t_sampleSphere_t__co_ _t_samplesFactor_t__co_ _t_randTextureTiles_t__co_ _t_totalStrength_t__co_ _t_radius_t__co_\n            _t_area_t__co_ _t_fallOff_t__co_ _t_base_t_\n        ]_sm_\n\n        let samplers _eq_ [_t_randomSampler_t_]_sm_\n\n        let defines _eq_ []_sm_\n        defines.push(_t_#define SAMPLES _t_ + numSamples)_sm_\n\n        if (this._normalTexture) {\n            samplers.push(_t_normalSampler_t_)_sm_\n            defines.push(_t_#define NORMAL_TEXTURE_t_)_sm_\n        }\n\n        this._ssaoPostProcess _eq_ new BABYLON.PostProcess(_t_ssao_t__co_ _t_custom_ssao_t__co_\n            uniforms_co_\n            samplers_co_\n            ratio_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_\n            this.internalScene.getEngine()_co_ false_co_\n            defines.join(_t_\\n_t_)_co_ this._defaultPipelineTextureType)_sm_\n\n        this._ssaoPostProcess.onApply _eq_ (effect_dd_ BABYLON.Effect) _eq_&gt_sm_ {\n            if (this._firstUpdate) {\n                effect.setArray3(_t_sampleSphere_t__co_ sampleSphere)_sm_\n                effect.setFloat(_t_samplesFactor_t__co_ samplesFactor)_sm_\n                effect.setFloat(_t_randTextureTiles_t__co_ 4.0)_sm_\n            }\n\n            effect.setFloat(_t_totalStrength_t__co_ this._ssaoTotalStrength)_sm_\n            effect.setFloat(_t_radius_t__co_ this._ssaoRadius)_sm_\n            effect.setFloat(_t_area_t__co_ this._ssaoArea)_sm_\n            effect.setFloat(_t_fallOff_t__co_ this._ssaoFallOff)_sm_\n            effect.setFloat(_t_base_t__co_ this._ssaoBase)_sm_\n\n            effect.setTexture(_t_textureSampler_t__co_ this._depthTexture)_sm_\n            effect.setTexture(_t_randomSampler_t__co_ this._randomTexture)_sm_\n\n            if (this._normalTexture) {\n                effect.setTexture(_t_normalSampler_t__co_ this._normalTexture)_sm_\n            }\n        }_sm_\n\n        if (this.supportsMultiSampleRenderTargets()) {\n            this._ssaoPostProcess.samples _eq_ RenderOptions.msaaSampleCount_sm_\n        }\n    }\n\n    private _createSSAOCombinePostProcess(ratio_dd_ number)_dd_ void {\n        this._ssaoCombinePostProcess _eq_ new BABYLON.PostProcess(_t_ssaoCombine_t__co_ _t_ssaoCombine_t__co_ []_co_ [_t_originalColor_t_]_co_\n            ratio_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_\n            this.internalScene.getEngine()_co_ false_co_ _t__t__co_ this._defaultPipelineTextureType)_sm_\n\n        this._ssaoCombinePostProcess.onApply _eq_ (effect_dd_ BABYLON.Effect) _eq_&gt_sm_ {\n            effect.setTextureFromPostProcess(_t_originalColor_t__co_ this._originalColorPostProcess)_sm_\n        }_sm_\n\n        if (this.supportsMultiSampleRenderTargets()) {\n            this._ssaoCombinePostProcess.samples _eq_ RenderOptions.msaaSampleCount_sm_\n        }\n    }\n\n    private _createRandomTexture()_dd_ void {\n        var size _eq_ 512_sm_\n\n        this._randomTexture _eq_ new BABYLON.DynamicTexture(_t_SSAORandomTexture_t__co_ size_co_ this.internalScene_co_ false_co_ BABYLON.Texture.TRILINEAR_SAMPLINGMODE)_sm_\n        this._randomTexture.wrapU _eq_ BABYLON.Texture.WRAP_ADDRESSMODE_sm_\n        this._randomTexture.wrapV _eq_ BABYLON.Texture.WRAP_ADDRESSMODE_sm_\n\n        var context _eq_ this._randomTexture.getContext()_sm_\n\n        var rand _eq_ (min_dd_ number_co_ max_dd_ number) _eq_&gt_sm_ {\n            return Math.random() * (max - min) + min_sm_\n        }\n\n        var randVector _eq_ BABYLON.Vector3.Zero()_sm_\n\n        for (var x _eq_ 0_sm_ x &lt_sm_ size_sm_ x++) {\n            for (var y _eq_ 0_sm_ y &lt_sm_ size_sm_ y++) {\n                randVector.x _eq_ rand(0.0_co_ 1.0)_sm_\n                randVector.y _eq_ rand(0.0_co_ 1.0)_sm_\n                randVector.z _eq_ 0.0_sm_\n\n                randVector.normalize()_sm_\n\n                randVector.scaleInPlace(255)_sm_\n                randVector.x _eq_ Math.floor(randVector.x)_sm_\n                randVector.y _eq_ Math.floor(randVector.y)_sm_\n\n                context.fillStyle _eq_ _t_rgb(_t_ + randVector.x + _t__co_ _t_ + randVector.y + _t__co_ _t_ + randVector.z + _t_)_t__sm_\n                context.fillRect(x_co_ y_co_ 1_co_ 1)_sm_\n            }\n        }\n\n        this._randomTexture.update(false)_sm_\n    }\n\n    private _createFXAAPostProcess()_dd_ void {\n        this._fxaa _eq_ new BABYLON.FxaaPostProcess(_t_fxaa_t__co_ 1.0_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ this.internalScene.getEngine()_co_ false_co_ this._defaultPipelineTextureType)_sm_\n\n        if (this.supportsMultiSampleRenderTargets()) {\n            this._fxaa.samples _eq_ RenderOptions.msaaSampleCount_sm_\n        }\n    }\n\n    private _createGammaCorrectionPostProcess()_dd_ void {\n        let shader _eq_ BABYLON.Effect.ShadersStore[_t_gamma_correction_t_ + _t_FragmentShader_t_]_sm_\n        if (!shader) {\n            let gamma_correction_frag_shader_dd_ string _eq_ gamma_correction_frag_sm_\n            BABYLON.Effect.ShadersStore[_t_gamma_correction_t_ + _t_FragmentShader_t_] _eq_ gamma_correction_frag_shader_sm_\n        }\n        this._gammaCorrection _eq_ new BABYLON.PostProcess(_t_gamma_correction_t__co_ _t_gamma_correction_t__co_\n            [\n                _t_gamma_t_\n            ]_co_\n            []_co_\n            1.0_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_\n            this.internalScene.getEngine()_co_ false_co_ _t__t__co_ this._defaultPipelineTextureType)_sm_\n\n        this._gammaCorrection.onApply _eq_ (effect_dd_ BABYLON.Effect) _eq_&gt_sm_ {\n            effect.setFloat(_t_gamma_t__co_ RenderOptions.gammaValue)_sm_\n        }_sm_\n\n        if (this.supportsMultiSampleRenderTargets()) {\n            this._gammaCorrection.samples _eq_ RenderOptions.msaaSampleCount_sm_\n        }\n    }\n\n    // Final Merge\n    private _createFinalMergePostProcess()_dd_ void {\n        let shader _eq_ BABYLON.Effect.ShadersStore[_t_final_merge_t_ + _t_FragmentShader_t_]_sm_\n        if (!shader) {\n            let final_merge_frag_shader_dd_ string _eq_ final_merge_frag_sm_\n            BABYLON.Effect.ShadersStore[_t_final_merge_t_ + _t_FragmentShader_t_] _eq_ final_merge_frag_shader_sm_\n        }\n        this._finalMerge _eq_ new BABYLON.PostProcess(_t_final_merge_t__co_ _t_final_merge_t__co_\n            [\n                _t_selectionColor_t__co_ _t_resolution_t_\n            ]_co_\n            [\n                _t_selectionSampler_t__co_ _t_overlaySampler_t_\n            ]_co_\n            1.0_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_\n            this.internalScene.getEngine()_co_ false_co_ _t__t__co_ this._defaultPipelineTextureType)_sm_\n\n        this._finalMerge.onApply _eq_ (effect_dd_ BABYLON.Effect) _eq_&gt_sm_ {\n            effect.setFloat3(_t_selectionColor_t__co_ SceneOptions.selectionColor.r_co_ SceneOptions.selectionColor.g_co_ SceneOptions.selectionColor.b)_sm_\n            effect.setFloat2(_t_resolution_t__co_ 1 / this._finalMerge.width_co_ 1 / this._finalMerge.height)_sm_\n            effect.setTexture(_t_selectionSampler_t__co_ this._selectionGroupRenderTarget)_sm_\n            effect.setTexture(_t_overlaySampler_t__co_ this._overlayGroupRenderTarget)_sm_\n        }_sm_\n\n        if (this.supportsMultiSampleRenderTargets()) {\n            this._finalMerge.samples _eq_ RenderOptions.msaaSampleCount_sm_\n        }\n    }\n\n    private _createToneMappingPostProcess()_dd_ void {\n        this._toneMapping _eq_ new BABYLON.TonemapPostProcess(_t_tone_mapping_t__co_ RenderOptions.toneMappingMethod_co_ RenderOptions.toneMappingExposureAdjustment_co_\n            null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ this.internalScene.getEngine()_co_ this._defaultPipelineTextureType)_sm_\n\n        if (this.supportsMultiSampleRenderTargets()) {\n            this._finalMerge.samples _eq_ RenderOptions.msaaSampleCount_sm_\n        }\n    }\n\n    private supportsMultiSampleRenderTargets()_dd_ boolean {\n        return RenderOptions.msaaEnabled &amp_sm_&amp_sm_ Capabilities.WebGLVersion(this.internalScene.getEngine()) &gt_sm__eq_ 2.0 &amp_sm_&amp_sm_ WebUtils.isChrome()_sm_\n    }\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tAnd when I call enableGammaCorrection(false)_co_ it does not work with alpha6 but it did work with alpha4.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"trevordev","Date":"2018-02-01T23:01:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks_co_ I managed to repro with this playground _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1VI6WV%233_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1VI6WV#3_lt_/a_gt_ and\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think I have a working fix here_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/pull/3683_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/pull/3683_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSorry for the breakage.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2018-02-02T01:36:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_203369_qt_ data-ipsquote-contentid_eq__qt_35386_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1517526073_qt_ data-ipsquote-userid_eq__qt_29361_qt_ data-ipsquote-username_eq__qt_trevordev_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t2 hours ago_co_ trevordev said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThanks_co_ I managed to repro with this playground _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1VI6WV%233_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1VI6WV#3_lt_/a_gt_ and\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tI think I have a working fix here_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/pull/3683_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/pull/3683_lt_/a_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tSorry for the breakage.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tNo worry. Super thanks for the quick fix _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2018-03-01T08:01:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_203369_qt_ data-ipsquote-contentid_eq__qt_35386_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1517526073_qt_ data-ipsquote-userid_eq__qt_29361_qt_ data-ipsquote-username_eq__qt_trevordev_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 2018/2/2 at 7_dd_01 AM_co_ trevordev said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThanks_co_ I managed to repro with this playground _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1VI6WV%233_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1VI6WV#3_lt_/a_gt_ and\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tI think I have a working fix here_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/pull/3683_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/pull/3683_lt_/a_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tSorry for the breakage.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/bd848b40b14678834bb776b8a058563bdee13f49/src/PostProcess/RenderPipeline/babylon.postProcessRenderEffect.ts#L180_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/bd848b40b14678834bb776b8a058563bdee13f49/src/PostProcess/RenderPipeline/babylon.postProcessRenderEffect.ts#L180_lt_/a_gt__co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#d73a49_sm_font-size_dd_12px_sm__qt__gt_if_lt_/span_gt__lt_span style_eq__qt_background-color_dd_#fffbdd_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_ (_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_camera_lt_/span_gt__lt_span style_eq__qt_background-color_dd_#fffbdd_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt__postProcesses_lt_/span_gt__lt_span style_eq__qt_background-color_dd_#fffbdd_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_[_lt_/span_gt__lt_span style_eq__qt_color_dd_#005cc5_sm_font-size_dd_12px_sm__qt__gt_this_lt_/span_gt__lt_span style_eq__qt_background-color_dd_#fffbdd_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt__indicesForCamera_lt_/span_gt__lt_span style_eq__qt_background-color_dd_#fffbdd_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_[_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_cameraName_lt_/span_gt__lt_span style_eq__qt_background-color_dd_#fffbdd_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_][_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_j_lt_/span_gt__lt_span style_eq__qt_background-color_dd_#fffbdd_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_]] _lt_/span_gt__lt_span style_eq__qt_color_dd_#d73a49_sm_font-size_dd_12px_sm__qt__gt__eq__eq__eq__lt_/span_gt__lt_span style_eq__qt_background-color_dd_#fffbdd_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_ _lt_/span_gt__lt_span style_eq__qt_color_dd_#005cc5_sm_font-size_dd_12px_sm__qt__gt_undefined_lt_/span_gt__lt_span style_eq__qt_background-color_dd_#fffbdd_sm_color_dd_#24292e_sm_font-size_dd_12px_sm__qt__gt_) {_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think we still got some problems here. I need to comment this for my stuff to work.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"trevordev","Date":"2018-03-01T22:11:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThat check looks to be there to avoid adding the same post process on the same camera multiple times so I think there must be something wrong with how that array is set. Created _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/issues/3852_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/issues/3852_lt_/a_gt__co_ Ill take another look_co_ maybe when the effect is removed that value doesnt get set back to undefined.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2018-03-02T08:12:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_206673_qt_ data-ipsquote-contentid_eq__qt_35386_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1519942280_qt_ data-ipsquote-userid_eq__qt_29361_qt_ data-ipsquote-username_eq__qt_trevordev_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t9 hours ago_co_ trevordev said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThat check looks to be there to avoid adding the same post process on the same camera multiple times so I think there must be something wrong with how that array is set. Created _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/issues/3852_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/issues/3852_lt_/a_gt__co_ Ill take another look_co_ maybe when the effect is removed that value doesnt get set back to undefined.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tYes. The bug happens when after disabling the effects.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"trevordev","Date":"2018-03-07T01:39:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI created a PR which hopefully resolves this_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/pull/3892_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/pull/3892_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDo you know if the remaining broken behavior after the original fix in this thread is still broken in stable? The original fix worked because in my repro I was only enabling/disabling the last post process but enabling/disabling a middle post process looks to be broken in stable as well.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2018-03-08T06:46:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_207289_qt_ data-ipsquote-contentid_eq__qt_35386_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1520386793_qt_ data-ipsquote-userid_eq__qt_29361_qt_ data-ipsquote-username_eq__qt_trevordev_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 2018/3/7 at 9_dd_39 AM_co_ trevordev said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tI created a PR which hopefully resolves this_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/pull/3892_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/pull/3892_lt_/a_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tDo you know if the remaining broken behavior after the original fix in this thread is still broken in stable? The original fix worked because in my repro I was only enabling/disabling the last post process but enabling/disabling a middle post process looks to be broken in stable as well.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI think the remaining broken behavior after the original fix should work fine.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"trevordev","Date":"2018-03-08T17:44:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ looks like the new PR got merged. Let me know if you are still able to repro when you get the chance to try it out. Thanks.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]