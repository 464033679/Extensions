[{"Owner":"Ahiru","Date":"2015-09-02T09:07:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI build a small example-scene_dd_Â _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#2KAUFG_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#2KAUFG_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBesides the fact_co_ that I am wondering why the backside of the plane is black_co_ I would like to understand some other things_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- If the camera is above the plane_co_ I can see the plane AND the sphere - the FPS is around 50-52_co_ but when turning the camera below the plane the FPS drops to 40-45 FPS. Why?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- Draw Calls and active meshes stay constant_co_ even the sphere should be disabled when out of sight_co_ right? That_t_s how I understood how to use setEnable(false).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tStill wondering_co_ why something_co_ that is not visible by the camera is drawn on default - is there any reason for it? (Calculation of .isBlocked pricier than rendering simple objects for example?)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-09-02T09:35:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_A quick answer to legitimate questions!_lt_/p_gt__lt_p_gt_1) It is black due to the normals of the plane. A plane is an interesting object_co_ which has only one set of normals_co_ pointing up. It is not like a box with a very low height. As there are no normals under the plane_co_ no diffuse light will affect it. Try emissiveTexure and see the difference._lt_/p_gt__lt_p_gt_2) No idea_co_ doesn_t_t happen to me._lt_/p_gt__lt_p_gt_3) The active meshes are calculated according to the (enabled)  meshes in the camera frustum. I have never used isBlocked_co_ but I believe is is a definition for LOD and not if the object is hidden behind a difference object (correct me if I am wrong _dd_-) ). This can be achieved using Octrees or ray tracing_co_ but is not being done automatically in every frame._lt_/p_gt__lt_p_gt_In short - the sphere is never hidden (to the camera)_co_ and therefore always enabled._lt_/p_gt__lt_p_gt_It is a hard task to inspect something like that. Very expensive and usually not worth the effort. Just as an example - Let_t_s say the plane is transparent - how would you inspect that? A Ray would have to be sent throughout the plane to see if it hits the sphere or not. This amount of raytracing in one frame will reduce the FPS tremendously_co_ making the framework unusable for real-time games._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]