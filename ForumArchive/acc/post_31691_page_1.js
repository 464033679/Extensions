[{"Owner":"Kreeba","Date":"2017-07-17T10:35:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello everyone_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am making a spaceship game. When a player ship shoots at another ship I am already calculating if it is a hit/miss. I am not going to use any collisions_co_ its just a calculation. Given this_co_ I would like to a bullet tracer (probably a polygon). It will be going very fast_co_ so its more of a visual indication rather than any physics involved.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe bullet will just move from the gun vec3 to the target vec3.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRather than building a system to track each bullet type and its position and progression_co_ I would I would use the inbuilt animation system as it seems like a good _t_fire and forget_t_ system for this type of thing.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIs this a wise decision_co_ is it an expensive (CPU) system if there are many animations present? I also saw I can pickup on an end-frame event. Is it wise to destroy the mesh and attached animation when it gets to the end-frame?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-07-17T15:14:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is a pretty good option.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOne advise_dd_ Reuse meshes for your bullets. Create a pull of pre-created bullets by creating one master and multiple instances (with mesh.createInstance). Then mark all of them as disabled with mesh.setEnabled(false). WHen you want to fire a bullet_co_ take one in your pull_co_ launch the animation and onAnimationEnd you can disable the bullet and store it in the pull again.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2017-07-17T22:59:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tgiven the speed of bullets_co_ I would use Delta method but instead of a _qt_bullet_qt_ mesh use a really simple cylinder and a scale animation that _qt_stretches_qt_ the cylinder in its local y or height direction.  Then script up a custom shader for them to make them look more like tracers.  Just a small bullet flying wont have the same effect.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"distraub","Date":"2017-07-18T15:38:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tis createInstance less expensive than clone?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-07-18T15:46:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tClearly. It reduces the draw call numbers a lot.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2017-07-18T15:47:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tyes_co_ but there are restrictions._lt_br /_gt_\n\t With an instance you can not assign a different material and do not have as much control over making it different then the original_co_ but you can change its position and scaling which is what your interested in._lt_br /_gt__lt_br /_gt_\n\tA clone is a whole new unique geometry with its own draw calls._lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"distraub","Date":"2017-07-18T15:58:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tGood to know_co_ I think I had that backwards in my mind.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2017-07-18T16:03:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//blog.raananweber.com/2015/09/03/scene-optimization-in-babylon-js/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//blog.raananweber.com/2015/09/03/scene-optimization-in-babylon-js/_lt_/a_gt__lt_br /_gt__lt_br /_gt_\n\tall hail _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/10310-raananw/?do_eq_hovercard_qt_ data-mentionid_eq__qt_10310_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/10310-raananw/_qt_ rel_eq__qt__qt__gt_@RaananW_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kreeba","Date":"2017-07-30T19:37:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThanks. It works great. Marked as solved\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]