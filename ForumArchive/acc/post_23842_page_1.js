[{"Owner":"BabylonUser","Date":"2016-07-15T14:35:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m implementing an effect and it_t_s brought up some questions about the RenderingManager class\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe effect uses a series of draw calls involving the stencil and depth buffers that must be called in a specific order. The only mechanism I_t_ve found so far to enforce draw order (other than separate render calls) is to use the mesh renderGroupId property_co_ however this has some interesting limitations_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. There can only be a fixed number of groups (ids 0-3 by default)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. Depth is cleared after each group\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn the ideal case I_t_m looking for a mechanism that lets me enforce the draw order. Something like a  _t_renderOrder_t_ property with arbitrary range (-Infinity -&gt_sm_ Infinity). Allowing negative values is important because I want to be able to ensure some object render before everything else (without explicitly setting a render order for everything else)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t(as an aside_co_ looks like there_t_s no sorting of opaque objects during rendering - typically sorting so opaque objects are rendered from front to back is faster)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ivan.popelyshev","Date":"2016-07-15T14:40:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tGuys_co_ im sorry for intervention_co_ but we have a special approach for that in PIXI - _lt_a href_eq__qt_https_dd_//github.com/pixijs/pixi-display_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/pixijs/pixi-display_lt_/a_gt_ _co_ you can do something like that for Babylon too_co_ its really simple.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-07-15T15:51:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. You can increase this limitation_dd_ BABYLON.RenderingManager.MAX_RENDERINGGROUPS _eq_ 16\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. Correct _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tWe could think about a way to turn off depth cleaning perhaps?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_qt__lt_span style_eq__qt_color_dd_rgb(39_co_42_co_52)_sm_font-family_dd__t_Helvetica Neue_t__co_ Helvetica_co_ Arial_co_ sans-serif_sm_font-size_dd_14px_sm_font-style_dd_normal_sm_font-variant_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_line-height_dd_22.4px_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm_float_dd_none_sm_background-color_dd_rgb(255_co_255_co_255)_sm__qt__gt__lt_span_gt_ _lt_/span_gt_typically sorting so opaque objects are rendered from front to back is faster_lt_/span_gt__qt__dd_ My tests regarding this tend to prove the opposite\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BabylonUser","Date":"2016-07-18T10:05:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWhat do you think of a new engine flag _t_autoClearDepth_t_ which disables all depth clearing in the engine? To prevent confusion_co_ maybe we could rename autoClear to autoClearColor? If you_t_re happy I_t_ll make a PR\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tRe object sorting_dd_ if opaque objects are rendered front-to-back you can save the GPU evaluating wasted fragments that_t_ll get overwritten by foreground objects. If your scene is simple_co_ a few objects with the odd 1 or 2 overlaps and cheap shaders this isn_t_t much of a benefit but when your scene is complex - say you_t_re standing within a building in some first person shooter - without sorting before sending draw calls you could end up having the GPU evaluate fragments for other buildings_co_ sky_co_ clouds_co_ backgrounds etc_co_ which are then all wasted when the walls of the building you_t_re in are rendered.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//infocenter.arm.com/help/index.jsp?topic_eq_/com.arm.doc.dui0555c/BABHAIAD.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//infocenter.arm.com/help/index.jsp?topic_eq_/com.arm.doc.dui0555c/BABHAIAD.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCPU Sorting can be expensive and so it won_t_t fit all cases but it doesn_t_t need to be accurate_co_ just rough camera distance ordering to get the best trade-off between CPU cost and GPU saving\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaybe a new engine flag_co_ sortOpaque? Which defaults to false but a dev can see if flipping to true improves performance in their case?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-07-18T15:51:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tFor the sortOpaque flag_dd_ good idea_co_ off by default to keep compat_co_ love it\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI suggeset also adding a disableDepthClearing property to achieve what you suggest _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ Happy to valdiate the PR\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BabylonUser","Date":"2016-07-19T16:54:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tGreat_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s a tentative PR to disable depth clearing_co_ I_t_ve gone with a single flag to disable all depth clearing rather than separate flags - I_t_m thinking if a user is disabling one_co_ it probably means they want to manage clearing themselves and so will want to disable all _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/compare/master...haxiomic_dd_master_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/compare/master...haxiomic_dd_master_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ve removed some checks of depthMask which were unnecessary (if it_t_s false_co_ clear shouldn_t_t affect the buffer anyway)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs an aside_co_ I_t_ve been getting errors when setting stencil_dd_ true on engine options (to enable the stencil buffer on the gl context)_co_ so this commit fixes that _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/commit/7b3f0c4400f1936c24aa8f3288a366a177431306_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/commit/7b3f0c4400f1936c24aa8f3288a366a177431306_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-07-19T18:16:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI was not thinking about changing Engine actually (And btw we cannot change clear signature as this is a public function)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI was more thinking about asking the renderingManager to not clear depth buffer automatically between rendering groups\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BabylonUser","Date":"2016-07-20T10:51:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tFair enough_co_ I agree we should avoid adding new things to engine if we can avoid it!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m not certain how we should go about adding a flag to rendering manager - the rendering manager instance is private on scene currently so we couldn_t_t set it if there was one_co_ we could add some static setting but I_t_m not sure this is a good idea. We could make the instance public? Any other ideas?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor future reference_co_ when it comes to changing public method signatures its it a problem to modify one such that it_t_s functionally equivalent in all cases previously used? For example_co_ with adding a stencil clear flag to engine.clear_co_ because we_t_ve got a default value set_co_ it_t_ll behave the same in all previous usage\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tDo you have thoughts on the changes to improve typing in the engine constructor? Again it_t_s functionally equivalent_co_ just with new optional fields visible to the type system (there_t_s also a fix for the antialias option)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/haxiomic/Babylon.js/blob/master/src/babylon.engine.ts#L391_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/haxiomic/Babylon.js/blob/master/src/babylon.engine.ts#L391_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-07-20T20:21:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI like the typings improvements a lot\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/20193-sebavan/?do_eq_hovercard_qt_ data-mentionid_eq__qt_20193_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/20193-sebavan/_qt_ rel_eq__qt__qt__gt_@Sebavan_lt_/a_gt_ is working a solution for the rendering manager_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]