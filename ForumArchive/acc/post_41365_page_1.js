[{"Owner":"jpvaillancourt","Date":"2018-11-19T05:03:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m trying to create a forest with planes. All with a unique texture. Since I want it to be optimize_co_ I have created a sort of _qt_clusterer_qt_ to append some textures together and draw the planes into one mesh (with some serverside work to append the textures). It works fine!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe problem that I have is that I need to animate the scale of the planes dynamically. I am using mesh.setVerticesData() to update the vertex positions_co_ but it has some performance issues. Is there a way to update only 16 vertices positions out of 64k without refreshing ALL of the mesh?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m not sure if I_t_m clear enough... that_t_s what I have so far to update the positions.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_updateMesh(index_co_ vertexPositions) {\n    let positions _eq_ this.mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind)_sm_\n    let dataLength _eq_ vertexPositions.length_sm_\n    let startIndex _eq_ index * dataLength_sm_\n\n    for(let i _eq_ 0_sm_ i &lt_sm_ dataLength_sm_ i++) {\n        positions[startIndex+i] _eq_ vertexPositions[i]_sm_\n    }\n\n    this.mesh.setVerticesData(BABYLON.VertexBuffer.PositionKind_co_ positions)_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_11/image.png.d866980080ec05b8d94c8b4bf1d2a5d6.png_qt_ data-fileid_eq__qt_21067_qt_ rel_eq__qt__qt__gt__lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_21067_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_11/image.thumb.png.296e09ddab84413fb31274c4b8a156be.png_qt_ alt_eq__qt_image.thumb.png.296e09ddab84413fb31274c4b8a156be.png_qt_ /_gt__lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2018-11-19T08:47:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou could just update the 16 wanted vertices and still pass the whole modified buffer (verticesData).. The bottleneck isn_t_t usually in the size of the buffer to be passed to the GPU but rather in the user logic. Have you profiled your code to check where the time was spent and what was responsible for this time consumption ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBJS provides a feature that could fit your need_co_ called the Solid Particle System (SPS)_co_ with many optimizations already set _lt_span_gt__dd_ _lt_/span_gt__lt_a href_eq__qt_https_dd_//doc.babylonjs.com/how_to/solid_particle_system_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/how_to/solid_particle_system_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tand the ability to update only some parts of the system (mesh) and to use a single texture too.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jpvaillancourt","Date":"2018-11-19T14:23:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI must say_co_ the performance issue is a fps drop of 15 frames. I will profiled my code and get you back.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs for the particle system_co_ I have thought of it_co_ but all my tree are user generated for the shape_co_ decorations_co_ colors_co_ etc. They all have unique textures. Might it work?!? Haven_t_t seen anything like this into the documentation. Sure it would save me a lot of time to manage and optimize the scale animation_co_ but at the same time I feel I_t_ll have an issue with the textures.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]