[{"Owner":"Dad72","Date":"2015-05-08T16:19:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Is it possible to have a demo or documentation for the use of _lt_span style_eq__qt_color_dd_rgb(51_co_51_co_51)_sm_font-family_dd__t_Helvetica Neue_t__co_ Helvetica_co_ _t_Segoe UI_t__co_ Arial_co_ freesans_co_ sans-serif_sm_font-size_dd_16px_sm__qt__gt_webworkers ? _lt_/span_gt_How does it work? _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-05-08T16:30:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Davrous did one here _dd_ _lt_a href_eq__qt_http_dd_//blogs.msdn.com/b/davrous/archive/2011/07/15/introduction-to-the-html5-web-workers-the-javascript-multithreading-approach.aspx_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//blogs.msdn.com/b/davrous/archive/2011/07/15/introduction-to-the-html5-web-workers-the-javascript-multithreading-approach.aspx_lt_/a_gt__lt_/p_gt__lt_p_gt_same in french _dd_ _lt_a href_eq__qt_http_dd_//blogs.msdn.com/b/davrous/archive/2011/07/08/introduction-aux-web-workers-d-html5-le-multithreading-version-javascript.aspx_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//blogs.msdn.com/b/davrous/archive/2011/07/08/introduction-aux-web-workers-d-html5-le-multithreading-version-javascript.aspx_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_A simple primer here _dd_ _lt_a href_eq__qt_http_dd_//www.html5rocks.com/en/tutorials/workers/basics/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.html5rocks.com/en/tutorials/workers/basics/_lt_/a_gt__lt_/p_gt__lt_p_gt_another in french _dd_ _lt_a href_eq__qt_https_dd_//developer.mozilla.org/fr/docs/Utilisation_des_web_workers_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//developer.mozilla.org/fr/docs/Utilisation_des_web_workers_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Something important you should know about these two articles _dd_ they talk about data serialization/deserialization in JSON before/after receiving messages between two different threads. However almost all browsers implement now something called transferable objects._lt_/p_gt__lt_p_gt_This means quite all js data type are directly transferable from a thread to another without needing this JSON translation. And this transfer is usually fastest than the JSON way._lt_/p_gt__lt_p_gt_So they are good articles to quickly learn about webworkers... then ugrade your knowledge to transferable objects  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-05-08T16:41:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Thanks Jerome._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_I_t_m talking about how it is used in Babylon. has recently been added_co_ but there is no documentation._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_I speak of a presentation in the playground this functionality._lt_/div_gt__lt_br_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-05-08T17:05:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_It was just added two days ago and still ongoing modifications. It is in general transparent to the user and the developer. The scene has a new variable_co_ workerCollisions. It_t_s a Boolean. False_co_ the default value is the collision system as it always was. Setting it to true will start a worker and run the collision in a different thread._lt_/p_gt__lt_p_gt_I still need to write the entire documentation. It_t_s on the to-do list _dd_-) If you have a question regarding a specific feature or how it actually works I_t_ll be more than happy to answer!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-05-08T17:47:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_So just do it_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_scene.workerCollisions _eq_ true_sm_ //active use of workerCollisions_lt_/pre_gt__lt_p_gt_Ok_co_ this is easy. Raanan thank you. I_t_ll wait until the documentation is written for more._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-05-08T18:05:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_BTW_co_ my fusing mind gives me ideas for the next BJS 8.0 release _dd__lt_/p_gt__lt_p_gt_A full multithreaded engine (orthogonal with use of SIMD) ..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The main UI thread_co_ clocked on the RAF_co_ will just render things (GPU calls) and collect DOM events_co_ maybe abstract them._lt_/p_gt__lt_p_gt_The Engine thread (BJS)_co_ clocked on an arbitrary frequency (adaptative to the CPU would be great) will  receive event messages  from the UI thread_co_ will treat them if needed (cam rotations_co_ etc)_co_ will compute everything related to the 3D world and pass it back to the UI thread._lt_/p_gt__lt_p_gt_The User thread_co_ evented or clocked the same way than the Engine thread_co_ will receive event messages from the Engine Thread (some passed originally from the UI thread_co_ a bit like the event bubbling mode in the DOM)_co_ will compute the game logic and will pass back objects to the Engine thread._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In short terms _dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_ul_gt__lt_li_gt_Engine Thread is BJS except the rendering part. It is evented and/or looping at its own frequency._lt_/li_gt__lt_li_gt_UI Thread is the pure WebGL part _dd_ only drawing at 60 fps + DOM event handling/passing... well everything that can_t_t be done in a worker because of the DOM inaccessibility_lt_/li_gt__lt_li_gt_User Thread is what we code in the PG _lt_em_gt_createScene() _dd_ _lt_/em_gt_the game logic only. Evented and/or looping._lt_/li_gt__lt_/ul_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Ok_co_ ok_co_ I stop dreaming ..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Other advice from a webworker tester with BJS ($bibi) _dd_ it is really worth using webworkers if you need to get data with xhr (or websockets)._lt_/p_gt__lt_p_gt_The main thread for BJS_co_ the second to get your data from an external source at a given frequency._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-05-13T03:29:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi Jerome_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_We use websockets to coonect to our node.js server.  Do you have any examples to use webworkers for event data?  This sounds almost to good to be true._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-05-13T07:19:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I use webworkers to separate in their own thread all high latency I/O like network I/O. [EDITED]_lt_/p_gt__lt_p_gt_This means BJS runs in the main loop and another thread besides is in charge of requesting/sending/getting/parsing external data_co_ whatever the protocol _dd_ websocket or xhr._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_example (not really spectacular) _dd_ _lt_a href_eq__qt_http_dd_//logiciels.iut-rodez.fr/proto/weathermap/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//logiciels.iut-rodez.fr/proto/weathermap/_lt_/a_gt__lt_/p_gt__lt_p_gt__lt_em_gt_[EDIT] (oops sorry_co_ I just realize the public version is not the threaded one_co_ but it doesn_t_t change the explanation underneath)_lt_/em_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Server-side a daemon Ruby script sends SNMP requests at regular period (30_qt_ here) to many network switches inside our university in order to collect raw data _dd_ nb of bytes counters on each switch device port. Then it aggregates all these data in a collect result what is a simple json file (so a file rewritten each 30_qt_) written on a web server._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Client-side (browser) _dd__lt_/p_gt__lt_p_gt_The main script is just the BJS scene. It listens to messages from the second thread and refresh the display (mesh size_co_ animations_co_ etc) according to what this second thread sends._lt_/p_gt__lt_p_gt_This second thread is the I/O thread _dd_ it sends a xhr requests every 30_qt_ to the web server_co_ gets the json file_co_ parses it_co_ builds internal data for the main thread and passes them to it._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So the I/O + collected data logic is in its own dedicated thread and notifies the main thread when something should be updated in the rendering loop._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As transferable objects are now implemented in webworkers_co_ it_t_s quite easy to make webworkers have a kind of dialog and behave according to different messages types _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var ioWorker _eq_ new Worker(_qt_ioWorker.js_qt_)_sm_// sending message to ioWorker_co_ ex _dd_ tells the server who I am and my scene is readyvar message _eq_ {type_dd_ _qt_clientReady_qt__co_ payload_dd_ {pseudo_dd_ _qt_$bibi_qt__co_ gameSession_dd_ _qt_rg4354cqrfo_qt__co_ device_dd_ _qt_iPad_qt__co_ etc_dd_ _qt_etc_qt_} }_sm_ioWorker.postMessage(message)_sm_// treats ioWorker incoming messagesioWorker.onmessage _eq_ function(e) {   var msgType _eq_ e.data.type_sm_   // treat each message type to do different things   switch(msgType) {   case _qt_spawEnemy_qt__dd_     // handler1 about data payload _dd_     // this only updates shared variables within this thread     // these variables are then used in the render loop   case _qt_updateLights_qt__dd_    // etc   }}_sm__lt_/pre_gt__lt_p_gt_the same symetrically in the i/o thread _dd_ mainly exchanges with the data/session/game server and evently dialogs with the main rendering thread_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-05-13T11:44:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Let_t_s not forget one little thingy - everything is still asynchronous._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you want to react to use input_co_ you must make sure it will take less than one / two frames to actually return an answer_co_ as the main thread will run the worker_t_s (or_co_ in your case workers_t_ _dd_-) ) answer after rendering the current frame_co_ if they came on time (which is uncontrollable). _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_JavaScript_co_ in its nature_co_ is async. Adding async threads to it won_t_t make it magically work better... It is wonderful for the rendering when separating complex tasks such as collisions_co_ but I wouldn_t_t use workers to react to the mouse rotation. This must occur in real time on the main view-thread. Otherwise the user will have an annoying delay (if its computer is not the best). I would_co_ however_co_ move the simplification implementation to a worker. This is a perfect async task._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Maybe_co_ one day_co_ the workers_t_ implementation in all browsers will be so super fast_co_ that while the view thread is waiting for the next animation frame_co_ the answer can be returned already. That would be _qt_real time_qt_  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_. But Firefox_t_s transferable-implementation (for example) is ... not the best?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-05-13T12:24:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_yep you_t_re right_lt_/p_gt__lt_p_gt_DOM event treatments shoud definetly not happen in a worker (without saying the workers don_t_t access to DOM)_lt_/p_gt__lt_p_gt_But high latency  inputs can _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ [EDITED]_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I hope FF transferable implementation will reach the Chrome one soon (didn_t_t try FF ww). They surely will improve this._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-05-13T16:03:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I was pretty sure this thread was about application / game level web workers_co_ but thought I would speak up about the one being built into the frame work.  It is important that they have a switch to do them in-line_co_ as I see is being done above.  Canvas+ does not support web workers.  Got an email yesterday per-annoucing a new version of CocoonJS_co_ but pretty sure web workers was not on the new features list._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-05-13T17:19:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yep_co_ the first question was about a new feature in 2.1 . _lt_/p_gt__lt_p_gt_If no worker exists_co_ the feature will be disabled_co_ and legacy support will be turned on. There is also a build that doesn_t_t include the worker at all_co_ so cocoon users could use that as well._lt_/p_gt__lt_p_gt_Shame they don_t_t support workers_co_ but I can understand why it would be a bit difficult for them..._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-05-13T17:43:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well_co_ the closer I look at that email on a screen bigger than 5_qt__co_ they say they are rebuilding their whole technology_co_ but give no details.  Those _qt_features_qt_ were just some bug fixes from Feb.  So maybe._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I submitted something about SIMD to them a while ago.  Hopefully_co_ something on the web audio on all platforms and / or web workers are in it.  They have certainly been requested_co_ as I have seen them._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-05-13T18:28:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks for all of the input in understanding webworkers_co_  as I haven_t_t been threading processes outside of my main thread.  But this should speed up some scenes by launching threads for multiple complex operations_co_ and/or for computationally heavy functions which are continually running._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As for simple I/O_co_ I might guess that this would cause delays in retrieving and passing server events outside of the main.  But soon we will be streaming elements such as new meshes and complex bone animation_co_ and webworkers should be a huge benefit_sm_ either to call these elements when requested or to potentially cache them in advance._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]