[{"Owner":"jerome","Date":"2017-09-08T14:34:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPeople usually love the Solid Particle System (aka SPS). Some of them sometimes ask for new features like the ability to extend it once created (coming soon) or for some extra speed by the ability to disable some computations.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI made some study about how things could get faster. The short answer is _dd_ go to a lower lever in the implementation (replace the arrays of objects by typed arrays of floats_co_ for instance)_co_ then use if possible other processes (GPU or workers).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ here are the current status of my prototypes_co_ so you can compare on your computer and browser the differences.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe SPS of reference is really big_co_ filled with 40K (yes_co_ 40_co_ 000 !) boxes and tetrahedrons. It_t_s far more than we usually ask to a SPS with animated solid particles in the PG examples you could find in the forum posts. So your browser may suffer a bit ...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tReference legacy SPS _dd_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/spsReference.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/spsReference.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThen comes the lighter typed array based version _dd_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/spsBuffer.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/spsBuffer.html  _lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs you can notice_co_ it_t_s a bit faster. Not only because of the usage of buffers/typed arrays_co_ but also because it has less features than the legacy SPS for now.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLet_t_s go on...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t[EDIT] (from here_co_ your need to have a browser with _lt_em_gt_sharedArrayBuffer_lt_/em_gt_ enabled)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere comes his new friend_co_ the worker based SPS _dd_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/spsProtoWorker.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/spsProtoWorker.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis one is really faster. In this version_co_ the particle logic (what the user want them to do) is still in the main thread and the worker only computes the transformations (the final vertex coordinates from the particle rotations_co_ positions_co_ scaling values_co_ etc).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAt last_co_ here_t_s the second worker version _dd_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/spsProtoWorker2.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/spsProtoWorker2.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt looks faster ... at least on my browsers.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn this last version_co_ the particle logic is deported in the worker. The main thread only carries for updating the mesh from the vertex buffers.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn both worker versions_co_ the worker computations are decoupled from the render loop. This means that the worker computes_co_ then answers the main thread it has finished and this one just orders it to compute again_co_ whatever the render loop is currently doing at this moment. The render loop just reads the data currently updated by the worker in a shared buffer (shared between the worker and the main thread)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNext study step to come (not soon) _dd_ the GPU based SPS\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tPlease wait for a while until the frame counter stabilizes to the current average value if you run the tests.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2017-09-08T16:08:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tGreat work bud!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2017-09-08T16:17:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNice hackin_t__co_ J!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m getting some ReferenceError_dd_ SharedArrayBuffer is not defined - spsProtoWorker2.js_dd_ 137 ...in the last 2 demos.  I probably need to adjust my Firefox somehow.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-09-08T16:31:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI think SharedArrayBuffer is not implemented everywhere yet.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-08T16:46:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tyep_co_ just use the latest versions or enable it in the browser settings\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn order to understand what are the dimensions we_t_re talking about in these examples _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t20 K boxes_co_ each having 24 vertices _eq_ 480K vertices\n_lt_/p_gt_\n\n_lt_p_gt_\n\t+ 20K tetrahedrons_co_ each having 12 vertices _eq_ 240K vertices\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA total of 720 K vertices_co_ knowing each has 3 floats (x_co_y_co_z)  for the positions and 3 floats for the normals_co_ so 4.320 millions of coordinates to be scaled_co_ rotated (a quaternion and a rotation matrix computed per particle each step !) and translated each update_co_ CPU side.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-09-08T17:04:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tInteresting.  Do you know if a shared buffer is limited to just UI and a single worker?  If it can work with multiple workers_co_ you might be able to get some kind of a thread pool where each core works on a piece.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-09-08T17:19:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tYou know I tried this on my Sony tablet and got 11 fps with worker_co_ so it works on Android.  With legacy is update so slow_co_ there was no time update the FPS reading.  Need to check iOS.  Not holding my breath.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-09-08T17:22:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tIt actually worked on an iPad Air 2_co_ A8 processor.  About 58-60 with worker. 2-8 with legacy.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-08T18:25:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t#1 sharedArrayBuffers work also with multiple workers_co_ I tried them_co_ but I faced a big issue in the data synchronization _dd_ when a worker updates a part of the common buffer_co_ the updated value is only accessible by the other thread (including the main thread) a while after only... un-predictable in a render loop.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe W3C and JS guys added a feature called Atomics ( _lt_a href_eq__qt_https_dd_//github.com/tc39/ecmascript_sharedmem/blob/master/TUTORIAL.md_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/tc39/ecmascript_sharedmem/blob/master/TUTORIAL.md_lt_/a_gt_ ) to make opaerations atomic and  to guarantee the read value is the last updated one. Unfortunately_co_ Atomics only works with IntArray... so no way to manage float coordinates . I went crazy after hours testing this. If you change the value of the variable workerNb in my code_co_ you_t_ll see the data synchronization issue live.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNote also that the VertexBuffer used by the GPU can_t_t be shared directly among workers. We need a shared buffer for the workers_co_ then copy it to the vertex buffer before the rendering.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI will probably make a third prototype by sharing a buffer per worker.. with 2_co_ 3_co_ or more workers (some browsers limit the number to 4) each computing simultaneously only a subpart of the array  in order to check if it_t_s worth it. This will be my next step actually before the GPU experiments_co_ if they ever come one day ...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t#2 _dd_ 40K is really a huge number for solid particles. In the PGs_co_ you will hardly find examples with particle number above 6K as they can easily be recycled when they get out of the frustum.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaybe you could test the worker examples with_co_ say_co_ 10 or 12K particles (just copy/paste the 3 files on your server and change the value of the variable particleNb) what a legacy SPS would normally not animate at 60 fps \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2017-09-08T18:56:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_188204_qt_ data-ipsquote-contentid_eq__qt_32817_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1504895143_qt_ data-ipsquote-userid_eq__qt_5453_qt_ data-ipsquote-username_eq__qt_jerome_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t29 minutes ago_co_ jerome said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tUnfortunately_co_ Atomics only works with IntArray... so no way to manage float coordinates .\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tCould you multiply the float values by something like 100 before storing them into the int array and then divide the int value by 100 to get back to your float value?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-08T20:19:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tyes_co_ this is a workaround_co_ but this limits quickly the smoothness because thus the precision is fixed forever _dd_ say everything is multiplied/divided by 1000 (factor 1000)_co_ then wherever the camera is located_co_ wherever each vertex is positionned_co_ rotated or scaled_co_ they are all bound to some virtual 3D grid.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSaid differently_co_ this technique tends to reduce all the possible used values to a finite pool _dd_ the integer values storable in the array.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tintValue1 _eq_ (floatValue1 * 1000)|0   // cast to int with a precision of 1000_co_ stored in the shared array\n_lt_/p_gt_\n\n_lt_p_gt_\n\t receivedFloatValue _eq_ intValue / 1000  // right ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\twell_co_ plenty of different float values for initial floatValue1 would give the same intermediate intValue_co_ so the same final received value \n_lt_/p_gt_\n\n_lt_p_gt_\n\tex _dd_ 1.0_co_ 1.0001_co_ 1.0002_co_ 1.0003_co_ etc but also 1.00011_co_ 1.000101_co_ 1.000999999_co_ etc they all end to the same final value _dd_ 1.0 \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf all the particles have a size around_co_ say_co_ 1.0_co_ can be distant the ones from the others  fot 0.1 and the camera can be close up to 0.01 to them_co_ this really matters.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNot sure I_t_m very clear. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-11T05:09:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tclearer _dd_ \n_lt_/p_gt_\n\n_lt_div class_eq__qt_ipsEmbeddedOther_qt__gt_\n\t_lt_iframe allowfullscreen_eq__qt__qt_ data-controller_eq__qt_core.front.core.autosizeiframe_qt_ data-embedid_eq__qt_embed1683425516_qt_ scrolling_eq__qt_no_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/index.php?app_eq_core&amp_sm_module_eq_system&amp_sm_controller_eq_embed&amp_sm_url_eq_https_dd_//twitter.com/fermatslibrary/status/906865136945778688_qt_ style_eq__qt_height_dd_551px_sm__qt__gt__lt_/iframe_gt_\n_lt_/div_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-09-11T15:26:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAs for float_co_ I round all the geometry coming out of Blender to 4 decimals.  It seems more than sufficient.  We are also using 32 bit integer not 16 bit.  The largest values normals is 1 right?  I am wondering out loud about a worker to compute normals.  In my morphing implementation_co_ when a new target is being computed_co_ the target normals are also calculated.  Then each frame_co_ I interpolate the normals as well as the positions.  This will mean that the starting of a morph on the fly at least one frame late.  Since I have a queue based animation system anyway_co_ this might not be a big hurtle.  In fact for QI.Automaton_co_ I export those 24 tiny FACE targets.  In the process of construction_co_ I create all the expressions (speech visemes are also expressions) from their smaller parts.  Doing that might reduce my load time.  Could combine that with read ahead_co_ since it would not be trying up the UI much at all.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tJust thinking out loud.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-11T18:53:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tall this is really interesting_co_ needs test and gives me ideas _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tWill check tomorrow as soon as I can get some free time\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2017-09-11T19:25:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIt obviously depends on how much precision you need and the scale of your world.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tboxes with size 1_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#MTER2F%232_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#MTER2F#2_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tboxes with size .1_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#MTER2F%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#MTER2F#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tboxes with size .01_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#MTER2F_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#MTER2F_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tGood for hacking or your own project where you know the constraints.  Probably not a good fit for SPS. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tEDIT_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthose first 3 examples were 3 decimal places.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is 4 decimal places_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tboxes with size .1_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#MTER2F%233_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#MTER2F#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tboxes with size .01\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#MTER2F%234_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#MTER2F#4_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis might work for SPS.  Also remember that camera.minZ defaults to 1.  In most cases you wouldn_t_t be close enough to see this level of detailed movement.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-12T01:01:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\treally smart study case _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-12T09:34:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tok back.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI was about to implement some high precision float to integer casting in order to use the painful _lt_em_gt_Atomics_lt_/em_gt_ feature. Painful_co_ because it implies to manage the way each buffer element is updated_co_ then is tagged as asleep in one thread and being surveyed until awaken in the other thread... this for 7 million array elements !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ before diving in those complex programming constraints_co_ I re-checked at last time my initial code that shouldn_t_t make real concurrent access to the same part of the memory because each worker was supposed to read and write in the buffer on its dedicated portion only. Moreover the main thread was only support to read the shared buffer whatever the data were up to date or not.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd I found a tiny bug in the way I used the indexes to share the pieces of buffer for each worker... fixed. So no more flickering_co_ now. And no need for integer casting and all the _lt_em_gt_Atomics_lt_/em_gt_ stuff.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEverything is here _dd_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/SPSWorker/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/SPSWorker/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere_t_s a folder for each version _dd_ one or two workers. Just click on the html file. The difference between the version 1 and 2 is just that the version 1 implements the particle logic in the main thread_co_ whereas the version 2 implements the particle logic in each worker.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTheoretically_co_ the version 2 should be faster.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOn average machines_co_ the FPS should be up to 20 times higher than the typed array mono-threaded version or the legacy SPS one _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tReference legacy SPS _dd_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/spsReference.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/spsReference.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLighter typed array based version _dd_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/spsBuffer.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/spsBuffer.html  _lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOn fast machines_co_ the FPS is almost always around 60 FPS. This is expected because the render loop is decoupled from the worker computations. So don_t_t really mind the FPS when close to 60_co_ don_t_t compare also the particle speed between both version _dd_ the velocity step is clocked on the render loop in the version 1_co_ but is clocked on the worker cycle in the version 2_co_ so they might be different.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo what to compare then ? maybe the smoothness with what the particle evolve ... are they jerky or not.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI tried also with 4 or 6 workers but could not get any gain. Actually_co_ as the Vertex Buffer_co_ used by the GPU at the end_co_ can_t_t be shared among workers_co_ we have to copy the buffer shared between workers in the vertex buffer before the rendering. This means anyway a loop to copy 7M elements in the main thread.... this loop (as well with particle logic when in the main thread) can slow down the main thread_co_ so the FPS.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs usual_co_ please wait for a while until the FPS meter stabilizes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2017-09-12T12:17:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOn a low end Window_t_s  laptop - legacy 7fps_co_ new 10 fps but new version much less stuttery.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-12T12:26:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOnly 10 fps with _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/SPSWorker/twoWorkers/spsProtoWorker2.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/SPSWorker/twoWorkers/spsProtoWorker2.html_lt_/a_gt_  ? rats !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOn linux_co_ Chrome is really faster than FF... I get 60 fps in full screen on my powerful work machine _dd_ GPU nVidia Quadra K620_co_ CPU Intel Xeon E3 (4 x 3.1 GHz)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnyway 40K is certainly a far too big number ...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t[EDIT] _dd_ I just slowed down the particle speed\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-12T13:30:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHeavy stress test here (beware_co_ these need very powerful PC) _dd_ _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/SPSWorker/Ultimate/spsProtoWorker3.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/SPSWorker/Ultimate/spsProtoWorker3.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis one runs at 60 fps in Chrome here ... 200K (yes _dd_ 200_co_ 000 !) transparent quad particles and 4 workers.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t[EDIT] _lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/SPSWorker/Ultimate/spsProtoWorker4.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/SPSWorker/Ultimate/spsProtoWorker4.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t250K triangles_co_ 6 workers_co_ 60 fps in full screen in Chrome on my muscle work computer.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2017-09-12T13:41:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi guys.  Quick interrupt.  Those not seeing demos in Firefox... enter _lt_strong_gt_about_dd_config_lt_/strong_gt_ in browser URL field... and set _lt_strong_gt_javascript.options.shared_memory _lt_/strong_gt_to_lt_strong_gt_ true_lt_/strong_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for info_co_ JcPalmer and Jerome.  Great demos_co_ interesting tests!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2017-09-12T17:10:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_188587_qt_ data-ipsquote-contentid_eq__qt_32817_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1505223009_qt_ data-ipsquote-userid_eq__qt_5453_qt_ data-ipsquote-username_eq__qt_jerome_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t3 hours ago_co_ jerome said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/SPSWorker/Ultimate/spsProtoWorker4.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/SPSWorker/Ultimate/spsProtoWorker4.html_lt_/a_gt_\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tAm getting 25 fps using the above using FF on my low end Window_t_s laptop (Intel (HD) integrated graphics)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAm getting 4 fps on my low end android tablet.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m impressed as I have seen apparently less intensive PGs fail on the Android.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-09-12T17:36:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI get 59-60 FPS for the last 2 on chrome &amp_sm_ firefox (i5 &amp_sm_ GTX 1050 @ 2560 x 1600 res).  Edge fails due to share memory.  I am not sure using more workers than the number of cores is good though.  Wonder is there is a way to find how many there are in JS?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-15T14:53:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_ third step _dd_ GPU SPS\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//jerome.bousquie.fr/BJS/test/SPSGpu/spsShader.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jerome.bousquie.fr/BJS/test/SPSGpu/spsShader.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis one runs at 60 fps in chrome on my muscle work computer.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs usual 40K solid particles (boxes + tetras). This is a monothreaded JS version_co_ but all the particle transformations (translation_co_ rotation_co_ scaling) are computed GPU side. I didn_t_t code a nice fragment shader managing the light reflection for now.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNext step to come _dd_ the worker GPU SPS. Not sure we can get more perfs again anyway because the particle logic (the user custom behavior) has to remain in the main thread.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-09-15T19:25:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tFull screen it runs @ 59 fps on FF.  About 25 % cpu total all cores.  Did not test chrome_co_ since you already did.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSince it wasn_t_t using workers_co_ tried Edge_co_ but could not compile effect.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tVertex Shader_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2017_09/vertex.jpg.49dc684573143eee7e0899a884eb35c2.jpg_qt_ data-fileid_eq__qt_14867_qt_ rel_eq__qt__qt__gt__lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_14867_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2017_09/vertex.thumb.jpg.3e3fd1e874d8d988a850cfa6fe96195a.jpg_qt_ alt_eq__qt_vertex.thumb.jpg.3e3fd1e874d8d988a850cfa6fe96195a.jpg_qt_ /_gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFragment &amp_sm_ error msg_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_14868_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2017_09/fragment.jpg.73569a0960720cd52a8aeda2b740064d.jpg_qt_ alt_eq__qt_fragment.jpg.73569a0960720cd52a8aeda2b740064d.jpg_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tError does not mean anything to me.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]