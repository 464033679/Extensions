[{"Owner":"tranlong021988","Date":"2017-02-24T11:34:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is a question about theory _co_ so I don_t_t have PG for this. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAssume that I have a 3d scene with many meshs_co_ is there any best solutions for computing distance among each meshs_co_ update continuously each render tick_co_ I mean the best solutions for computing and distance calculation is just example. And modern mobile browser is expect target. Performance is important. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo far_co_ first solution that I can think_co_ is using web worker. An asynchronous calculation _co_ via a separating thread will avoid lagging caused by expensive calculation. Everything done by CPU. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSecond solution_co_ _lt_a href_eq__qt_http_dd_//gpu.rocks_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//gpu.rocks_lt_/a_gt_ _co_ I don_t_t understand clearly_co_ but is there a solution to calculate via GPU ? Anybody try this ? \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BitOfGold","Date":"2017-02-24T15:57:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tWeb worker has a high latency_co_ but maybe you do not really need the calculation on every tick_co_ so you can separate the calculation from the rendering._lt_br /_gt__lt_br /_gt_\n\tDo you need distance from every mesh to every other (N x N)_co_ or just searching for the closest n other meshes?_lt_br /_gt_\n\tIn the latter case you can use a broadphase optimalization_co_ for example sort the bodies by all three axis and calculate distances for the closest ones on that axis_co_ or you can use some kind of hashing algorithm (buckets)_co_ like every mesh is on the same bucket by rounding the coordinates to the nearest GRID_SIZE. (putting them into a grid and compute distance to the same and the nearest grid blocks)._lt_br /_gt__lt_br /_gt_\n\tAll that depends of what is that you want to do with the distances?_lt_br /_gt__lt_br /_gt_\n\tThanks for suggesting gpu.rocks!_lt_br /_gt__lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tranlong021988","Date":"2017-02-24T18:06:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/7708-bitofgold/?do_eq_hovercard_qt_ data-mentionid_eq__qt_7708_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/7708-bitofgold/_qt_ rel_eq__qt__qt__gt_@BitOfGold_lt_/a_gt__dd_ Yes actually I have some success with web worker. GPUJS is my new approach to get my 3d game performance close to native as possible. And distance calculating is just a _qt_test case_qt_. If you or someone have experience with it_co_ know its pros_co_ cons and applying cases_co_ can share me the light ? \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Felipe","Date":"2017-02-24T20:59:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tCurrently I don_t_t think is a good idea doing GPGPU on WebGL game right now. It_t_s true_co_ calculating matrix transformations is super fast on the GPU and it_t_s ideal for general purpose calculation_co_ specially with compute shaders. The problem is that currently WebGL doesn_t_t give any performance optimization when doing synchronization from device to host memory. It might be great for generating an immutable single block of data at initialization but not for executing GPU calculations every frame (updating meshes_co_ calculating physics_co_ etc). The main bottleneck you_t_ll get is with glReadPixels. You can even try it with the gpu.rocks demo_co_ try running that test while rendering a game. Maybe when the standard decides to add compute shaders and PBOs to webgl it could be possible.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tranlong021988","Date":"2017-02-24T21:45:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/311-felipe/?do_eq_hovercard_qt_ data-mentionid_eq__qt_311_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/311-felipe/_qt_ rel_eq__qt__qt__gt_@Felipe_lt_/a_gt__dd_ That seem a sad news. You are right_co_ don_t_t know how fast it is with GPU calculation but slow transfer result from GLSL can ruin my game. I already do some test with gpuRock and turboJS_co_ even with simple sum mathematics _co_ the response time is always higher 16ms which mean can not fit single frame calculation. May be I should keep sticking with webworker and wait for some day...\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-02-25T03:57:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAre you sure you_t_re already doing the fastest thing you can do at the algorithmic level?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOften there are solutions to problems like this that involve_co_ for example_co_ pre-computing something once such that the thing you need to know can then be tracked incrementally each frame. Or alternatively_co_ there could be a way to approximate what you need much more cheaply than getting the exact answer_co_ etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you can describe what you_t_re doing a little more_co_ people may be able to help.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tranlong021988","Date":"2017-02-25T05:32:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/12925-fenomas/?do_eq_hovercard_qt_ data-mentionid_eq__qt_12925_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/12925-fenomas/_qt_ rel_eq__qt__qt__gt_@fenomas_lt_/a_gt__dd_ I_t_m just trying to figure out a best solution for complex computing without burning CPU or freezing scene. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tLet say I want to try make out an occlusion culling solution with BabylonJS. Launching a ray from camera object to every static meshs on scene(buildings)_co_ choose which one _qt_on view_qt_ to help me optimizing render process. But since I have a lot of mesh (a large city) then ray collision computing for each mesh can be expensive. Yes I know we have many optimization solutions already (octree_co_merge meshs_co_etc) _co_ I just wonder if GPU parallele computing can do the trick_co_ if I have complex gameplay I will not want CPU handle too much_co_ especially mobile target.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut my first approach seem too bad. I tried simple calculation to check response time from GPUrock_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var gpu _eq_ new GPU()_sm_\nvar test _eq_ gpu.createKernel(function(A_co_ B ) {\n    var sum _eq_ A+B_sm_\n    return sum_sm_\n}).dimensions([1])_sm_\n\nvar startTime _eq_ new Date().getTime()_sm_\n\ntest(4_co_5)_sm_\n\nvar endTime _eq_ new Date().getTime()_sm_\n\nvar timeCost _eq_ endTime - startTime_sm_ _lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tCalculation result is 9 _co_ but timeCost is too high_co_ about 50-150 ms which can not fit a single frame render (16 ms ). I think it is enough for a bad solution.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI just tried TurboJS_co_ it is faster but still not fit 16ms for simple calculation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSorry for my bad English.  \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"aWeirdo","Date":"2017-02-25T09:04:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHere_t_s a PG example calculating distance between 251 meshes using simple math_co__lt_br /_gt_\n\ton my pc it takes around 10-20 MS (+/-) before optimation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthats roughly 62750 3d position calculations each frame.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1JB1NX%237_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1JB1NX#7_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BitOfGold","Date":"2017-02-25T09:12:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t7-9ms on my PC._lt_br /_gt_\n\tWith euclidean distance (real distance between points)_dd__lt_br /_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1JB1NX%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1JB1NX#1_lt_/a_gt__lt_br /_gt_\n\tMuch slower of course. (25ms)_lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BitOfGold","Date":"2017-02-25T09:17:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tusing BABYLON_t_s vector length_dd__lt_br /_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1JB1NX%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1JB1NX#2_lt_/a_gt__lt_br /_gt_\n\t2ms!!! How on earth is it faster?_lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2017_02/2ms.jpg.8e0b862c7073907499a34b2908f2e1b0.jpg_qt_ data-fileid_eq__qt_11792_qt_ rel_eq__qt__qt__gt__lt_img alt_eq__qt_2ms.jpg_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_11792_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2017_02/2ms.jpg.8e0b862c7073907499a34b2908f2e1b0.jpg_qt_ /_gt__lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-02-25T09:23:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_164930_qt_ data-ipsquote-contentid_eq__qt_28672_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488000728_qt_ data-ipsquote-userid_eq__qt_21019_qt_ data-ipsquote-username_eq__qt_tranlong021988_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t3 hours ago_co_ tranlong021988 said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/12925-fenomas/?do_eq_hovercard_qt_ data-mentionid_eq__qt_12925_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/12925-fenomas/_qt_ rel_eq__qt__qt__gt_@fenomas_lt_/a_gt__dd_ I_t_m just trying to figure out a best solution for complex computing without burning CPU or freezing scene. \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tLet say I want to try make out an occlusion culling solution with BabylonJS. Launching a ray from camera object to every static meshs on scene(buildings)_co_ choose which one _qt_on view_qt_ to help me optimizing render process. But since I have a lot of mesh (a large city) then ray collision computing for each mesh can be expensive. Yes I know we have many optimization solutions already (octree_co_merge meshs_co_etc) _co_ I just wonder if GPU parallele computing can do the trick_co_ if I have complex gameplay I will not want CPU handle too much_co_ especially mobile target.er but still not fit 16ms for simple calculation.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI strongly suspect you_t_ll have better results setting up a normal scene_co_ measuring for any performance problems_co_ and then fixing them with the usual methods (octrees_co_ e.g.).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe trouble with offloading calculations to the GPU is_co_ you need to run several steps in sequence_dd_  (A) send data to the GPU_co_ (B) run calculations there_co_ (C) wait for the results to come back to the GPU_co_ (D) use those results to update your scene_co_ (E) render the scene.  Even though (B) may be very fast_co_ (C) is _lt_strong_gt_very slow_lt_/strong_gt_ - probably much slower than just performing (B) on the CPU.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn other words - if there was an easy way to do frustum culling (for example) on the GPU_co_ Babylon would probably already be doing it. If you have optimizations you can do that are specific to your particular scene_co_ I think you_t_ll find that doing those optimizations on the CPU before rendering will be the best bet.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-02-25T09:47:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tA simple little optimization _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- instead of computing to vector3 (subtraction) between two meshes_co_ just store the resut in a predefined temporary one and use subtractToRef() _eq_&gt_sm_ the memory allocator and the GC won_t_t work\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- instead of comparing the distance between one mesh and all the other meshes each frame_co_ just compare the distance between one mesh and all the _lt_u_gt_resting_lt_/u_gt_ other mesh _dd_ start the second loop from i+1 instead from 0  (you already computed the i first distances before)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1JB1NX%235_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1JB1NX#5_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t(actually_co_ I think it_t_s even faster than the displayed results because console.log() is really a slow method)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tranlong021988","Date":"2017-02-25T09:59:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/17943-aweirdo/?do_eq_hovercard_qt_ data-mentionid_eq__qt_17943_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/17943-aweirdo/_qt_ rel_eq__qt__qt__gt_@aWeirdo_lt_/a_gt_ _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/7708-bitofgold/?do_eq_hovercard_qt_ data-mentionid_eq__qt_7708_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/7708-bitofgold/_qt_ rel_eq__qt__qt__gt_@BitOfGold_lt_/a_gt_ _dd_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThank you two for your PG_co_ it_t_s about 15-30ms on my PC_co_ may be slower than your results because of our CPU power difference. But it still be an immersive solution if I\n_lt_/p_gt_\n\n_lt_p_gt_\n\tseparate that calculation work to web worker_co_ async response can help avoiding freezing/glitching issue. Actually I just applied this solution for my past game _dd_ _lt_a href_eq__qt_http_dd_//appsbymekong.com/flashdemo/vrgame/optimized4/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//appsbymekong.com/flashdemo/vrgame/optimized4/_lt_/a_gt_ (mobile only by using device orientation API).  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs I said_co_ distance calculation is just example_co_ and so far our solution is almost done by CPU_co_ my main point is wondering about GPU ability. I mean if we can use GPU for some cases and be nice with CPU. _dd_))  \n_lt_/p_gt_\n\n_lt_p_gt_\n\t(Oh my stupid English skill). \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-02-25T10:05:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_164939_qt_ data-ipsquote-contentid_eq__qt_28672_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488014264_qt_ data-ipsquote-userid_eq__qt_7708_qt_ data-ipsquote-username_eq__qt_BitOfGold_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t42 minutes ago_co_ BitOfGold said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tusing BABYLON_t_s vector length_dd__lt_br /_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1JB1NX%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1JB1NX#2_lt_/a_gt__lt_br /_gt_\n\t\t\t2ms!!! How on earth it is faster?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tJust an educated guess_co_ but probably because your _qt_getDistance_qt_ function was wrapped up inside a bunch of playground-specific contexts and evals and whatnot. _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1JB1NX%236_qt_ rel_eq__qt_external nofollow_qt__gt_Here_t_s_lt_/a_gt_ a tweaked version of your first link that should run faster. Don_t_t ask me specifically why that tweak works - I suspect (but haven_t_t tested) that this tweak wouldn_t_t have been necessary outside the playground.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPlayground is great for many things but it_t_s not good for performance tests. _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tranlong021988","Date":"2017-02-25T10:06:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_164940_qt_ data-ipsquote-contentid_eq__qt_28672_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488014634_qt_ data-ipsquote-userid_eq__qt_12925_qt_ data-ipsquote-username_eq__qt_fenomas_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t36 minutes ago_co_ fenomas said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tI strongly suspect you_t_ll have better results setting up a normal scene_co_ measuring for any performance problems_co_ and then fixing them with the usual methods (octrees_co_ e.g.).\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThe trouble with offloading calculations to the GPU is_co_ you need to run several steps in sequence_dd_  (A) send data to the GPU_co_ (B) run calculations there_co_ (C) wait for the results to come back to the GPU_co_ (D) use those results to update your scene_co_ (E) render the scene.  Even though (B) may be very fast_co_ (C) is _lt_strong_gt_very slow_lt_/strong_gt_ - probably much slower than just performing (B) on the CPU.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tIn other words - if there was an easy way to do frustum culling (for example) on the GPU_co_ Babylon would probably already be doing it. If you have optimizations you can do that are specific to your particular scene_co_ I think you_t_ll find that doing those optimizations on the CPU before rendering will be the best bet.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tYeah_co_ I was dreaming again. And _qt_we can not get everything we want_qt_ (can not remember who said this)  _dd_))  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBtw_co_ about occlusion culling_co_ is there any good news with webgl2 and any support plan of BJS ? \n_lt_/p_gt_\n\n_lt_div class_eq__qt_ipsEmbeddedVideo_qt__gt_\n\t_lt_div_gt_\n\t\t_lt_iframe allowfullscreen_eq__qt_true_qt_ frameborder_eq__qt_0_qt_ height_eq__qt_270_qt_ src_eq__qt_https_dd_//www.youtube.com/embed/iAva-guSpOo?feature_eq_oembed_qt_ width_eq__qt_480_qt__gt__lt_/iframe_gt_\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-02-25T11:09:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_164949_qt_ data-ipsquote-contentid_eq__qt_28672_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488017183_qt_ data-ipsquote-userid_eq__qt_21019_qt_ data-ipsquote-username_eq__qt_tranlong021988_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t54 minutes ago_co_ tranlong021988 said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tYeah_co_ I was dreaming again. And _qt_we can not get everything we want_qt_ (can not remember who said this)  _dd_))  \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tBtw_co_ about occlusion culling_co_ is there any good news with webgl2 and any support plan of BJS ? \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t_qt_There_t_s no such thing as a free lunch_qt__co_ as they say _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut with that said_co_ remember - Babylon already does most of the _lt_strong_gt_general_lt_/strong_gt_ optimizations that it can do_co_ but that doesn_t_t mean you can_t_t still do huge optimizations that are _lt_strong_gt_specific to your content_lt_/strong_gt_. For example_co_ if your content is a city_co_ and the player is right next to a building_co_ it might be very easy to (manually) cull a certain set of meshes that you know are on the opposite side of the building. Babylon can_t_t do that automatically because it can_t_t (easily) know that the building is fully opaque_co_ but if you know that_co_ you can use that information.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ in my game that I_t_ve been making_co_ early on culling was the biggest performance cost_co_ but I_t_ve found that octrees have completely solved the problem. It took some effort to make it work_co_ but I managed it because I had a very specific idea of what was slow. Make sure you don_t_t try to optimize too early_co_ before you know where your bottleneck is.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"tranlong021988","Date":"2017-02-25T11:14:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_164954_qt_ data-ipsquote-contentid_eq__qt_28672_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488020958_qt_ data-ipsquote-userid_eq__qt_12925_qt_ data-ipsquote-username_eq__qt_fenomas_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t3 minutes ago_co_ fenomas said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t_qt_There_t_s no such thing as a free lunch_qt__co_ as they say _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tBut with that said_co_ remember - Babylon already does most of the _lt_strong_gt_general_lt_/strong_gt_ optimizations that it can do_co_ but that doesn_t_t mean you can_t_t still do huge optimizations that are _lt_strong_gt_specific to your content_lt_/strong_gt_. For example_co_ if your content is a city_co_ and the player is right next to a building_co_ it might be very easy to (manually) cull a certain set of meshes that you know are on the opposite side of the building. Babylon can_t_t do that automatically because it can_t_t (easily) know that the building is fully opaque_co_ but if you know that_co_ you can use that information.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tAlso_co_ in my game that I_t_ve been making_co_ early on culling was the biggest performance cost_co_ but I_t_ve found that octrees have completely solved the problem. It took some effort to make it work_co_ but I managed it because I had a very specific idea of what was slow. Make sure you don_t_t try to optimize too early_co_ before you know where your bottleneck is.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThanks for advice. Have a good day. _dd_))\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2017-02-26T09:05:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_164935_qt_ data-ipsquote-contentid_eq__qt_28672_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488013449_qt_ data-ipsquote-userid_eq__qt_17943_qt_ data-ipsquote-username_eq__qt_aWeirdo_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 25/02/2017 at 10_dd_04 AM_co_ aWeirdo said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tHere_t_s a PG example calculating distance between 251 meshes using simple math_co__lt_br /_gt_\n\t\t\ton my pc it takes around 10-20 MS (+/-) before optimation.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tthats roughly 62750 3d position calculations each frame.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1JB1NX%237_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1JB1NX#7_lt_/a_gt_\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t_lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/17943-aweirdo/?do_eq_hovercard_qt_ data-mentionid_eq__qt_17943_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/17943-aweirdo/_qt_ rel_eq__qt__qt__gt_@aWeirdo_lt_/a_gt_ I tried the exact same code with the built-in function of bjs _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1JB1NX%238_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1JB1NX#8_lt_/a_gt_ (line 70_co_ Vector3.DistanceSquared)_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt takes around 40/60ms_co_ whereas in your playground it takes around 10/20ms... It_t_s the exact _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Math/babylon.math.ts#L1704_qt_ rel_eq__qt_external nofollow_qt__gt_same code _lt_/a_gt_?? How do you explain it ?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2017-02-26T10:51:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tVector3.DistanceSquared lacks the square root calculation.  It_t_s useful for when testing/comparing the distance squared.  You_t_d still need to do the square root on the result if you needed the actual distance.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2017-02-26T11:42:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tBut why does my pg runs slower than aWeirdo_t_s one ? It_t_s the same code_co_ it should be the same time\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-02-26T12:10:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_165043_qt_ data-ipsquote-contentid_eq__qt_28672_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488109350_qt_ data-ipsquote-userid_eq__qt_5218_qt_ data-ipsquote-username_eq__qt_Temechon_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t26 minutes ago_co_ Temechon said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tBut why does my pg runs slower than aWeirdo_t_s one ? It_t_s the same code_co_ it should be the same time\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tSame answer as before_dd_\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_164948_qt_ data-ipsquote-contentid_eq__qt_28672_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488017110_qt_ data-ipsquote-userid_eq__qt_12925_qt_ data-ipsquote-username_eq__qt_fenomas_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 2/25/2017 at 7_dd_05 PM_co_ fenomas said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tbut probably because your _qt_getDistance_qt_ function was wrapped up inside a bunch of playground-specific contexts and evals and whatnot. .... \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_strong_gt_Playground is great for many things but it_t_s not good for performance tests._lt_/strong_gt_ _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2017-02-26T13:28:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tIt make sense _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ I_t_ll try to setup a test locally...\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2017-02-26T13:55:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_165043_qt_ data-ipsquote-contentid_eq__qt_28672_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1488109350_qt_ data-ipsquote-userid_eq__qt_5218_qt_ data-ipsquote-username_eq__qt_Temechon_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t2 hours ago_co_ Temechon said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tBut why does my pg runs slower than aWeirdo_t_s one ? It_t_s the same code_co_ it should be the same time\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tNow I see what your question was.  Interesting.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2017-02-26T14:01:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m getting 1 or 2 ms on Firefox for both distance squared functions in that PG.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn Chrome I_t_m getting 7 or 8 ms for getDistance and 20 - 23 ms for BABYLON.Vector3.DistanceSquared.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-02-26T14:22:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tModern JS is fast because JS engines are good at optimizing it. The fast results you guys are seeing are cases where the optimizations all worked_co_ and the slower ones are cases where something didn_t_t get optimized as much as it could be.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd again_co_ the problems are probably all playground specific - PG is not the right place to measure performance.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]