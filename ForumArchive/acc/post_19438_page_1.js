[{"Owner":"G&#039;kar","Date":"2015-12-24T14:24:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I have just contribute to BabylonJs with playground recently._lt_br_gt_This trig a few question on how to handle storage of resources around the playground._lt_br_gt_I mean texture images_co_ or shader code._lt_br_gt__lt_br_gt_Here is the results of my thinking_co_ with questions as well._lt_br_gt__lt_br_gt_Context _dd_ I am mainly hacking around very basic sample code to test babylonJs_co__lt_br_gt_possibly with idea to share on forum with other users._lt_br_gt_Scope can be_dd_ A) local on my PC_co_ B ) on the playground_lt_br_gt__lt_br_gt_A) Local PC. This is easy case. Here everything is under control._lt_br_gt_I run my local web server_co_ to run the BJS scene in my browser._lt_br_gt_I have a dummy html file that refer the javascript I am testing._lt_br_gt_Idea is to have html that put the javascript in same state as provided by playground._lt_br_gt_In parallel_co_ along with that I put my texture image as local file_co_ no problem._lt_br_gt_This context is important for me as I can use my usual texteditor_co_ ..._lt_br_gt__lt_br_gt_B ) Playground._lt_br_gt_Very nice environment_co_ easy to setup quickly basic BJS scene._lt_br_gt_The drawback_dd_ you only control the javascript code of your scene._lt_br_gt_Html framework is pre-defined inside playground and you don_t_t control._lt_br_gt_I found that I have to provided link to external texture needed by my BJS playground test._lt_br_gt__lt_br_gt_--------------------------------------------------------------------_lt_br_gt__lt_br_gt_1) texture_lt_br_gt_1A) on my local PC_co_ the javascript is referring texture as local file_co_ in can edit_co_ change at will_lt_br_gt__lt_br_gt_1B) on playground_lt_br_gt_    When stable I migrate texture to file as remote URL (want same javascript to move to playground)_lt_br_gt_    something like _dd_ ....material.diffuseTexture _eq_ new BABYLON.Texture(_t__lt_a href_eq__qt_/image.png%27_co_scene)_sm__qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//url.../image.png_t__co_scene)_sm__lt_/a_gt__lt_br_gt__lt_br_gt_    So where can we store our texture files ?_lt_br_gt_    I give a try to _dd__lt_br_gt_    - google blog_dd_ setup a blogspot uploading file and manage to get a url to the image_lt_br_gt_      Working but not really easy (need to manual edit the blog page)_lt_br_gt_      Url are quite ugly _dd_ example _dd_ _t__lt_a href_eq__qt_http_dd_//2.bp.blogspot.com/-sTvFL0vGFXE/VncKTkHuR7I/AAAAAAAAD1A/vDokBOMvxqk/s1600/Fuller-ico-uv.jpg%27_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//2.bp.blogspot.com/-sTvFL0vGFXE/VncKTkHuR7I/AAAAAAAAD1A/vDokBOMvxqk/s1600/Fuller-ico-uv.jpg_t__lt_/a_gt__lt_br_gt_    - Checking with my access provider webpage._lt_br_gt_      Ftp access to the file on the server_co_ nice !_lt_br_gt_      Issue is the access from playground have cross-origin-ressource-sharing problem._lt_br_gt_      And not sure how to bypass such limitation not under my control_co_ but set my my access provider._lt_br_gt_    - Use my own webserver_dd__lt_br_gt_      Ok_co_ this one is perfect. But overkill !_lt_br_gt_      I need to setup all that (linuxbox_co_ domain name_co_ apache_co_ ...)_lt_br_gt_      Probably not the solution for lambda user._lt_br_gt_    - anyone have other solutions ?_lt_br_gt__lt_br_gt_--------------------------------------------------------------------_lt_br_gt__lt_br_gt_2) shader_lt_br_gt_just starting to play with shader material. Doing thing as _dd__lt_br_gt_material _eq_ new BABYLON.ShaderMaterial(_qt_shader_qt__co_ scene_co_ _qt_ShaderRessource_qt__co_ { attributes_dd_ [_qt_position_qt__co_ _qt_uv_qt_]_co_uniforms_dd_ [...]})_sm__lt_br_gt_Now what to put for ShaderRessource. This should locate the shader code to be used in the material._lt_br_gt_This can be DOM element in the HTML_co_ using {vertexElement_dd_ _qt_vertexShaderCode_qt__co_ fragmentElement_dd_ _qt_fragmentShaderCode_qt_}_lt_br_gt_This could be file located either in babylonJS Shader/src_co_ or file on the webserver serving the javascript/html._lt_br_gt_Needed files are _dd_ ShaderRessource.fragment.fx and ShaderRessource.vertex.fx_lt_br_gt__lt_br_gt_2A) Again for local PC_co_ it is easy to have html DOM_co_ or local file_co_ no problemo._lt_br_gt__lt_br_gt_2B) Here trouble begins_dd__lt_br_gt_    On playground I have no direct control of HTML file_co_ so not easy to fill the html_lt_br_gt_    (as shown in _lt_a href_eq__qt_http_dd_//gamedevelopment.tutsplus.com/tutorials/building-shaders-with-babylonjs-and-webgl-theory-and-examples--cms-24146)_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//gamedevelopment.tutsplus.com/tutorials/building-shaders-with-babylonjs-and-webgl-theory-and-examples--cms-24146)_lt_/a_gt__lt_br_gt_    I suspect solution exist to have javascript to refer the html and create and dynamicaly fill the &lt_sm_script type_eq__qt_application/fragmentShader_qt_ id_eq__qt_fragmentShaderCode_qt_&gt_sm_ with your code._lt_br_gt_    Ok I didn_t_t dig a lot in this direction as it sound quite complex._lt_br_gt__lt_br_gt_    So I check to external file reference option_co_ but failed so far to put something in place._lt_br_gt_    It is limited to ShaderRessource located on same web server as the one serving the html/javascript._lt_br_gt_    So having a url such as _qt__lt_a href_eq__qt_http_dd_//my.own.remote.web.server/myshader_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//my.own.remote.web.server/myshader_qt__lt_/a_gt__lt_br_gt_    On a local test the browser generate invalid url like (concatenate local and remote)_dd__lt_br_gt_    _lt_span style_eq__qt_font-size_dd_10px_sm__qt__gt__lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_h t t p_dd_//192.168.56.101_dd_8000/test/src/Shaders/h t t p_dd_//my.own.remote.web.server/myshader.fragment.fx_lt_/span_gt__lt_/span_gt__lt_br_gt__lt_br_gt_    I backtrack the _qt_issue?_qt_ to babylon.effects.ts code_dd__lt_br_gt__lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_            var fragmentShaderUrl_sm__lt_br_gt__lt_br_gt_            if (fragment[0] _eq__eq__eq_ _qt_._qt_ || fragment[0] _eq__eq__eq_ _qt_/_qt_) {_lt_br_gt_                fragmentShaderUrl _eq_ fragment_sm__lt_br_gt_            } else {_lt_br_gt_                fragmentShaderUrl _eq_ Engine.ShadersRepository + fragment_sm__lt_br_gt_            }_lt_br_gt__lt_br_gt_            // Fragment shader_lt_br_gt_            Tools.LoadFile(fragmentShaderUrl + _qt_.fragment.fx_qt__co_ callback)_sm__lt_/span_gt__lt_br_gt__lt_br_gt__lt_br_gt_    The first char of resource locator is checked for _qt_._qt_ or _qt_/_qt__co_ obviously this restrict the shader code to be fetched from external website (start with http is needed ?)._lt_br_gt__lt_br_gt_    Is it intentional limitation/feature ?_lt_br_gt_    Is there any trick to allow a playground test to refer shader files located on an arbitrary url on the web ?_lt_br_gt_    Is it worth trying (or wish-able) to tune the BJS code to work differently ?_lt_br_gt__lt_br_gt_    Any idea is welcome_co_ this would help me to soon share my own shader/playground with you _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_br_gt__lt_br_gt_    Alternative I have is to fully setup a full website with html_co_ javascript_co_ texture and shader as standalone whole._lt_br_gt_    (but the playground sounds better if possible)_lt_br_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-12-24T22:06:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi G_t_kar!  These problems are likely caused by CORS (Cross-origin resource sharing).  The behaviors you describe seem normal to me.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMany folk use the ShadersStore to store shader code in the playground.  It looks like this...  _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#16UICJ%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#16UICJ#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs.com/cyos/_qt_ rel_eq__qt_external nofollow_qt__gt_CYOS_lt_/a_gt_ is our _qt_Create Your Own Shader_qt_ editor... I_t_m sure you have seen it.  The demo above... uses the Spherical Environment Mapping shader... and I chose the _qt_Zip_qt_ choice in CYOS... to bring it to my home computer.  Then I listed it_t_s source_co_ and the shader code was there... in ShadersStore format.  I just pasted it into the playground... easy.  In other words_co_ if you write/paste your shader code into CYOS_co_ get it working good there_co_ then grab a zip_co_ CYOS will put the shader code in ShadersStore format FOR YOU... handy.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor playground _lt_u_gt__lt_strong_gt_images_lt_/strong_gt__lt_/u_gt__co_ I often use textures and pictures gotten from wikipedia commons CORS-cleared images.  Let me show you how I find a CORS-clear image...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1.  Visit here_dd_  _lt_a href_eq__qt_https_dd_//images.google.com/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//images.google.com/_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2.  Search for... oh... maybe _t_cow_t_ (for example)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3.  We got cows.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ /_gt_  Now choose _qt_Search Tools_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t4. Now choose _qt_Usage Rights_qt_ _eq__eq_&gt_sm_ Labeled for reuse\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlmost all _t_wikipedia commons_t_ pictures are CORS-clear.  So are Facebook pictures.  Others are still CORS-restricted.  As you likely know_co_ there is no warning or alert when a playground image has been blocked by CORS.  It just won_t_t load/render... silent failure.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI chose _lt_a href_eq__qt_https_dd_//upload.wikimedia.org/wikipedia/commons/7/72/Winking_Jersey_Cow.JPG_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//upload.wikimedia.org/wikipedia/commons/7/72/Winking_Jersey_Cow.JPG_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow let_t_s test our cow in a modified materials playground demo (see line 64)...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#1N4VL8_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#1N4VL8_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe got good cow!  Yay!  It_t_s a CORS-clear picture.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow do you set YOUR home web server to allow CORS-clear reusable images and shader retrieval?  I have no idea_co_ but the information is available on the net.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou are among MANY who wish CORS would have never happened_co_ because it causes many problems for the JS-based XmlHttpRequest object (sometimes called XHR)_co_ which is used heavily in BabylonJS and many other systems.  I will let you read about WHY it was adopted a few years ago.  I hate it_co_ personally.  There_t_s not much that can be done about it.  You/We just need to learn the rules_co_ and adapt_co_ unfortunately.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI hear that the best solve is to run your own web server and make it CORS-enabled (like we saw with the wikipedia commons server)... but I don_t_t do that_co_ and I don_t_t know much about it.  There are also a few images and skybox 6-packs in the playground_t_s textures/ folder... mainly for doing demos _lt_u_gt_for the community_lt_/u_gt_ (to support documentation_co_ for example).  We also have a github-based materials library_co_ now_co_ but I don_t_t know what the criteria is for making additions to that.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is the _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/tree/master/Playground/textures_qt_ rel_eq__qt_external nofollow_qt__gt_folder of textures located within CORS scope... in the playground_t_s /textures/ folder_lt_/a_gt_.  All of those images will work fine in the playground using URLs such as _qt_./textures/[imgname]_qt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRead about CORS when you get a moment (not a fun read)... and if you still have questions_co_ I and others will comment and help explain the situation with more clarity.  Be well!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-12-25T11:23:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi G_t_kar_co_ in fact to choose the url for the vertex and fragment code you simply specify _lt_/p_gt__lt_p_gt_BABYLON.Engine.ShadersRepository _eq_ _qt_root-http-url-of-your-file_qt_._lt_/p_gt__lt_p_gt_You then put your vertex and fragment files in that location and it_t_s ok._lt_/p_gt__lt_p_gt_Also FYI some days ago I changed the code for loading shader files to allow http url directly specifiable in the createEffect and in the new ShaderMaterial functions (but you have to use the latest BJS version)_lt_/p_gt__lt_p_gt_To put images on a simple webserver with no CORS restriction_co_ I think dropbox could be easily used (don_t_t use it myself so I_t_m not sure for CORS enabled but that that would make sense)._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"G&#039;kar","Date":"2015-12-25T23:34:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_@Vousk-prod._lt_br_gt_You are right _qt_effect.ts_qt_ is already updated in latest version as follow_lt_br_gt_(handling the case of http based url that I tested before)._lt_br_gt_I get it to work perfectly (using latest BJS). Thanks._lt_br_gt__lt_br_gt__lt_span style_eq__qt_font-size_dd_10px_sm__qt__gt__lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_            var fragmentShaderUrl_sm__lt_br_gt__lt_br_gt_            if (fragment[0] _eq__eq__eq_ _qt_._qt_ || fragment[0] _eq__eq__eq_ _qt_/_qt_ || fragment.indexOf(_qt_http_qt_) &gt_sm_ -1) {_lt_br_gt_                fragmentShaderUrl _eq_ fragment_sm__lt_br_gt_            } else {_lt_br_gt_                fragmentShaderUrl _eq_ Engine.ShadersRepository + fragment_sm__lt_br_gt_            }_lt_br_gt__lt_br_gt_            // Fragment shader_lt_br_gt_            Tools.LoadFile(fragmentShaderUrl + _qt_.fragment.fx_qt__co_ callback)_sm__lt_/span_gt__lt_/span_gt__lt_br_gt__lt_br_gt_@Wingnut_lt_br_gt_Of course CYOS ! + ask for a zip _eq_&gt_sm_ gives me a nice index.html with_lt_br_gt__lt_span style_eq__qt_font-size_dd_10px_sm__qt__gt__lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_    BABYLON.Effect.ShadersStore[_qt_customVertexShader_qt_]_eq_ ..._lt_br_gt_    BABYLON.Effect.ShadersStore[_qt_customFragmentShader_qt_]_eq_ ..._lt_br_gt_    var shaderMaterial _eq_ new BABYLON.ShaderMaterial(_qt_shader_qt__co_ scene_co_ {_lt_br_gt_                    vertex_dd_ _qt_custom_qt__co__lt_br_gt_                    fragment_dd_ _qt_custom_qt__co__lt_br_gt_                }_co__lt_br_gt_                    {_lt_br_gt_                        attributes_dd_ [_qt_position_qt__co_ _qt_normal_qt__co_ _qt_uv_qt_]_co__lt_br_gt_                        uniforms_dd_ [_qt_world_qt__co_ _qt_worldView_qt__co_ _qt_worldViewProjection_qt__co_ _qt_view_qt__co_ _qt_projection_qt_]_lt_br_gt_                    })_sm__lt_/span_gt__lt_/span_gt__lt_br_gt_Exactly the pattern I was looking for._lt_br_gt__lt_br_gt_I tested the 3 options _dd__lt_br_gt_ - embedded in javascript (as CYOS pattern provides)_lt_br_gt_ - as local file on relative Url_lt_br_gt_ - as remote file on remote absolute URL_lt_br_gt_Excellent_co_ all 3 are working fine (I have a playground in preparation to demonstrate my actual shader_co__lt_br_gt_I will add pointer to this code to illustrate as soon as available)._lt_br_gt__lt_br_gt_@Wingnut_lt_br_gt_Thanks for the details on CORS._lt_br_gt_Appreciate the trick to locate such texture on google image_lt_br_gt__lt_br_gt_For server setup to relax CORS_co_ don_t_t worry_co_ I can handle that._lt_br_gt_(a bit off topic_co_ but for the one interested_co_ on my apache server_co_ it is one line in .htaccess_dd__lt_br_gt_    Header add Access-Control-Allow-Origin _qt_*_qt__lt_br_gt_OK because I own the server and can do as I want_lt_br_gt_)_lt_br_gt__lt_br_gt_Thanks also to list the available texture inside playground (didn_t_t know about the details)_lt_br_gt__lt_br_gt_So now if I look for cool texture_co_ I have solution to explore and find._lt_br_gt_But when I have to build my own texture (with specific uv mapping for icosphere that nobody knows about for instance)_co__lt_br_gt_I still have to find a public website with no CORS to store my picture._lt_br_gt_(facebook friends_co_ get ready to be spamed with ugly texture)._lt_br_gt_Or may be I will stick to my local website as it is fine for me._lt_br_gt__lt_br_gt_I also tried a CORS referring image from BJS playground to_dd__lt_br_gt_- facebook public image _dd_ OK_lt_br_gt_- upload.wikimedia.org _dd_ OK (as shown by Wingnut)_lt_br_gt_- google blog (blogspot) _dd_ OK_lt_br_gt_- dropbox (using sharing link for file) _dd_ failed (get load error in log of playground)._lt_br_gt_  Probably failed because the link gives you to framework proposing to log in and ... (you don_t_t get a direct image)_lt_br_gt_- google drive _dd_ failed _dd_ they give file reference is a framework web page allowing to view a file (not a direct image)_lt_br_gt_- probably other solutions_co_ to be tested later ..._lt_br_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]