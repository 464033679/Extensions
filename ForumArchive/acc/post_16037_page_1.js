[{"Owner":"davrous","Date":"2015-07-28T18:27:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi guys_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ We often have this question_dd_ why does babylon.js generate a failing XHR request for this strange .manifest file? It_t_s because it was the only way I_t_ve found to check if the user would like to cache into our IndexedDB layer the scene and/or the textures_dd_ h_lt_span_gt_ttp_dd_//doc.babylonjs.com/page.php?p_eq_22231_lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ But it often generates confusion and some people are not interested in our offline features. We_t_re currently working on a big project (top secret for now but to be launched by the end of the year) where the developers have requested to avoid having those XHR useless requests for them._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_span style_eq__qt_font-size_dd_11pt_sm_font-family_dd_Calibri_co_ sans-serif_sm_color_dd_#1F497D_sm__qt__gt_I’ve just updated the code. I’ve added an _lt_b_gt_enableOfflineSupport_lt_/b_gt_ boolean property set to true by default (to keep the current default behavior for our users). If you’re set the value to false_co_ we won’t query anymore for a .manifest file for potential IDB usage._lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_#1f497d_sm__qt__gt__lt_span style_eq__qt_font-family_dd_calibri_co_ sans-serif_sm__qt__gt__lt_span style_eq__qt_font-size_dd_11pt_sm__qt__gt_Usage_dd__lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_        _lt_span style_eq__qt_color_dd_#0000FF_sm__qt__gt__lt_span style_eq__qt_font-family_dd_consolas_sm__qt__gt__lt_span style_eq__qt_font-size_dd_9.5pt_sm__qt__gt_var_lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_span style_eq__qt_color_dd_#000000_sm__qt__gt__lt_span_gt__lt_span style_eq__qt_font-size_dd_9.5pt_sm__qt__gt_ engine _eq_ _lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_span style_eq__qt_color_dd_#0000FF_sm__qt__gt__lt_span style_eq__qt_font-family_dd_consolas_sm__qt__gt__lt_span style_eq__qt_font-size_dd_9.5pt_sm__qt__gt_new_lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_span style_eq__qt_color_dd_#000000_sm__qt__gt__lt_span style_eq__qt_font-family_dd_consolas_sm__qt__gt__lt_span style_eq__qt_font-size_dd_9.5pt_sm__qt__gt_ BABYLON.Engine(canvas_co_ _lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_span style_eq__qt_color_dd_#0000FF_sm__qt__gt__lt_span style_eq__qt_font-family_dd_consolas_sm__qt__gt__lt_span style_eq__qt_font-size_dd_9.5pt_sm__qt__gt_true_lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_span style_eq__qt_color_dd_#000000_sm__qt__gt__lt_span style_eq__qt_font-family_dd_consolas_sm__qt__gt__lt_span style_eq__qt_font-size_dd_9.5pt_sm__qt__gt_)_sm__lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_#000000_sm__qt__gt__lt_span style_eq__qt_font-family_dd_consolas_sm__qt__gt__lt_span style_eq__qt_font-size_dd_9.5pt_sm__qt__gt_    engine.enableOfflineSupport _eq_ _lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_span style_eq__qt_color_dd_#0000FF_sm__qt__gt__lt_span_gt__lt_span style_eq__qt_font-size_dd_9.5pt_sm__qt__gt_false_lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_span style_eq__qt_color_dd_#000000_sm__qt__gt__lt_span style_eq__qt_font-family_dd_consolas_sm__qt__gt__lt_span style_eq__qt_font-size_dd_9.5pt_sm__qt__gt__sm__lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_#1f497d_sm__qt__gt__lt_span style_eq__qt_font-family_dd_calibri_co_ sans-serif_sm__qt__gt__lt_span style_eq__qt_font-size_dd_11pt_sm__qt__gt_                Both _lt_em_gt_importMesh_lt_/em_gt_ and _lt_em_gt_load_lt_/em_gt_ functions on our _lt_em_gt_SceneLoader_lt_/em_gt_ object are impacted. So_co_ simply setting this boolean in your code should remove all failing .manifest XHR calls. I’ve pushed the update on our github repo. Files affected_dd__lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_ul_gt__lt_li_gt__lt_p_gt__lt_span style_eq__qt_color_dd_#1f497d_sm__qt__gt__lt_span style_eq__qt_font-family_dd_calibri_co_ sans-serif_sm__qt__gt__lt_span style_eq__qt_font-size_dd_11pt_sm__qt__gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.engine.ts_qt_ rel_eq__qt_external nofollow_qt__gt__lt_span style_eq__qt_color_dd_#0000ff_sm__qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.engine.ts_lt_/span_gt__lt_/a_gt__lt_/span_gt__lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_/li_gt__lt_li_gt__lt_p_gt__lt_span style_eq__qt_color_dd_#1f497d_sm__qt__gt__lt_span style_eq__qt_font-family_dd_calibri_co_ sans-serif_sm__qt__gt__lt_span style_eq__qt_font-size_dd_11pt_sm__qt__gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Loading/babylon.sceneLoader.ts_qt_ rel_eq__qt_external nofollow_qt__gt__lt_span style_eq__qt_color_dd_#0000ff_sm__qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Loading/babylon.sceneLoader.ts_lt_/span_gt__lt_/a_gt__lt_/span_gt_ _lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_/li_gt__lt_/ul_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Bye_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_David_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]