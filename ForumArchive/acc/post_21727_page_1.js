[{"Owner":"JCPalmer","Date":"2016-04-05T19:16:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI think I found a way (actually 2)s to reduce a Blender export file.  I noticed normals_co_ UV_t_s_co_ shape keys are always values &gt_sm_ -1 and &lt_sm_ 1.  Even many positions could be in this range.  I popped this little piece of code_co_ which if it error-ed would cause my scene to not display_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var zeroless _eq_ new Float32Array([-.3333_co_.3709])_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tScene did not fail.  I will soon be updating the in-line code generator to see it works like_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_this.setVerticesData(BABYLON.VertexBuffer.PositionKind_co_ new Float32Array([-.3333_co_.3709 ..._lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tMy question is_dd_ are there any platforms_co_ or JSON_co_ where this cannot occur?  Blender is shipping up to 4 decimals (stripping trailing)_co_ so normals &amp_sm_ UV_t_s this a 1/8 reduction for negative numbers with no trailing 0_t_s_co_ and 1/7 for positive.  Shapekeys should probably be always 0 to .9999_co_ so 1/7 for them.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSpeaking of 4 decimals_co_ the second reduction I want to try is changing the test for equality of vertices / normals / UV_t_s.  Right now they use _eq__eq__co_ but I have made a function for shape key analysis to only test equality to the number of decimals output.  I have been slowing adding it in more and more places.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_def same_vertex(vertA_co_ vertB)_dd_\n    if vertA is None or vertB is None_dd_ return False\n    return (round(vertA.x_co_ MAX_FLOAT_PRECISION_INT) _eq__eq_ round(vertB.x_co_ MAX_FLOAT_PRECISION_INT) and \n            round(vertA.y_co_ MAX_FLOAT_PRECISION_INT) _eq__eq_ round(vertB.y_co_ MAX_FLOAT_PRECISION_INT) and \n            round(vertA.z_co_ MAX_FLOAT_PRECISION_INT) _eq__eq_ round(vertB.z_co_ MAX_FLOAT_PRECISION_INT))\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThis has had more effect so far than you might think.  Blender is quad based_co_ so when the exporter makes a temp version as triangles one point might be 16.3456789 and another might be 16.2356794.  The point here is not really about space_co_ but smoothness.  The stuff being exported just does not look as good as it does in Blender in crease areas.  I am thinking it might be some sort of flat-shading effect due to extra verts.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMight even add a superSmooth arg on tester_co_ where the test is using 3 decimals_co_ just to see what happens_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_def same_vertex(vertA_co_ vertB_co_ superSmooth _eq_ False)_dd_\n    precision _eq_ MAX_FLOAT_PRECISION_INT - (1 if superSmooth else 0)\n    if vertA is None or vertB is None_dd_ return False\n    return (round(vertA.x_co_ precision) _eq__eq_ round(vertB.x_co_ precision) and \n            round(vertA.y_co_ precision) _eq__eq_ round(vertB.y_co_ precision) and \n            round(vertA.z_co_ precision) _eq__eq_ round(vertB.z_co_ precision))\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-04-05T19:23:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tWell_co_ I have thought of one instance where the 0 IS NOT optional_co_ when the value is 0.0000 _lt_img alt_eq__qt__dd_P_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ title_eq__qt__dd_P_qt_ width_eq__qt_20_qt_ /_gt_.  The formatter code already drops the _t_._t_ too in that case. Other than that_co_ the question still stands?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-04-05T19:48:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tnot sure_co_ id do a test of performance of with a leading 0 and without._lt_br /_gt__lt_br /_gt_\n\tIm not super versed in this topic_co_ but I would assume that if you leave out a leading 0 at some point javascript would have to add one back in?  I mean maybe not but how else could it do calculations without having a fully constructed number?_lt_br /_gt__lt_br /_gt_\n\tSo this is where I would be interested.  Ill dig through the number and math class some and try to figure that out_co_ but I would assume the drop in the export would not be that substantial? I mean whats a 0_co_ one bit?  How many times and how large would your file need to be for that to take an effect?_lt_br /_gt_\n\tnow_co_ as far as which would be faster still begs to differ? for all I know leaving the 0 out will increase calculation speed by skipping over a functional step_co_ or perhaps its the opposite. _lt_br /_gt__lt_br /_gt_\n\tIf you find out more about this please let me know_co_ I would like to tailor my habits to match the most effective standard.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-04-05T20:18:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tEach character in an ascii file is 8bits.  The removal on an output with 2 meshes (body wt 12 shape keys &amp_sm_ hair) reduced the file size by 11.5%.  It worked.  The export_co_ whether .babylon or in-line JS is about 96% numbers_co_ so 1/8 (12.5%) would be approachable if indexes were not integers instead of floats.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn Javascript_co_ once read each value is going to be a float 64.  BJS converts that to a float 32.  The difference in parsing time is probably not significant.  The extra code to produce the data only increased from 8.0305 sec to 8.1185 sec.  Hard to pin that amount of time on this.  It varies some without any changes.  I did not code this to be efficient.  Here is the process in python.  Perhaps_co_ someone could write an equivalent in JS for the serializer.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_def format_f(num)_dd_\n    s _eq_ MAX_FLOAT_PRECISION % num # rounds to N decimal places while changing to string\n    s _eq_ s.rstrip(_t_0_t_) # strip trailing zeroes\n    s _eq_ s.rstrip(_t_._t_) # strip trailing .    \n    s _eq_ _t_0_t_ if s _eq__eq_ _t_-0_t_ else s # nuke -0\n    \n    asNum _eq_ float(s)\n    if asNum !_eq_ 0 and asNum &gt_sm_ -1 and asNum &lt_sm_ 1_dd_\n        if asNum &lt_sm_ 0_dd_\n            s _eq_ _t_-_t_ + s[2_dd_]\n        else_dd_\n            s _eq_ s[1_dd_]\n        \n    return s_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThe interesting part of the log file_co_ basically 17k verts\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\tprocessing begun of mesh_dd_  Body\n\t\tprocessing begun of Standard material_dd_  Body_dd_Young_asian_female\n\t\t\tDiffuse texture found _qt_young_lightskinned_female_diffuse3_qt_\n\t\t\t\tImage texture found_co_ type_dd_  diffuseTexture_co_ mapped using_dd_ _qt_UVMap_qt_\n\t\t\t\tWARNING_dd_ Opacity non-std way to indicate opacity_co_ use material alpha to also use Opacity texture\n\t\tprocessing begun of Standard material_dd_  Tongue01_dd_Tongue01material\n\t\t\tDiffuse texture found _qt_tongue01_diffuse_qt_\n\t\t\t\tImage texture found_co_ type_dd_  diffuseTexture_co_ mapped using_dd_ _qt_UVMap_qt_\n\t\t\t\tWARNING_dd_ Opacity non-std way to indicate opacity_co_ use material alpha to also use Opacity texture\n\t\tprocessing begun of Standard material_dd_  Teeth_base_dd_Teethmaterial\n\t\t\tDiffuse texture found _qt_teeth_qt_\n\t\t\t\tImage texture found_co_ type_dd_  diffuseTexture_co_ mapped using_dd_ _qt_UVMap_qt_\n\t\t\t\tWARNING_dd_ Opacity non-std way to indicate opacity_co_ use material alpha to also use Opacity texture\n\t\tprocessing begun of Standard material_dd_  Eyelashes02_dd_Bodymaterial\n\t\t\tDiffuse texture found _qt_eyelashes02_qt_\n\t\t\t\tImage texture found_co_ type_dd_  diffuseTexture_co_ mapped using_dd_ _qt_UVMap_qt_\n\t\t\t\tWARNING_dd_ Opacity non-std way to indicate opacity_co_ use material alpha to also use Opacity texture\n\t\tprocessing begun of Standard material_dd_  Eyebrow001_dd_Eyebrow001\n\t\t\tDiffuse texture found _qt_eyebrow001_qt_\n\t\t\t\tImage texture found_co_ type_dd_  diffuseTexture_co_ mapped using_dd_ _qt_UVMap_qt_\n\t\t\t\tWARNING_dd_ Opacity non-std way to indicate opacity_co_ use material alpha to also use Opacity texture\n\t\tprocessing begun of Standard material_dd_  High-poly_dd_Eye_deepblue\n\t\t\tDiffuse texture found _qt_deepblue_eye_qt_\n\t\t\t\tImage texture found_co_ type_dd_  diffuseTexture_co_ mapped using_dd_ _qt_UVMap_qt_\n\t\t\t\tWARNING_dd_ Opacity non-std way to indicate opacity_co_ use material alpha to also use Opacity texture\n\t\tprocessing begun of multimaterial_dd_  voice_sync_female.Multimaterial#0\n\t\tnum positions      _dd_  12674\n\t\tnum normals        _dd_  12674\n\t\tnum uvs            _dd_  25348\n\t\tnum uvs2           _dd_  0\n\t\tnum colors         _dd_  0\n\t\tnum indices        _dd_  58812\n\t\tShape Keys_dd_\n\t\t\tMakeHuman shape key consolidation performed\n\t\t\tshape key _qt_FACE-MOUTH_OPEN_qt__dd_  n verts different from basis_dd_ 4116\n\t\t\tshape key _qt_FACE-LIPS_LOWER_IN_qt__dd_  n verts different from basis_dd_ 420\n\t\t\tshape key _qt_FACE-LIPS_PART_qt__dd_  n verts different from basis_dd_ 429\n\t\t\tshape key _qt_FACE-MOUTH_WIDE_qt__dd_  n verts different from basis_dd_ 603\n\t\t\tshape key _qt_FACE-MOUTH_UP_qt__dd_  n verts different from basis_dd_ 717\n\t\t\tshape key _qt_FACE-LIPS_MID_UPPER_UP_qt__dd_  n verts different from basis_dd_ 284\n\t\t\tshape key _qt_FACE-LIPS_MID_LOWER_DOWN_qt__dd_  n verts different from basis_dd_ 160\n\t\t\tshape key _qt_FACE-TONGUE_qt__dd_  n verts different from basis_dd_ 284\n\t\t\tshape key _qt_FACE-HAPPY_qt__dd_  n verts different from basis_dd_ 3286\n\t\t\tshape key _qt_FACE-SAD_qt__dd_  n verts different from basis_dd_ 5460\n\t\t\tshape key _qt_FACE-ANGRY_qt__dd_  n verts different from basis_dd_ 3160\n\t\t\tshape key _qt_FACE-SCARED_qt__dd_  n verts different from basis_dd_ 5974\n\t\t\tshape key _qt_FACE-LAUGHING_qt__dd_  n verts different from basis_dd_ 6722\n\t\t\tshape key _qt_FACE-CRYING_qt__dd_  n verts different from basis_dd_ 4005\n\t\t\tshape key _qt_FACE-DETERMINED_qt__dd_  n verts different from basis_dd_ 2975\n\t\t\tshape key _qt_FACE-STRUGGLING_qt__dd_  n verts different from basis_dd_ 4466\n\t\t\tshape key _qt_FACE-DISGUSTED_qt__dd_  n verts different from basis_dd_ 3902\n\t\t\tshape key _qt_FACE-SKEPTICAL_qt__dd_  n verts different from basis_dd_ 1081\n\t\t\tshape key _qt_FACE-CUSTOM1_qt__dd_  n verts different from basis_dd_ 1794\n\t\t\tshape key _qt_FACE-CUSTOM2_qt__dd_  n verts different from basis_dd_ 6119\n\t\tShape-key group_co_ FACE_co_ # of affected vertices_dd_ 8100_co_ out of 12674\n\tprocessing begun of mesh_dd_  Long01\n\t\tprocessing begun of Standard material_dd_  Long01_dd_Long01\n\t\t\tDiffuse texture found _qt_long01_diffuse_qt_\n\t\t\t\tImage texture found_co_ type_dd_  diffuseTexture_co_ mapped using_dd_ _qt_UVMap_qt_\n\t\t\t\tWARNING_dd_ Opacity non-std way to indicate opacity_co_ use material alpha to also use Opacity texture\n\t\tnum positions      _dd_  3415\n\t\tnum normals        _dd_  3415\n\t\tnum uvs            _dd_  6830\n\t\tnum uvs2           _dd_  0\n\t\tnum colors         _dd_  0\n\t\tnum indices        _dd_  12324\n_eq__eq__eq__eq__eq__eq__eq__eq__eq_ Writing of files started _eq__eq__eq__eq__eq__eq__eq__eq__eq_\n_eq__eq__eq__eq__eq__eq__eq__eq__eq_ Writing of files completed _eq__eq__eq__eq__eq__eq__eq__eq__eq_\n_eq__eq__eq__eq__eq__eq__eq__eq__eq_ end of processing _eq__eq__eq__eq__eq__eq__eq__eq__eq_\nelapsed time_dd_  0 min_co_ 8.1066 secs_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2016-04-06T02:55:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tJavascript definitely doesn_t_t require a zero before the decimal point_co_ per the spec. Linters may complain but it should be completely safe!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-04-06T16:19:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tAgree with fenomas. This SHOULD (!!) not be a problem and it deserves a try _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-04-08T15:57:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI feel real confident that this works.  Reason is I just Gulped / minified a file out of Tower of Babel_co_ and did not get as much compression I used to get.  I suspected the reason was Gulp also stripped leading zeros.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Extensions/blob/master/Dialog/fonts/Font2D_EXT.js_qt_ rel_eq__qt_external nofollow_qt__gt_Here_lt_/a_gt_ is a pretty old Tower of Babel output that was Gulped.  Was not generated with leading zeros removed_co_ but they are gone.  (You have to scroll a few pages to the right to see one.)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf Gulp is pulling them out_co_ it must work everywhere!  Of course_co_ a .babylon file cannot be gulped.  The Blender exporter has been generating tighter &amp_sm_ tighter files_co_ as indicated from this _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/20936-blender-exporter-issue/_qt_ rel_eq__qt__qt__gt_thread_lt_/a_gt_.  When this feature finally makes it to the .babylon exporter_co_ chop another 10+% out of the file!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-05-09T17:24:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tWell the pussy JSON.parse() will not accept values without the leading zero.  Sorry .babylon users.  In-line JS rules_lt_img alt_eq__qt__dd_P_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ title_eq__qt__dd_P_qt_ width_eq__qt_20_qt_ /_gt_.  It works fine in Tower of Babel in-line JS generator.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-05-09T23:24:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tPerhaps we should leave only one 0 _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-05-10T05:50:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/8492-jcpalmer/?do_eq_hovercard_qt_ data-mentionid_eq__qt_8492_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/8492-jcpalmer/_qt_ rel_eq__qt__qt__gt_@JCPalmer_lt_/a_gt_ - it is always safe to use additional zeros in interger values. However_co_ as you know_co_ this doesn_t_t often work the other way - by using only integer values.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCommon example_dd_ .\n_lt_/p_gt_\n\n_lt_p_gt_\n\t        // use_dd_ pick_color.r_co_ pick_color.g_co_ pick_color.b_lt_br /_gt_\n\t        //var r _eq_ parseFloat(pick_color.r) * 255_sm__lt_br /_gt_\n\t        //var g _eq_ parseFloat(pick_color.g) * 255_sm__lt_br /_gt_\n\t        //var b _eq_ parseFloat(pick_color.b) * 255_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ve been monitoring my mobile performance tests using XDK to emulate mobile devices_co_ and have found no detectible performance issues in using many variables utilizing float values compared to integer values. We_t_ve come a long way baby! _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"gryff","Date":"2016-05-10T06:37:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_span_gt_@_lt_/span_gt_dbawel - I think Jeff is looking at things like animations which have values between 0 and 1. 40 bones with 300 frames and 16 float values/per frame - leaving out the leading zero can reduce the file size of the babylon file.. And of course the UVs of meshes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd Jeff has seriously reduced the file size of the babylon export from Blender - still looking for more _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tcheers gryff _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-05-10T16:06:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/7026-gryff/?do_eq_hovercard_qt_ data-mentionid_eq__qt_7026_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/7026-gryff/_qt_ rel_eq__qt__qt__gt_@gryff_lt_/a_gt_ - yep_co_ that_t_s something I didn_t_t consider. However_co_ I don_t_t see enough substancial memory usage from adding a 0 to non integer values in any case. But good point - I should have read his posts more carefully to see what the whole issue was.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-05-10T16:13:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/7026-gryff/?do_eq_hovercard_qt_ data-mentionid_eq__qt_7026_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/7026-gryff/_qt_ rel_eq__qt__qt__gt_@gryff_lt_/a_gt_ I think you just saw the last attempt to decrease size for the .babylon format.  Even the in-line JS format has only one more 20 - 30% reduction coming.  That huge drop when Blender started optimizing meshes when they also had skeleton is not repeatable.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEven with the leading zeros gone from the the JS format_co_ the .babylon format is still slightly smaller_co_ initially.  That Is because I have tried to make the code as readable as possible with many line breaks and space character based indenting_co_ not tab based.  Gulp rips all that out and more_co_ of course.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"gryff","Date":"2016-05-10T16:55:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_span_gt_@JCPalmer. Jeff_co_  I_t_ve been impressed with the reductions in file size (as I _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/20936-blender-exporter-issue-resolved/_qt_ rel_eq__qt__qt__gt_documented here_lt_/a_gt_) and the improvement in readability I_t_ve also noticed. But the reduction in file size has also helped with the readability issue too. I use Notepad++  for coding and looking at .babylon files. Notepad++ has always had_co_ for me at least_co_ issues with large files - so with the file size reduction AND the file layout changes for readability_co_ there is a big improvement in how Notepad++ handles .babylon files_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_cheers_co_ gryff _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-05-10T17:07:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/11286-dbawel/?do_eq_hovercard_qt_ data-mentionid_eq__qt_11286_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/11286-dbawel/_qt_ rel_eq__qt__qt__gt_@dbawel_lt_/a_gt__co_ on the memory representation front_co_ the reason you see no difference between a JS number or array of numbers_co_ whether they are integer or not is_dd_  all JS numbers are float 64.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow if you or another .babylon format user was concerned about CPU memory_co_ I would change how vertex data is loaded.  Right now_co_ I believe_co_ vertex data is loaded as a JS number[]_co_ when coming from a .babylon.  The data cannot be passed to openGL like that. A Float32Array object is created and copied to pass data_co_ then thrown away.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI changed VertexBuffer to accept &amp_sm_ store the array as a Number[] or Float32Array object in BJS 2.3.  This enabled the potential for higher morph rates (QueuedInterpoation extension is entirely Float32Array based)_co_ since no temp Float32Array need be created / garbage collected every frame.  This should also reduce the memory footprint of the biggest things in the VM by 50% being 32 bits instead of 64.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe in-line JS format creates permanent Float32Array backers for VertexBuffer_co_ right off the bat.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-05-10T18:49:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/8492-jcpalmer/?do_eq_hovercard_qt_ data-mentionid_eq__qt_8492_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/8492-jcpalmer/_qt_ rel_eq__qt__qt__gt_@JCPalmer_lt_/a_gt_ - \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI assumed it had to be float64 or float32_co_ but duh.... I didn_t_t consider this in my empty mind..._lt_img alt_eq__qt__dd_blink_dd__qt_ data-emoticon_eq__qt__qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_blink.png_qt_ title_eq__qt__dd_blink_dd__qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tI need to think a bit more in the future_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"lesterhaus","Date":"2016-05-11T19:11:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tdon_t_t know if this will earn me a _qt_no shit einstein!_qt_ .. but I_t_m going to write it regardless _lt_img alt_eq__qt__dd_P_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ title_eq__qt__dd_P_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m transforming a lot of DXF files to .babylon files and had quite some playtime with this. Since the initial load and the file size was one of my biggest issues I ended up to only include positions and normals in my babylon scene file and calculating UVs in the loading callback. that basically stripped over 1/2 of my filesize. I_t_d strip the normals too if I could_co_ but I need them for some server side analysis of the meshes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tGranted_co_ I_t_m mainly importing architecture models_co_ so I_t_m dealing with many _qt_flat_qt_ face normals and larger but fewer meshes so I only need to do planar mapping. But the additional time computing the UVs compared to loading a file with UVs at least felt about the same.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnyways_co_ if your use case is remotely close to mine and if it is an option for you_co_ I_t_d really recommend to compute UVs and even normals on load to reduce the file size.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-05-11T20:51:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tComplex textures would not allow for UV calculation_co_ like for this texture for teeth_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_05/teeth.png.08a7517999d741d98ab5ded97d61da00.png_qt_ data-fileid_eq__qt_7627_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_7627_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_05/teeth.thumb.png.cf0f844a6e5d100aba20d847b783f100.png_qt_ alt_eq__qt_teeth.png_qt_ /_gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn fact_co_ BJS can calculate normals.  I could put an option in the in-line JS exporter I have for Blender to calc on the BJS side.  You can do things like turn things inside out in Blender_co_ so it would have to be optional.  Would support BJS calculated normals_co_ if the feature was added for .babylon loading_co_ but I am not adding the feature.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]