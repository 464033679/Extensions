[{"Owner":"018","Date":"2016-12-16T05:57:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIn the Instances demo_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs.com/Demos/Instances/instances.js_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/Demos/Instances/instances.js_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_ // Trees\n_lt_/code_gt__lt_code_gt_        BABYLON.SceneLoader.ImportMesh(_qt__qt__co_ _qt_../../assets/Tree/_qt__co_ _qt_tree.babylon_qt__co_ scene_co_ function (newMeshes_lt_/code_gt__lt_code_gt_) {\n_lt_/code_gt__lt_code_gt_            newMeshes[0].material.opacityTexture _eq_ null_sm_\n_lt_/code_gt__lt_code_gt_            newMeshes[0].material.backFaceCulling _eq_ false_sm_\n_lt_/code_gt__lt_code_gt_            newMeshes[0].isVisible _eq_ false_sm_\n_lt_/code_gt__lt_code_gt_            newMeshes[0].position.y _eq_ ground.getHeightAtCoordinates(0_co_ 0)_sm_ // Getting height from ground_lt_/code_gt__lt_code_gt_ object\n_lt_/code_gt__lt_code_gt_\n_lt_/code_gt__lt_code_gt_            shadowGenerator.getShadowMap().renderList.push(newMeshes[0])_sm_\n_lt_/code_gt__lt_code_gt_            var range _eq_ 60_sm_\n_lt_/code_gt__lt_code_gt_            var count _eq_ 100_sm_\n_lt_/code_gt__lt_code_gt_            for (var index _eq_ 0_sm_ index &lt_sm_ count_sm_ index++) {\n_lt_/code_gt__lt_code_gt_                _lt_strong_gt_var newInstance _eq_ newMeshes[0].createInstance(_qt_i_qt_ + index)_sm__lt_/strong_gt__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tImportMesh returns an AbstractMesh array which is then accessed by index and then .createInstance() is called on it.  There_t_s no method for that in typescript as far as I can see in 2.4 and 2.5.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow can you create an InstancedMesh in Typescript properly?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis seems to work by bypassing types.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t        let mesh2 _dd_ any _eq_ mesh_sm__lt_br /_gt_\n\t        let instance _dd_ BABYLON.InstancedMesh _eq_ &lt_sm_BABYLON.InstancedMesh&gt_sm_ mesh2.createInstance(_t_instance1_t_)_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-12-16T22:32:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tyou are correct. This ( _lt_span style_eq__qt_color_dd_rgb(39_co_42_co_52)_sm_font-family_dd__t_Helvetica Neue_t__co_ Helvetica_co_ Arial_co_ sans-serif_sm_font-size_dd_14px_sm_font-style_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm_background-color_dd_rgb(255_co_255_co_255)_sm_float_dd_none_sm__qt__gt_&lt_sm_BABYLON.InstancedMesh&gt_sm_ mesh2.createInstance(_t_instance1_t_)_sm__lt_/span_gt_ ) is the right way to do it\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"018","Date":"2016-12-17T05:21:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tAwesome - thanks.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]