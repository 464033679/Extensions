[{"Owner":"mewe","Date":"2015-12-13T18:34:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi forum_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_i want to use order independent transparency (OIT)  by using the _qt_multiplicative blending_qt_ approach outlined in this article._lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.openglsuperbible.com/2013/08/20/is-order-independent-transparency-really-necessary/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.openglsuperbible.com/2013/08/20/is-order-independent-transparency-really-necessary/_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Out of the box Babylon.js already supports the _qt_sorting approach_qt__co_ by implementing the third rendering step documented here_dd_ (_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/Transparency_and_How_Meshes_Are_Rendered_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/Transparency_and_How_Meshes_Are_Rendered_lt_/a_gt_)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But this will not work for overlapping meshes (which I need). In addition the multiplicative approach does not need the sorting step._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I believe_co_ that _qt_injecting_qt_ an additional  step after rendering sorted alpha blended meshes and before rendering sprites would be a solution. My question are_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_Does this approach make sense in the Babylon world?_lt_/li_gt__lt_li_gt_And if so_co_ how could  I implement it without changing Babylon itself_lt_/li_gt__lt_/ul_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"NasimiAsl","Date":"2015-12-13T19:06:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_r u use threejs before that? _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-12-14T00:10:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_How about using the multiply blend mode? _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/How_to_use_Blend_Modes_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/How_to_use_Blend_Modes_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Adding an additional rendering category for meshes would require some heavy modification of the BJS core. So_co_ not really feasible in my opinion _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-12-14T16:32:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I find this really interesting. How do you want to implement it in details. I can easily support this by providing a new step _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"mewe","Date":"2015-12-15T09:00:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_After looking at the source code_co_ I believe Babylon is almost there!_lt_/p_gt__lt_p_gt_What we want to do is_dd_ render  meshes after the opaque ones and with depth testing turned on_co_ depth writing turned off and ALPHA_MULTIPLY as blending mode. That means_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_create a mesh with Mesh.renderingGroupId _eq_ 3_lt_/li_gt__lt_li_gt__lt_p_gt_create a material with Material.alphaMode_eq_ALPHA_MULTIPLY and Material.disableDepthWrite_eq_true_lt_/p_gt__lt_/li_gt__lt_li_gt__lt_p_gt_use this material for the mesh_lt_/p_gt__lt_/li_gt__lt_/ul_gt__lt_p_gt_could already do the trick and bypass the unwanted sorting step. (if the mesh does not end up in the array of transparent submeshes). I will give this a try_co_ and see what happens._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If that does not work out one solution would be to_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_Invent an new material class (ie LightAttenuationMaterial) or addtional properties in StandardMaterial as a flag to use the corresponing meshes in a new submesh category_lt_/li_gt__lt_li_gt_Invent a new internal submesh category for use in RenderingGroup.render._lt_/li_gt__lt_li_gt_During scene traversal add meshes with the new material (or properties) in the new submesh category_lt_/li_gt__lt_li_gt_In RengeringGroup.render draw the meshes in the new submesh category but without sorting by distance_lt_/li_gt__lt_/ul_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-12-15T16:19:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Sounds good! Let me now how this goes!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"mewe","Date":"2015-12-16T18:14:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Unfortunately it does not work out. But I just don_t_t know why. I have prepared a playground scene_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1WIGS8%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1WIGS8#3_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I can see_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_The short cylinder is somewhat transparent against the long cylinder_co_ but not against the ground. (Turn around a bit to see). The long cylinder is not transparent at all._lt_/li_gt__lt_li_gt_it is quit unclear to me_co_ whether blending is correctly enabled. Both meshes use the same material_co_ but behave different!_lt_/li_gt__lt_li_gt_Uncommenting the _qt_hasVertexAlpha_qt_ lines brings back transparency but only because the _qt_transparent submeshes_qt_ in RenderingGroup.render and the sorting step in again._lt_/li_gt__lt_/ul_gt__lt_p_gt_I will try another idea_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_Add a _qt_disableDethSorting_qt_ property to StandardMaterial_lt_/li_gt__lt_li_gt_Derive a new class from StandardMaterial_co_ that always returns true from needsAlphaBlending() and sets the new property from above to true._lt_/li_gt__lt_li_gt_Tweak the RenderingGroup.render function to omit the sorting step_co_ if the new property is set._lt_/li_gt__lt_/ul_gt__lt_p_gt_If that works out better_co_ maybe that is the way to go_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-12-16T19:27:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_As long as the engine does not add them to the transparent meshes list they won_t_t use alpha blending_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_but you can use mesh.alphaIndex to force the sorting to always produce the same result_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1WIGS8%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1WIGS8#4_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"mewe","Date":"2015-12-18T22:53:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Just changed the playground again and followed your advice._lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1WIGS8%236_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1WIGS8#6_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The result is not physically correct or something but quite convincing and works our reasonable fast. Due to the way how  rendering currently works_co_ is is not possible to bypass the (unnecessary) sorting step._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In _qt_Three.JS_qt_ you can use the same setup with multiplicative blending and not  sorting anything in the renderer._lt_/p_gt__lt_p_gt_(Use _qt_sortObject_eq_false_qt_ on the renderer object_co_  use _qt_renderOrder_eq_???_qt_ on the meshes. enable blending_co_  disable depth writes and you are set. I have tested it and it works well!)_lt_/p_gt__lt_p_gt_In theory this will give ThreeJS  a performance advantage over BABYLON_co_ but that needs confirmation. Maybe the ThreeJS way of thinking_co_ is an idea for a future BABYLON version._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In any way thanks for all support. Have a nice Christmas and a Happy New Year!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-12-19T09:13:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_For your example to be more realistic_co_ you should disable back face culling_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1WIGS8%237_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1WIGS8#7_lt_/a_gt__lt_/p_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_This makes sense as both sides of the objects would retain a fraction of the light that goes through. That is assuming you want your objects to have a _qt_tainted glass_qt_ sort of material_co_ such as in the article you linked in the OP._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_p_gt_Also_co_ sorting has absolutely no influence in this scene as we_t_re using the multiply blend mode. Let_t_s call A the color of the background_co_ B the color of the wide cylinder and C the color of the narrow one. We have A x B x C _eq_ A x C x B._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Anyway_co_ I_t_d be curious to see the end result you_t_re looking for _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"mewe","Date":"2015-12-19T11:00:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thank you for the tip. Looks really good to me and maybe _qt_TaintedGlassMaterial_qt_ could be a nice name for a future BABYLON class. I am totally happy with the results right now._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For the sorting_dd_ that is exactly the point I wanted to bring home!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p style_eq__qt_text-align_dd_center_sm__qt__gt__lt_em_gt_Sorting is not necessary for multiplicative blending_co_ because the blending operation is commutative._lt_/em_gt__lt_/p_gt__lt_p style_eq__qt_text-align_dd_center_sm__qt__gt_ _lt_/p_gt__lt_p_gt_In the rendering code below (taken from babylon-2.2) the steps for calculating the bounding box_co_ camera distance and sorting could be totally avoided_co_ if we could somehow hint the engine_co_ that we are using some form of commutative blending function. If the number of meshes drawn with commutative blending is large_co_ one could earn a real performance gain._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_            // Transparent            if (this._transparentSubMeshes.length) {                // Sorting                for (subIndex _eq_ 0_sm_ subIndex &lt_sm_ this._transparentSubMeshes.length_sm_ subIndex++) {                    submesh _eq_ this._transparentSubMeshes.data[subIndex]_sm_                    submesh._alphaIndex _eq_ submesh.getMesh().alphaIndex_sm_                    submesh._distanceToCamera _eq_ submesh.getBoundingInfo().boundingSphere.centerWorld.subtract(this._scene.activeCamera.globalPosition).length()_sm_                }                var sortedArray _eq_ this._transparentSubMeshes.data.slice(0_co_ this._transparentSubMeshes.length)_sm_                sortedArray.sort(function (a_co_  {                    // Alpha index first                    if (a._alphaIndex &gt_sm_ b._alphaIndex) {                        return 1_sm_                    }                    if (a._alphaIndex &lt_sm_ b._alphaIndex) {                        return -1_sm_                    }                    // Then distance to camera                    if (a._distanceToCamera &lt_sm_ b._distanceToCamera) {                        return 1_sm_                    }                    if (a._distanceToCamera &gt_sm_ b._distanceToCamera) {                        return -1_sm_                    }                    return 0_sm_                })_sm_                // Rendering                                for (subIndex _eq_ 0_sm_ subIndex &lt_sm_ sortedArray.length_sm_ subIndex++) {                    submesh _eq_ sortedArray[subIndex]_sm_                    submesh.render(true)_sm_                }_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"mewe","Date":"2015-12-19T11:09:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_109056_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_19228_qt_ data-ipsquote-username_eq__qt_NasimiAsl_qt_ data-cite_eq__qt_NasimiAsl_qt_ data-ipsquote-timestamp_eq__qt_1450033579_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_r u use threejs before that? _lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Not until the day before yesterday_co_ You gave me a hint to try  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What I see_co_ is that ThreeJS basically follows the same procedure for rendering. Draw opaque objects first and then the transparent objects. It implements the same sorting by camera distance or  some user defined index stuff._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But ThreeJS allows to disable the sorting step (which is not necessary for commutative blending functions)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]