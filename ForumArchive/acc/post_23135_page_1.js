[{"Owner":"vegabook","Date":"2016-06-11T22:25:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI am a data scientist needing to visualize large multi-dimensional tensors_co_ and flat-plane geometries are no longer sufficient for this as the data has become too big. I am thus (just beginning) exploring browser-based 3d engines because three dimensions plus animation can help to go to four dimensional data monitoring. However my initial tinkering seems to show that Babylon.js may be too slow for me. _lt_br /_gt__lt_br /_gt_\n\tI have this code to draw 20*20*20 _eq_ 8000 boxes using CreateBox_dd_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                var carrier _eq_ []_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                var nb _eq_ 20_sm__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                for(x _eq_ 0_sm_ x &lt_sm_ nb_sm_ x++) {_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                  carrier[x] _eq_ []_sm__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                  for(y _eq_ 0_sm_ y &lt_sm_ nb_sm_ y++) {_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                    carrier[x][y] _eq_ []_sm__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                    for(z _eq_ 0_sm_ z &lt_sm_ nb_sm_ z++) {_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                      carrier[x][y][z] _eq_ BABYLON.Mesh.CreateBox(_t_sphere_t_ + x + y + z_co_ 0.1_co_ scene)_sm__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                      carrier[x][y][z].position.x _eq_ x_sm__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                      carrier[x][y][z].position.y _eq_ y_sm__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                      carrier[x][y][z].position.z _eq_ z_sm__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                    }_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                  }_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p style_eq__qt_margin_dd_0px_sm_font-size_dd_14px_sm_line-height_dd_normal_sm_font-family_dd_Inconsolata_sm_color_dd_rgb(255_co_64_co_165)_sm_background-color_dd_rgb(0_co_0_co_0)_sm__qt__gt_\n\t_lt_span_gt_                }_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\twhich replaces the createSphere and sphere.position lines in the basic Playground example which can be found _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com_qt_ rel_eq__qt_external nofollow_qt__gt_here_lt_/a_gt_.  \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#9GSD0%230_qt_ rel_eq__qt_external nofollow_qt__gt_Here it is in the Playground. _lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHowever on a 3 year old i7 mac mini_co_ admittedly with no dedicated GPU_co_ I am only getting about 7 fps_co_ whereas _lt_a href_eq__qt_https_dd_//www.chromeexperiments.com/experiment/webgl-cubes_qt_ rel_eq__qt_external nofollow_qt__gt_this example_lt_/a_gt_ using three.js draws 150k_co_ cubes_co_ so 20x more_co_ and on the same machine I easily get up to 40fps quite reliably. _lt_br /_gt__lt_br /_gt_\n\tSo is three.js a couple of orders of magnitude faster? Or is my code above too naive? I can see a situation where I will need 100 x 100 x 100 _eq_ 1e6 cubes on the page_co_ each coloured slightly differently and I will need to be able to _qt_fly around_qt_ and inside the cube relatively fast so that I can explore it for data features. Is Babylon.js going to be able to do this (assuming a faster machine)? I would like to hope so because I love the documentation and what I see on the forums so far. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tPlease assume that I am a complete beginner to 3d animation. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_br /_gt__lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2016-06-11T22_dd_28_dd_47Z_t_ title_eq__t_06/11/2016 10_dd_28  PM_t_ data-short_eq__t_2 yr_t__gt_June 11_co_ 2016_lt_/time_gt_ by vegabook_lt_/strong_gt_\n\t\n\t\t_lt_br_gt_added Playground example\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Samuel Girardin","Date":"2016-06-12T09:42:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello and welcome !\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou should give a try to the spsPartcile _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/overviews/Solid_Particle_System_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/overviews/Solid_Particle_System_lt_/a_gt_ . Maybe it could solve you perf forum.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-06-12T11:57:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tActually the SPS (solid particle system) is designed in this intention _dd_ animate a great amount of similar (or not) 3D shapes. It uses_co_ in a easiest way for the final user_co_ the same process than the one used in the ThreeJS link you mentionned _dd_ a single big geometry whom you can access its subparts (the solid particles)_co_ one draw call.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe SPS can easily manage 8000 boxes at 60 fps. For 1E6 boxes_co_ I_t_m afraid you will be over the javascript/webGL limitations for now... it_t_s really a huge number_co_ but maybe you don_t_t need to display or animate all of them at once each frame _dd_ over some limit_co_ no user eye will be able to see the difference between_co_ say_co_ 20K_co_ 30K_co_ and more instances_co_ just because they can hardly be seen at the same time and because of the screen resolution. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tdoc here _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/overviews/Solid_Particle_System_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/overviews/Solid_Particle_System_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t(the http doc site  has the _qt_eye_qt_ icon links working_co_ not the https one currently)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t[EDIT] please have a read to this recent topic about someone who had quite the same need than you... and who finally succeeded with BJS _dd_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_iframe data-embedcontent_eq__qt__qt_ frameborder_eq__qt_0_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/topic/22644-have-a-three-js-app-considering-converting/?do_eq_embed_qt__gt__lt_/iframe_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tfollowed here _dd_ \n_lt_/p_gt_\n_lt_iframe data-embedcontent_eq__qt__qt_ frameborder_eq__qt_0_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/topic/22924-uv-values-and-solid-particles/?do_eq_embed&amp_sm_embedComment_eq_130991&amp_sm_embedDo_eq_findComment#comment-130991_qt__gt__lt_/iframe_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2016-06-12T12:23:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWelcome to the forum.  Related to the project Jerome just mentioned is this playground _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2FPT1A%2392_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2FPT1A#92_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is from this related topic\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_iframe data-embedcontent_eq__qt__qt_ frameborder_eq__qt_0_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/topic/22924-uv-values-and-solid-particles/?do_eq_embed_qt__gt__lt_/iframe_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou would I assume be using colours not textures but you can see what can be done.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBy the way when I studied maths at university tensors and tensor algebra was that one step too far for me.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-06-12T12:59:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tmaybe this one is just a bit less aggressive for epilecptic people _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2FPT1A%2391_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2FPT1A#91_lt_/a_gt_ _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tare speaking about these tensors _dd_ _lt_a href_eq__qt_https_dd_//en.wikipedia.org/wiki/Tensor_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//en.wikipedia.org/wiki/Tensor_lt_/a_gt_ ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tseems quite complex indeed\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"vegabook","Date":"2016-06-12T17:26:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks you for the responses. I have looked at the SPS particle system and indeed it is exactly what I need.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOn my modest hardware here at home_co_ I have already gotten _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2FPT1A%2395_qt_ rel_eq__qt_external nofollow_qt__gt_very credible_lt_/a_gt_ results with this suggestion.  We_t_re in the same performance envelope as the three.js sample I cited so I am very happy. As jerome said I will not need to view 100x100x100 simultaneously_co_ but it was just for a sense of the scale of the webgl and Babylon.js technology at the moment. I think I will be viewing far fewer than 100k at the moment_co_ let alone 1 million_co_ though I am keen to be able to see a lot because our brains are quite good at discerning patterns even if there are very many thing we are looking at at the same time. Think about grains of sand on a beach or grass_dd_ we are able to find even subtle patterns in these (if they exist)_co_ even though we may be looking at a million of them or more.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIndeed_co_ JohnK_co_  tensors are highly unintuitive because we can no longer rely on our physical-world intuitions_co_ which are designed for 3d and _lt_em_gt_maybe_lt_/em_gt_ 4d if you consider time. However they are mathematically enormously useful as we may use projections to _qt_slice_qt_ our data into views which can be extremely interesting_co_ and there are major algorithmic benefits if we can keep all the factors affecting our problem in a single memory structure_co_ as the (potentially nonlinear_co_ and potentially very subtle) relationships are more easy to find. Needless to say_co_ however_co_ the memory use is potentially enormous_co_ and of course all the calculation will not be done browser side. Indeed one of the challenges is fast communication between browser and server. It is to manage these data complexities that so many _qt_big data_qt_ technologies are now being developed. I_t_m a bit old fashioned however and am simply adding RAM. 256 Gigabytes RAM in my current compute server machine. Some big companies have petabytes. I personally will not need this (yet). But one area which is _lt_em_gt_massively_lt_/em_gt_ being left behind_co_ is the visualization side of this scale of data. 3d + animation + interactivity to _qt_slice-on-demand_qt_ is going to be mandatory. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI will post as and when I do interesting things will Babylon.js and I thank you for showing me the SPS.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor an example of _qt_projecting_qt_ up to 6d onto a 2d screen_co_ have a look at this (fairly old but excellent) video. Note the (exponentially increasing) use of the time dimension to animate in order to see dimensions 4 through 6. Interactivity and slicing would help here too of course.\n_lt_/p_gt_\n\n_lt_div class_eq__qt_ipsEmbeddedVideo_qt__gt_\n\t_lt_div_gt_\n\t\t_lt_iframe allowfullscreen_eq__qt_true_qt_ frameborder_eq__qt_0_qt_ height_eq__qt_344_qt_ src_eq__qt_https_dd_//www.youtube.com/embed/-x4P65EKjt0?feature_eq_oembed_qt_ width_eq__qt_459_qt__gt__lt_/iframe_gt_\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-06-12T18:15:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tGlad to hear you could achieve what you want _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tPlease feel fre to share your (lighter) prototype in our playground (aka PG) _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/_lt_/a_gt_ if you need some help to tweak the SPS or any other parts of BJS. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]