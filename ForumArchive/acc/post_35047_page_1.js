[{"Owner":"unicorn","Date":"2018-01-13T19:42:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi all_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am new to the amazing Babylon.js and this is my first post in the forum!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s my problem. Let_t_s say that I have two meshes (these meshes might be randomly generated irregular polygons but for simplicity I am using two boxes). I merge them using CGS and then I flatten them by scaling the Y to zero (I am not sure if it is the correct way. I basically need to convert the 3D mesh to a 2D irregular polygon). I use a function to show the normals of the generated mesh and it shows me all the vertices. I only need to get the list of border vertices not the ones that falls inside the mesh. Upon getting the list_co_ I would like to calculate the length of each border edges. I created a playground to demonstrate the issue.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//playground.babylonjs.com/#HCH1F4_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//playground.babylonjs.com/#HCH1F4_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI appreciate your help.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"d13","Date":"2018-01-23T13:03:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is a fascinating problem!!!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDoes no one here have any ideas on how to solve it?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2018-01-24T16:14:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ Not only no one here_co_ but no one anywhere.   I_t_ve done some serious web-searches... trying to nail this too-long-zero-reply subject... and failed nicely.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have an idea... but it_t_s mega-sloppy.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe mesh must be Y-scaled to 0 (smashed flat) as Unicorn_t_s example does.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThen... sigh... _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1VITHH%2318_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1VITHH#18_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSee the pickInfo.distance down there in line 81?.  Although this is using camera-to-object ray_co_ it could use _lt_em_gt_someOrbitingMesh_lt_/em_gt_-to-object.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPerhaps_co_ concentrically orbit the testMesh (with another ray-shooter mesh or cam)_co_ and do a _lt_strong_gt_pick-distance check_lt_/strong_gt_ every 1 degree of orbit.  You end with a database of 360 distances.  Possibly_co_ you could gather worldSpace vec3 points-of-intersect_co_ too... handy later.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t(Perhaps use a box-shaped encircling_co_ and not circular?  *shrug*)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow_co_ get(positionKind) data for the testMesh... and go to work.  I think... you would have enough data at that point (ar ar)... to determine WHICH of the verts... are positioned on the outer edges.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaybe.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  (Bad method_co_ eh?  *nod*) \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe testMesh could have no _qt_caves_qt__co_ where outer-edge points could be hidden from an encircling pickingRay. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSort of like laser-scanning.  Somewhat like the _qt_lasso selection tool_qt_ in CorelPaint and other paint apps.  Just... painful.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"unicorn","Date":"2018-01-25T02:03:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThat_t_s a brilliant idea Wingnut.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think there should be a more mathematical workaround for this. One possible approach may be to get the position of normals. Then we convert them to 2D space by ignoring the Y values. We may be able to use convex hull algorithm to get to outer points. The following links may be good starting points.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//en.wikipedia.org/wiki/Gift_wrapping_algorithm_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//en.wikipedia.org/wiki/Gift_wrapping_algorithm_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/indy256/convexhull-js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/indy256/convexhull-js_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/AndriiHeonia/hull_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/AndriiHeonia/hull_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/mauriciopoppe/quickhull3d_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/mauriciopoppe/quickhull3d_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHowever_co_ one delicate issue that is happening here is that essentially I would like to remove all redundant vertices. If you take a look at the playground_co_ the desired result would be that the outer rectangle have only 4 vertices. But now it show them as 8 ( 2 vertices on the left and right edges are redundant as they are on the same path)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]