[{"Owner":"JCPalmer","Date":"2015-04-23T14:59:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I know the optimizing of inactive meshes is not a priority_co_ but thought I would report the observation that making a lot of them inactive / invisible does not reduce the cpu_co_ or increase FPS when cpu bound_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_public setLayerMask(maskId _dd_number){    for (var i _eq_ this._subs.length - 1_sm_ i &gt_sm__eq_ 0_sm_ i--){        if (this._subs[i] !_eq__eq_ null)            this._subs[i].setLayerMask(maskId)_sm_    }    this.layerMask _eq_ maskId_sm_    // need to make sure not pickable_co_ when mask is for suspended level    this.isVisible _eq_ maskId !_eq__eq_ DialogSys.SUSPENDED_DIALOG_LAYER_sm_}_lt_/pre_gt__lt_p_gt_Given that I have never seen line level cpu or run count profiling for javascript_co_ this may be useful to help pin down closer_co_ where much of the cpu overhead of having a mesh might really be._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_How to reproduce observation. _lt_/p_gt__lt_ol_gt__lt_li_gt_Run the Dialog Tester Scene.  _lt_a href_eq__qt_https_dd_//googledrive.com/host/0B6-s6ZjHyEwUfjlzYXJKMC1zLXdIaV81REJhbjdfRmczQTJFOEpjWWg2SUIwZVRRS0VsR28_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//googledrive.com/host/0B6-s6ZjHyEwUfjlzYXJKMC1zLXdIaV81REJhbjdfRmczQTJFOEpjWWg2SUIwZVRRS0VsR28_lt_/a_gt_\t_lt_/li_gt__lt_li_gt_Click the Use System Camera checkbox_co_ which will enable _qt_Dock_qt_ button._lt_/li_gt_\t_lt_li_gt_Turn on Debug layer with the checkbox. _lt_/li_gt_\t_lt_li_gt_Observe values of statistics_lt_/li_gt_\t_lt_li_gt_Temporarily hide statistics_co_ so the _qt_Dock_qt_ button can be clicked_lt_/li_gt_\t_lt_li_gt_Re-enable statistics_co_ &amp_sm_ compare._lt_/li_gt__lt_/ol_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-04-23T16:57:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The _qt_Dock_qt_ button looks disabled to me_co_ and clicking it doesn_t_t seem to have an effect. What_t_s it doing?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-23T17:17:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Those buttons are disabled initially_co_ sorry I missed a step_co_ added above.  Dock pushes a Panel on the modal stack_co_ docked to the top - center of the Window.  This temporally makes all the meshes on the main panel inactive_co_ so they cannot be picked._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-04-23T17:48:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Setting a mesh to inactive SHOULD improve CPU usage_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/babylon.scene.ts#L1231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/babylon.scene.ts#L1231_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It shortcuts CPU intensive stuff like frustum clipping_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-04-23T18:29:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yeah_co_ it does spend a lot of time in mesh selection with stuff turned off. Mostly computing world matrices_co_ which happens even when meshes are disabled._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-23T20:24:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Andy_co__lt_/p_gt__lt_p_gt_Looking at statistics with the _qt_Modal Stack_qt_ menu selected_co_ 753 meshes (700 active)_co_ I show _qt_Mesh selection_qt_ Duration at around 95 ms (after a while).   When I Click _qt_Dock_qt__co_ it only drops to about 65 ms with only about 29 active meshes.  If it was perfectly linear_co_ it would drop to 95 * (29/700)_co_ or 3.9 ms.  That is not even close to 65._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Looking at the section DK linked to.  Yes_co_ it would appear it HAS to be computeWorldMatrix_co_ BUT there is checking at the front to not always do it.  I added a counter_co_ which incremented only when it was actually done_co_ then changed my _qt_Input_qt_ button to write that number to console.  If nothing changed_co_ I can go minutes between _qt_Input_qt_ clicks and the value to console is same.  Something else is responsible._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_public static nCompWMs _eq_ 0_sm_public computeWorldMatrix(force?_dd_ boolean)_dd_ Matrix {    if (!force &amp_sm_&amp_sm_ (this._currentRenderId _eq__eq__eq_ this.getScene().getRenderId() || this.isSynchronized(true))) {        return this._worldMatrix_sm_    }    AbstractMesh.nCompWMs++_sm_    ....}_lt_/pre_gt__lt_p_gt_Was hoping that there was a defective check for not always doing it.  If it were_co_ fixing would improve everything_co_ not just for inactive meshes (not that important)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Really wish Javascript had a line level profiler.  It is critical for an interpreted language.  I had one way back in the mid 80_t_s with the Sharp APL interpreter. It saved my life over an over_co_ even though I had to code my own reports.  Netbeans_t_s Java profiler is to die for._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-04-24T02:32:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_JC_co_ are you not using the browser profilers?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_img src_eq__qt_http_dd_//i.imgur.com/lN6RJ0Q.png_qt_ alt_eq__qt_lN6RJ0Q.png_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_No need to guess where the time is being spent _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_(PS_dd_ Andy meaning me right?)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-24T19:24:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_fenomas_co__lt_/p_gt__lt_p_gt_Thanks I had never found the profiler before.  BTW_co_ yes thought you were Andy._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Now that I have this_co_ I know why computeWorldMatrix consumes so much cpu_co_ when it is not actually doing anything.  The test itself of check to see if it needs to do anything is very large. Normally_co_ you want the checking to save cpu to be as fast as possible.  See my profile with the inside of computeWorldMatrix._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_04_2015/post-8492-0-56517100-1429902045.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_04_2015/post-8492-0-56517100-1429902045_thumb.png_qt_ data-fileid_eq__qt_4141_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-8492-0-56517100-1429902045_thumb.pn_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_This scene can not only generate a huge # of clones_co_ but they are highly nested.  All this recursive parent checking for sync is a large waste of time.  If the recursion was in _evaluateActiveMeshes &amp_sm_ in the opposite direction (parent to child)_co_ the parent calling their children would already know if it was in sync and could pass it.  Not all scenes do as much parenting as this_co_ but overhead checking is not good._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I will think about this.  This computeWorldMatrix step might be made as a separate pass through scene.meshes in _evaluateActiveMeshes().  A separate pass would mean activeMeshes would still come in the same order as before (I know you care about the order for materials)._lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-04-27T15:30:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co_ okay_co_ hope your thinking is helpful. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  I also suspect optimizations could be made here - for example in a typical case for me I often see the scene spend 80% of its time in mesh selection (20% rendering) even when nothing is moving anywhere in the scene_co_ and that_t_s with no more than one level of nesting. One might think that more matrix updates could be skipped_co_ but then I_t_ve logged 6-8 bugs lately and I think they_t_ve all been due to BJS being too aggressive in skipping matrix updates_co_ so it_t_s presumably not a simple matter._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_(And I am Andy_co_ yes_co_ I just didn_t_t know I_t_d said so _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ )_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-27T16:37:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Your Github account is your name.  Some of the issues you posted_co_ that I get emails of_co_ could only have come from you.  Was on Github yesterday.  You even have the same avatar._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I spent Friday afternoon_co_ testing my theory. _lt_/p_gt__lt_ul_gt__lt_li_gt_I modified Node.ts to hide direct access to parent with gets / sets.  This allowed a children _dd_ Array&lt_sm_Node&gt_sm_ property &amp_sm_ a way to maintain it._lt_/li_gt__lt_li_gt_Made changes to abstractMesh.computeWorldMatrix()_co_ adding a skipParentSyncChecking_co_ and in isSynchronized too._lt_/li_gt__lt_li_gt_Added recursive scene function computeWorldMatrixTree()_co_ and called for all meshes that either did not have a parent or the parent was not a mesh_co_ eg. a camera.  _lt_/li_gt__lt_/ul_gt__lt_p_gt_It worked practically first run_co_ but somehow the result was unchanged.  I try not to keep my mad scientist changes to the repository around too long_co_ so I trashed them with a reset.  I save the entire filesystem daily.  Might still have it_co_ could paste changes_co_ if so._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-27T16:48:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Wouldn_t_t this _lt_em_gt_computeWorldMatrix()_lt_/em_gt_ method be threadable in a worker ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Very naive question since I don_t_t know anything about it ..._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-04-27T17:01:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_We have to be very cautious here as Fenomas mentioned. Computing the world matrix is expensive and so Babylon.js uses various ways to skip this step._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Once of them is obviously the evaluation of active meshes. This is a complex problem because a world matrix can be updated_dd__lt_/p_gt__lt_p_gt_- Because you changed position_co_ rotation_co_ scaling_lt_/p_gt__lt_p_gt_- Parent or parent of parent or parent of parent of parent (and so on) changed its world matrix_lt_/p_gt__lt_p_gt_- You are using Billboarding_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-27T17:10:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I think for the vast majority of a scene_co_ meshes DO NOT change every frame_co_ e.g. background meshes.  Think the best strategy would be to take away direct access of any property that could cause a recompute_co_ just like I did for Node.parent with getters / setters.  The setters could set a simple _isDirty _dd_ boolean.  ComputeWorldMatrix_co_ could just check this.  The node.children member could handle parent changes._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Do not know what a renderID is_co_ so do not know if ComputeWorldMatrix could set it back to false_co_ or the scene would have to._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Think the code would be a lot cleaner too.  Think allowing direct access_co_ leads to either recomputing everything every frame_co_ or increasingly intricate checking &amp_sm_ difficult code to follow.  The overhead of a getter / setter is probably low_co_ and you only pay for when you use it._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-27T17:31:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Vector3 would also have to have for x y &amp_sm_ z.  So that is a road block. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-04-27T17:50:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_We already check if something has changed without having to use getter and setter_dd_ This is the goal of IsSynchronized which check against  cached values _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Adding getter/setter will have performance impact in ALL the engine as vector3 are used everywhere. And I_t_m pretty sure that even if we removed the isSynchronized stuff_co_ this won_t_t lead to a big performance gain (but perhaps I_t_m wrong _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_One idea_dd_ Adding a IsWorldMatrixFrozen property to mesh. THis will be used to block the update of the WorldMatrix._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_THoughts?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-04-27T18:35:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This would be great_co_ I would use it right away in my current project (which is HUGE in term of performance)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-04-27T19:36:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_co_ with the last push I introduced 3 optimizations_dd__lt_/p_gt__lt_p_gt_- mesh.freezeWorldMatrix() and mesh.unfreezeWorldMatrix(). A frozen world matrix will never be evaluated and always server from cache_lt_/p_gt__lt_p_gt_- mesh.alwaysSelectAsActiveMesh _eq_ true_dd_ Frustrum clipping is disabled which leads to performance improvements in active meshes evaluation (But will remove frustrum clipping then)_lt_/p_gt__lt_p_gt_-mesh.isEnabled _eq__eq_ false will now block comptuteWorldMatrix evaluation_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Feel free to give feedbacks!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-04-27T20:01:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Cooool_co_ I will test that tomorrow _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-27T20:23:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Application level optimizations do offer ways for the developer always do or never do things_co_ that only they would know.  Also bit of an advanced feature_co_ so probably want to do this as part of a publishing phase._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have seen where using a pair of methods to set something on or off were later regretted_co_ .e.g. Java swing show()  &amp_sm_ hide().  In that example_co_ they changed to setVisible(boolean).  Wonder if single function like mesh.setFixedWorldMatrix(boolean) might allow for more flexible calling._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For the dialog extension_co_ using isEnabled to completely block comptuteWorldMatrix evaluation of entire Panel hierarchies that I know will never show on any camera_co_ sounds good._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-04-28T03:25:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I will have a look at how these affect my scenes later in the week. I would imagine that skipping matrix updates for disabled meshes will go a long way towards solving JC_t_s case_co_ but scenes that regularly have lots of disabled meshes probably aren_t_t so common._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Just to check_co_ freezeWorldMatrix just affects a mesh_t_s matrix w.r.t. the world_co_ and the camera transform is separate on top of that_co_ right?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-04-28T05:19:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Okay_co_ I wound up trying these today. First_co_ freezeMatrix is a solid improvement. Here_t_s a scene with a couple thousand meshes (only a few hundred draw calls)_co_ which already uses octrees to moderately speed up mesh selection_dd__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt__lt_img src_eq__qt_http_dd_//i.imgur.com/BxNskdp.png_qt_ alt_eq__qt_BxNskdp.png_qt__gt__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_Here_t_s the same scene after freezing the terrain_dd__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt__lt_img src_eq__qt_http_dd_//i.imgur.com/voB4mF2.png_qt_ alt_eq__qt_voB4mF2.png_qt__gt__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_So yeah_co_ solid improvement! Very cool.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_cool.png_qt_ alt_eq__qt_B)_qt__gt__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_With that said_co_ some thoughts_dd__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_1. Would mesh.static_dd_Boolean might be a better name? It would be hard for casual users to guess the implications of _qt_freezeWorldMatrix_qt__co_ but _qt_static_qt_ would be pretty straightforward. There might even other optimizations one could do with a mesh that the user has declared to be _qt_static_qt_._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_2. Could BJS initialize the mesh_t_s world matrix when the freeze API is called? It would be most straightforward if the user can create a mesh_co_ set its position/rotation_co_ and then freeze it_co_ but that doesn_t_t work (I assume because the matrix doesn_t_t get made until the next render)._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_3. It doesn_t_t work for billboards. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  I know you already alluded to that but do you think there_t_s any (possibly separate) way that billboarded static meshes could be optimized? I think it_t_s a fairly common use case to have lots of terrain billboards that never move (grass_co_ flowers_co_ etc)._lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-28T08:03:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Sorry for interrupting this ver interesting technical debate but just for my own knowledge _dd_ the _lt_em_gt_worldMatrix_lt_/em_gt_ is the transformation matrix from the mesh local space to the world space and so there is a _lt_em_gt_worldMatrix_lt_/em_gt_ per mesh._lt_/p_gt__lt_p_gt_Am I right ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The debate here is about to improve performance by not recomputing this worldMatrix each frame for meshes tagged as immutable/static once created (if this feature would be possible)._lt_/p_gt__lt_p_gt_Did I get it ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-04-28T09:07:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Exactly Jerome_co_ you got it _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-04-28T20:33:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_@fenomas_dd__lt_/p_gt__lt_p_gt_1. I want to keep it as a function because it implies some drawbacks that the user has to understand. So I prefer having a explicit function there_lt_/p_gt__lt_p_gt_2. Already the case_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/Mesh/babylon.abstractMesh.ts#L189_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/Mesh/babylon.abstractMesh.ts#L189_lt_/a_gt__lt_/p_gt__lt_p_gt_3. Billboards need to have a new worldmatrix per frame. Because they are facing the camera_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-28T20:38:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Think I can use the freeze and enabled for the meshes not on the top of the stack.  Also_co_ started merging meshes. That also massively reduced not only this_co_ but removed 700+ draws.  I am sure things will be really fast!  Consuming more memory_co_ but you cannot have everything._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]