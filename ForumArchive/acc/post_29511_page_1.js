[{"Owner":"brianzinn","Date":"2017-04-04T02:31:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m trying out the new 3.0 Preview -- upgrading from BJS 2.5.  I have managed to work through some breaking changes and am stuck with an error_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUncaught TypeError_dd_ Cannot set property source of [object Object] which has only a getter_lt_br /_gt_\n\t    at Function.t.DeepCopy (...)_lt_br /_gt_\n\t    at new r (...)_lt_br /_gt_\n\t    at r.clone (...)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI tried to reproduce with a PG and was expecting it to produce the above error on line 39 where I am cloning a mesh_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//babylonjs-playground.com/#NQHEE%230_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonjs-playground.com/#NQHEE#0_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ my question is.  Is there a difference between latest github preview (31efb0f commit) (_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/tree/master/dist/preview%20release_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/tree/master/dist/preview release_lt_/a_gt_) and PG 3.0-alpha?  If they are the same then I will need to work harder to reproduce in a PG or fix!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tbabylon.max.js line 6518 (destination[prop] _eq_ cloneValue(sourceValue_co_ destination)_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt_t_s happening on the property _t_source_t_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2017-04-04T08:10:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI see no error in the PG. the object is cloned. Maybe with the browser cache cleaning will correct your problem.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBy cons _lt_strong_gt_mesh.clone(??)_lt_/strong_gt_ takes as argument_co_ the new name of the object to clone.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2017-04-04T11:36:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe alpha version we_t_re pushing on our website is normally corresponding the last version of the code we_t_ve pushed on the github_co_ it should behave the same. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tUsing the exact same code as the PG locally on your machine is failing with TypeError?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDavid\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-04-04T17:44:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI confirm they are the same\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2017-04-04T19:28:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI added a new name argument as Dad72 suggested_co_ but that has had no effect.  I have updated the PG with more code_co_ but the PG is still working_dd_ _lt_a href_eq__qt_http_dd_//babylonjs-playground.com/#NQHEE%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonjs-playground.com/#NQHEE#1_lt_/a_gt_ .  In other words_co_ I cannot reproduce on the PG!  My code is failing with TypeError on line 58 of the PG.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI can however_co_ easily change babylon.max.js to get it working...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy guess would be line 23645 of babylon.max.js creates a property that DeepCopy is unable to set_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tObject.defineProperty(Mesh.prototype_co_ _qt_source_qt__co_ {\n_lt_/p_gt_\n\n_lt_p_gt_\n\t            get_dd_ function () {\n_lt_/p_gt_\n\n_lt_p_gt_\n\t                return this._source_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t            }_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t            enumerable_dd_ true_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t            configurable_dd_ true\n_lt_/p_gt_\n\n_lt_p_gt_\n\t        })_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWith a workaround that is obviously not usable - adding in DeepCopy this everything does work_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tvar propDescriptor _eq_ Object.getOwnPropertyDescriptor(destination_co_ prop)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t                  if (propDescriptor  _eq__eq__eq_ undefined &amp_sm_&amp_sm_ destination instanceof BABYLON.Mesh) {\n_lt_/p_gt_\n\n_lt_p_gt_\n\t                    propDescriptor _eq_ Object.getOwnPropertyDescriptor(BABYLON.Mesh.prototype_co_ prop)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t                    if (propDescriptor _eq__eq__eq_ undefined &amp_sm_&amp_sm_ destination instanceof BABYLON.AbstractMesh) {\n_lt_/p_gt_\n\n_lt_p_gt_\n\t                      propDescriptor _eq_ Object.getOwnPropertyDescriptor(BABYLON.AbstractMesh.prototype_co_ prop)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t                    }\n_lt_/p_gt_\n\n_lt_p_gt_\n\t                  }\n_lt_/p_gt_\n\n_lt_p_gt_\n\t                  if (propDescriptor _eq__eq__eq_ undefined || propDescriptor.writable _eq__eq__eq_ true) {\n_lt_/p_gt_\n\n_lt_p_gt_\n\t                    destination[prop] _eq_ sourceValue_sm_ // also need above guard code for destination[prop] _eq_ cloneValue(sourceValue_co_ destination)_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t                  }\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI will mark as solved_co_ since I am the only one experiencing this. Chrome Version 57.0.2987.133 (64-bit)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]