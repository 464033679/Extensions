[{"Owner":"Stephen Andrews","Date":"2014-11-26T03:30:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p style_eq__qt_text-align_dd_center_sm__qt__gt__lt_strong_gt__lt_span style_eq__qt_font-size_dd_24px_sm__qt__gt_CEWBS - Fast Voxels in Motion_lt_/span_gt__lt_/strong_gt__lt_/p_gt__lt_ul_gt__lt_li_gt__lt_strong_gt_Github/Download_lt_/strong_gt__dd_ _lt_a href_eq__qt_https_dd_//github.com/TriBlade9/CEWBS_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/TriBlade9/CEWBS_lt_/a_gt__lt_/li_gt__lt_li_gt__lt_strong_gt_Demo_lt_/strong_gt__dd_ _lt_a href_eq__qt_http_dd_//triblade9.wc.lt/CEWBS_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//triblade9.wc.lt/CEWBS_lt_/a_gt_ [Middle-click_dd_ grab/release mouse (Click in the center)_co_ F_dd_ fly/walk_co_ Left-click_dd_ break voxel_co_ Right-click_dd_ place voxel]_lt_/li_gt__lt_/ul_gt__lt_p_gt__lt_span style_eq__qt_font-size_dd_18px_sm__qt__gt__lt_span style_eq__qt_font-size_dd_14px_sm__qt__gt_CEWBS is a MIT-Licensed library for BabylonJS which provides a VoxelMesh object for creating optimized (greedy) voxel meshes._lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt__lt_span style_eq__qt_font-size_dd_18px_sm__qt__gt__lt_span style_eq__qt_font-size_dd_14px_sm__qt__gt_It currently provides methods to create_co_ update_co_ poll_co_ color_co_ and pick voxels. (See README.md)_lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_font-size_dd_18px_sm__qt__gt__lt_span style_eq__qt_font-size_dd_14px_sm__qt__gt_The goal is to separate voxel meshes from the world _t_grid_t_ by allowing them to be rotated_co_ scaled_co_ moved_co_ affected by collisions_co_ physics_co_ and generally treated as normal meshes. while still letting them be manipulated and accessed easily._lt_/span_gt__lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_(In the demo_co_ the voxel mesh you are standing on is rotating_co_ along with it_t_s children.)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The speed of the mesher is such that you can create a fast animation (Changing the blocks every frame) in a 16x16x16 mesh with almost no impact on FPS. (Demonstrated in the demo)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_strong_gt_Textures_co_ Ambient Occlusion_co_ _lt_/strong_gt_and_lt_strong_gt_ per-voxel lighting_lt_/strong_gt_ are currently _lt_strong_gt_not_lt_/strong_gt_ supported due to the difficulty of implementing them alongside the meshers. Feel free to help out with those. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_strong_gt_Projects Using CEWBS_dd__lt_/strong_gt__lt_/p_gt__lt_p_gt_None_co_ yet._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Enjoy!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Sorry for the rushed post_co_ I_t_ll flesh it out more later._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-11-26T23:19:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Update 0.2.1_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_Added utility functions to convert from Hex to RGB and back (Useful for using colors as ids)_lt_/li_gt__lt_li_gt_Added _lt_a href_eq__qt_https_dd_//github.com/grking/zoxel_qt_ rel_eq__qt_external nofollow_qt__gt_Zoxel_lt_/a_gt_ importing and exporting_lt_/li_gt__lt_li_gt_Began working on proper examples_lt_/li_gt__lt_/ul_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-11-27T00:42:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_That kicks ass!!!!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-11-27T00:43:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Are you interested in being part of babylon.js extensions? (or even better add it to the core?)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-11-27T01:40:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_62693_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_10688_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt_ data-cite_eq__qt_Deltakosh_qt_ data-ipsquote-timestamp_eq__qt_1417049014_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Are you interested in being part of babylon.js extensions? (or even better add it to the core?)_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Glad you like it!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Perhaps it would fit as part of BabylonJS extensions_co_ but not part of the core. I don_t_t use/know how to use TypeScript_co_ and the code quality is admittedly _lt_a href_eq__qt_https_dd_//github.com/TriBlade9/CEWBS/blob/master/src/CEWBS.js#L235_qt_ rel_eq__qt_external nofollow_qt__gt_terrible_lt_/a_gt__co_ though that will change in the future once everything is nailed down._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_EDIT_dd_ Update 0.2.2_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_Removed monotone mesher_co_ as it is generally slower and too complex for the slight benefits it gives. (Especially with more vertices available for use now in BabylonJS.)_lt_/li_gt__lt_li_gt_Added (buggy) support for non-integer types as voxel ids. Arrays (so long as they don_t_t contain objects)_co_ Strings_co_ and Integers work for now. This may be reverted if it affects performance too much. This is buggy (and slower for non-ints) because Arrays and Strings are converted to Integers for a necessarry part of the comparison process_co_ which may result in them accidentally becoming equal._lt_/li_gt__lt_/ul_gt__lt_p_gt_Should the method above not be decent for comparison_co_ then a more reliable way would be to use an id to compare voxel types_co_ while adding an extra argument for additional metadata. (Any type.)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-11-28T23:27:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Update 0.2.3_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_Reverted non-integer types change and added support for custom metadata in a separate argument_co_ from which a numerical id can be inferred. This is probably the best way to go about it._lt_/li_gt__lt_li_gt_Added partial support for transparency_co_ colors can either be a 3-length array of RGB values_co_ or a 4-length array of RGBA values. Mesh must have the hasVertexAlpha property set to true. (Transparency is not meshed differently yet_co_ so it still clips through the mesh)_lt_/li_gt__lt_li_gt_Added a few utility functions._lt_/li_gt__lt_li_gt_Zoxel importer-exporter now has support for transparency._lt_/li_gt__lt_/ul_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-12-01T08:09:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Update 0.2.4_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_Minor changes to Zoxel import._lt_/li_gt__lt_li_gt_Supports voxel transparency properly (through use of a custom evaluateFunction)_co_ except for a _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/issues/323_qt_ rel_eq__qt_external nofollow_qt__gt_bug_lt_/a_gt_ in BabylonJS itself. (So far as I can tell anyways)_lt_/li_gt__lt_li_gt__lt_a href_eq__qt_http_dd_//triblade9.github.io/CEWBS/example/examples/animation/index.html_qt_ rel_eq__qt_external nofollow_qt__gt_Example #1_lt_/a_gt_ is kind of usable_co_ though quite buggy._lt_/li_gt__lt_/ul_gt__lt_p_gt_Update 0.2.42_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_Proper transparency now_co_ using a child mesh. evaluateFunction fixed._lt_/li_gt__lt_li_gt__lt_a href_eq__qt_http_dd_//triblade9.github.io/CEWBS/example/examples/animation/index.html_qt_ rel_eq__qt_external nofollow_qt__gt_Example #1_lt_/a_gt_ now has transparency and shouldn_t_t break every few times loading it._lt_/li_gt__lt_/ul_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2015-03-17T06:39:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_Update 0.2.5_dd__lt_/span_gt__lt_/p_gt__lt_ul_gt__lt_li_gt__lt_span_gt_Compute normals in the meshing function as suggested by fenomas_lt_/span_gt__lt_/li_gt__lt_li_gt__lt_span_gt_Slightly speed up position calculation by using a flat array instead of an array of arrays._lt_/span_gt__lt_/li_gt__lt_/ul_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-03-17T08:42:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_75568_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_10688_qt_ data-ipsquote-username_eq__qt_Stephen Andrews_qt_ data-cite_eq__qt_Stephen Andrews_qt_ data-ipsquote-timestamp_eq__qt_1426574350_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Slightly speed up position calculation by using a flat array instead of an array of arrays._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Hey_co_ if you ever do more with this_co_ consider using a library called ndarray_co_ gettable from npm. It simulates an n-dimensional array using a flat array underneath_co_ and lets you easily get dynamic views into the data (a transposed version_co_ say) without the data changing. There_t_s also a bunch of ops libraries for doing stuff to the contents of an ndarray (filling_co_ sorting_co_ etc.) while minimizing cache misses._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2015-03-17T12:14:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_75579_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_10688_qt_ data-ipsquote-username_eq__qt_fenomas_qt_ data-cite_eq__qt_fenomas_qt_ data-ipsquote-timestamp_eq__qt_1426581768_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Hey_co_ if you ever do more with this_co_ consider using a library called ndarray_co_ gettable from npm. It simulates an n-dimensional array using a flat array underneath_co_ and lets you easily get dynamic views into the data (a transposed version_co_ say) without the data changing. There_t_s also a bunch of ops libraries for doing stuff to the contents of an ndarray (filling_co_ sorting_co_ etc.) while minimizing cache misses._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_I_t_ve looked into it_co_ but for some reason it never really caught on for me. I might try using a modified version of your mesher in the next version btw_co_ AO would be quite nice._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]