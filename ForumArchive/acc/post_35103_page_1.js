[{"Owner":"ziguri","Date":"2018-01-16T10:36:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi there_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI do have a bunch of data measurements loaded as mesh. The following example represents one measurement_dd__lt_br /_gt__lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#XG8RH3%237_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#XG8RH3#7_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat I wanna do now is perform a kind of morphing between one measurement mesh and its consecutive measurement mesh. _lt_br /_gt_\n\tI wanna create a kind of timeline from the first to the last measurement with morphing transitions.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI found_dd_ _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh_lt_/a_gt__lt_br /_gt_\n\tDo you guys think it is possible to apply it to my meshes?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think I face a few issues here_dd__lt_br /_gt_\n\t- The amount of vertices is not exactly the same in every measurement._lt_br /_gt_\n\t- Is there a maximum amount of vertices (e.g. 60.000) morphing can deal with?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDo you think morphing is still possible or do you have any other ideas how I could smoothly create a transition between the meshes?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLooking forward to your answer.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Amarth2Estel","Date":"2018-01-16T14:02:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tHi Ziguri !_lt_br /_gt__lt_br /_gt_\n\tI don_t_t think you will face any _qt_maximum amount of vertices_qt_. Only computation issues. As Deltakosh said in this topic _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/31426-how-do-i-enable-32-bit-indices/_qt_ rel_eq__qt__qt__gt_http_dd_//www.html5gamedevs.com/topic/31426-how-do-i-enable-32-bit-indices/_lt_/a_gt_ 32 bits indices are automatic when your mesh has more than 65k vertices _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt_ !_lt_br /_gt__lt_br /_gt_\n\tHowever_co_ because morphing is _qt_interpolation between static positions (given by static mesh)_co_  for each vertex_qt__co_ I don_t_t think you will be able to do a morphing between 2 meshes with different number of vertices._lt_br /_gt_\n\tAdditionnaly_co_ in morphing_co_ indices of vertices must be given in the same order for the n meshes you want to morph from (to know which positions interpolate). That_t_s why I am not sure you can reach a morph effect with raw measurement data without additionnal work on your meshes _lt_img alt_eq__qt__dd_(_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ title_eq__qt__dd_(_qt_ width_eq__qt_20_qt_ /_gt_._lt_br /_gt__lt_br /_gt_\n\tI hope somebody will have an idea to help you !  \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2018-01-16T18:10:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHad a play with equalising vertices and triangular facets in 2 meshes.  Very very basic and sledge hammer to nut way of doing it and because the mapping of added vertices and facets is very primitive you get some poor results. The closer the two meshes are together the less weird the morph. So perhaps with more thought and finesse something might be workable.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNote that in the following PGs I have changed the type of mesh without changing name from ground\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMorph ground to sphere  vertices very different   _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#E6R01P_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#E6R01P_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMorph cylinder to sphere vertices less different  _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#E6R01P%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#E6R01P#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMorph between two spheres_co_ first sphere has less segments than target but closes to each other in number of vertices _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#E6R01P%232_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#E6R01P#2_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMay be of no use at all but perhaps could lead to something.\n_lt_/p_gt_\n\n_lt_div_gt_\n\t_lt_div_gt_\n\t\t_lt_div_gt_\n\t\t\t_lt_div_gt_\n\t\t\t\t_lt_ul_gt__lt_li_gt_\n\t\t\t\t\t\t \n\t\t\t\t\t_lt_/li_gt_\n\t\t\t\t_lt_/ul_gt__lt_/div_gt_\n\t\t_lt_/div_gt_\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2018-01-16T18:28:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#ZFUV4U%2325_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#ZFUV4U#25_lt_/a_gt__lt_br /_gt__lt_br /_gt_\n\tIf you don_t_t need them to be polygonal objects then rayMarching can be an option_co_ but if they have to be a specific mesh then I am not sure._lt_br /_gt__lt_br /_gt_\n\tI bet you could project to the nearest points between two meshes and then translate from that_co_ but that process could make a myriad of problems as well.  The best way to do this is make sure your two meshes have the same poly-count and indexing.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]