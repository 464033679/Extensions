[{"Owner":"highvrahos","Date":"2014-11-10T08:18:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_We have just updated from a pretty old (last year) version of Babylon.JS to the latest_co_ with great success. Everything runs smoothly except of a custom shader of ours. The piece of code that creates the compilation error_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_                 if(alpha&gt_sm_0.0){                    vec3 mixRGB _eq_ alpha * texture2D(diffuseSampler_co_ diffuseCoords).rgb_sm_                     mixRGB +_eq_ ((1.0-alpha) * patternColor)_sm_                     newColor _eq_  vec4(mixRGB * finalColor_co_0.5)_sm_                 }else{                      newColor _eq_  vec4(finalColor_co_0.7)_sm_                 }_lt_/pre_gt__lt_p_gt_BJS - [10_dd_17_dd_59]_dd_ Error_dd_ ERROR_dd_ 0_dd_54_dd_ _t_if_t_ _dd_ syntax error_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If we remove the conditional statement_co_ we are still getting a compilation error on the following line_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_mixRGB +_eq_ ((1.0-alpha) * patternColor)_sm__lt_/pre_gt__lt_p_gt_BJS - [10_dd_16_dd_40]_dd_ Error_dd_ ERROR_dd_ 0_dd_55_dd_ _t_mixRGB_t_ _dd_ syntax error_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Seems that we can_t_t reassign values to already defined variables. Any other way to apply the +_eq_ operator to mix colors? And any ideas about the if statement? Something with the basic shader model that we are using?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Other than that_co_ if we remove the above code_co_ the shaders runs perfectly._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thank you in advance_co__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Meulta","Date":"2014-11-10T08:37:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Is this all of your code ? if not_co_ can you copy it here ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_To mix colors_co_ you can use the mix() function _dd_ _lt_a href_eq__qt_https_dd_//www.opengl.org/sdk/docs/man/html/mix.xhtml_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.opengl.org/sdk/docs/man/html/mix.xhtml_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"highvrahos","Date":"2014-11-10T16:02:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes_co_ mix is a solution_co_ although we still need the branching options_co_ the if. It still gives compilation errors. Here is the full shader_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        precision highp float_sm_                uniform mat4 worldView_sm_                uniform vec3 vEyePosition_sm_                uniform vec3 vLightPosition_sm_        uniform sampler2D diffuseSampler_sm_        uniform sampler2D bumpSampler_sm_        uniform vec3 patternColor_sm_        varying vec2 vUV_sm_                varying vec4 vPosition_sm_                varying vec3 vNormal_sm_                varying vec3 vPositionW_sm_                varying vec3 vNormalW_sm_                // shader code                vec3 viewDirectionW _eq_ normalize(vEyePosition - vPositionW)_sm_        // Light        vec3 lightVectorW _eq_ normalize(vLightPosition - vPositionW)_sm_        // diffuse        float ndl _eq_ max(0._co_ dot(vNormalW_co_ lightVectorW))_sm_        // reflection        vec3 e _eq_ normalize( vec3( worldView * vPosition ) )_sm_        vec3 n _eq_ normalize( worldView * vec4(vNormal_co_ 0.0) ).xyz_sm_        vec3 r _eq_ reflect( e_co_ n )_sm_        float m _eq_ 2. * sqrt(            pow( r.x_co_ 2. ) +            pow( r.y_co_ 2. ) +            pow( r.z + 1._co_ 2. )        )_sm_        vec2 vN _eq_ r.xy / m + .5_sm_        vec3 reflection _eq_ texture2D( bumpSampler_co_ vN).rgb_sm_                // Fresnel                float fresnelTerm _eq_ clamp(1.0 - dot(viewDirectionW_co_ vNormalW)_co_ 0._co_ 1.)_sm_                // Specular                vec3 angleW _eq_ normalize(viewDirectionW + lightVectorW)_sm_                float specComp _eq_ pow(dot(vNormalW_co_ angleW)_co_ 256.)_sm_        // Final color        vec3 finalColor _eq_ (vec3(1.0_co_1.0_co_1.0)) * ndl * 3.0 * 0.2 + (1.0 - 0.2) * (fresnelTerm * 0.6 + (1.0 - fresnelTerm) * 0.3) + reflection.rgb * 0.5 + specComp * 0.5_sm_                // Alpha                float alpha _eq_ (texture2D(diffuseSampler_co_ vUV).r + texture2D(diffuseSampler_co_ vUV).g + texture2D(diffuseSampler_co_ vUV).b)/3.0_sm_vec4 newColor_sm_     if(alpha&gt_sm_0.0){        vec3 mixRGB _eq_ alpha * texture2D(diffuseSampler_co_ vUV).rgb_sm_         mixRGB +_eq_ ((1.0-alpha) * patternColor)_sm_         newColor _eq_  vec4(mixRGB * finalColor_co_0.5)_sm_     }else{          newColor _eq_  vec4(finalColor_co_0.7)_sm_     }        void main(void) {            gl_FragColor _eq_ vec4(newColor_co_ 0.6)_sm_        }_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-11-10T16:30:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co__lt_/p_gt__lt_p_gt_could you try to reproduce the error in CYOS? www.babylonjs.com/cyos_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"highvrahos","Date":"2014-11-10T17:02:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes_co_ it works correctly in the CYOS. Any ideas why? I quote the full shader code._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        mesh_material[number] _eq_ new BABYLON.ShaderMaterial(_qt_color_qt__co_ scene_co_ {            vertexElement_dd_ _qt_vertexShaderCode_qt__co_            fragmentElement_dd_ _qt_fragmentShaderCode_qt_        }_co_        {                needAlphaBlending_dd_ true_co_            attributes_dd_ [_qt_position_qt__co_ _qt_normal_qt__co_ _qt_uv_qt_]_co_            uniforms_dd_ [_qt_world_qt__co_ _qt_worldView_qt__co_ _qt_worldViewProjection_qt__co_ _qt_vEyePosition_qt__co_ _qt_vLightPosition_qt__co_ _qt_patternColor_qt_]        })_sm__lt_/pre_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_    &lt_sm_script type_eq__qt_application/vertexShader_qt_ id_eq__qt_vertexShaderCode_qt_&gt_sm_        precision highp float_sm_        // Attributes        attribute vec3 position_sm_        attribute vec3 normal_sm_        attribute vec2 uv_sm_        // Uniforms        uniform mat4 world_sm_        uniform mat4 worldViewProjection_sm_        // Normal        varying vec2 vUV_sm_        varying vec4 vPosition_sm_        varying vec3 vNormal_sm_                varying vec3 vPositionW_sm_                varying vec3 vNormalW_sm_        void main(void) {                vPosition _eq_ vec4(position_co_ 1.0)_sm_                vNormal _eq_ normal_sm_                vPositionW _eq_ vec3(world * vec4(position_co_ 1.0))_sm_                vNormalW _eq_ normalize(vec3(world * vec4(normal_co_ 0.0)))_sm_        gl_Position _eq_ worldViewProjection * vec4(position_co_ 1.0)_sm_        vUV _eq_ uv_sm_        }    &lt_sm_/script&gt_sm_    &lt_sm_script type_eq__qt_application/fragmentShader_qt_ id_eq__qt_fragmentShaderCode_qt_&gt_sm_        precision highp float_sm_                uniform mat4 worldView_sm_                uniform vec3 vEyePosition_sm_                uniform vec3 vLightPosition_sm_        uniform sampler2D diffuseSampler_sm_        uniform sampler2D bumpSampler_sm_        uniform vec3 patternColor_sm_        varying vec2 vUV_sm_                varying vec4 vPosition_sm_                varying vec3 vNormal_sm_                varying vec3 vPositionW_sm_                varying vec3 vNormalW_sm_                // shader code                vec3 viewDirectionW _eq_ normalize(vEyePosition - vPositionW)_sm_        // Light        vec3 lightVectorW _eq_ normalize(vLightPosition - vPositionW)_sm_        // diffuse        float ndl _eq_ max(0._co_ dot(vNormalW_co_ lightVectorW))_sm_        // reflection        vec3 e _eq_ normalize( vec3( worldView * vPosition ) )_sm_        vec3 n _eq_ normalize( worldView * vec4(vNormal_co_ 0.0) ).xyz_sm_        vec3 r _eq_ reflect( e_co_ n )_sm_        float m _eq_ 2. * sqrt(            pow( r.x_co_ 2. ) +            pow( r.y_co_ 2. ) +            pow( r.z + 1._co_ 2. )        )_sm_        vec2 vN _eq_ r.xy / m + .5_sm_        vec3 reflection _eq_ texture2D( bumpSampler_co_ vN).rgb_sm_                // Fresnel                float fresnelTerm _eq_ clamp(1.0 - dot(viewDirectionW_co_ vNormalW)_co_ 0._co_ 1.)_sm_                // Specular                vec3 angleW _eq_ normalize(viewDirectionW + lightVectorW)_sm_                float specComp _eq_ pow(dot(vNormalW_co_ angleW)_co_ 256.)_sm_        // Final color        vec3 finalColor _eq_ (vec3(1.0_co_1.0_co_1.0)) * ndl * 3.0 * 0.2 + (1.0 - 0.2) * (fresnelTerm * 0.6 + (1.0 - fresnelTerm) * 0.3) + reflection.rgb * 0.5 + specComp * 0.5_sm_                // Alpha                float alpha _eq_ (texture2D(diffuseSampler_co_ vUV).r + texture2D(diffuseSampler_co_ vUV).g + texture2D(diffuseSampler_co_ vUV).b)/3.0_sm_        void main(void) {            gl_FragColor _eq_ vec4(finalColor  + patternColor * (alpha)_co_ 0.6)_sm_        }    &lt_sm_/script&gt_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-11-10T17:06:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Nothing obvious so far...Could you share a site somewhere that reproduces the issue?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"highvrahos","Date":"2014-11-10T17:10:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Sent you a pm_co_ I apologise_co_ can_t_t yet share a public url (work in progress)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"highvrahos","Date":"2014-11-10T18:08:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Problem solved_co_ we moved all the shader code inside the void main function and now it compiles successfully. Thank you for your support._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]