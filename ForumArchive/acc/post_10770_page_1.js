[{"Owner":"Stephen Andrews","Date":"2014-11-30T08:31:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I assume that screen-space ambient occlusion is possible using BabylonJS_t_s shaders system_co_ but I have so far been hampered by my lack of knowledge of GLSL and shaders in general to be able to understand anyone else_t_s implementations enough to port them._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Has anyone else managed to accomplish this feat in BabylonJS? How so?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If not_co_ could someone give me some tips for getting started? I understand the basics of hooking up shaders to Babylon materials and the screen._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"joshcamas","Date":"2014-11-30T20:50:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_At first I saw _qt_Is SAO Possible?_qt_ And I was confused why you would ask that._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//en.wikipedia.org/wiki/Sword_Art_Online_qt_ rel_eq__qt_external nofollow_qt__gt_SAO_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2014-12-01T16:54:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co_ Hello TriBlade9._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think it_t_s possible (never tried to do with BabylonJS)._lt_/p_gt__lt_p_gt_I_t_ll try an implementation I wrote for OpenGL (not ES) and i_t_ll share if it works _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-12-01T21:17:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_THis is on our roadmap for 2.0_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-12-01T22:10:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_63081_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_10770_qt_ data-ipsquote-username_eq__qt_Luaacro_qt_ data-cite_eq__qt_Luaacro_qt_ data-ipsquote-timestamp_eq__qt_1417452847_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Hey_co_ Hello TriBlade9._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think it_t_s possible (never tried to do with BabylonJS)._lt_/p_gt__lt_p_gt_I_t_ll try an implementation I wrote for OpenGL (not ES) and i_t_ll share if it works _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Awesome! Glad to see someone who knows shaders. _dd_3_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_63095_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_10770_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt_ data-cite_eq__qt_Deltakosh_qt_ data-ipsquote-timestamp_eq__qt_1417468645_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_THis is on our roadmap for 2.0_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Great_co_ I_t_ll keep an eye on the repo. Thanks!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2014-12-04T19:02:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Good news_co_ I almost got it ! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_Just have to create a configurable post-process and clean the code with an example_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-12-04T22:46:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_63448_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_10770_qt_ data-ipsquote-username_eq__qt_Luaacro_qt_ data-cite_eq__qt_Luaacro_qt_ data-ipsquote-timestamp_eq__qt_1417719746_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Good news_co_ I almost got it ! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_Just have to create a configurable post-process and clean the code with an example_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_AWESOME! I can_t_t believe you got it working so fast!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2014-12-05T15:44:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey Stephen_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You_t_ll find here the the SSAO implementation _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The javascript code to create the scene (it creates boxes + different passes + different post-processes)._lt_/p_gt__lt_p_gt_Shaders _dd_ Defining the depth shader for the depth pass needed by the SSAO post-process_lt_/p_gt__lt_p_gt_Create scene saver_dd_ creates a pass to save the _qt_original color_qt_ of the scene_lt_/p_gt__lt_p_gt_Create ssao combine_dd_ Combines the SSAO output with the scene saver RTT_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_SSAO will use different passes to be computed _dd__lt_/p_gt__lt_p_gt_    - Compute depth pass_lt_/p_gt__lt_p_gt_    - SSAO pass_lt_/p_gt__lt_p_gt_    - Blur pass_lt_/p_gt__lt_p_gt_    - Combine SSAO output with the original color of the scene_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_///// Shaders//BABYLON.Engine.ShadersRepository _eq_ _t_Babylon/Shaders/_t__sm_BABYLON.Effect.ShadersStore[_qt_depthVertexShader_qt_] _eq__qt_#ifdef GL_ES\\n_qt_ +_qt_precision highp float_sm_\\n_qt_ +_qt_#endif\\n_qt_ +_qt_attribute vec3 position_sm_\\n_qt_ +_qt_uniform mat4 worldViewProjection_sm_\\n_qt_ +_qt_uniform float far_sm_\\n_qt_ +_qt_varying vec4 coords_sm_\\n_qt_ +_qt_void main(void) {\\n_qt_ +_qt_   gl_Position _eq_ worldViewProjection * vec4(position_co_ 1.0)_sm_\\n_qt_ +_qt_   coords _eq_ vec4(far_co_ gl_Position.y_co_ gl_Position.z_co_ gl_Position.w)_sm__qt_ +_qt_}_qt__sm_BABYLON.Effect.ShadersStore[_qt_depthPixelShader_qt_] _eq__qt_#ifdef GL_ES\\n_qt_ +_qt_precision highp float_sm_\\n_qt_ +_qt_#endif\\n_qt_ +_qt_varying vec4 coords_sm_\\n_qt_ +_qt_void main(void) {\\n_qt_ +_qt_   float depth _eq_ coords.z / coords.x_sm_\\n_qt_ +_qt_   gl_FragColor _eq_ vec4(depth_co_ depth * depth_co_ 0.0_co_ 1.0)_sm_\\n_qt_ +_qt_}\\n_qt_ +_qt__qt__sm_///// Create engine and scene + camera//var canvas _eq_ document.getElementById(_t_renderCanvas_t_)_sm_var engine _eq_ new BABYLON.Engine(canvas_co_ true)_sm_var scene _eq_ new BABYLON.Scene(engine)_sm_var sceneColor _eq_ scene.clearColor_sm_var camera _eq_ new BABYLON.FreeCamera(_qt_free_camera_qt__co_ new BABYLON.Vector3(0_co_ 5_co_ -10)_co_ scene)_sm_camera.minZ _eq_ 0.1_sm_camera.maxZ _eq_ 200.0_sm_camera.setTarget(new BABYLON.Vector3.Zero())_sm_camera.attachControl(canvas_co_ false)_sm_//// Create scene//var light _eq_ new BABYLON.DirectionalLight(_qt_globalLight_qt__co_ new BABYLON.Vector3(-1_co_ -2_co_ -1)_co_ scene)_sm_light.position _eq_ new BABYLON.Vector3(10_co_ 10_co_ 0)_sm_///// Create scene saver//var screenRTT _eq_ new BABYLON.RenderTargetTexture(_t_SceneRTT_t__co_ 1024_co_ scene_co_ false_co_ true)_sm_scene.customRenderTargets.push(screenRTT)_sm_///// Create depth material//var depthMaterial _eq_ new BABYLON.ShaderMaterial(_t_depth_t__co_ scene_co_ _t_depth_t__co_ {    uniforms_dd_ [_t_worldViewProjection_t_]_co_    attributes_dd_ [_t_position_t_]})_sm_///// Create render target and configure (for depth pass)//var depthRTT _eq_ new BABYLON.RenderTargetTexture(_t_DepthRTT_t__co_ 1024_co_ scene_co_ false_co_ true)_sm_scene.customRenderTargets.push(depthRTT)_sm_depthRTT.onBeforeRender _eq_ function () {    scene.clearColor _eq_ new BABYLON.Color4(1.0_co_ 1.0_co_ 1.0_co_ 1.0)_sm_    for (var i _eq_ 0_sm_ i &lt_sm_ depthRTT.renderList.length_sm_ i++) {        depthRTT.renderList[i]._savedMaterial _eq_ depthRTT.renderList[i].material_sm_        depthRTT.renderList[i].material _eq_ depthMaterial_sm_    }}_sm_depthRTT.onAfterRender _eq_ function () {    scene.clearColor _eq_ sceneColor_sm_    for (var i _eq_ 0_sm_ i &lt_sm_ depthRTT.renderList.length_sm_ i++)        depthRTT.renderList[i].material _eq_ depthRTT.renderList[i]._savedMaterial_sm_}_sm_//// Create SSAO post-process//var ssaoPostProcess _eq_ new BABYLON.PostProcess(_t_ssao_t__co_ _t_ssao_t__co_ []_co_[_t_DepthMapSampler_t__co_ _t_RandomMapSampler_t_]_co_ 1_co_ camera_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ engine_co_ true)_sm_var ssaoRandomTexture _eq_ new BABYLON.Texture(_t_./textures/random.png_t__co_ scene_co_ true_co_ false_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE)_sm_ssaoPostProcess.onApply _eq_ function (effect) {    effect.setTexture(_t_DepthMapSampler_t__co_ depthRTT)_sm_    effect.setTexture(_t_RandomMapSampler_t__co_ ssaoRandomTexture)_sm_}_sm_        //// Create blur post-process//var blurPostProcess _eq_ new BABYLON.BlurPostProcess(_t_blur_postprocess_t__co_ new BABYLON.Vector2(1.0_co_ 1.0)_co_ 1_co_ 1_co_ camera_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ engine_co_ true)_sm_//// Create ssao combine//var ssaoCombinePostProcess _eq_ new BABYLON.PostProcess(_t_ssaoCombine_t__co_ _t_ssaoCombine_t__co_ []_co_ [_t_ColorMapSampler_t_]_co_ 1_co_ camera_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ engine_co_ true)_sm_ssaoCombinePostProcess.onApply _eq_ function (effect) {    effect.setTexture(_t_ColorMapSampler_t__co_ screenRTT)_sm_}_sm_//// Create objects _dd_)//for (var i _eq_ 0_sm_ i &lt_sm_ 6_sm_ i++) {    for (var j _eq_ 0_sm_ j &lt_sm_ 6_sm_ j++) {        for (var k _eq_ 0_sm_ k &lt_sm_ 6_sm_ k++) {            var cube _eq_ BABYLON.Mesh.CreateBox(_t_cube_t__co_ 1.0_co_ scene_co_ true)_sm_            cube.position _eq_ new BABYLON.Vector3(i * 1.0 + 2.0_co_ j * 2.0 + 1.0_co_ k * 3.0 + 3.0)_sm_            cube.rotation _eq_ new BABYLON.Vector3(Math.floor((Math.random() * 360) + 1)_co_ Math.floor((Math.random() * 360) + 1)_co_ Math.floor((Math.random() * 360) + 1))_sm_            cube.material _eq_ new BABYLON.StandardMaterial(_t_mat_t__co_ scene)_sm_            depthRTT.renderList.push(cube)_sm_            screenRTT.renderList.push(cube)_sm_        }    }}//// Update scene//engine.runRenderLoop(function () {    depthMaterial.setFloat(_t_far_t__co_ camera.maxZ)_sm_    scene.render()_sm_})_sm__lt_/pre_gt__lt_p_gt_Now_co_ you_t_ll find the SSAO implementation I found on internet (mine was too difficult for WebGL _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ ) and the SSAO combine_lt_/p_gt__lt_p_gt_ssao.fragment.fx _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_#ifdef GL_ESprecision highp float_sm_#endifvarying vec2 vUV_sm_uniform sampler2D textureSampler_sm_uniform sampler2D DepthMapSampler_sm_uniform sampler2D RandomMapSampler_sm_vec3 normalFromDepth(float depth_co_ vec2 coords) {\tconst vec2 offset1 _eq_ vec2(0.0_co_ 0.001)_sm_\tconst vec2 offset2 _eq_ vec2(0.001_co_ 0.0)_sm_\tfloat depth1 _eq_ texture2D(DepthMapSampler_co_ coords + offset1).r_sm_\tfloat depth2 _eq_ texture2D(DepthMapSampler_co_ coords + offset2).r_sm_\tvec3 p1 _eq_ vec3(offset1_co_ depth1 - depth2)_sm_\tvec3 p2 _eq_ vec3(offset2_co_ depth2 - depth1)_sm_\tvec3 normal _eq_ cross(p1_co_ p2)_sm_\tnormal.z _eq_ -normal.z_sm_\treturn normalize(normal)_sm_}void main(){\tconst float totalStrength _eq_ 10.0_sm_\tconst float base _eq_ 0.2_sm_\tconst float area _eq_ 0.0075_sm_\tconst float fallOff _eq_ 0.01_sm_\tconst float radius _eq_ 0.0002_sm_\tconst int samples _eq_ 16_sm_\tvec3 sampleSphere[samples]_sm_\tsampleSphere[0] _eq_ vec3(0.5381_co_ 0.1856_co_ -0.4319)_sm_\tsampleSphere[1] _eq_ vec3(0.1379_co_ 0.2486_co_ 0.4430)_sm_\tsampleSphere[2] _eq_ vec3(0.3371_co_ 0.5679_co_ -0.0057)_sm_\tsampleSphere[3] _eq_ vec3(-0.6999_co_ -0.0451_co_ -0.0019)_sm_\tsampleSphere[4] _eq_ vec3(0.0689_co_ -0.1598_co_ -0.8547)_sm_\tsampleSphere[5] _eq_ vec3(0.0560_co_ 0.0069_co_ -0.1843)_sm_\tsampleSphere[6] _eq_ vec3(-0.0146_co_ 0.1402_co_ 0.0762)_sm_\tsampleSphere[7] _eq_ vec3(0.0100_co_ -0.1924_co_ -0.0344)_sm_\tsampleSphere[8] _eq_ vec3(-0.3577_co_ -0.5301_co_ -0.4358)_sm_\tsampleSphere[9] _eq_ vec3(-0.3169_co_ 0.1063_co_ 0.0158)_sm_\tsampleSphere[10] _eq_ vec3(0.0103_co_ -0.5869_co_ 0.0046)_sm_\tsampleSphere[11] _eq_ vec3(-0.0897_co_ -0.4940_co_ 0.3287)_sm_\tsampleSphere[12] _eq_ vec3(0.7119_co_ -0.0154_co_ -0.0918)_sm_\tsampleSphere[13] _eq_ vec3(-0.0533_co_ 0.0596_co_ -0.5411)_sm_\tsampleSphere[14] _eq_ vec3(0.0352_co_ -0.0631_co_ 0.5460)_sm_\tsampleSphere[15] _eq_ vec3(-0.4776_co_ 0.2847_co_ -0.0271)_sm_\tvec3 random _eq_ normalize(texture2D(RandomMapSampler_co_ vUV * 4.0).rgb)_sm_\tfloat depth _eq_ texture2D(DepthMapSampler_co_ vUV).r_sm_\tvec3 position _eq_ vec3(vUV_co_ depth)_sm_\tvec3 normal _eq_ normalFromDepth(depth_co_ vUV)_sm_\tfloat radiusDepth _eq_ radius / depth_sm_\tfloat occlusion _eq_ 0.0_sm_\tfor (int i _eq_ 0_sm_ i &lt_sm_ samples_sm_ i++) {\t\tvec3 ray _eq_ radiusDepth * reflect(sampleSphere[i]_co_ random)_sm_\t\tvec3 hemiRay _eq_ position + sign(dot(ray_co_ normal)) * ray_sm_\t\tfloat occlusionDepth _eq_ texture2D(DepthMapSampler_co_ clamp(hemiRay.xy_co_ 0.0_co_ 1.0)).r_sm_\t\tfloat difference _eq_ depth - occlusionDepth_sm_\t\tocclusion +_eq_ step(fallOff_co_ difference) * (1.0 - smoothstep(fallOff_co_ area_co_ difference))_sm_\t}\tfloat ao _eq_ 1.0 - totalStrength * occlusion * (1.0 / float(samples))_sm_\tvec4 color _eq_ vec4(1.0_co_ 1.0_co_ 1.0_co_ 1.0)_sm_\tgl_FragColor _eq_ color * clamp(ao + base_co_ 0.0_co_ 1.0)_sm_\tgl_FragColor.a _eq_ 1.0_sm_}_lt_/pre_gt__lt_p_gt_ssaoCombine.fragment.fx _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_#ifdef GL_ESprecision highp float_sm_#endifvarying vec2 vUV_sm_uniform sampler2D textureSampler_sm_uniform sampler2D ColorMapSampler_sm_void main(){\tgl_FragColor _eq_ texture2D(textureSampler_co_ vUV) * texture2D(ColorMapSampler_co_ vUV)_sm_}_lt_/pre_gt__lt_p_gt_Concerning the .fx files (shaders)_co_ you can put it in the Babylon/Shaders folder_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Concerning the random texture (ssaoRandomTexture in the JS code)_co_ you can find it _lt_a href_eq__qt_http_dd_//www.google.fr/imgres?imgurl_eq_http%3A%2F%2Fi591.photobucket.com%2Falbums%2Fss352%2FNate_D_2009%2Frandom.png&amp_sm_imgrefurl_eq_http%3A%2F%2Firrlicht.sourceforge.net%2Fforum%2Fviewtopic.php%3Ff%3D6%26t%3D32414%26start%3D15&amp_sm_h_eq_256&amp_sm_w_eq_256&amp_sm_tbnid_eq_76rwU_JmYa6NMM%3A&amp_sm_zoom_eq_1&amp_sm_docid_eq_bmkhlNnCjRQaKM&amp_sm_ei_eq_wc2BVLjqKeTP7Qbul4HwCQ&amp_sm_tbm_eq_isch&amp_sm_iact_eq_rc&amp_sm_uact_eq_3&amp_sm_dur_eq_171&amp_sm_page_eq_1&amp_sm_start_eq_0&amp_sm_ndsp_eq_29&amp_sm_ved_eq_0CCAQrQMwAA_qt_ rel_eq__qt_external nofollow_qt__gt_here_lt_/a_gt__co_ or generate it with your custom algorithm_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Don_t_t hesitate if you have problems when implementing my code. I_t_ll create a zip containing everything (don_t_t know yet where to upload it xD)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-12-05T17:57:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Sounds like you should create a PR _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-12-05T22:56:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Excellent job Luaacro! I_t_ll get about to testing that right away. It looks a bit complicated_co_ but the results are worth it._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Next up_dd_ performance testing!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_EDIT_dd_ First issue_dd__lt_/p_gt__lt_p_gt_WebGL_dd_ INVALID_ENUM_dd_ activeTexture_dd_ texture unit out of range_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_FPS is down to about 9_co_ weird outline shows._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_img src_eq__qt_http_dd_//s28.postimg.org/yi9kyogu4/Screenshot_from_2014_12_06_07_23_25.jpg_qt_ alt_eq__qt_Screenshot_from_2014_12_06_07_23_25.jpg_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Experimentation time &gt_sm_ _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_EDIT2_dd__lt_/p_gt__lt_p_gt_A plain vanilla take on your code has the same result_co_ but with an extra error_dd__lt_/p_gt__lt_p_gt_ [.WebGLRenderingContext]GL ERROR _dd_GL_INVALID_OPERATION _dd_ glDrawElementsInstancedANGLE_dd_ attempt to draw with all attributes having non-zero divisors_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"joshcamas","Date":"2014-12-06T04:53:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Sorry if this is a dumb question_co_ but what exactly IS ssao? _dd_S_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2014-12-06T06:50:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Oh ? I also get the warnings_co_ the warnings I didn_t_t saw when developing_co_ damn me ! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sleep.png_qt_ alt_eq__qt_-_-_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sleep@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_I_t_ll try to find a solution to that._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For the FPS_co_ the SSAO is a very expansive post-process_co_ I don_t_t know if WebGL is enough mature for that (up to 35 values picking per pixel). And I get same errors using IE_co_ FireFox and Chrome now _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Joshcamas_co_ no problems because 2 years ago I was like you lol. If you read the code with this article (_lt_a href_eq__qt_http_dd_//en.wikipedia.org/wiki/Screen_space_ambient_occlusion_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//en.wikipedia.org/wiki/Screen_space_ambient_occlusion_lt_/a_gt_) you_t_ll understand _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-12-06T12:15:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_63600_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_10770_qt_ data-ipsquote-username_eq__qt_Luaacro_qt_ data-cite_eq__qt_Luaacro_qt_ data-ipsquote-timestamp_eq__qt_1417848626_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Oh ? I also get the warnings_co_ the warnings I didn_t_t saw when developing_co_ damn me ! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sleep.png_qt_ alt_eq__qt_-_-_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sleep@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_I_t_ll try to find a solution to that._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For the FPS_co_ the SSAO is a very expansive post-process_co_ I don_t_t know if WebGL is enough mature for that (up to 35 values picking per pixel). And I get same errors using IE_co_ FireFox and Chrome now _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Excellent work_co_ you_t_re doing great. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Just wondering_co_ what should the result look like? (So I can compare to make sure things are working properly) [screenshot?]_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2014-12-07T21:24:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Still working on warnings ^^_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But you can find results here _dd_ _lt_a href_eq__qt_http_dd_//en.wikipedia.org/wiki/Ambient_occlusion_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//en.wikipedia.org/wiki/Ambient_occlusion_lt_/a_gt__lt_/p_gt__lt_p_gt_It takes the original scene color + SSAO pass + combine pass_co_ as you can see in the code above_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-12-07T23:01:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_63721_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_10770_qt_ data-ipsquote-username_eq__qt_Luaacro_qt_ data-cite_eq__qt_Luaacro_qt_ data-ipsquote-timestamp_eq__qt_1417987489_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Still working on warnings ^^_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But you can find results here _dd_ _lt_a href_eq__qt_http_dd_//en.wikipedia.org/wiki/Ambient_occlusion_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//en.wikipedia.org/wiki/Ambient_occlusion_lt_/a_gt__lt_/p_gt__lt_p_gt_It takes the original scene color + SSAO pass + combine pass_co_ as you can see in the code above_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_I know what it_t_s *supposed* to look like_co_ just wasn_t_t sure what your implementation would look like. _dd_3_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2014-12-08T09:58:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_My implementation looks like the screenshot you shared ^^_lt_/p_gt__lt_p_gt_The warnings and errors disappeared and got better parameters_co_ I_t_m going to share ! _eq_D_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-12-08T10:20:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_63757_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_10770_qt_ data-ipsquote-username_eq__qt_Luaacro_qt_ data-cite_eq__qt_Luaacro_qt_ data-ipsquote-timestamp_eq__qt_1418032721_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_My implementation looks like the screenshot you shared ^^_lt_/p_gt__lt_p_gt_The warnings and errors disappeared and got better parameters_co_ I_t_m going to share ! _eq_D_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Glad you got it fixed. _sm_3_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_However_co_ your implementation doesn_t_t look much like SSAO_co_ more like just drawing noisy outlines. Or I_t_m just mistaken?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2014-12-08T11:04:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_What image are you comparing with ?_lt_/p_gt__lt_p_gt_Here it looks like _dd__lt_/p_gt__lt_p_gt__lt_img src_eq__qt_http_dd_//s16.postimg.org/6tpgjm085/Screenshot_10.png_qt_ alt_eq__qt_Screenshot_10.png_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Try this implementation using a real mesh (like the wikipedia article) and you_t_ll see it is the same thing ^^_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2014-12-08T12:08:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_You can try this implementation (with parameters). Don_t_t hesitate to play with parameters in _qt_ssaoPostProcess.onApply_qt_ and test with a real mesh (like a house or a room)_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_///// Shaders//BABYLON.Engine.ShadersRepository _eq_ _t_Babylon/Shaders/_t__sm_BABYLON.Effect.ShadersStore[_qt_simpleVertexShader_qt_] _eq__qt_#ifdef GL_ES\\n_qt_ +_qt_precision highp float_sm_\\n_qt_ +_qt_#endif\\n_qt_ +_qt_attribute vec3 position_sm_\\n_qt_ +_qt_attribute vec2 uv_sm_\\n_qt_ +_qt_uniform mat4 worldViewProjection_sm_\\n_qt_ +_qt_varying vec2 vUV_sm_\\n_qt_ +_qt_void main(void) {\\n_qt_ +_qt_   gl_Position _eq_ worldViewProjection * vec4(position_co_ 1.0)_sm_\\n_qt_ +_qt_   vUV _eq_ uv_sm__qt_ +_qt_}_qt__sm_BABYLON.Effect.ShadersStore[_qt_simplePixelShader_qt_] _eq__qt_#ifdef GL_ES\\n_qt_ +_qt_precision highp float_sm_\\n_qt_ +_qt_#endif\\n_qt_ +_qt_uniform sampler2D textureSampler_sm_\\n_qt_ +_qt_varying vec2 vUV_sm_\\n_qt_ +_qt_void main(void) {\\n_qt_ +_qt_   gl_FragColor _eq_ texture2D(textureSampler_co_ vUV)_sm_\\n_qt_ +_qt_}\\n_qt_ +_qt__qt__sm_BABYLON.Effect.ShadersStore[_qt_depthVertexShader_qt_] _eq__qt_#ifdef GL_ES\\n_qt_ +_qt_precision highp float_sm_\\n_qt_ +_qt_#endif\\n_qt_ +_qt_attribute vec3 position_sm_\\n_qt_ +_qt_uniform mat4 worldViewProjection_sm_\\n_qt_ +_qt_uniform float far_sm_\\n_qt_ +_qt_varying vec4 coords_sm_\\n_qt_ +_qt_void main(void) {\\n_qt_ +_qt_   gl_Position _eq_ worldViewProjection * vec4(position_co_ 1.0)_sm_\\n_qt_ +_qt_   coords _eq_ vec4(far_co_ gl_Position.y_co_ gl_Position.z_co_ gl_Position.w)_sm__qt_ +_qt_}_qt__sm_BABYLON.Effect.ShadersStore[_qt_depthPixelShader_qt_] _eq__qt_#ifdef GL_ES\\n_qt_ +_qt_precision highp float_sm_\\n_qt_ +_qt_#endif\\n_qt_ +_qt_varying vec4 coords_sm_\\n_qt_ +_qt_void main(void) {\\n_qt_ +_qt_   float depth _eq_ coords.z / coords.x_sm_\\n_qt_ +_qt_   gl_FragColor _eq_ vec4(depth_co_ depth * depth_co_ 0.0_co_ 1.0)_sm_\\n_qt_ +_qt_}\\n_qt_ +_qt__qt__sm_///// Create engine and scene + camera//var canvas _eq_ document.getElementById(_t_renderCanvas_t_)_sm_var engine _eq_ new BABYLON.Engine(canvas_co_ true)_sm_var scene _eq_ new BABYLON.Scene(engine)_sm_var sceneColor _eq_ new BABYLON.Color3(1_co_ 1_co_ 1)_sm_//scene.clearColor_sm_var camera _eq_ new BABYLON.FreeCamera(_qt_free_camera_qt__co_ new BABYLON.Vector3(0_co_ 5_co_ -10)_co_ scene)_sm_camera.minZ _eq_ 0.1_sm_camera.maxZ _eq_ 200.0_sm_camera.setTarget(new BABYLON.Vector3.Zero())_sm_camera.attachControl(canvas_co_ true)_sm_//// Create scene//var light _eq_ new BABYLON.DirectionalLight(_qt_globalLight_qt__co_ new BABYLON.Vector3(-1_co_ -2_co_ -1)_co_ scene)_sm_light.position _eq_ new BABYLON.Vector3(10_co_ 10_co_ 0)_sm_///// Create scene saver//var screenRTT _eq_ new BABYLON.RenderTargetTexture(_t_SceneRTT_t__co_ 2048_co_ scene_co_ false_co_ true)_sm_scene.customRenderTargets.push(screenRTT)_sm_screenRTT.onBeforeRender _eq_ function () { }_sm_screenRTT.onAfterRender _eq_ function () { }_sm_///// Create depth material//var depthMaterial _eq_ new BABYLON.ShaderMaterial(_t_depth_t__co_ scene_co_ _t_depth_t__co_ {    uniforms_dd_ [_t_worldViewProjection_t_]_co_    attributes_dd_ [_t_position_t_]})_sm_///// Create render target and configure (for depth pass)//var depthRTT _eq_ new BABYLON.RenderTargetTexture(_t_DepthRTT_t__co_ 2048_co_ scene_co_ false_co_ true)_sm_scene.customRenderTargets.push(depthRTT)_sm_depthRTT.farValue _eq_ 50.0_sm_depthRTT.clearColor _eq_ new BABYLON.Color4(1.0_co_ 1.0_co_ 1.0_co_ 1.0)_sm_depthRTT.onBeforeRender _eq_ function () {    depthMaterial.setFloat(_t_far_t__co_ depthRTT.farValue)_sm_    scene.clearColor _eq_ depthRTT.clearColor_sm_    for (var i _eq_ 0_sm_ i &lt_sm_ depthRTT.renderList.length_sm_ i++) {        depthRTT.renderList[i]._savedMaterial _eq_ depthRTT.renderList[i].material_sm_        depthRTT.renderList[i].material _eq_ depthMaterial_sm_    }}_sm_depthRTT.onAfterRender _eq_ function () {    scene.clearColor _eq_ sceneColor_sm_    for (var i _eq_ 0_sm_ i &lt_sm_ depthRTT.renderList.length_sm_ i++)        depthRTT.renderList[i].material _eq_ depthRTT.renderList[i]._savedMaterial_sm_}_sm_//// Create SSAO post-process//var ssaoPostProcess _eq_ new BABYLON.PostProcess(_t_ssao_t__co_ _t_ssao_t__co_ [_t_totalStrength_t__co_ _t_fallOff_t__co_ _t_radius_t__co_ _t_area_t_]_co_[_t_RandomMapSampler_t_]_co_ 1_co_ camera_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ engine_co_ true)_sm_var ssaoRandomTexture _eq_ new BABYLON.Texture(_t_./textures/random.png_t__co_ scene_co_ true_co_ false_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE)_sm_ssaoPostProcess.onApply _eq_ function (effect) {    effect.setFloat(_t_totalStrength_t__co_ 10.0)_sm_    effect.setFloat(_t_fallOff_t__co_ 0.001)_sm_    effect.setFloat(_t_radius_t__co_ 0.0002)_sm_    effect.setFloat(_t_area_t__co_ 0.0075)_sm_    effect.setTexture(_t_textureSampler_t__co_ depthRTT)_sm_    effect.setTexture(_t_RandomMapSampler_t__co_ ssaoRandomTexture)_sm_}_sm_//// Create blur post-process//var blurPostProcess _eq_ new BABYLON.BlurPostProcess(_t_blur_postprocess_t__co_ new BABYLON.Vector2(1.0_co_ 0.0)_co_ 1_co_ 1.0_co_ camera_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ engine_co_ true)_sm_//// Create ssao combine//var ssaoCombinePostProcess _eq_ new BABYLON.PostProcess(_t_ssaoCombine_t__co_ _t_ssaoCombine_t__co_ []_co_ [_t_ColorMapSampler_t_]_co_ 0.25_co_ camera_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ engine_co_ true)_sm_ssaoCombinePostProcess.onApply _eq_ function (effect) {    effect.setTexture(_t_ColorMapSampler_t__co_ screenRTT)_sm_}_sm_//// Create objects _dd_)//var material _eq_ new BABYLON.ShaderMaterial(_t_simple_t__co_ scene_co_ _t_simple_t__co_ { samplers_dd_ [_t_textureSampler_t_] })_sm_var creationCount _eq_ 6_sm_for (var i _eq_ 0_sm_ i &lt_sm_ creationCount_sm_ i++) {    for (var j _eq_ 0_sm_ j &lt_sm_ creationCount_sm_ j++) {        for (var k _eq_ 0_sm_ k &lt_sm_ creationCount_sm_ k++) {            var cube _eq_ BABYLON.Mesh.CreateBox(_t_cube_t_ + i + _t__t_ + j + _t__t_ + k_co_ 1.0_co_ scene_co_ false)_sm_            cube.position _eq_ new BABYLON.Vector3(i * 1.0 + 2.0_co_ j * 2.0 + 1.0_co_ k * 3.0 + 3.0)_sm_            cube.rotation _eq_ new BABYLON.Vector3(Math.floor((Math.random() * 360) + 1)_co_ Math.floor((Math.random() * 360) + 1)_co_ Math.floor((Math.random() * 360) + 1))_sm_            cube.material _eq_ material_sm_            depthRTT.renderList.push(cube)_sm_            screenRTT.renderList.push(cube)_sm_        }    }}//// Update scene//var wallTexture _eq_ new BABYLON.Texture(_t_./textures/wall.jpg_t__co_ scene_co_ false_co_ false_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE)_sm_engine.runRenderLoop(function () {    material.setTexture(_t_textureSampler_t__co_ wallTexture)_sm_    scene.render()_sm_})_sm__lt_/pre_gt__lt_p_gt_SSAO Post-process_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_#ifdef GL_ESprecision highp float_sm_#endifvarying vec2 vUV_sm_uniform sampler2D textureSampler_sm_uniform sampler2D RandomMapSampler_sm_uniform float totalStrength_sm_uniform float fallOff_sm_uniform float radius_sm_uniform float area_sm_vec3 normalFromDepth(float depth_co_ vec2 coords) {\tconst vec2 offset1 _eq_ vec2(0.0_co_ 0.001)_sm_\tconst vec2 offset2 _eq_ vec2(0.001_co_ 0.0)_sm_\tfloat depth1 _eq_ texture2D(textureSampler_co_ coords + offset1).r_sm_\tfloat depth2 _eq_ texture2D(textureSampler_co_ coords + offset2).r_sm_\tvec3 p1 _eq_ vec3(offset1_co_ depth1 - depth2)_sm_\tvec3 p2 _eq_ vec3(offset2_co_ depth2 - depth1)_sm_\tvec3 normal _eq_ cross(p1_co_ p2)_sm_\tnormal.z _eq_ -normal.z_sm_\treturn normalize(normal)_sm_}void main(){\tconst float base _eq_ 0.2_sm_\tconst int samples _eq_ 16_sm_\tvec3 sampleSphere[samples]_sm_\tsampleSphere[0] _eq_ vec3(0.5381_co_ 0.1856_co_ -0.4319)_sm_\tsampleSphere[1] _eq_ vec3(0.1379_co_ 0.2486_co_ 0.4430)_sm_\tsampleSphere[2] _eq_ vec3(0.3371_co_ 0.5679_co_ -0.0057)_sm_\tsampleSphere[3] _eq_ vec3(-0.6999_co_ -0.0451_co_ -0.0019)_sm_\tsampleSphere[4] _eq_ vec3(0.0689_co_ -0.1598_co_ -0.8547)_sm_\tsampleSphere[5] _eq_ vec3(0.0560_co_ 0.0069_co_ -0.1843)_sm_\tsampleSphere[6] _eq_ vec3(-0.0146_co_ 0.1402_co_ 0.0762)_sm_\tsampleSphere[7] _eq_ vec3(0.0100_co_ -0.1924_co_ -0.0344)_sm_\tsampleSphere[8] _eq_ vec3(-0.3577_co_ -0.5301_co_ -0.4358)_sm_\tsampleSphere[9] _eq_ vec3(-0.3169_co_ 0.1063_co_ 0.0158)_sm_\tsampleSphere[10] _eq_ vec3(0.0103_co_ -0.5869_co_ 0.0046)_sm_\tsampleSphere[11] _eq_ vec3(-0.0897_co_ -0.4940_co_ 0.3287)_sm_\tsampleSphere[12] _eq_ vec3(0.7119_co_ -0.0154_co_ -0.0918)_sm_\tsampleSphere[13] _eq_ vec3(-0.0533_co_ 0.0596_co_ -0.5411)_sm_\tsampleSphere[14] _eq_ vec3(0.0352_co_ -0.0631_co_ 0.5460)_sm_\tsampleSphere[15] _eq_ vec3(-0.4776_co_ 0.2847_co_ -0.0271)_sm_\tvec3 random _eq_ normalize(texture2D(RandomMapSampler_co_ vUV * 4.0).rgb)_sm_\tfloat depth _eq_ texture2D(textureSampler_co_ vUV).r_sm_\tvec3 position _eq_ vec3(vUV_co_ depth)_sm_\tvec3 normal _eq_ normalFromDepth(depth_co_ vUV)_sm_\tfloat radiusDepth _eq_ radius / depth_sm_\tfloat occlusion _eq_ 0.0_sm_\tfor (int i _eq_ 0_sm_ i &lt_sm_ samples_sm_ i++) {\t\tvec3 ray _eq_ radiusDepth * reflect(sampleSphere[i]_co_ random)_sm_\t\tvec3 hemiRay _eq_ position + sign(dot(ray_co_ normal)) * ray_sm_\t\tfloat occlusionDepth _eq_ texture2D(textureSampler_co_ clamp(hemiRay.xy_co_ 0.0_co_ 1.0)).r_sm_\t\tfloat difference _eq_ depth - occlusionDepth_sm_\t\tocclusion +_eq_ step(fallOff_co_ difference) * (1.0 - smoothstep(fallOff_co_ area_co_ difference))_sm_\t}\tfloat ao _eq_ 1.0 - totalStrength * occlusion * (1.0 / float(samples))_sm_\tvec4 color _eq_ vec4(1.0_co_ 1.0_co_ 1.0_co_ 1.0)_sm_\tgl_FragColor _eq_ color * clamp(ao + base_co_ 0.0_co_ 1.0)_sm_\tgl_FragColor.a _eq_ 1.0_sm_}_lt_/pre_gt__lt_p_gt_The error _qt_INVALID_OPERATION_dd_ drawElementsInstancedANGLE_qt_ appear when drawing the cubes_co_ I don_t_t know why _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_Also_co_ for the rendering offsets (we can see an offset between the scene and the SSAO effect when moving the camera) I don_t_t why it happen. I think we_t_ll have to ask Deltakosh ^^_qt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-12-08T12:31:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_63763_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_10770_qt_ data-ipsquote-username_eq__qt_Luaacro_qt_ data-cite_eq__qt_Luaacro_qt_ data-ipsquote-timestamp_eq__qt_1418036694_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_What image are you comparing with ?_lt_/p_gt__lt_p_gt_Here it looks like _dd__lt_/p_gt__lt_p_gt__lt_img src_eq__qt_http_dd_//s16.postimg.org/6tpgjm085/Screenshot_10.png_qt_ alt_eq__qt_Screenshot_10.png_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Try this implementation using a real mesh (like the wikipedia article) and you_t_ll see it is the same thing ^^_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Okay_co_ I_t_ll test that soon enough._lt_/p_gt__lt_p_gt_Is there a larger version of that image? xD_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2014-12-12T13:57:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_///// Shaders//BABYLON.Engine.ShadersRepository _eq_ _t_Babylon/Shaders/_t__sm_BABYLON.Effect.ShadersStore[_qt_simpleVertexShader_qt_] _eq__qt_#ifdef GL_ES\\n_qt_ +_qt_precision highp float_sm_\\n_qt_ +_qt_#endif\\n_qt_ +_qt_attribute vec3 position_sm_\\n_qt_ +_qt_attribute vec2 uv_sm_\\n_qt_ +_qt_uniform mat4 worldViewProjection_sm_\\n_qt_ +_qt_varying vec2 vUV_sm_\\n_qt_ +_qt_void main(void) {\\n_qt_ +_qt_   gl_Position _eq_ worldViewProjection * vec4(position_co_ 1.0)_sm_\\n_qt_ +_qt_   vUV _eq_ uv_sm__qt_ +_qt_}_qt__sm_BABYLON.Effect.ShadersStore[_qt_simplePixelShader_qt_] _eq__qt_#ifdef GL_ES\\n_qt_ +_qt_precision highp float_sm_\\n_qt_ +_qt_#endif\\n_qt_ +_qt_uniform sampler2D textureSampler_sm_\\n_qt_ +_qt_varying vec2 vUV_sm_\\n_qt_ +_qt_void main(void) {\\n_qt_ +_qt_   gl_FragColor _eq_ texture2D(textureSampler_co_ vUV)_sm_\\n_qt_ +_qt_}\\n_qt_ +_qt__qt__sm_BABYLON.Effect.ShadersStore[_qt_depthVertexShader_qt_] _eq__qt_#ifdef GL_ES\\n_qt_ +_qt_precision highp float_sm_\\n_qt_ +_qt_#endif\\n_qt_ +_qt_attribute vec3 position_sm_\\n_qt_ +_qt_uniform mat4 worldViewProjection_sm_\\n_qt_ +_qt_uniform float far_sm_\\n_qt_ +_qt_varying vec4 coords_sm_\\n_qt_ +_qt_void main(void) {\\n_qt_ +_qt_   gl_Position _eq_ worldViewProjection * vec4(position_co_ 1.0)_sm_\\n_qt_ +_qt_   coords _eq_ vec4(far_co_ gl_Position.y_co_ gl_Position.z_co_ gl_Position.w)_sm__qt_ +_qt_}_qt__sm_BABYLON.Effect.ShadersStore[_qt_depthPixelShader_qt_] _eq__qt_#ifdef GL_ES\\n_qt_ +_qt_precision highp float_sm_\\n_qt_ +_qt_#endif\\n_qt_ +_qt_varying vec4 coords_sm_\\n_qt_ +_qt_void main(void) {\\n_qt_ +_qt_   float depth _eq_ coords.z / coords.x_sm_\\n_qt_ +_qt_   gl_FragColor _eq_ vec4(depth_co_ depth * depth_co_ 0.0_co_ 1.0)_sm_\\n_qt_ +_qt_}\\n_qt_ +_qt__qt__sm_///// Create engine and scene + camera//var canvas _eq_ document.getElementById(_t_renderCanvas_t_)_sm_var engine _eq_ new BABYLON.Engine(canvas_co_ true)_sm_var scene _eq_ new BABYLON.Scene(engine)_sm_var sceneColor _eq_ new BABYLON.Color3(1_co_ 1_co_ 1)_sm_//scene.clearColor_sm_var camera _eq_ new BABYLON.FreeCamera(_qt_free_camera_qt__co_ new BABYLON.Vector3(0_co_ 5_co_ 0)_co_ scene)_sm_camera.minZ _eq_ 0.1_sm_camera.maxZ _eq_ 1000.0_sm_camera.setTarget(new BABYLON.Vector3.Zero())_sm_camera.attachControl(canvas_co_ true)_sm_camera.speed _eq_ 15_sm_camera.inertia _eq_ 0_sm_camera.angularSensibility _eq_ 100_sm_//// Create scene//var light _eq_ new BABYLON.DirectionalLight(_qt_globalLight_qt__co_ new BABYLON.Vector3(-1_co_ -2_co_ -1)_co_ scene)_sm_light.position _eq_ new BABYLON.Vector3(10_co_ 10_co_ 0)_sm_///// Create scene saver//var screenRTT _eq_ new BABYLON.PassPostProcess(_t_SceneRTT_t__co_ 1.0_co_ camera)_sm_///// Create depth material//var depthMaterial _eq_ new BABYLON.ShaderMaterial(_t_depth_t__co_ scene_co_ _t_depth_t__co_ {    uniforms_dd_ [_t_worldViewProjection_t_]_co_    attributes_dd_ [_t_position_t_]})_sm_///// Create render target and configure (for depth pass)//var depthRTT _eq_ new BABYLON.RenderTargetTexture(_t_DepthRTT_t__co_ 1024_co_ scene_co_ false_co_ true)_sm_scene.customRenderTargets.push(depthRTT)_sm_depthRTT.farValue _eq_ 1000.0_sm_depthRTT.clearColor _eq_ new BABYLON.Color4(1.0_co_ 1.0_co_ 1.0_co_ 1.0)_sm_depthRTT.onBeforeRender _eq_ function () {    depthMaterial.setFloat(_t_far_t__co_ depthRTT.farValue)_sm_    scene.clearColor _eq_ depthRTT.clearColor_sm_    for (var i _eq_ 0_sm_ i &lt_sm_ depthRTT.renderList.length_sm_ i++) {        depthRTT.renderList[i]._savedMaterial _eq_ depthRTT.renderList[i].material_sm_        depthRTT.renderList[i].material _eq_ depthMaterial_sm_    }}_sm_depthRTT.onAfterRender _eq_ function () {    scene.clearColor _eq_ sceneColor_sm_    for (var i _eq_ 0_sm_ i &lt_sm_ depthRTT.renderList.length_sm_ i++)        depthRTT.renderList[i].material _eq_ depthRTT.renderList[i]._savedMaterial_sm_}_sm_//// Create SSAO post-process//var ssaoPostProcess _eq_ new BABYLON.PostProcess(_t_ssao_t__co_ _t_ssao_t__co_ [_t_totalStrength_t__co_ _t_fallOff_t__co_ _t_radius_t__co_ _t_area_t_]_co_[_t_RandomMapSampler_t_]_co_ 1_co_ camera_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ engine_co_ false)_sm_var ssaoRandomTexture _eq_ new BABYLON.Texture(_t_./textures/random2.png_t__co_ scene_co_ true_co_ false_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE)_sm_ssaoPostProcess.onApply _eq_ function (effect) {    effect.setFloat(_t_numSamples_t__co_ 16)_sm_    effect.setFloat(_t_totalStrength_t__co_ 3)_sm_    effect.setFloat(_t_fallOff_t__co_ 0.01)_sm_    effect.setFloat(_t_radius_t__co_ 0.002)_sm_    effect.setFloat(_t_area_t__co_ 0.0075)_sm_    effect.setTexture(_t_textureSampler_t__co_ depthRTT)_sm_    effect.setTexture(_t_RandomMapSampler_t__co_ ssaoRandomTexture)_sm_}_sm_        //// Create blur post-process//var blurPostProcessHorizontal _eq_ new BABYLON.BlurPostProcess(_t_blur_postprocess_t__co_ new BABYLON.Vector2(1.0_co_ 0.0)_co_ 3_co_ 1.0_co_ camera_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ engine_co_ false)_sm_var blurPostProcessVertial _eq_ new BABYLON.BlurPostProcess(_t_blur_postprocess_t__co_ new BABYLON.Vector2(0.0_co_ 1.0)_co_ 3_co_ 1.0_co_ camera_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ engine_co_ false)_sm_//// Create ssao combine//// Swith to SSAO RTT to see the result_co_ and vice versa to the combined RTTvar renderColor _eq_ true_sm_window.onclick _eq_ function () {    renderColor _eq_ !renderColor_sm_}var ssaoCombinePostProcess _eq_ new BABYLON.PostProcess(_t_ssaoCombine_t__co_ _t_ssaoCombine_t__co_ []_co_ [_t_ColorMapSampler_t_]_co_ 0.25_co_ camera_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ engine_co_ false)_sm_ssaoCombinePostProcess.onApply _eq_ function (effect) {    if (renderColor)        effect.setTextureFromPostProcess(_t_ColorMapSampler_t__co_ screenRTT)_sm_    else        effect.setTextureFromPostProcess(_t_ColorMapSampler_t__co_ blurPostProcessVertial)_sm_}_sm_//// Create objects _dd_)//// You can find the models here _dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Samples/tree/master/Scenes/RobotBABYLON.SceneLoader.ImportMesh(_qt__gt_https_dd_//github.com/BabylonJS/Samples/tree/master/Scenes/RobotBABYLON.SceneLoader.ImportMesh(_t__t__co__lt_/a_gt_ _t_./samples/_t__co_ _t_Robot.babylon_t__co_ scene_co_ function (meshes_co_ particleSystems_co_ skeletons) {    for (var i _eq_ 0_sm_ i &lt_sm_ meshes.length_sm_ i++) {        depthRTT.renderList.push(meshes[i])_sm_    }})_sm_//// Update scene//var wallTexture _eq_ new BABYLON.Texture(_t_./textures/wall.jpg_t__co_ scene_co_ false_co_ false_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE)_sm_engine.runRenderLoop(function () {    scene.render()_sm_})_sm__lt_/pre_gt__lt_p_gt_and the SSAO code _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_#ifdef GL_ESprecision highp float_sm_#endifvarying vec2 vUV_sm_uniform sampler2D textureSampler_sm_uniform sampler2D RandomMapSampler_sm_uniform float totalStrength_sm_uniform float fallOff_sm_uniform float radius_sm_uniform float area_sm_vec3 normalFromDepth(float depth_co_ vec2 coords) {\tconst vec2 offset1 _eq_ vec2(0.0_co_ 0.001)_sm_\tconst vec2 offset2 _eq_ vec2(0.001_co_ 0.0)_sm_\tfloat depth1 _eq_ texture2D(textureSampler_co_ coords + offset1).r_sm_\tfloat depth2 _eq_ texture2D(textureSampler_co_ coords + offset2).r_sm_\tvec3 p1 _eq_ vec3(offset1_co_ depth1 - depth2)_sm_\tvec3 p2 _eq_ vec3(offset2_co_ depth2 - depth1)_sm_\tvec3 normal _eq_ cross(p1_co_ p2)_sm_\tnormal.z _eq_ -normal.z_sm_\treturn normalize(normal)_sm_}void main(){\tconst float base _eq_ 0.2_sm_\tconst int samples _eq_ 16_sm_\tvec3 sampleSphere[samples]_sm_\tsampleSphere[0] _eq_ vec3(0.5381_co_ 0.1856_co_ -0.4319)_sm_\tsampleSphere[1] _eq_ vec3(0.1379_co_ 0.2486_co_ 0.4430)_sm_\tsampleSphere[2] _eq_ vec3(0.3371_co_ 0.5679_co_ -0.0057)_sm_\tsampleSphere[3] _eq_ vec3(-0.6999_co_ -0.0451_co_ -0.0019)_sm_\tsampleSphere[4] _eq_ vec3(0.0689_co_ -0.1598_co_ -0.8547)_sm_\tsampleSphere[5] _eq_ vec3(0.0560_co_ 0.0069_co_ -0.1843)_sm_\tsampleSphere[6] _eq_ vec3(-0.0146_co_ 0.1402_co_ 0.0762)_sm_\tsampleSphere[7] _eq_ vec3(0.0100_co_ -0.1924_co_ -0.0344)_sm_\tsampleSphere[8] _eq_ vec3(-0.3577_co_ -0.5301_co_ -0.4358)_sm_\tsampleSphere[9] _eq_ vec3(-0.3169_co_ 0.1063_co_ 0.0158)_sm_\tsampleSphere[10] _eq_ vec3(0.0103_co_ -0.5869_co_ 0.0046)_sm_\tsampleSphere[11] _eq_ vec3(-0.0897_co_ -0.4940_co_ 0.3287)_sm_\tsampleSphere[12] _eq_ vec3(0.7119_co_ -0.0154_co_ -0.0918)_sm_\tsampleSphere[13] _eq_ vec3(-0.0533_co_ 0.0596_co_ -0.5411)_sm_\tsampleSphere[14] _eq_ vec3(0.0352_co_ -0.0631_co_ 0.5460)_sm_\tsampleSphere[15] _eq_ vec3(-0.4776_co_ 0.2847_co_ -0.0271)_sm_\tvec3 random _eq_ normalize(texture2D(RandomMapSampler_co_ vUV * 4.0).rgb)_sm_\tfloat depth _eq_ texture2D(textureSampler_co_ vUV).r_sm_\tvec3 position _eq_ vec3(vUV_co_ depth)_sm_\tvec3 normal _eq_ normalFromDepth(depth_co_ vUV)_sm_\tfloat radiusDepth _eq_ radius / depth_sm_\tfloat occlusion _eq_ 0.0_sm_\tfor (int i _eq_ 0_sm_ i &lt_sm_ samples_sm_ i++) {\t\tvec3 ray _eq_ radiusDepth * reflect(sampleSphere[i]_co_ random)_sm_\t\tvec3 hemiRay _eq_ position + sign(dot(ray_co_ normal)) * ray_sm_\t\tfloat occlusionDepth _eq_ texture2D(textureSampler_co_ clamp(hemiRay.xy_co_ 0.0_co_ 1.0)).r_sm_\t\tfloat difference _eq_ depth - occlusionDepth_sm_\t\tocclusion +_eq_ step(fallOff_co_ difference) * (1.0 - smoothstep(fallOff_co_ area_co_ difference))_sm_\t}\tfloat ao _eq_ 1.0 - totalStrength * occlusion * (1.0 / float(samples))_sm_\tvec4 color _eq_ vec4(1.0_co_ 1.0_co_ 1.0_co_ 1.0)_sm_\tgl_FragColor _eq_ color * clamp(ao + base_co_ 0.0_co_ 1.0)_sm_\tgl_FragColor.a _eq_ 1.0_sm_}_lt_/pre_gt__lt_p_gt_You can find the scene I load in the example at _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Samples/tree/master/Scenes/Robot_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Samples/tree/master/Scenes/Robot_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Stephen Andrews","Date":"2014-12-12T21:25:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_kk_co_ tyvm._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Just did a fresh re-install of Ubuntu_co_ as I was running out of space_co_ and now a lot of stuff is broken. I_t_ll do some testing when I get everything working again. _dd_3_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]