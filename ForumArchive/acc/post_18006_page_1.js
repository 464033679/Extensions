[{"Owner":"Kesshi","Date":"2015-10-20T08:26:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_currently i try to decide if i use Babylon.js or Three.js for my next big project._lt_br_gt_I would like to use babylon because it has some nice features and it is written in TypeScript._lt_br_gt_The problem is that babylon.js seems to be much slower compared to three.js._lt_br_gt__lt_br_gt_I made a test with a big obj file (about 6 mb + 6 textures) containing several meshes._lt_br_gt_After loading the file i created 64 clones._lt_br_gt__lt_br_gt_Here are the results (tested in chrome 64 bit)_dd__lt_br_gt__lt_br_gt_Three.js (r71)_dd__lt_br_gt_obj loading _eq_ 10.6 seconds_lt_br_gt_creating the clones _eq_ 0.5 seconds_lt_br_gt_rendering performance _eq_ 11 FPS_lt_br_gt__lt_br_gt_Babylon.js (v2.2)_dd__lt_br_gt_obj loading _eq_ 44.5 seconds_lt_br_gt_creating the clones _eq_ 45.6 seconds_lt_br_gt_rendering performance _eq_ 0 FPS (&lt_sm_ 0.5 FPS)_lt_br_gt__lt_br_gt_As you can see babylon.js is much much slower._lt_br_gt_I think i could solve the issue with the slow obj loading if i just use the obj loader from three.js and modify it for babylon._lt_br_gt__lt_br_gt_But what about the slow Mesh.clone() operation and the FPS?_lt_br_gt_Why is cloning that slow?_lt_/p_gt__lt_p_gt_Here is part of my code. Is something wrong?_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_BABYLON.SceneLoader.ImportMesh(null_co_ _qt_/content/_qt__co_ _qt_furniture.obj_qt__co_ scene_co_ function (meshes) {    for (var i _eq_ 0_sm_ i &lt_sm_ meshes.length_sm_ ++i) {        meshes[i].rotation.x _eq_ -Math.PI * 0.5_sm_    }    createScene()_sm_})_sm_function createScene(pMeshes) {    var tNow _eq_ (new Date()).getTime()_sm_    var tMax_dd_ number _eq_ 8_sm_    var x_dd_ number_sm_    var y_dd_ number_sm_    for (x _eq_ 0_sm_ x &lt_sm_ tMax_sm_ ++x) {        for (y _eq_ 0_sm_ y &lt_sm_ tMax_sm_ ++y) {            for (var i _eq_ 0_sm_ i &lt_sm_ pMeshes.length_sm_ ++i) {                var tMesh_dd_ BABYLON.Mesh _eq_ pMeshes[i]_sm_                var tIndex _eq_ x * tMax + y_sm_                var tClone_sm_                if (tIndex &gt_sm_ 0)                    tClone _eq_ tMesh.clone(_qt_mesh_clone__qt_ + tIndex)_sm_                else                    tClone _eq_ tMesh_sm_                tClone.position.x _eq_ -tMax * 0.5 + (x * 3)_sm_                tClone.position.z _eq_ -tMax * 0.5 + (y * 2)_sm_            }        }    }}_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-20T08:48:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Would be great to know how complex the object is._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The OBJ Loader is rather new to all of us_co_ I guess there are improvements to be made _dd_-)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I also believe that ThreeJS_t_s clone is actually the Instance method of Babylon - The geometry is being reused and not duplicated. Try using instances - _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/How_to_use_Instances_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/How_to_use_Instances_lt_/a_gt_ and see if it helps you. _lt_/p_gt__lt_p_gt_That_t_s also the reason for the lower performance - the mesh_t_s geometry was duplicated many times (8_co_ to be exact)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_A small thing about your code - _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_createScene()_sm__lt_/pre_gt__lt_p_gt_The function requires the meshes array (pMeshes). Is it really working the way you wrote?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kesshi","Date":"2015-10-20T09:19:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Here is the link to the obj_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//drive.google.com/file/d/0B1FKnpnB3KKIei04WTNDUWp6Ukk/view?usp_eq_sharing_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//drive.google.com/file/d/0B1FKnpnB3KKIei04WTNDUWp6Ukk/view?usp_eq_sharing_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I just tried the instances._lt_/p_gt__lt_p_gt_I replaced the line_dd__lt_/p_gt__lt_p_gt__lt_span_gt_tClone _lt_/span_gt__lt_span_gt__eq__lt_/span_gt__lt_span_gt_ tMesh_lt_/span_gt__lt_span_gt_._lt_/span_gt__lt_span_gt_clone_lt_/span_gt__lt_span_gt_(_lt_/span_gt__lt_span_gt__qt_mesh_clone__qt__lt_/span_gt__lt_span_gt_ _lt_/span_gt__lt_span_gt_+_lt_/span_gt__lt_span_gt_ tIndex_lt_/span_gt__lt_span_gt_)_sm__lt_/span_gt__lt_/p_gt__lt_p_gt__lt_span_gt_with this line_dd__lt_/span_gt__lt_/p_gt__lt_p_gt_tClone _eq_ tMesh.createInstance(_qt_mesh_clone__qt_ + tIndex)_sm__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The FPS increases to 19 FPS but the time to create the instances is the same (still over 40 seconds  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  )_lt_/p_gt__lt_p_gt_And i think i can_t_t use instance because it looks like all instances share the same parent. Later in the project this is not possible or_lt_/p_gt__lt_p_gt_very complicated._lt_br_gt_How can i create a clone/instance/reference of a mesh as fast as possible without duplicating the whole geometry?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_101645_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_18006_qt_ data-ipsquote-username_eq__qt_RaananW_qt_ data-cite_eq__qt_RaananW_qt_ data-ipsquote-timestamp_eq__qt_1445330903_qt__gt__lt_div_gt__lt_div_gt__lt_br_gt__lt_p_gt_A small thing about your code - _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_createScene()_sm__lt_/pre_gt__lt_p_gt_The function requires the meshes array (pMeshes). Is it really working the way you wrote?_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_That was just a mistake while simplifying the code in order to post it here. In my real code its correct._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-20T09:26:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Instances are your friends in that case - they share the same geometry (I am not sure what you mean by parent)_co_ but their world matrix can be different._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I find the 40 seconds to be way to much (Haven_t_t looked at the object yet). I wonder what the cause is. I_t_ll try finding the time to look into that. At least the FPS was increased! _dd_-)_lt_/p_gt__lt_p_gt__lt_strike_gt_What version of Babylon are you using? _lt_/strike_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kesshi","Date":"2015-10-20T09:55:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I use version 2.2_lt_/p_gt__lt_p_gt_I just profiled it a bit in chrome. One of the problems with the slow clone() and createInstance() seems to be a call to BABYLON.Tools.ExtractMinAndMax(). It is called from refreshBoundingInfo(). It seems that the BoundingBox is recalculated for every clone/instance. Why? It should be ok to just copy the boundingbox info in this case._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Regarding the use of Instances. The problem is that they only have a world matrix. My Objects have a _lt_span_gt_hierarchy/graph with local transformations. It would be very complicated to keep the world matrix of the instances in sync with the local matrix inside the _lt_span_gt_hierarchy_lt_/span_gt__lt_/span_gt_. Thats why i said i need to give every clone/instance a different parent._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-20T10:06:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__lt_strike_gt_You are right_co_ this should be calculated only once. Let_t_s see how this can be done a bit better._lt_/strike_gt_ The bounding box must be calculated for each mesh after it was created_co_ this is why this function is being called. But maybe it can be optimized._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_About the parents problem - create a parent right after loading all of the meshes.  This way they all keep their local transformations_co_ and you can transform the parent object. Clone or create an sinatnce of this parent_co_ and the rest will be done automatically for you. Theoretically _dd_-) If this doesn_t_t work_co_ let us know._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I would also reduce the amount of vertices all of your objects have (just a recommendation). The debug layer states there are ca. 6 million active vertices. Maybe run simplification before loading the object?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_And just a small correction for something I said earlier - the geometry is being reused in clones as well. The other properties are being copied (and not shared between meshes). In your case it would be wise to use instance._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-20T10:21:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I really do believe this is the line that is slowing everything down - _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.geometry.ts#L328_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.geometry.ts#L328_lt_/a_gt_ _co_ but I think it is only used with clones and not with instances... _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kesshi","Date":"2015-10-20T11:57:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_One more issue. The memory consumption (memory usage of chrome process)._lt_/p_gt__lt_p_gt_Same test as described above._lt_/p_gt__lt_p_gt_Three.js_dd_ 410 MB  _lt_/p_gt__lt_p_gt_Babylon (instances)_dd_ 990 MB_lt_/p_gt__lt_p_gt_Babylon (clone)_dd_ 1230 MB_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_After all these tests i decided to use Three.js for my project. It seems to have less problems with complex objects._lt_/p_gt__lt_p_gt_Maybe i can use BabylonJs for some other project in the future but at the moment it doesn_t_t seem to be ready for my use case._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-20T12:05:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_We are not insulted _dd_-)  (I do hope so at least). Each Framework has its ups an downs_co_ we do try to fix bugs and make things better (without trying to constantly compare to Three.js_co_ which is a wonderful framework)._lt_/p_gt__lt_p_gt_The higher memory consuption is probably due to the way Babylon stores the vertices_co_ materials etc_t_. Can be a bit redundant_co_ but is quicker to render. Again_co_ ups and downs for each way._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If there is anything we can help with_co_ please let us know. I will anyhow try and find optimization possibilities for the entire process_co_ as 40 Seconds is truly way too much to load and clone the object._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-10-20T13:38:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Also try a file _t_.babylon_t_ instead of a _t_.obj_t__co_ maybe it obj loader needs to be improved._lt_/p_gt__lt_p_gt_Can see the differences._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-20T14:53:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_That_t_s a really interesting topic.I_t_m sad babylon.js was not able to address your use case but I_t_ll make it personal to fix any perf issues we may have with cloning_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_@Temechon_dd_ do you mind checking why obj importer is slower than expected?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_@Raanan_dd_ are you checking the clone and memory usage issues? I can do it else. Please let me know _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2015-10-20T15:45:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_And what if you_t_re converting the .obj meshes to our .babylon format using the Blender exporter or another one?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-20T17:00:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok so I fixed a performance issue with clone and createInstance _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Using your .obj I can go through all the cloning process in 0.7s on my computer (X1 Carbon) down from 24s _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_We are also working on improving the .obj loader_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_On the clone front_dd_ I wanted to mention that clone is a COMPLETE clone_co_ meaning that we go through all properties to effectively clone them one by one_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-20T17:03:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Memory wise_co_ with exactly the same object as you and the same code_dd_ 448MB_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So I_t_m not able to reproduce your issue regarding memory footprint. Can you share your complete project?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-20T17:19:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Temechon and I will see how we can optimize the obj loader. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-20T17:21:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks guys! Let me know if you find the memory issue that Kesshi mentioned_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2015-10-20T18:08:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This is one reason why I love BabylonJS.  You can_t_t beat this forum._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jessepmason","Date":"2015-10-20T18:19:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_101783_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_18006_qt_ data-ipsquote-username_eq__qt_adam_qt_ data-cite_eq__qt_adam_qt_ data-ipsquote-timestamp_eq__qt_1445364529_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_This is one reason why I love BabylonJS.  You can_t_t beat this forum._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_I agree!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-20T18:22:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I would love to be able to convince Kesshi to give babylon.js a second try _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ He was really unlucky to it these issues_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kesshi","Date":"2015-10-20T18:31:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_@Dektakosh_dd_ That was a very fast fix._lt_/p_gt__lt_p_gt_I will try babylon again tomorrow_co_ when i_t_m at work. Maybe i will change my mind _dd_-)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Regarding the obj loading. Some days ago i was looking at the obj loader code a bit. If i remember correctly_co_ one reason for the long load times seems to be this function_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/loaders/OBJ/babylon.objFileLoader.ts#L278_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/loaders/OBJ/babylon.objFileLoader.ts#L278_lt_/a_gt__lt_/p_gt__lt_p_gt_It is called for each loaded vertex which results in an O(n^2) issue. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-10-20T18:35:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_And you are totally right. I_t_m working on it to optimize it._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-10-20T18:47:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Please try with the latest 2.3 _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-20T19:31:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_yep_co_ this function is not too optimized _dd_-) _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-10-20T20:20:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_So_co_ the modified loader can be tested now - _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/loaders/OBJ/babylon.objFileLoader.js_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/loaders/OBJ/babylon.objFileLoader.js_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-10-21T09:14:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ah ah!!  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  In exactly 12h_co_ a mega big performance issue posted by a user is addressed and corrected by the BJS community! Once again_co_ BJS team power ! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_cool.png_qt_ alt_eq__qt_B)_qt__gt__lt_/p_gt__lt_p_gt_Love it! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]