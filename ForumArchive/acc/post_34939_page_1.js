[{"Owner":"chicagobob123","Date":"2018-01-08T17:22:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIs there any way to treat a scene like a model. Load_co_ position_co_ scale_co_ rotate? And what is the difference between the two anyway. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen I Execute BABYLON.SceneLoader.Append I have nothing to reference to  Load_co_ or position_co_ or scale_co_ or rotate.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf there is link that talks about this I did not see it. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-01-08T22:19:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tonce loaded (or appended)_co_ you can just create a TransformNode and set all root meshes as child of this node\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCheers!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"chicagobob123","Date":"2018-01-08T23:22:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#353c41_sm_font-size_dd_14px_sm__qt__gt__lt_span_gt_ _lt_/span_gt_TransformNode and set all root meshes as child of this node WOW I will have to look this up but you gave me some real hope in solving this issue. _lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#353c41_sm_font-size_dd_14px_sm__qt__gt_Thanks._lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"chicagobob123","Date":"2018-01-09T19:03:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks to you I was able to get a major chunk of what we needed done. I would have never figured this out. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks a bunch\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"SpaceToast","Date":"2018-01-30T03:10:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSorry to _qt_bump_qt_ an old topic_co_ but is there a better way to get the results--the appended bits--from _lt_strong_gt_BABYLON.SceneLoader.Append()_lt_/strong_gt_ ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI believe I understand the concept above--mark everything that_t_s already loaded before calling _lt_strong_gt_BABYLON.SceneLoader.Append()_lt_/strong_gt__co_ at which point everything that_t_s not marked can be assumed to come from the file load. The trouble is_co_ if multiple files are being loaded_co_ there_t_s no guarantee that all of the new meshes_co_ lights and cameras came from the same file when this append_t_s _lt_strong_gt_onSuccess_lt_/strong_gt_ fires. (This is assuming file loading happens async.)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI suppose it would be possible to use _lt_strong_gt_BABYLON.SceneLoader.Load()_lt_/strong_gt_ to instead put the results into a new (hidden) scene_co_ loot that scene for parts_co_ then delete it. That feels like a lot of overhead though. Any ideas?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]