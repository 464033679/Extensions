[{"Owner":"Art Vandelay","Date":"2017-11-29T07:59:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi everyone_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat_t_s the difference between Mesh and AbstractMesh? I understand the Mesh extends AbstractMesh but I am trying to understand when I should use one and when I should use the other. An example would be great as well.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sebavan","Date":"2017-11-29T08:32:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tbasically you should not use abstractMesh on your own as this is the common parts between Mesh and InstancedMesh. Since a couple of weeks ago you can create a TransformNode if you need to group Meshes under a transform a bit like in unity.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2017-11-29T09:36:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have never used it directly_co_ but often need to declare it in TypeScript in function parameters for Typing_co_ ie_dd_ for PickingInfo.pickedMesh_dd__lt_br /_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/01a11b0a4dcd1a195e9ca0b179852006f978ad9a/src/Collisions/babylon.pickingInfo.ts#L14_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/01a11b0a4dcd1a195e9ca0b179852006f978ad9a/src/Collisions/babylon.pickingInfo.ts#L14_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is an example of current state of VR Experience Helper (may change before 3.1 final) for setting a predicate for selection_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_let experienceHelper _eq_ new BABYLON.VRExperienceHelper(scene)_sm_\nexperienceHelper.onNewMeshSelected.add((mesh_dd_ BABYLON.AbstractMesh_co_ eventState_dd_ BABYLON.EventState) _dd_ void _eq_&gt_sm_ {\n  console.log(_t_selected_t__co_ mesh.name_co_ mesh.isPickable)\n})_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tIf I was in JavaScript would not be using AbstractMesh_co_ though.  If you don_t_t know the difference - TypeScript transpiles down to JavaScript and all the typing information is lost anyway.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ would say that having _qt_Abstract_qt_ in the name of the class is a good indication that you would not create your own instances (ie_dd_ abstract classes cannot be instantiated).\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2017-11-29T10:23:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tAbstractMesh is selected here because all Meshes derive from it. We already had an internal discussion about the name_co_ which all of us kind_t_a agree - It is not the most fortunate name. Having said that - it will not be changed. You can always cast to Mesh (if you feel like it will look better in code).\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]