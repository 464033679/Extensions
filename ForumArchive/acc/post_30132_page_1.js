[{"Owner":"Wingnut","Date":"2017-05-01T13:32:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi gang!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m a close-up model examiner - I LOVE looking at the fine details of models.  Also_co_ there are occasions when I need...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- GENTLE ArcCam wheelPrecision sensitivity/speed\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- GENTLE FreeCam upCursor/downCursor sensitivity/speed\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDoes anyone think it is possible... to adjust these two values... on the Playground GUI?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tConsiderations_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- No such thing as camera.zSpeed... only camera.speed\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- User MAY have a camera.wheelPrecision and/or camera.speed values set in the code.  Ideally_co_ a fresh playground RUN-click must not _qt_reset_qt_ these playground-based speed adjustments.  Naturally_co_ it WOULD reset those values... upon playground app re-load.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- This might require 4 new items in Settings pull-down menu.  Camera zSpeed +20% (each time clicked)_co_ Camera zSpeed -20% (each time clicked)_co_ Camera wheelPrecision +20% (each time clicked)_co_  Camera wheelPrecision -20% (each time clicked).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- I think it HAS TO reset-to-default each RUN-click_co_ unfortunately.  Still_co_ handy feature for examining models currently rendered on-canvas. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy forward/backward arrow keys_co_ and camera wheelPrecision... has always been _qt_hot_qt_ (fast and far)_co_ which_co_ many times_co_ disallows close-examination of models (I CAN add code to others_t_ PG scenes_co_ but that_t_s slow).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThoughts?  (thx)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-05-01T17:39:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI tend to consider the playground as a place for developers to learn and experiment.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHaving UI elements that impact the context of your code is not a good idea for me. you must see ALL the code that leads to what you have on screen\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2017-05-01T18:35:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYeah_co_ it_t_s sort of a boundary crossing. App interfering with _qt_soft_qt_ goods.  *nod*  I understand.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut_co_ I was thinking (momentarily)  about a _lt_em_gt_possible_lt_/em_gt_ _qt_other way_qt_.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tIn my firefox about_dd_config... there is a setting...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tmousewheel.default.delta_multiplier_z _eq_ 100\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt works... for slowing mousewheel (no solve seen there for keypresses_co_ of course)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe chances that ALL browsers... have similar properties... (abort)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNevermind.  A webpage (such as the PG app) likely doesn_t_t have perms to change about_dd_config stuff_co_ anyway. _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tIt would be nice to see a _qt_universal_qt_ (standardized) way to change nav-stuff sensitivities (when applied to a canvas element).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt seems... letting users control how much _qt_power_qt_ any nav-input has... PER event... is very handy for folks with slower systems and folks using incremental loading.  User WANTS to hold-down the forward key in his game_co_ and let the character walk at the correct speed... for the incremental loader (or infinity terrain) to _qt_keep up_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tQuickly-adjustable canvas-only nav-speed controls... on the browser (or app) itself... that would be great.  Maybe.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt_t_s sort of like... auto-dat.GUI... opened when pressing the _qt_camera controls_qt_ button on the PG app.  _lt_img alt_eq__qt__dd_o_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_ohmy.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/ohmy@2x.png 2x_qt_ title_eq__qt__dd_o_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tNo_co_ that_t_s still app interfering with _qt_the goods_qt_.  darn.  Even if the dat.GUI was _qt_owned_qt_ by the PG app_co_ it should NOT (and perhaps can_t_t) reach-into scene scope... to make the property value adjustments.  And if we COULD do that_co_ we would need to start flashing the _qt__lt_strong_gt_Dat.GUI Has Intervened_lt_/strong_gt__qt_ warning light_co_ and offer a _qt_reset to scene defaults_qt_ button.  heh\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]