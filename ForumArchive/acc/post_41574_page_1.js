[{"Owner":"BritneyWatch","Date":"2018-11-28T23:59:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI understand that in Babylon.js_co_ you have to put lights for shadings and well....3D effect in general.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut say I want to save up all the processing time and do away with having to calculate lights altogether and I already have my scene with all the lighting information baked in the texture.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn Blender such a texture would be called emissive_co_ in 3DS Max_co_ it will be standard material with full illumination.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow or what is the way to implement such a simplistic texture in Babylon.js to save up lighting calculation time ?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sebavan","Date":"2018-11-29T00:09:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou could use a PbrMaterial with unlit _eq_ true it will then bypass all the code except applying the albedoTexture to the model.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"thrice","Date":"2018-11-30T02:28:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou should be able to make a custom shader material for this purpose_co_ at least that is what I do. I use it when I want the material to appear exactly as is. Something like_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBABYLON.Effect.ShadersStore[_t_noLightFragmentShader_t_] _eq_ `_lt_br /_gt_\n\tprecision highp float_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tuniform float time_sm__lt_br /_gt_\n\tvarying vec2 vUV_sm__lt_br /_gt_\n\tuniform sampler2D textureSampler_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tvoid main() {_lt_br /_gt_\n\t  vec4 texture_color _eq_ texture2D( textureSampler_co_ vUV )_sm__lt_br /_gt_\n\t  vec4 final _eq_ texture_color_sm__lt_br /_gt_\n\t  gl_FragColor _eq_ final_sm__lt_br /_gt_\n\t}\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBABYLON.Effect.ShadersStore[_qt_noLightVertexShader_qt_]_eq_ `_lt_br /_gt_\n\tprecision highp float_sm__lt_br /_gt_\n\t// Attributes_lt_br /_gt_\n\tattribute vec3 position_sm__lt_br /_gt_\n\tattribute vec3 normal_sm__lt_br /_gt_\n\tattribute vec2 uv_sm__lt_br /_gt_\n\t// Uniforms_lt_br /_gt_\n\tuniform mat4 worldViewProjection_sm__lt_br /_gt_\n\t// Varying_lt_br /_gt_\n\tvarying vec4 vPosition_sm__lt_br /_gt_\n\tvarying vec3 vNormal_sm__lt_br /_gt_\n\tvarying vec2 vUV_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tvoid main(void) {_lt_br /_gt_\n\t  gl_Position _eq_ worldViewProjection * vec4(position_co_ 1.0)_sm__lt_br /_gt_\n\t  vUV _eq_ uv_sm__lt_br /_gt_\n\t}`_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t    this.babylon _eq_ new BABYLON.ShaderMaterial(_t_blah_t__co_ this.scene_co_ {_lt_br /_gt_\n\t      vertex_dd_ _t_noLight_t__co__lt_br /_gt_\n\t      fragment_dd_ _t_noLight_t__co__lt_br /_gt_\n\t    }_co__lt_br /_gt_\n\t    {    attributes_dd_ [_qt_position_qt__co_ _qt_normal_qt__co_ _qt_uv_qt_]_co__lt_br /_gt_\n\t    uniforms_dd_ [ _qt_world_qt__co_ _qt_worldView_qt__co_ _qt_worldViewProjection_qt__co_ _qt_view_qt__co_ _qt_projection_qt_ ]_co__lt_br /_gt_\n\t    })_sm__lt_br /_gt_\n\t`_sm_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]