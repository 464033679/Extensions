[{"Owner":"touslecoq","Date":"2016-11-23T16:09:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey all\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ve used the standard method for drag and dropping meshes in my app (ie the one with the getGroundPosition function.)  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tit works fine.  However I don_t_t really like it - I don_t_t want to have a ground plane in the scene as the user is building up building blocks and is able to rotate the camera all around the evolving structure and make changes.  The ground plane gets in the way of this.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo - has anyone come up with an alternative strategy for this?  If I remove the ground mesh it does kind of work but is glitchy - the mesh being dragged suddenly starts moving toward or away from the camera randomnly as there is no ground mesh to use as an _t_anchor_t_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ll have a play but wondered if the brains behind this operation had any thoughts ... would having the scene inside some kind of giant _t_universe_t_ cube_co_ where the sides of the cube form the background and the boundaries of the scene_co_ work?  I guess if the user ventured towards the edges of the cube they could still end up intersecting with it and seeing odd behaviour.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCheers\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRich\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-11-23T16:28:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou can still have the ground but make it invisible _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"touslecoq","Date":"2016-11-23T17:01:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey Dk.  Thanks.  I have tried that and actually I am wondering if there is some other issue contributing to the issue I am seeing.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think there are 2 symptoms_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1 - when camera (arc rotate) is rotated so that it approaches being co-linear with the ground plane (ie close to ground level)_co_ the getGroundPosition stops working as ground is no longer behind the mesh being dragged (ie the sky - no plane - is behind the dragged mesh).  I tried doing it inside a cube and had some luck but results were a bit sporadic - possibly related to point 2.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2 - aside from point 1 I am still seeing the mesh randomly move closer or farther from the camera as I drag.  I am still experimenting but its seems to do this when the ground mesh (or the cube inner wall see point 1) is at an angle to the camera (ie the camera is not directly above and facing the ground).  If I am correct I assume this is because when at an angle the _t_ground_t_ plane is closer or farther from the camera depending on the screen x_co_y coordinates.  Only when the camera faces the ground mesh perpendicularly does this not occur.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIs this normal behaviour or does it sound like something wrong with my implementation?  Would having the ground plane move with the camera so that it is always perpendicular to the camera and always at a set distance from the camera?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI will try and replicate in a playground to illustrate but thoughts appreciated...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRich\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-11-23T17:10:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis sounds expected to me. The overall process was though to work on a non co-linear way _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tYou can use a cube (but in this case you will have to rewrite the algorithm)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"touslecoq","Date":"2016-11-23T17:39:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks - I think you are right - having just played with a basic version it in the playground it is exhibiting similar behaviour.  The reason mine looks worse is because of the additional code it executes on the fly (ie checking for nearby meshes to snap to)_co_ it appears less smooth.  I therefore think the behaviour I am seeking is not standard.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs I drag components around in front of the camera I want them to remain in that same plane (ie remain same distance from the camera). I will create some functions to lock movement to the x_co_y and z axis for more precise movement.  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks again Delta.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]