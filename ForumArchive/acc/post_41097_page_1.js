[{"Owner":"logunov","Date":"2018-11-07T06:10:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tGood day everyone_co_ here is playground attempt_dd_ _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#74G81U_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#74G81U_lt_/a_gt__lt_br /_gt_\n\t_lt_br /_gt_\n\tI_t_m trying to make movement from point1 to point2 by arcus of sphere_co_ and the core goal is to prevent gimbal lock in points of pi/2._lt_br /_gt_\n\tExample demonstrates my attemps to make movement from the end of red line to the end of green line though rotating with quaternions around their cross product._lt_br /_gt_\n\t_lt_br /_gt_\n\tThe question is_dd_\n_lt_/p_gt_\n\n_lt_div style_eq__qt_background-color_dd_#fffffe_sm_color_dd_#000000_sm_font-size_dd_14px_sm__qt__gt_\n\t_lt_div_gt_\n\t\tshould start quaternion be from target.position.toQuaternion() ?_lt_br /_gt_\n\t\twhich property should be used in animation object?_lt_br /_gt_\n\t\t_lt_br /_gt_\n\t\tThank you for any advices and notes._lt_br /_gt_\n\t\t_lt_br /_gt_\n\t\tTheoretically_co_ to rotate object around some axis via Quaternion I should make quaternion with rule (w_co_ v)_co_ where w _eq_ cos(a/2)_co_ and v _eq_ n*(sin/a2)_co_ where a - is my angle_co_ n - rotation axis_co_ then convert it to the rotation matrix_co_ and use this matrix to prevent gimble lock on the position transform._lt_br /_gt_\n\t\tBut in animation it is not working_co_ I do not understand why. I am sure I am doing something wrong with BABYLON API_co_ but I can not find the problem.\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"entropy","Date":"2018-11-07T19:47:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tA common way to smoothly transition between two quaternion-based orientations is to use spherical linear interpolation (slerp_co_ for short). I think this will do what you want. The quaternion object in Babylon.js even has a slerp method built-in_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//doc.babylonjs.com/api/classes/babylon.quaternion_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/api/classes/babylon.quaternion_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_ here_t_s the Wikipedia article on slerp_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//en.wikipedia.org/wiki/Slerp_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//en.wikipedia.org/wiki/Slerp_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"logunov","Date":"2018-11-07T21:49:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThank you for notes_co_ _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/33196-entropy/?do_eq_hovercard_qt_ data-mentionid_eq__qt_33196_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/33196-entropy/_qt_ rel_eq__qt__qt__gt_@entropy_lt_/a_gt__co_ it very useful and interesting._lt_br /_gt_\n\t_lt_br /_gt_\n\tI want to formalize my question a bit deeper. so the question is_dd_ _qt__lt_br /_gt_\n\tIs babylon animation doing slerp with quaternions on their own_co_ and which property I should pas to babylon animation to make movements with quaternions. or this stuff is not supported and I should code method_co_ which will produce array of points_co_ and pass this though keys to babylon animation with _qt_position_qt_ property_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis question is a little bit confusing me_co_ because I don_t_t find any clear explanation in API how to do something like that._lt_br /_gt_\n\t_lt_br /_gt_\n\t_lt_br /_gt_\n\tEdit_dd_ I got additional question_co_ if I passing _qt_rotationQuaternion_qt_ parameter in animation constructor_co_ then will it rotate around local axes or world? If I need to rotate object around some world axis_co_ which parameter I should pas? For example_dd_ I put some object on sphere surface_co_ with base rotation_co_ how could I get his rotationQuaternion around origin (0_co_0_co_0)?  Or around some axe? _lt_br /_gt_\n\tLet_t_s have 2 points on surface_co_ p1 - start_co_ p2 - finish. Then_co_ cross(p1_co_p2) gives me normal_co_ and I can rotate around normal to go from p1 to p2_co_ but I need to get rotationQuaternion of object in p1 point_co_ provided normal-axes from cross product_co_ this should be startQuaternion for slerp function_co_ and then_co_ I can make second quaternion with rule_dd_ \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_let angle _eq_ BABYLON.Vector3.GetAngleBetweenVectors(p1_co_p2_co_normal) //normal is cross(p1_co_p2)\nlet cos _eq_ Math.cos(angle/2)\nlet sin _eq_ Math.sin(angle/2)\nlet rotationAxis _eq_ normal //normal is croos (p1_co_p2)\nnormal.scale(sin/2)\nlet endQuaternion _eq_ new BABYLON.Quaternion(normal.x_co_ normal.y_co_ normal.z_co_ cos)\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThen_co_ I should provide something with this 2 quaternions_dd_ _lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_let quaternionsArray _eq_ function(q1_co_ q2_co_ a) {\nlet result _eq_ []_sm_\nlet step _eq_ 1/a_sm_\nfor (let i _eq_ 0_sm_ i&lt_sm_a_sm_ i++){\n result.push(BABYLON.Quaternion.Slerp(q1_co_q2_co_ step*i) //q1 - startQuat_co_ q2 - endQuat\n}\nreturn result\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tAnd then make keys array for each quaternion of result array_co_ but if I pas _qt_rotationQuaternion_qt_ as parameter of animation constructor_co_ it will rotate around local axes_co_ am I right? _lt_br /_gt_\n\tSo_co_ there is two unclear points_dd_ how to get rotationQuaternion in global coordinates_co_ and how to provide animation constructor to use rotationQuaternion in worldSpace_co_ not local._lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"entropy","Date":"2018-11-08T00:03:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_234092_qt_ data-ipsquote-contentid_eq__qt_41097_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1541627388_qt_ data-ipsquote-userid_eq__qt_33182_qt_ data-ipsquote-username_eq__qt_logunov_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t2 hours ago_co_ logunov said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tEdit_dd_ I got additional question_co_ if I passing _qt_rotationQuaternion_qt_ parameter in animation constructor_co_ then will it rotate around local axes or world?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIt will_co_ presumably_co_ rotate around both. How does one rotate around a local axis and not rotate around a global axis? Or vice versa?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen you say you are trying to rotate around world axes_co_ do you mean you are trying to restrict the rotation about a particular world axis? Or_co_ if you are trying to rotate an object around a point in space (say_co_ the world origin)_co_ you_t_ll need to update (simultaneously) the rotationQuaternion of the mesh (to change it_t_s orientation) _lt_em_gt_and_lt_/em_gt_ the position vector of the mesh (to change its...well...position). The mesh_t_s position itself is just a vector_co_ and you can use quaternions to rotate that as well.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_ I think I understand your question better. When you assign a quaternion to a mesh_co_ it applies the quaternion to the coordinates of the mesh (which are probably defined relative to a local origin...I think...not certain_co_ though). To rotate around a global origin_co_ you_t_re probably back to updating both the orientation and position_co_ as previously described.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit 2_dd_ I just checked_co_ and I do believe my statement is correct_dd_ it rotates around the local origin based upon how the mesh was originally defined. You can check here_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#IKU2U%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#IKU2U#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\twhere a cube is created and then shifted along the y-axis by a unit of -1. Then_co_ when the cube is clicked_co_ it still rotates around the local center of the cube_co_ and not about the global origin. However_co_ if before the rotation you\n_lt_/p_gt_\n\n_lt_p_gt_\n\tcube.bakeCurrentTransformIntoVertices()_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthen the initial translation_co_ in effect_co_ gets baked into the vertex locations. Now it rotates around the global origin_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#IKU2U%232_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#IKU2U#2_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"logunov","Date":"2018-11-08T13:26:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThx a lot_co_ _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/33196-entropy/?do_eq_hovercard_qt_ data-mentionid_eq__qt_33196_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/33196-entropy/_qt_ rel_eq__qt__qt__gt_@entropy_lt_/a_gt__co_ your reseach was extremly useful to understand BABYLON API better_co_ but I found a two more problems_co_ because of this understanding_dd__lt_br /_gt_\n\t1) This should work only for meshes_co_ because_co_ as example_co_ camera have no method to convert vertices_co_ so_co_ if I need to move camera by this idea_co_ it is impossible_co_ because it have no verices and method (it is just note_co_ your method is good)_lt_br /_gt_\n\t2) This do not work_co_ if I choose arbitrary axis. _lt_br /_gt_\n\tHere is playground_co_ demonstrating #2 on your code_dd_ _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#H22U9B%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#H22U9B#2_lt_/a_gt__lt_br /_gt_\n\t_lt_br /_gt_\n\tLook at lines #32_co_ and #49 and #59 - I change axis_co_ because I want to rotate around blue axis_co_ and change start position + drawed all lines on the scene to make example more visible. _lt_br /_gt_\n\tMy goal is to rotate around blue axis from end of red line (point1) to end of green line (point2)_co_ this is possible_co_ because blue line is perpendicular to both green and red_co_ so green and red forming surface (plane_co_ I do not know termin on english). _lt_br /_gt_\n\t_lt_br /_gt_\n\tAnd I am shocked a bit_co_ because_co_ logically_co_ your solution should work for any kind of axis_co_ but it doesnt_co_ and I can not understand why. Maybe_co_ I missing some mathematical transformations_co_ to make it work_co_ but I do not know which math here should be used. _lt_br /_gt_\n\t_lt_br /_gt_\n\t_lt_br /_gt_\n\tp.s A simple question about math_dd_ why you multiplying quaternions? Where can I read about geometry transformations_co_ which quaternion-multiplying produces? I simply can not understand why it needed and what it_t_s doing. _lt_br /_gt_\n\t_lt_br /_gt_\n\t_lt_br /_gt_\n\tAgain_co_ my big thank for your help_co_ you really make me progress a lot. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"entropy","Date":"2018-11-08T17:59:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tJust to make sure I understand correctly_co_ you want to rotate the camera around the blue line so that the box now appears at the end of the green line?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"logunov","Date":"2018-11-08T19:16:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYes_co_ you understand correctly. Box emulates (simulates) the camera movement_co_ I need to move camera around sphere surface_co_ but any of the given BABYLON camera going in gimble lock in pi/2 so I can not use default babylon camera_co_ so I choosed 2 points on sphere_co_ and want to rotate camera with quaternion to prevent gimble lock_co_ but the problem camera rotates around itself or do not rotating. _lt_br /_gt_\n\t_lt_br /_gt_\n\tThis two points will be exactly on the same sphere.\n_lt_/p_gt_\n\n_lt_div style_eq__qt_background-color_dd_#fffffe_sm_color_dd_#000000_sm_font-size_dd_14px_sm__qt__gt_\n\t_lt_div_gt_\n\t\t_lt_pre_gt_\n_lt_code_gt_var point1 _eq_ new BABYLON.Vector3.One()\nvar point2 _eq_ new BABYLON.Vector3(3/2_co_0.5_co_0.70710678118654752440084436210485)_sm__lt_/code_gt__lt_/pre_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_br /_gt_\n\t\t\t_lt_br /_gt_\n\t\t\tMore clearly explanation_dd__lt_br /_gt_\n\t\t\tPurple line - how camera\\mesh should move_co_ looking at origin (center of the sphere)_lt_br /_gt_\n\t\t\tGreen line - point1_lt_br /_gt_\n\t\t\tRed line - point2_lt_br /_gt_\n\t\t\tBlue line - perpendicular (same as normal) to both OP and PQ where O is origin point_co__lt_br /_gt_\n\t\t\tBlue line defines that I can rotate around it though Quaternion. _lt_br /_gt_\n\t\t\tEdit_dd_ I need to note_co_ if I change camera.position property with new data_co_ it does not resolve the problem_co_ because now in my project camera.position _eq_ parameter produce this problem_co_ so I need to change camera.rotationQuaternion_co_ to change it position around sphere surface to prevent any gimble locks as description of this property said._lt_br /_gt_\n\t\t\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ data-fileid_eq__qt_20857_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_11/Illustration_of_great-circle_distance_svg.png.c9acf509a5e37d399f51878dca36ed82.png_qt_ rel_eq__qt__qt__gt__lt_img alt_eq__qt_Illustration_of_great-circle_distance_svg.thumb.png.5ef245ee4127b9bc99a0ca46c88500ff.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_20857_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_11/Illustration_of_great-circle_distance_svg.thumb.png.5ef245ee4127b9bc99a0ca46c88500ff.png_qt_ /_gt__lt_/a_gt__lt_br /_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"entropy","Date":"2018-11-09T06:19:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks for the picture. That_t_s much clearer to me now. The method I described above is likely your best option_dd_ you need to update the camera_t_s position and rotation simultaneously. Your initial quaternion should be qi _eq_ (0_co_0_co_0_co_1)_co_ which represents no rotation_sm_ qf should represent a rotation about the desired axis (like you had in your example). Here_t_s how to rotate a vector_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. Write the initial position of the camera qpos _eq_ (x_co_y_co_z_co_0).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. Let qs be the slerped quaternion between qi and qf for the current frame. The new position of the camera would be the x_co_y_co_z components of qs*qpos*qsc (where qsc is the conjugate of qs). Note the multiplication must be in that order.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3. Adjusting the orientation of the camera may be as simple as setting the target to the same point as you move the position. You might also have to rotate the up vector in a manner similar to step 2_co_ or the look direction. Unfortunately_co_ I_t_m a little unfamiliar with the babylon.js syntax_co_ so I can_t_t advice specifics. The API may already provide a more elegant solution_co_ but this is the method I would try.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"entropy","Date":"2018-11-09T17:35:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/33182-logunov/?do_eq_hovercard_qt_ data-mentionid_eq__qt_33182_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/33182-logunov/_qt_ rel_eq__qt__qt__gt_@logunov_lt_/a_gt_ As I mentioned_co_ I_t_m a novice when it comes to Babylon.js. In another thread I learned about transform nodes from user Jerome. They can be used to define centers of rotation_co_ among other things. Perhaps that would be a better approach(?)_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//doc.babylonjs.com/how_to/transformnode_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/how_to/transformnode_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"logunov","Date":"2018-11-10T04:58:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThank you_co_ _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/33196-entropy/?do_eq_hovercard_qt_ data-mentionid_eq__qt_33196_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/33196-entropy/_qt_ rel_eq__qt__qt__gt_@entropy_lt_/a_gt__co_ I finally made a solution_co_ take a look_dd_ _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#PP962K%238_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#PP962K#8_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd the real camera example_dd_ _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#PP962K%239_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#PP962K#9_lt_/a_gt__lt_br /_gt_\n\t_lt_br /_gt_\n\tAnswers on my questions in order_dd__lt_br /_gt_\n\t1) To provide quaternion rotation you need use transformNode as pivot_co_ putted in the center of the rotation. In the problem of mine it will be origin between point1_co_ point2 and normal (green_co_ red and blue lines)_lt_br /_gt_\n\t2) Babylon animation component slerping quaternions _lt_strong_gt_on it_t_s own_co__lt_/strong_gt_ just need to put ANIMATIONTYPE_QUATERNION and _qt_rotationQuaternion_qt_ parameters_co_ as shown below_lt_br /_gt_\n\t3) Before use quaternions_co_ you should overwrite defaul transformNode.rotation via traformNode.rotationQuaternion_co_ by default transformNode.rotationQuaternion is equals to null_co_ so you need to put any quaternion to this before game starts or any calculations_co_ this will need to make transformNode.lookAt(target_dd_vector3) returning quaternions instead of vector3s (note_dd_ do not do that_dd_ transformNode.rotation _eq_ someQuaternion_co_ just put transformNode.rotationQuaternion _eq_ someQuaternion)_sm_ _lt_br /_gt_\n\t4) Then just create keys with start Quaternion and End quaternion_co_ due to javascript compilator_co_ you _lt_span style_eq__qt_color_dd_#8e44ad_sm__qt__gt__lt_strong_gt_can not_lt_/strong_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_transformNode.lookAt(point1)\nstart _eq_ transformNode.rotationQuaternion\ntransformNode.lookAt(point2)\nend _eq_ transformNode.rotationQuaternion\ntransformNode.lookAt(point1)_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_br /_gt_\n\tBecause it will simplify this (I tested)_co_ so just make a copy as in example above_co_ and then dispose copy of this object_lt_br /_gt_\n\t5) Create animation object and put arguments._lt_br /_gt_\n\tAll works_co_ gimble lock should be **** up. _lt_br /_gt_\n\tThank you_co_ _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/33196-entropy/?do_eq_hovercard_qt_ data-mentionid_eq__qt_33196_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/33196-entropy/_qt_ rel_eq__qt__qt__gt_@entropy_lt_/a_gt__co_ you really help me a lot! _lt_br /_gt_\n\t_lt_br /_gt_\n\t_lt_strong_gt__lt_span style_eq__qt_color_dd_#27ae60_sm__qt__gt_Note to descendants_dd__lt_/span_gt_ _lt_/strong_gt_this will work only for sphere_co_ this is spherical mathematics_co_ and this will work only for sphere with constant radius for animation time.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]