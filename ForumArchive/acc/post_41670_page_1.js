[{"Owner":"timetocode","Date":"2018-12-04T04:31:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is probably a browser thing and not a babylon thing... but I_t_m getting this thing where the game sound effects degrade the more players I add to a game.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have a player character and I attach ~20 sounds to its mesh. It is a first person shooter and each gun has about that many sounds between gunshots_co_ reloading_co_ and a handful of variants of each. In the development version these are all wav files which are far larger than whatever I_t_ll convert them to later.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs I load more players_co_ the gun of the first player starts to sound worse and worse. The weird part is none of the other players are making any sound.. they_t_re all holding still and not firing their gun. At first it just gets a little tinny or crunchy_co_ but as the player count goes up the sound crunches so much that it eventually goes almost almost silent. It sounds like a game lagging very badly_co_ but the FPS is remaining 120+\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAny idea why this is happening? All that is occurring on the sound level is that I_t_m cloning more and more of the gun sounds_co_ I_t_m not actually playing anything more than one player worth of a sounds.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI tried to reproduce this on the babylon playground but even cloning the violin music 3000 times didn_t_t change a thing -- it sounds the same no matter how many clones are around. Maybe I_t_m causing some memory problem in my audio hardware with the wavs...? The biggest is about 475 KB.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-12-04T05:15:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIt_t_s not because the camera is further from the player when you have more players?  When you attach a sound to the mesh (ie_dd_ sound.attachToMesh(mesh)) then the sound comes from the location/distance of the mesh.  I load quite a few sounds in my game attached to many meshes and have not found any issues.  Any way you can reproduce as a PG otherwise?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"timetocode","Date":"2018-12-04T06:54:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI was finally able to reproduce it in a PG.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#8B9YRN%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#8B9YRN#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is based off of the playground where violin music is playing inside of spheres. As the camera enters the sphere_co_ the music becomes audible.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn this playground I have one purple dome with music playing on loop_co_ and then 100 purple domes that have a clone of the music linked to their mesh_co_ but the music is intentionally not being played.  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe purple dome that is playing music is separate from all of the others. It is the only one playing music.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf we keep increasing the number of silent domes (see the for loop around line ~45) eventually the sound will degrade_co_ even though we_t_re only playing a single wav on loop. I left the PG on 100 silent domes b/c I don_t_t want to crash people_t_s computers. Personally I have to increase this number to 1200(!!) before I get the sound problems that are occurring in my game. So to reproduce_co_ change the count on line 45 and then walk into the isolated sphere.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat 1200 is a big number but this problem happens in my game at around 300 sounds (even though 298 of the sounds aren_t_t playing). These are just sounds that are attached to meshes and aren_t_t playing_co_ but they can get triggered later.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"timetocode","Date":"2018-12-04T08:37:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNow that I have this reproduced_co_ I think I_t_m realizing that this idea was never going to work due to the number of sounds. I did a little bit more testing with a 500 KB wav file vs a 15 KB mp3_co_ and the degradation seems more related to the number of sounds than their size.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn my game each weapon has like 5-20 sounds_co_ and a player can hold a few weapons. The walk/run cycle has like 16 sounds per material (concrete_co_ wood_co_ grass_co_ etc). It can add up to about ~100 possible sounds per player_co_ though 99% of them aren_t_t playing at any given point. BJS seems totally fine with that many sounds_co_ but it looks like attachToMesh is not designed for this. I read the source code_co_ and it looks like it *might* be viable if it would check if the sound is playing before rebuilding the matrices. Currently it does some fairly expensive work_co_ even for non-playing sounds (setPosition and computeWorldMatrix fill the profiler when stress tested with cloned sounds on moving meshes).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m going to test positioning the sounds manually at the time that they are played_co_ and not having them move along with the mesh. If that doesn_t_t work I guess I_t_ll pool them in addition.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_ definitely need a pool\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit#2\n_lt_/p_gt_\n\n_lt_p_gt_\n\tat 21 players firing the same automatic rifle_co_ the pool brought the active number of sound instances from 210 down to 59\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s an ultra simple auto-expanding pool if anyone wants. Usage is just to use _t_get_t_ for short-lived sounds and it will handle allocation and releasing on its own. It never deallocs.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_class SoundPool {\n    constructor() {\n        this.scene _eq_ null\n        this.sounds _eq_ {}\n    }\n\n    init(scene) {\n        this.scene _eq_ scene\n    }\n\n    allocate(name) {\n        const sound _eq_ BABYLON.Sound.FromAtlas(name_co_ name_co_ this.scene)\n        sound.onEndedObservable.add(() _eq_&gt_sm_ {\n            this.release(sound)\n        })\n        this.sounds[name].push(sound)\n    }\n\n    get(name) {\n        if (!this.sounds[name]) {\n            this.sounds[name] _eq_ []\n        }\n        if (this.sounds[name].length _eq__eq__eq_ 0) {\n            this.allocate(name)\n        }\n        return this.sounds[name].pop()\n    }\n    release(obj) {\n        this.sounds[obj.name].push(obj)\n    }\n}\n\nconst singleton _eq_ new SoundPool()\nmodule.exports _eq_ singleton_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tBABYLON.Sound.FromAtlas is a little wrapper that clones sounds without making additional xhrs (e.g. _t_sounds/foo.mp3_t__co_ clones it and applies new options)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]