[{"Owner":"Zephos","Date":"2018-10-14T20:52:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi all_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am really liking Babylon.js as it has a great community and it is a powerful framework. I am pretty new to graphics programming though and not an expert in JS/TS. Since starting with Babylon_co_ I have run into many scenarios where the most intuitive solution was not the supported way of doing things. I am trying to understand why this is - I actually want to start contributing to the project once I am more comfortable with it - but I can_t_t seem to understand why it is built the way it is. Anyway_co_ I have often found that my frustrations are more due to a lack of understanding than something wrong with the design... so I want to improve my understanding. I have a few questions about why babylonJS is built the way it is_co_ and I am hoping it will reduce the frustration level I am experiencing. I appreciate any answers I can get here.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. Why are camera controls integrated with the actual camera? This seems counter intuitive because it requires a new implementation of the camera for every different control scheme_co_ instead of just providing easy ways to transform the camera and letting the user define their own control scheme or else use a built in control system that is not dependent on the type of camera. This would allow changing control systems on the fly (without changing view) without trying to sync camera positions_co_ etc. (free camera controls to arc rotate_co_ for example is very difficult without a jarring view change) If there are benefits to doing it the other way that I don_t_t see_co_ please tell me. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. Why do meshes_co_ etc have to be put in the scene to load them? In my current project_co_ I want to load meshes into memory so I don_t_t have latency when I want to use them_co_ but I don_t_t want them in the scene immediately. After researching_co_ the only solution seems to be adding them to a different scene_co_ which would cause a lot of overhead seemingly_co_ or adding them and then removing them or disabling them. All of these solutions are _qt_tricks_qt_ so to speak and I feel like this is a common enough problem to not have to use tricks to solve it... I think it is pretty intuitive to pre-load assets_co_ but there doesn_t_t seem to be a supported way of doing this. It also makes it difficult to have objects just for cloning that you never actually add to the scene_co_ etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow_co_ I am uneducated on the inner workings and design patterns that are intended to be used with babylonJS. I bet most of my confusion and frustration is due to this_co_ and if I can gain a better understanding here I will gladly update the documentation to help fellow newcomers avoid some of these pitfalls. I have absolutely no problem with a framework that expects you to do things a certain way_co_ as long as there is a way to do it and it_t_s easy to learn. I think my problem may be that I don_t_t know the proper way of using babylon_co_ so I rely on my intuition that leads me down the wrong path.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI also get that it is an open source project. If there is no reason why things are the way they are other than _qt_that_t_s how it was built_qt_ then that_t_s fine. I am just trying to understand the babylon paradigm so I can use it effectively. I know there are a ton of great helpful people here who know a lot more than me so please chime in and help me understand!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI suppose more specifically I want to know how to pre-load assets that I can then clone and add just the clones to my scene. AssetContainer seemed like the solution until I realized you still have to remove all the stuff from the scene_co_ and can_t_t load stuff directly to the container.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2018-10-14T23:44:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tInteresting question and from my point of view it is a bit like asking why does Picasso paint faces with both eyes on the same side of a head when they are clearly on opposite sides. Answer because he wanted to. Developing any system depends on the life experiences and views of the developer and since these are different for us all we all see things dfferently. When I first started with Babylon.js my expectations often led me down the wrong path until I learnt _lt_strong_gt_not why_lt_/strong_gt_ things were done in the way they were but _lt_strong_gt_how_lt_/strong_gt_ things were done. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen you are learning it is too easy to look for the pieces you expect to find so you can put them together to build the system you want. However these pieces might not exist. You need to think about what it is that you want to build and what pieces are available that will allow you to build it. For example an alternative way to approach your number  2 could be to load your mesh and then use mesh.setEnabled(false) to keep it out of the way until you need it or even just mesh.isVisible _eq_ false. If you need lots of copies of the mesh then perhaps the SPS system might be a better way than cloning. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tKeep learning and there are many contributers here to help. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JackFalcon","Date":"2018-10-14T23:51:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tJohn is correct.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ an ah-ha moment was reading the principles in the contributing.md of the source code_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_## Golden rules\n\n**Babylon.js** is built upon 3 golden rules_dd_\n\n1. You cannot add code that will break backward compatibility\n2. You cannot add code that will slow down the rendering process\n3. You cannot add code that will make things complex to use\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tCheers_co_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Zephos","Date":"2018-10-15T00:18:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_231674_qt_ data-ipsquote-contentid_eq__qt_40635_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1539560673_qt_ data-ipsquote-userid_eq__qt_14282_qt_ data-ipsquote-username_eq__qt_JohnK_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t30 minutes ago_co_ JohnK said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tInteresting question and from my point of view it is a bit like asking why does Picasso paint faces with both eyes on the_lt_span_gt_﻿_lt_/span_gt_ same sid_lt_span_gt_﻿_lt_/span_gt_e of a head when they are clearly on opposite sides. Answer because he wanted to. Develop_lt_span_gt_﻿_lt_/span_gt_ing any system depends on the life experiences and views of the developer and since these are different for us all we all see things dfferently. When I first started with Babylon.js my e_lt_span_gt_﻿_lt_/span_gt_xpectations often led me down the wrong path until I learnt _lt_strong_gt_not why_lt_/strong_gt_ things were done in the way they were but _lt_strong_gt_how_lt_/strong_gt_ things were done. \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tWhen you are le_lt_span_gt_﻿_lt_/span_gt_arning it is _lt_span_gt_﻿_lt_/span_gt_too easy to look for the pieces you expect to find so you can put them together to build the system you want. However these pieces might not exist. You need to think about what it is th_lt_span_gt_﻿_lt_/span_gt_at you want to build _lt_span_gt_﻿_lt_span_gt_﻿_lt_/span_gt__lt_/span_gt_and what pieces are available that will allow you to build it. For example an alternative way to approach your number  2 could be to load your mesh and then use mesh.setEnabled(false) to keep it out of the way until you need it or even just mesh.isVisible _eq_ false. If you need lots of copies of the mesh then perhaps the SPS system might be a better way than cloning. \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tKeep learning and there are many contributers here to help. \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThanks John. You make an excellent point. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tRegarding your proposed alternative_co_ does setEnabled apply to all of a mesh_t_s clones or can the _t_master_t_ mesh be disabled while all of its clones are enabled? And what is the difference between enabled and isVisible? Lastly_co_ can you clarify what SPS means? Thank you.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2018-10-15T08:10:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tsetEnabled takes the mesh out of the rendering loop and so does not consume processing time. Whereas isVisible hides the mesh but keeps it in the rendering loop. As always the best way to find out if something works is to try a simple example in the playground _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#6W0A00_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#6W0A00_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen cloning the geometry is copied but you can change materials. An alternative is _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/how_to/how_to_use_instances_qt_ rel_eq__qt_external nofollow_qt__gt_createInstance_lt_/a_gt_ this copies the geometry and the texture_co_ so an instance cannot have its material changed.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy preference is SPS _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/how_to/solid_particle_system_qt_ rel_eq__qt_external nofollow_qt__gt_solid particle system_lt_/a_gt_  this takes a single mesh and allows you to group copies_co_ as a particles_co_ into a single mesh_co_ so one draw call_co_ but still allows a number of aspects to access individual particles.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-10-15T16:37:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_231677_qt_ data-ipsquote-contentid_eq__qt_40635_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1539562703_qt_ data-ipsquote-userid_eq__qt_32869_qt_ data-ipsquote-username_eq__qt_Zephos_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t16 hours ago_co_ Zephos said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThanks John. You make an excellent point. \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tRegarding your proposed alternative_co_ does setEnabled apply to all of a mesh_t_s clones or can the _t_master_t_ mesh be disabled while all of its clones are enabled? And what is the difference between enabled and isVisible? Lastly_co_ can you clarify what SPS means? Thank you.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tAs far as clones_co_ these are just meshes sharing geometry.  Disabling one has no effect on others.  Also_co_ there is no such thing as a MASTER clone_co_ which means the first mesh can also be deleted with no effect on others.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn general_co_ these _qt_tricks_qt_ as you call them are due to people perceiving that they are operatiing on meshes.  In the GPU / reality however_co_ the primary thing be operated on is materials which translate into a vertex / fragment shader pair.  This difference of what is really being done to how you THINK you are operating_co_ is causing your disconnect of what should be the way _qt_things should be_qt_.  For instance_co_ having vertices in the CPU does not mean anything to the GPU until a material is created for them to be used as data.  This compiling of shaders / GPU programs is what causes the latency.  As _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/14282-johnk/?do_eq_hovercard_qt_ data-mentionid_eq__qt_14282_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/14282-johnk/_qt_ rel_eq__qt__qt__gt_@JohnK_lt_/a_gt_ says_co_ adding a mesh &amp_sm_ disabling gets the shader programs compiled_co_ so everything is ready when you want that mesh (really material) to be seen.  Not straight forward_co_ unless you look at it from the GPU_t_s point of view.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]