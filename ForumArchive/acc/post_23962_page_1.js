[{"Owner":"dadiaar","Date":"2016-07-20T11:20:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSo in my scene I have several meshes I want to export exactly as they are.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy idea was to clone all of them_co_ baking using bakeCurrentTransformIntoVertices() and later Serialize them\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe problem I_t_m facing is that when I apply bake function to the clones_co_ originals are affected_dd_\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tNo baking clone_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#3FDSO%230_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#3FDSO#0_lt_/a_gt_\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tBaking_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#3FDSO%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#3FDSO#1_lt_/a_gt_\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\tAm I missing a parameter? Is there any other way to achieve the same effect?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-07-20T12:08:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWhen cloning a mesh you are using the same vertices to render the mesh. So when you bake the transformation to the vertices_co_ you actually bake it to ALL objects that are using these vertex-buffers (or - all clones of the one single mesh).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo tip 1 - don_t_t clone and bake _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo do that you will have to duplicate the geometry_co_ but then you lose all of the benefits of cloning. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou can always _qt_reset_qt_ the transformation of the other mesh (just reverse the transformation)_co_ but this is not a scalable solution.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dadiaar","Date":"2016-07-20T12:19:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYes_co_ I solved it manually by reversing the transformations as you say_co_ thanks. I just hope there is a cleaner way.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat I can_t_t through out my head yet is that baking affects them differently_co_ It doesn_t_t matter if they are cloning by value or reference (sharing resources)_co_ if both are affected_co_ they may be affected the same way_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI made another example removing everything except both spheres. The original red one with position.y +_eq_ 1.\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tIf no baking_co_ you will see only the blue one because they are overlapping_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#3FDSO%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#3FDSO#2_lt_/a_gt_\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tBaking the clone_co_ only the original one is affected_co_ moving to y+1_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#3FDSO%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#3FDSO#3_lt_/a_gt_\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\tI understand why this happens now_co_ but is this the expected behavoir?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-07-24T10:20:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tMore than expected! _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ This is the right behavior.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is a _qt_fix_qt_ for the baked sphere - _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#3FDSO%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#3FDSO#4_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou are moving one sphere up_co_ then cloning another from it. Now both have the same position (y _eq_ 0). Then you bake the transformation to the 2nd sphere_co_ which shares the geometry with the first one. which means that BOTH will be changed. To the transformation of the 2nd is baked to the 1st as well. To bring it back to _qt_original_qt_ position_co_ reset the transformation of the 1st.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have to say - baking transformation to cloned meshes will only cause you major problems following the reversed transformation. It seems very redundant. Why keeping reversed transformation_co_ if you can actually have the _qt_forward_qt_ transformation and not bake anything anywhere?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]