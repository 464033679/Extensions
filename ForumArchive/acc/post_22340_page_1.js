[{"Owner":"ramsestom","Date":"2016-05-04T01:09:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI need to apply a rotation around a given axis on a mesh and then another rotation around another axis (order and number of axis rotations can change depending on the user so I can_t_t precompute it as a single transformation).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe problem is that using mesh.rotation or the mesh.rotate() function is messed up as long as you apply more than one rotation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI made an example to show the issue_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//babylonjs-playground.com/#A8AR6%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonjs-playground.com/#A8AR6#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you slide mouse vertically then horizontally_co_ you will see that the second quarter rotation is actually performed arround the z axis (that point toward the user) instead of the y one.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI guess the reason for this is that babylonjs do not actually change position of all nodes of a mesh when rotation is called but simply store a single rotation vector that would be applied at rendering. Problem is that when applying more than one rotation_co_ these rotations are stored in the same vector and the order of these rotations is lost. But the order is important as_co_ if you perform_co_ on a cube for example_co_ a rotation around X axis and then Y_co_ you would not have the same result as if you rotate around Y first and then X...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo is there a solution to actually really apply a rotation on a mesh (changing each mech nodes positions according to this rotation) so that when applying next rotation_co_ it would be performed correctly?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-05-04T13:46:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/21448-ramsestom/?do_eq_hovercard_qt_ data-mentionid_eq__qt_21448_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/21448-ramsestom/_qt_ rel_eq__qt__qt__gt_@ramsestom_lt_/a_gt__co_ welcome to the forum.  I am not competent enough to help with this_co_ but I wanted to point to _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/Position_co__Rotate_co__Translate_and_Spaces_qt_ rel_eq__qt_external nofollow_qt__gt_this tutorial_lt_/a_gt_.  _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/14282-johnk/?do_eq_hovercard_qt_ data-mentionid_eq__qt_14282_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/14282-johnk/_qt_ rel_eq__qt__qt__gt_@JohnK_lt_/a_gt_ is a superhero helper (and darned nice guy) here on the forum_co_ and that tutorial... was the result of JohnK having the same issue as you.  In the forum thread where he first mentioned his issues with accumulative rotation_co_ he talked_co_ and grappled_co_ and debated with himself... it was gruesome.  I thought he was going to have a nervous breakdown.  But_co_ he survived... and wrote that cool tutorial.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow_co_ whether or not that tutorial teaches anything... that_t_s still in question.  But it IS a gorgeous tutorial and great care was taken to cover all the issues... as best I can tell.  The _qt_spaces_qt_ part is quite important.  mesh.rotate() can use world space or local space.  Have you done comparisons of the two?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnother interesting thing... our mesh rotations _lt_strong_gt_begin_lt_/strong_gt_ as pure Euler vector3_t_s.  But certain operations such as physics_co_ using yawpitchroll rotations_co_ and using mesh.rotate()... cause a .rotationQuaternion to be created for the mesh.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTake a look at _lt_a href_eq__qt_http_dd_//babylonjs-playground.com/#A8AR6%233_qt_ rel_eq__qt_external nofollow_qt__gt_this version of your playground_lt_/a_gt_.  In line 31_co_ I log the mesh.rotationQuaternion.  It_t_s undefined.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn line 51_co_ after your rotate()_co_ I do it again.  There it is.  Do you know about Quaternion rotation orders_co_ or ANYTHING about Quaternions?  If you do_co_ you are rare and probably a genius.  _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt_  They scare me.  But maybe for you... it will help you understand what the heck is happening.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  Generally speaking_co_ users rarely need to be concerned about the Quaternion that activates behind the scenes.  In spacecraft (and mesh) operations_co_ they are used to avoid a rotational issue called _qt_gimbal lock_qt_ which happens when rotations are done near mesh poles.  (bad description from me_co_ sorry.  check web)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA quick note_dd_  Most people call them _qt_verts_qt_ instead of _qt_nodes_qt__co_ around here.  It is probably because BJS uses a _qt_node_qt_ as the base class for scene items.  Nodes/Verts_co_ both work for me_co_ but if you use verts / vertices / vertex... then more readers will understand. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tVertex transformations.  Matricies.  blech.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  Want to see something strange that might help you?  I knew ya did.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tmesh.rotation.y _eq_ Math.PI/4_sm_  // spin the mesh a bit_lt_br /_gt_\n\tmesh.bakeCurrentTransformIntoVertices()_sm_  // vertices transform!  yay!_lt_br /_gt_\n\tmesh.rotation.y _eq_ -Math.PI/4_sm_  // return mesh to original rot... with verts transformed.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tStrange_co_ huh?  But it might be a helpful tool for you.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOk_co_ let_t_s leave it there_co_ because I have nothing more to say (rare for me).  I think others will comment_co_ too.  I wish I could be more helpful_co_ but I am a forever-noob.  It is because my brain is full (it has only tiny capacity)_co_ and every time I learn something new_co_ I forget something old.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  Be well_co_ talk soon._lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-05-04T14:53:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI would create a couple of Quaternions using rawPitchRoll_co_ multiply them using the correct order and then copy the result to rotationQuaternion.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ramsestom","Date":"2016-05-04T22:52:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe solution is just to switch from Space.LOCAL to Space.WORLD\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe Haxe babylon port I use (babylonHX) was actually having an error when using the rotate function with WORLD Space_co_ so this is why I did not obtained the expected result (I forgot to test with Space.WORD in babylonjs playground before posting the issue here). Testing it with babylonjs allowed me to detect this bug though and this should now be fixed in babylonHx _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for your help.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]