[{"Owner":"jacquesr","Date":"2016-04-06T06:27:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi everyone_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tsince I love babylon which I currently use for an industry related project_co_ I started to write the code base for my first ever game that might come out in 2050 since I don_t_t have too much time for it... Great announcement_co_ right?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ I didn_t_t know where in the forum I should really post this but since I am working in babylon_co_ I just put it here since suggestions might include framework specific things that I can use.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo the first things I wrote are entities and their subclasses (movable objects_co_ controllable objects_co_ sub classes that become more specific like projectiles_co_ tanks_co_ choppers_co_ etc_co_ which will play a role in the game) and a controls system.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat I am looking for is an open discussion about how I am implementing the controls system and whether or not you have suggestions about how it can be improved / uncoupled (since I really hate coupling things too tight together from an architectural point of view).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have defined a controls input class. It is closely bound to the things that are possible with a standard xbox (like) controller. The controls input holds all properties (axes values_co_ button presses). Then_co_ I have a controls translation class. It is bound to the controllable entity which can define easing and duration for translating input to output. That_t_s for adding inertia to the input. That could be relevant for smoothing inputs_co_ especially when the input comes from the keyboard instead of a controller.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThen_co_ I have a controls output class. It holds the values that are the result of input + translation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe translation class allows for setting easing function references and durations for the different axes or even for button presses.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThen_co_ I want to use the output as the base for controlling the entity. I am thinking about routing the output through another translater which then produces the actual movements_co_ since there can be additional  limitations (e. g. a tank or chopper has its own inertia for the steering thats uncoupled from the controller output)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_dd_ What do you think about this approach? How do you do this?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"OMAR","Date":"2016-04-06T08:26:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWell 1st_co_ if you are going to write classes and subclasses  then using Typescript instead of Javascript might come in handy.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSecond_co_ I don_t_t really think you need to write your own controller classes_co_ Babylon has already got pre-defined class that deal with input\n_lt_/p_gt_\n\n_lt_p_gt_\n\tGamepads_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.3/Gamepad_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.3/Gamepad_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tXbox gamepad_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.3/Xbox360Pad_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.3/Xbox360Pad_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCamera designed specifically to be used with gamepads_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.3/GamepadCamera_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.3/GamepadCamera_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor controlling gamepads_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.3/Gamepads_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.3/Gamepads_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you_t_re going to implement input_co_ then it is preferred to write those functions in the classes that need it. For example Player class needs input so you can write functions that deal with input there (and of course all of your easing and additional implements will go here too). Another way could be creating interfaces for input and then implementing these interfaces to the classes that need input_co_ this way your code will be more organized.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor limitations_co_ you can basically define function declarations in interfaces and then you can extend them in your classes in a way you desire.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnother useful tip_dd_ Try to put your classes in separate files and put only 1 class in each file. This one helped me a lot in my projects and this is also a philosophy Babylon follows.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jacquesr","Date":"2016-04-06T14:32:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Omar_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthank you for your feedback. First of all_co_ it might have been useful if I said I am using typescript. And I also follow the common 1-file-1-class paradigm.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo apart from my own gamepad things_co_ I read that I actually do the things as you mentioned (my translations are in a class of which instances are created in the controllable entity classes).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt pretty much backs up my approach which sounds good. Thank you for your post.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-04-06T14:57:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi guys.  I agree (like that matters).  J... you will likely want to detach your _lt_em_gt_controls input class_lt_/em_gt__co_ and just attach the BJS gamepad input. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tYour _lt_em_gt_controls output class_lt_/em_gt__co_ (+translationsManager)... that will need to be target/route-able_co_ right?  Sometimes the user is moving the camera_co_ sometimes a mesh_co_ sometimes a light_co_ and sometimes even attaching to live-actions_co_ such as live-changing the emitRate on a particleSystem_co_ or varying a parameter in a shader.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe structure of your flow... sounds cool.  Have you thought about this _lt_em_gt_router_lt_/em_gt_ of which I speaketh?  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  It is going to need a _qt_scaler_qt__co_ too_co_ I think.  Sometimes a mesh will want HUGE movements_co_ sometimes a light will want fine-grained movements_co_ and when routing to _qt_live_qt_ values/properties_co_ you will need to turn off SOME axes_co_ and somehow determine what value-range to allow_co_ etc_co_ etc.  FUN!  The Ranger - your _lt_strong_gt_one stop_lt_/strong_gt_ for ALL of your value-ranging needs!  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tBy the way_co_ I _lt_em_gt_sort of started_lt_/em_gt_ a strange type of _qt_keyboard_qt_ device_co_ that could reside on the same layer as a BJS gamepad device.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/2571-the-wingnut-chronicles/?do_eq_findComment&amp_sm_comment_eq_122613_qt_ rel_eq__qt__qt__gt_http_dd_//www.html5gamedevs.com/topic/2571-the-wingnut-chronicles/?do_eq_findComment&amp_sm_comment_eq_122613_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m NOT a coder.  I_t_m a child with power tools_co_ matches_co_ blow torch_co_ and a box of dynamite.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  But still... SOMETHING is drawing me toward having a babylon _qt_keyboard_qt_ class and joystick class... available at the same layer as gamepad class.  I_t_m not sure what a keyboard and joystick class would LOOK-like_co_ though.  I guess I_t_d start by cloning a gamepad class_co_ and start modifying.  *shrug*  You_t_re free to use my keymaster... but... be warned.  I WROTE IT_co_ so it is almost sure to be full of dangerous disease and germs_co_ and might even have begun as a _lt_strong_gt_bad initial idea_lt_/strong_gt_.  HARD HAT ZONE!  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2016-04-06T15:12:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m no expert_co_ but in my game I have_dd_\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tAn input module that wrangles mouse/key events into game actions (forward_co_ jump_co_ fire_co_ etc). This module handles stuff like_co_ if you bind two different keys to the same action_co_ and release one while the other is pressed_co_ the game won_t_t get confused about the input state.\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tA movement module that takes an entity and a set of action states (i.e. which actions are currently being pressed)_co_ and applies the necessary physics rules to the entity\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tAn intermediary bit that connects the key input and the player entity to the movement part.\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\tThis idea is_co_ firstly because of the intermediary bit it_t_s easy to point the inputs at a different entity_co_ or record inputs_co_ replace them with recorded actions_co_ etc. Also_co_ it lets you drive NPCs via the same system - they just get their action states from an AI module that emulates key inputs_co_ but the output of the AI module gets passed along with the NPC id to the movement bit_co_ and everything winds up moving according to the same rules.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]