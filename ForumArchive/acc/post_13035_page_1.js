[{"Owner":"RaananW","Date":"2015-03-10T16:19:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi gang_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_After dad72 sent me a few meshes he has been trying to simplify_co_ I noticed there was some kind of a problem with the simplification process._lt_/p_gt__lt_p_gt_The meshes I have tested always worked_co_ but external meshes were not simplified correctly - holes appeared where they shouldn_t_t have had appear. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Investigating that took a little while_co_ and the result was that the meshes_t_ indices are not optimized. meaning - Some vertices were duplicated during the export process_co_ and were used as a reference of an index. this leads to no problem viewing the mesh_co_ but presents a problem to the simplification process_co_ since it relies heavily on the number of triangles using each vertex._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Tl_sm_dr_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Some of the exporters don_t_t try to avoid redundant vertex data which is fine for viewing but not for simplification._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you encounter such a  problem using the simplification function_co_ you first need to optimize the indices. you do that by (surprisingly)  using the optimizeIndices function now implemented in BABYLON.Mesh. It takes some time to optimize the indices (especially if it is a large mesh) so use it only when you really need it._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Other than that I have accelerated the decimation process (removed a few unneeded lines of code and corrected some others)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_An example can be found here - _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JBSNA%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2JBSNA#2_lt_/a_gt_ (be a bit patient_co_ you will eventually see an alert dialog when it finishes).  The skull simplifies quite nicely  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I will document everything in the next day or two._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Any questions - please let me know._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-03-10T17:58:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Huge! Thank you so much Raanan!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-03-13T14:45:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi Raanan_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have three problem_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_strong_gt_1) _lt_/strong_gt_with new.optimizeIndices. This distorts completely Multimaterial textures. That may not be supported._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Can be seen on the T_t_SHIRT character and the stairs._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_strong_gt_2)  _lt_/strong_gt_quality 0.9 simplification greatly reduces the number of vertices as you can see in the picture_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Also_co_ the character does not simplify all the same scale (the decimated) (the scale he places in 1_co_1_co_1 instead of 0.3_co_ 0.3_co_ 0.3) than the base and you can see a part of the body (the head ) but not the rest of the body._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Code used_dd__lt_/p_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_mesh.optimizeIndices(function() {    mesh.simplify([{distance_dd_90_co_ quality_dd_0.9}_co_ {distance_dd_150_co_ quality_dd_0.8}_co_ {distance_dd_200_co_ quality_dd_0.7}_co_ {distance_dd_300_co_ quality_dd_0.6}])_sm_})_sm__lt_/pre_gt__lt_/div_gt__lt_p_gt__lt_strong_gt_3)_lt_/strong_gt_ With_lt_strong_gt_ _lt_/strong_gt_mesh.optimizeIndices distorts certain part of the mesh_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_strong_gt_before_dd__lt_/strong_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_strong_gt_after_dd__lt_/strong_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-03-14T13:17:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_so _dd__lt_/p_gt__lt_p_gt_1) MultiMaterial should work fine_co_ I will need the mesh to check this. to me it looks like the border problem which cannot be addressed (If the mesh is not completely _qt_closed_qt_ it will remove triangles and not just _qt_simplify_qt_ them).  What level of reduction did you use there?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_2) This can have a lot of reasons. Did you use the optimization method? it can be that the original mesh has a lot of redundant vertices. The 2nd option is that a lot of vertices are marked to be removed at the first iteration (the simplification works with threshold filtering per iteration and not with sorted arrays to make it faster). Again_co_ I will need the mesh to check this._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_3) that_t_s odd_co_ I have tested the optimization with this mesh (you sent it to me already). I will check it again and let you know. Might be a sub-meshes issue_co_ but i thought i resolved this._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_All in all - simplification should be used for relatively far objects so that the gpu will not be _qt_overwhelmed_qt_ with too many vertices per rendered frame. It will sadly alter the shape of an object to a certain extent as this is the downside of simplification _dd_-)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-03-14T14:04:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_co_ I send you the models by MP_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-03-19T20:03:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_co_ that took a while _dd_-)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_A new PR was just mrged into the 2.1 alpha version ob babylon js_co_ improving the improvement. The main problem was that in certain cases the optimizeIndices will not work correctly. Certain vertices will have the same position and normal_co_ but different uv definitions_co_ which lead to those errors that dad72 has found. The same goes to submeshes. Most of the submeshes has those issues_co_ since they are not more than one mesh divided. so the overlap is problematic._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have integrated the indices optimization into the decimation process. A new option was introduced to the settings that will enable/disable mesh optimization. I have tried improving the uv coordinates after decimation_co_ but this will take a little longer than expected_co_ so it might be implemented for BJS 2.2 or 3 ._lt_/p_gt__lt_p_gt_There is still the option to use optimizeIndices (which will save some time and improve performance)_co_ but it might lead to those errors._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Everything will be soon documented._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_A small note about submeshes - the entire process should work with submeshes. There is however a big chance that triangles will still disappear. This is again due to the lack of border detection. The triangles that will be gone are always at the border_co_ the connection between one submesh and the other._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]