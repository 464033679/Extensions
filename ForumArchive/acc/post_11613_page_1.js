[{"Owner":"amorgan","Date":"2015-01-09T17:47:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Right now I am following a similar method to Temechon_t_s for updating animations found here_co_ _lt_a href_eq__qt_http_dd_//pixelcodr.com/tutos/toad_attack/toad_attack-2.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//pixelcodr.com/tutos/toad_attack/toad_attack-2.html_lt_/a_gt_ RE_dd_ Basic Animations. This is the only way I have seen to be able to dynamically create animations based of off current position_co_rotation_co_ etc. It would be nice if instead of taking a value for the Keys_co_ they could take a function_co_ so that the animation would not have to be recreated on every iteration. Would this be possible to do? _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-09T19:24:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Good idea! How do you think the code would look like from an user point of view? (dream it and I_t_m gonna code it _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amorgan","Date":"2015-01-09T21:43:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Awesome! This is my first pass at would it could look like_co_ still referencing Temechons example_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_function animateEnding (ending) {    // Create the Animation object    var animateEnding _eq_ new BABYLON.Animation(_qt_animateEnding_qt__co_ _qt_position.y_qt__co_ 60_co_ BABYLON.Animation.ANIMATIONTYPE_FLOAT_co_ BABYLON.Animation.ANIMATIONLOOPMODE_RELATIVE)_sm_    // Add these keys to the animation    animateEnding.setKeys(function () {\t\tvar keys _eq_ []_sm_\t\t//Get the initial position of our mesh\t\tvar posY _eq_ ending.position.y_sm_\t\t\t\tkeys.push({\t\t\tframe_dd_ 0_co_\t\t\tvalue_dd_ posY\t\t}_co_{\t\t\tframe_dd_ 5_co_\t\t\tvalue_dd_ posY+0.5\t\t}_co_{\t\t\tframe_dd_ 10_co_\t\t\tvalue_dd_ posY\t\t})_sm_\t\t\t\treturn keys_sm_\t})_sm_    // Link the animation to the mesh    ending.animations.push(animateEnding)_sm_    // Run the animation !    scene.beginAnimation(ending_co_ 0_co_ 10_co_ false_co_ 1)_sm_}_lt_/pre_gt__lt_p_gt_Then at the beginning of the animation_co_ the function is called each time (internally to the animation function). Therefore when you call beginAnimation()_co_ restart()_co_ or if it is a looping animation that function gets called to recalculate the keys. Might be able to keep the existing use of the function if the parameter is determined to be an arrary or a function._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Also would calling beginAnimation()_co_ restart the animatin? Or does restart() work even after the animation has stopped?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amorgan","Date":"2015-01-09T21:55:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_You know though reading back through the animation wiki sections. It seems like BABYLON.Animation.ANIMATIONLOOPMODE_RELATIVE could have been used for this? Or am I missing something..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Edit_dd_ Unless_co_ Relative means since the last animation and not the current position at the beginning haha_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-09T22:30:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok let me think a bit about how to do that without losing performance_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-01-11T23:32:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi amorgan_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you declare your variable as global_co_ then it should work the way you want.  I_t_m not certain I understand the problem._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Dbawel_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amorgan","Date":"2015-01-12T15:26:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I thought I tried this before and was having issue. I will have to try it again_co_ but I thought there was an issue with propogating references through the function? In addition it would be nice to keep this out of the global space_co_ imo._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-12T21:58:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Guess what? I found a satisfactory way to do this._lt_/p_gt__lt_p_gt_So now you can do this_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP_lt_/a_gt__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var keys _eq_ []_sm_    //At the animation key 0_co_ the value of scaling is _qt_1_qt_    keys.push({        frame_dd_ 0_co_        value_dd_ function() {\t\t\treturn -10_sm_\t\t}    })_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amorgan","Date":"2015-01-13T15:04:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_So I don_t_t think this does what I would have expected_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#1_lt_/a_gt_ I would have expected it to be finish back at 1 (the initial starting point)_co_ but instead grows. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I would assume it is calculating this value every time the animation function is trying to interpolate the frames? Whereas the goal would be to only calculate it at the beginning. I still haven_t_t tried the global variable method_co_ I will get back in regards to that_co_ though I would still prefer it not be global._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-01-13T16:08:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#2_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You mean like that? But that_t_s what you already posted above_co_ isn_t_t it?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amorgan","Date":"2015-01-13T18:15:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_No they do not behave the same. If you look at this_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#3_lt_/a_gt_ You will notice that if you click on the fpsLabel_co_ it will increase the y scaling by 1_co_ but the animation does not change_co_ because the value only get_t_s calculated on creation. Whereas I am looking to calculate the value at the beginning of each loop/start of the animation. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amorgan","Date":"2015-01-13T18:27:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_So I can achieve what I want by eleminating some steps from Temechons example and not entirely recreate the animation_co_ but just recalculate the keys and set them again before calling the animation. _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#4_lt_/a_gt_ (press the fpsLabel). This isn_t_t as clean as just being able to pass in a function for the keys_co_ then just starting and/or restarting the animation. Maybe it is_co_ since I can just use the function I would have used to calculate the keys anyways. Guess it depends on if we want Babylon to handle it or not._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Note_dd_ I_t_m being generic with my examples_co_ of course_co_ since I am trying to do other animations also that would benefit from the behavior I am suggesting_co_ at least for me _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-13T19:13:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This should work_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%235_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#5_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amorgan","Date":"2015-01-13T20:32:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Unfortunately that is still not solving the problem I see. If I were to change scaling.x before calling that animation_co_ only the first key will _qt_update_qt__co_ the other keys will stay as they were. Though I tried to show that_co_ but for some reason when I do this_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%236_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#6_lt_/a_gt_ I can_t_t change the scaling.x_co_ once the animation has began_co_ even if it is set to CONSTANT? _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you look back at _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#1_lt_/a_gt_ I would want to be able to calculate those keys at the beginning of the animation_co_ but this method instead makes it infinitely grow instead of returning back to the initial value. The desired result would be how this example executes_co_ I use the scaling.y as example to show that it is indeed being recalcuated before each call. This specific example might be hiding the issue_co_ though. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-14T00:12:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Perhaps like this ? _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%237_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#7_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amorgan","Date":"2015-01-14T02:56:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_but then you get behavior like this _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%238_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#8_lt_/a_gt_ (press the fpsLabel haha) _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-14T04:02:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_And this one?_lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%239_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#9_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amorgan","Date":"2015-01-14T14:26:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_At that point I feel like it_t_s just as clean then to do this_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%2310_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OCNMP#10_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Edit_dd_ Marking this as solved in reference to this solution and Detlakosh_t_s example_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OCNMP%239_qt_ title_eq__qt_External link_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs...d.com/#1OCNMP#9_lt_/a_gt_ . Either seem suitable_co_ depending on preference._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-14T23:00:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Both work_dd_)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amorgan","Date":"2015-01-16T20:05:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Unless you see a need or a performance advantage of babylon handling this_co_ I will stick with the method above. Thanks for the help_co_ it allowed me to eliminate some overhead on my animations._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-16T21:05:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Performance wise they should produce same outcome_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]