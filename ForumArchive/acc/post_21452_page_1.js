[{"Owner":"ancientholiday","Date":"2016-03-25T11:44:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI am trying to perform a Boolean subtraction operation on an imported Mesh (skull.babylon).  I have downloaded the demo from Babylon CSG.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tDemo_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#NZPX4_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#NZPX4_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t The operation seems to work on native meshes_co_ but not on imported meshes.  Has anyone tried this before?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI used the loader to bring in the mesh_co_ and then tried to reference it in the subtraction operation.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo far_co_ no luck\n_lt_/p_gt_\n\n_lt_p_gt_\n\t Thanks\n_lt_/p_gt_\n\n_lt_p_gt__lt_a class_eq__qt_ipsAttachLink_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/applications/core/interface/file/attachment.php?id_eq_6967_qt__gt_indexCSG.html_lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-03-25T12:51:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI couldn_t_t get it to work either_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#XA6F3%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#XA6F3#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt doesn_t_t make it through_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tvar aCSG _eq_ BABYLON.CSG.FromMesh(a)_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#XA6F3%234_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#XA6F3#4_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-03-25T17:00:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tBooleen operations are geometry dependant_co_ of course. I have discovered many booleens that either don_t_t subtract_co_ or produce unusable results. The more complex and edge vertices_co_ the more computation is required - and will often reach a point where the result cannot rectify. Booleens are quite tempormental operations_co_ and I generally avoid them until there is no other option left to produce a desired result. Perhaps this is old school carefulnes_co_ but they are definately computationally heavy and quite often produce undesired artifacts.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ancientholiday","Date":"2016-03-25T19:00:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIf the boolean does not work then I would like another way to do a cross-section of a group of meshes.  Can this be achieved by making something transparent beyond a plane?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Gijs","Date":"2017-10-16T21:51:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tBetter late than never_dd_ turns out the problem here is that the skull doesn_t_t have its UVs set_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#XA6F3%2310_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#XA6F3#10_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]