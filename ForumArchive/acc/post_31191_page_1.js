[{"Owner":"fenomas","Date":"2017-06-21T06:12:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe implementation of _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.node.ts#L75-L87_qt_ rel_eq__qt_external nofollow_qt__gt_mesh.onDispose_lt_/a_gt_ seems to make it impossible to trigger more than one event.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_br /_gt_\n\tOn the one hand_co_ it_t_s not a regular property - it has a setter but no getter_co_ so you can_t_t hook it like a normal callback_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var old _eq_ mesh.onDispose\nmesh.onDispose _eq_ function() {\n    if (old) old() // doesn_t_t work_co_ mesh.onDispose always undefined\n    // ...\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tBut on the other hand_co_ it_t_s not an event / observable either - there_t_s no way to listen to it_co_ and assigning a callback just overwrites any previous callback_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var mesh _eq_ new BABYLON.Mesh(_t__t__co_ scene)\nmesh.onDispose _eq_ function() { console.log(_t_never happens_t_) }\nmesh.onDispose _eq_ function() { console.log(_t_happens_t_) }\nmesh.dispose()\n// &gt_sm_ happens_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat is the purpose of this pattern_co_ and how is it meant to be used?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd why not just use a regular property or a regular event?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2017-06-21T12:31:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m thinking this was for backwards compatibility.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUse_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_color_dd_#005cc5_sm__qt__gt_node_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_onDisposeObservable_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_#005cc5_sm__qt__gt_add_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_(_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_callback_lt_/span_gt__lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt_)_sm__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-06-22T01:48:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHmm. Okay_co_ I see the Observables docs now_co_ so I get the latter version.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut if onDispose is there for backwards compatibility_co_ why is implemented as a write-only pseudo-property? Isn_t_t this incredibly confusing to users?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI mean_co_ it looks like a regular callback - but if you use it like one_co_ then eventually you_t_ll get weird memory leaks that are _lt_em_gt_incredibly_lt_/em_gt_ hard to debug (because the second callback you tried to add silently overwrote the first_co_ with no obvious way for the user to know it happened).\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-06-22T15:57:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNot sure to follow you.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt should behave exactly like a callback.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tif you set node.onDispose _eq_ func1 _eq__eq_&gt_sm_ func1 is added to the observable and a link to the observer is kept.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tand then node.onDispose _eq_ func2_eq__eq_&gt_sm_ previous observer is removed from the list (so no one hold a link to the observer so the GC can collect it) and only func2 will be there. Where do you see a memory leak here?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.node.ts#L82_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.node.ts#L82_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-06-22T17:04:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_179308_qt_ data-ipsquote-contentid_eq__qt_31191_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1498147077_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t1 hour ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tIt should behave exactly like a callback.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIt doesn_t_t! Please see the first example in my first post. Normal callback properties can be hooked_co_ and that_t_s generally the idiomatic way to use them AFAIK.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhereas_co_ the current _qt_onDispose_qt_ _lt_em_gt_looks_lt_/em_gt_ like a property_co_ and _lt_em_gt_looks_lt_/em_gt_ like it can be hooked. And code like my first example will look like it_t_s working_co_ until more than one callback gets added to the same mesh. Then callbacks start getting silently thrown away_co_ and the user starts seeing memory leaks. Otherwise there_t_s no way a user will notice that onDispose isn_t_t a regular property.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBasically_co_ write-only properties are bad juju. _lt_a href_eq__qt_https_dd_//msdn.microsoft.com/en-us/library/ms182165.aspx_qt_ rel_eq__qt_external nofollow_qt__gt_Take it from the folks at Microsoft_lt_/a_gt_ _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt would be better for events like this to be regular properties. (Or if they_t_re deprecated or something_co_ just removed?)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-06-22T17:27:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIf code is easier_co_ here is my use case (now fixed to work around the current implementation)_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_// add mesh to the octree\n_octree.dynamicContent.push(mesh)\n\n// function that removes mesh from the octree\nvar remover _eq_ fastSplice.bind(null_co_ _octree.dynamicContent_co_ mesh)\n\n// call remover when mesh gets disposed\nif (mesh.onDisposeObservable) {\n    // babylon 2.4+\n    mesh.onDisposeObservable.add(remover)\n} else {\n    // babylon 2.3 and below - breaks from 2.4+\n    var old _eq_ mesh.onDispose\n    mesh.onDispose _eq_ function () {\n        if (old) old()\n        remover()\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI don_t_t think it_t_s possible to do the above without separate handling for ~2.3 and 2.4+\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHope this makes sense!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2017-06-22T17:52:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tSo you would be fine if there was just a getter for onDispose_co_ right?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-06-22T17:54:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tAs long as we protect the backward compat I_t_m fine _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-06-22T18:09:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_179330_qt_ data-ipsquote-contentid_eq__qt_31191_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1498153943_qt_ data-ipsquote-userid_eq__qt_4289_qt_ data-ipsquote-username_eq__qt_adam_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t6 minutes ago_co_ adam said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tSo you would be fine if there was just a getter for onDispose_co_ right?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI_t_m fine regardless now that I_t_m working around it _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  It_t_s just bad juju for other users.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy guess is that a getter returning _lt_span style_eq__qt_color_dd_#24292e_sm__qt__gt__onDisposeObserver.callback_lt_/span_gt_ would fix things_co_ but I haven_t_t looked inside Observable very closely.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]