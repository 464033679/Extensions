[{"Owner":"fenomas","Date":"2017-06-29T18:04:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have a question about an SPS where not all of the particles are in use. That is_co_ suppose the SPS has 10_co_000 particles in total_co_ but at the moment only 5_co_000 of them are visible_co_ and the other 5_co_000 are inactive_co_ ready to be emitted.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAt first glance_co_ since setParticles takes _qt_start_co_ end_qt_ parameters_co_ it looks like one can save performance by keeping the 5_co_000 dead particles at the end of the particles array. That way you can call _qt_setParticles(0_co_ 5000)_qt_ and the update loop won_t_t have to visit the dead particles.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHowever_co_ if I understand SPS correctly_co_ it doesn_t_t have any mechanism to skip rendering dead particles - it renders them_co_ but if they_t_re invisible it scales them down and moves them inside the camera frustum_co_ right? And since that happens inside setParticles_co_ this means that setParticles needs to be called even on invisible particles_co_ right?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo is there any way to tell the SPS to skip unneeded particles? Or do you just need to mark them invisible but still include them in the setParticles loop so that they get moved to places where they don_t_t render?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-06-29T20:49:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou got everything.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tActually marking them as invisible turns them to ... invisible. This just means you won_t_t see them_co_ but you can still manage them (update them_co_ etc).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUsing start and end indexes allows to speed up the loop by processing only successive subparts of the particle array. Note that you can call it many times with different particles setParticles(500_co_ 500)_sm_ setParticles(510_co_ 510)  will update only the 500th and the 510th ones.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe expected way to not manage dead particle would be to set them dead _dd_ particle.alive _eq_ false. ... and I just realize that I never made a test in the particle loop to skip dead particles from being computed. Maybe noone requested this before and just one used the property _qt_alive_qt_ as simple marker in updateParticle(particle) ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf everybody agree I can add this behavior that wouldn_t_t be a breaking change _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tif a particle is marked as _qt_alive _eq__eq_ false_qt_ then it_t_s not processed in the particle loop_co_ _qt_not processed_qt_ meaning no computation (position_co_ rotation_co_ scaling_co_ color_co_ etc) is done for this particle except the call to updateParticle() ... in order to reactivate it if needed. _qt_alive_qt_ would keep different from _qt_visible_qt_ _dd_ it could be alive and invisible or dead and visible as well\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-06-30T02:06:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYeah_co_ I saw that _qt_alive_qt_ wasn_t_t being used_co_ so I ignored it. It would make sense to implement something with that_co_ yes!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut if dead particles are skipped entirely by setParticles_co_ then recycling a particle by marking it invisible and dead wouldn_t_t work_co_ right? You_t_d need to mark it invisible but not dead_co_ then call setParticles on it_co_ and then mark it dead_co_ or else it would remain visible_co_ right?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t(And incidentally_co_ doing this on individual particles looks like a bad idea due to overhead. If you call _qt__lt_span style_eq__qt_color_dd_#272a34_sm__qt__gt_setParticles(n_co_ n)_qt_ on 500 different values of n_co_ then if billboard is set you just calculated view matrices 500 times?)_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe background here is_co_ when you render a VBO/IBO in GL_co_ you specify start and end points right? I had thought that maybe Babylon exposed this somehow_co_ so that if I kept my particles list partitioned between live and dead elements_co_ I could tell BJS the span of live indices and the dead ones would get skipped entirely (so there was no need to scale them down or move them somewhere invisible).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut it looks like BJS doesn_t_t expose anything like this_co_ right?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-06-30T08:21:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAbout invisible/alive_co_ you_t_re right. I wrote my answer late night without thinking much about this.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ I think that_co_ in order to avoid the needed double-pass_co_ I should probably add some hidden property to each particle_co_ something like _dd_ _justDead _eq_ true\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis would allow to set the just-dead particles as invisible ones also on the first pass_co_ and then to skip their processing for the next calls to _lt_em_gt_setParticles() _lt_/em_gt_until they_t_re set alive back. I need to think more carefully about this. But this could be an easy approach_co_ if I_t_m not wrong.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYep_co_ you_t_re right also _dd_ calling _lt_em_gt_setParticles(i_co_ i)_lt_/em_gt_ 500 times to manage 500 specific particles is not a good idea. In fact_co_ this feature is makes sense to update only very few particles from a large pool without reprocessing the whole pool in order to keep good perfs.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAbout your last question _dd_ the SPS relies on _lt_em_gt_mesh.updateVerticesData() _lt_/em_gt_what doesn_t_t expose the ability to pass subparts of the concerned array (positions_co_ normals_co_ etc) to the VBO (or no start and end point). Maybe this feature is accessible deeper in the framework. Something else I need to check...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t[EDIT] thinking about the property _justDead_co_ this could also be generalized to the visibility with _justInvisible.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tActually the invisible particles are scaled to zero and set at the camera position. Why ? scaling them to zero should be enough regarding their visibility. Well_co_ getting them permanently outside the frustum also guarantees that won_t_t be pickable.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo if setting a particle as dead implies its insivibility and it_t_s not processed any longer in the same time (so not necessarily kept outside the frustum if the camera moves)_co_ I_t_m not sure they could avoid the pickability.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNot that obvious ...\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-07-03T02:42:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYes_co_ I follow you and agree with what you_t_re saying. If you don_t_t process every particle_co_ inactive ones will get into the view_co_ and one has to suspect that things will happen (whether with picking_co_ or artifacts due to the material used_co_ etc).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBasically_co_ if the number of particles you need isn_t_t constant_co_ it _lt_em_gt_feels_lt_/em_gt_ like you should create a system large enough for your peak needs_co_ and then just turn particles on and off as needed. But in light of the inner loop_co_ dead particles are only moderately less costly than live ones_co_ so it probably makes more sense to make several smaller SPSs and dispose the ones that aren_t_t needed.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLooking at it very naively_co_ I believe the GL call that renders VBOs lets you specify start and end points_co_ so if BJS exposed that somehow then SPS could just skip dead particles entirely_co_ both processing and rendering. But that_t_s well into _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ territory_co_ and even if you could skip vertices for rendering_co_ making it work well with other systems (e.g. picking) would probably be a lot of work...\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-07-12T12:26:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tbtw_co_ I_t_m thinking about the design of an extensible SPS (the ability to add particles after it_t_s built)\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-08-20T12:19:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI intend_co_ in the next weeks_co_ to bring some tiny improvements to the SPS (if it behaves like I wish) _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- to skip the inactive particles from the particle loop process _dd_ only the method _lt_em_gt_updateParticles()_lt_/em_gt_ will then be called (at least to set/uset them as inactive/active). The inactive solid particles would then keep their current state (position_co_ rotation_co_ visibility_co_ etc) until reset to active. If everyone is OK_co_ I would like to use the existing particle property _lt_em_gt_.alive_lt_/em_gt_ what wasn_t_t used so far for this.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_eq_&gt_sm_ more performance for SPS with plenty of inactive particles\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- to skip the invisible particles from the particle loop process as soon as the second call to _lt_em_gt_setParticles()_lt_/em_gt_. As for the inactive (or dead) particles_co_ only the method _lt_em_gt_updateParticles()_lt_/em_gt_ would still be called in order to eventually change this status once set. This feature requires some more test to be sure it_t_s feasable.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_eq_&gt_sm_ more perfs for SPS with invisible particles\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- in a second step_co_ to add the ability to extend the SPS after it_t_s already built_co_ so to add more particles in the geometry _dd_ this won_t_t be GC friendly_co_ but if used correctly_co_ so not each frame_co_ this could be useful to many people.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDo you agree with this_co_ folks ?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-08-21T12:08:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_qt_qui ne dit mot consent_qt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-08-21T17:26:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI agree _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-08-22T04:23:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey_co_ since I started the topic I should answer you. In my particular case_co_ I wound up not using SPS_co_ and instead using my own hacked-up particle system code.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOne complication was that_co_ AFAICT_co_ re-ordering particles seems to break something in SPS. That is_co_ suppose I have 100 particles_co_ and the first 50 are active and the last 50 are inactive. Then if particle #33 needs to become inactive_co_ I would swap its details with particle #49 so that I still have contiguous lists of active/inactive particles. But when I did this in SPS things broke in non-obvious ways.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI should add_co_ I looked into my code and it turns out that I am skipping inactive particles with code like this_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_this.mesh.subMeshes[0].indexCount _eq_ numAlive * 6_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThat seems to effectively prevent the vertices at the end of the list from getting rendered_co_ without transforming them all to certain positions_co_ etc. I don_t_t know if it would work for SPS though - with hit tests_co_ for example.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHope this helps!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-08-22T11:03:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou_t_re right. AFAIK_co_ the best way to sort the active/inactive particles (say_co_ putting the inactive ones at the end of the fixed size array) would probably a double-link system with a particle swap process.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor now_co_ I don_t_t want to implement such a mechanism because this kind of sort has also a CPU cost. I intend_co_ for now_co_ something quite simpler (so the term _qt_to skip_qt_ is probably not the best) _dd_ the particle loop will still iterate over all the particles_co_ but it will skip all the complex computations for inactive ones.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-08-29T14:13:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tPRed\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSPS perf improvement _dd_ the inactive particles ( _lt_em_gt_.alive _eq_ false_lt_/em_gt_ ) and the invisible ones ( _lt_em_gt_.isVisible _eq_ false_lt_/em_gt_ ) are now skipped from the heavy computation iterations _dd_ positions_co_ rotation_co_ bbox_co_ normals_co_ etc.\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tthe inactive/dead particles just keep their current status_co_ including visibility_co_ until reactivated\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tthe invisible ones are scaled to zero and set to the origin at the first pass_co_ then they aren_t_t computed any longer until reset as visible\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\tBoth invisible and dead particles aren_t_t then pickable.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-08-29T22:33:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tmerged!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-08-30T14:58:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tJust having some new leads to improve again the perfs... this needs a deep refactoring\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]