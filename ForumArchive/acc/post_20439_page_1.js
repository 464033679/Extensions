[{"Owner":"swat0284","Date":"2016-02-10T14:01:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello how to calculate surface of mesh? I create mesh by \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBABYLON.Mesh.CreateLines(_qt_sl_qt__co_ shape_co_ scene)_sm__lt_br_gt_\n\t  var extruded _eq_ BABYLON.Mesh.ExtrudeShape(_qt_extruded_qt__co_ shape_co_ path_co_ 2_co_ 0_co_ 3_co_ scene)_sm_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-10T17:18:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tmmmh... what do you call the surface exactly ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI don_t_t get what you intend to do with CreateLines and ExtrudeShape() together... have you an example please ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"swat0284","Date":"2016-02-10T17:57:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI create shape by createlines and then extrude it to make mesh. Surface is stg like surface_eq_a*b for cube wall where a is height of cube wall and b is width of wall\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2016-02-10T18:23:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIf you mean the surface area of a shape formed by extruding a shape then when A is area of shape_co_ P is perimeter of shape and L is length of extrusion\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSurface area _eq_ 2A + PL\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you know the facets that make up the shape and the positions of their vertices you should be able to find A and P. Don_t_t have time to create a PG at the moment but might find time over the next few days.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-10T19:15:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI agree with JohnK _dd_ 2A + PL is a very good approximation\n_lt_/p_gt_\n\n_lt_p_gt_\n\tActually an extruded shape is built on a _lt_em_gt_path_lt_/em_gt_ (a series of points for axis). Under the hood_co_ a Path3D object is built from this path. As the path is yours_co_ you can create a Path3D from it _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/How_to_use_Path3D_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/How_to_use_Path3D_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOnce you_t_ve got your Path3D_co_ you can easily get its length (so the L of the equation) with the last element of the array returned by _lt_em_gt_getDistances() _lt_/em_gt__dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.3/Path3D_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.3/Path3D_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn brief_co_ the last element of _lt_em_gt_getDistances()_lt_/em_gt_ is the total length of your path_co_ so the L value.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou can compute P with the same tool_co_ passing it the path of your model to extrude.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t[EDIT] even easier _dd_ to know the path length_co_ just use the Curve3 object_co_ and its method _lt_em_gt_length()_co__lt_/em_gt_ what is simpler to manage _dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object_lt_/a_gt__dd_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf your extrusion path isn_t_t too twisted or curved_co_ the JohnK_t_s equation will be really close to the real final surface.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tElse_co_ I_t_m afraid you need to extract all the mesh facets and then compute each triangular surface one by one.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-11T05:04:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tBTW_co_ it would be a nice exercice to implement a (User) function that calculates any mesh surface from its facets.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAdded to my TODO list for one of these days ...\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"swat0284","Date":"2016-02-12T15:28:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk great_co_ Do you know how i can fast create and extrude mesh from svg file path?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-12T15:42:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI don_t_t really know the SVG format but I suppose we can get the points from the SVG commands.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnother stuff to be added on my endless TODO list... argg _dd_ transform SVG to a series of successive points. Unless someone already did this somewhere in github or anywhere else ?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"swat0284","Date":"2016-02-12T19:22:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have solution but it is very very slow\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_&lt_sm_!DOCTYPE html&gt_sm_\n&lt_sm_html&gt_sm_\n    &lt_sm_head&gt_sm_\n        &lt_sm_meta http-equiv_eq__qt_Content-Type_qt_ content_eq__qt_text/html_sm_ charset_eq_utf-8_qt_ /&gt_sm_\n\n        &lt_sm_title&gt_sm_Babylon.js sample code&lt_sm_/title&gt_sm_\n        &lt_sm_!-- Babylon.js --&gt_sm_\n        &lt_sm_script src_eq__qt_https_dd_//ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js_qt_&gt_sm_&lt_sm_/script&gt_sm_\n        &lt_sm_script src_eq__qt_http_dd_//www.babylonjs.com/hand.minified-1.2.js_qt_&gt_sm_&lt_sm_/script&gt_sm_\n        &lt_sm_script src_eq__qt_http_dd_//www.babylonjs.com/cannon.js_qt_&gt_sm_&lt_sm_/script&gt_sm_\n        &lt_sm_script src_eq__qt_http_dd_//www.babylonjs.com/oimo.js_qt_&gt_sm_&lt_sm_/script&gt_sm_\n        &lt_sm_script src_eq__qt_http_dd_//www.babylonjs.com/babylon.js_qt_&gt_sm_&lt_sm_/script&gt_sm_\n        &lt_sm_style&gt_sm_\n            html_co_ body {\n                overflow_dd_ hidden_sm_\n                width_dd_ 100%_sm_\n                height_dd_ 100%_sm_\n                margin_dd_ 0_sm_\n                padding_dd_ 0_sm_\n            }\n\n            #renderCanvas {\n                width_dd_ 100%_sm_\n                height_dd_ 100%_sm_\n                touch-action_dd_ none_sm_\n            }\n        &lt_sm_/style&gt_sm_\n    &lt_sm_/head&gt_sm_\n&lt_sm_body&gt_sm_\n &lt_sm_button type_eq__qt_button_qt_ onclick_eq__qt_javascript_dd_test()_qt_&gt_sm_Click Me!&lt_sm_/button&gt_sm_\n\n&lt_sm_svg width_eq__qt_640_qt_ height_eq__qt_480_qt_ xmlns_eq__qt_http_dd_//www.w3.org/2000/svg_qt_&gt_sm_\n &lt_sm_!-- Created with SVG-edit - http_dd_//svg-edit.googlecode.com/ --&gt_sm_\n &lt_sm_g&gt_sm_\n  &lt_sm_title&gt_sm_Layer 1&lt_sm_/title&gt_sm_\n  &lt_sm_path d_eq__qt_m329_co_204c1_co_0 4.07843_co_0.21014 7_co_-1c2.06586_co_-0.85571 5.07843_co_-2.78986 8_co_-4c2.06586_co_-0.85571 4.186_co_-1.69255 6_co_-3c1.14728_co_-0.8269 2_co_-1 2_co_-2c0_co_0 1.93414_co_-2.14429 4_co_-3c2.92157_co_-1.21014 4.4588_co_-0.69344 5_co_-2c0.38269_co_-0.92387 3.22885_co_-2.72961 8_co_-7c3.16132_co_-2.82951 7_co_-6 8_co_-7c1_co_-1 2.19073_co_-2.42215 6_co_-4c5.38708_co_-2.23141 11.74673_co_-7.37134 16_co_-10c3.80423_co_-2.35114 4.69345_co_-3.4588 6_co_-4c1.84775_co_-0.76537 5_co_-3 7_co_-4c4_co_-2 5.69345_co_-3.4588 7_co_-4c0.92389_co_-0.38269 2.02676_co_-0.77025 3_co_-1c4.35251_co_-1.02748 5.82376_co_-4.48625 8_co_-5c0.97324_co_-0.22975 1.15225_co_-0.23463 3_co_-1c2.61313_co_-1.0824 6_co_-6 9_co_-9c3_co_-3 4.29291_co_-3.29289 5_co_-4c0.70709_co_-0.70711 0_co_-3 0_co_-6c0_co_-2 -1_co_-5 -3_co_-9c-2_co_-4 -3.34619_co_-6.70546 -5_co_-9c-1.30746_co_-1.814 -3.22272_co_-3.72399 -7_co_-7c-7.47861_co_-6.48617 -13.21991_co_-13.97507 -23_co_-21c-6.54813_co_-4.70343 -13.3956_co_-7.10476 -21_co_-11c-6.41809_co_-3.28756 -14.80243_co_-11.43288 -21_co_-14c-2.92157_co_-1.21015 -4.87857_co_-2.49346 -8_co_-3c-0.98709_co_-0.16018 -4_co_0 -6_co_0c-1_co_0 -3_co_0 -7_co_0c-3_co_0 -7_co_0 -10_co_0c-3_co_0 -6_co_0 -8_co_0c-3_co_0 -5_co_0 -8_co_0c-2_co_0 -3_co_0 -4_co_0c-3_co_0 -5.08026_co_0.31074 -8_co_1c-2.17624_co_0.51374 -4.82376_co_1.48626 -7_co_2c-1.9465_co_0.45951 -5.80566_co_1.44841 -10_co_3c-3.867_co_1.4305 -6.88153_co_2.19028 -10_co_4c-3.86798_co_2.24469 -7.7265_co_4.29362 -12_co_8c-3.77728_co_3.27601 -6.32367_co_5.52016 -8_co_7c-2.703_co_2.38616 -3.61731_co_5.07612 -4_co_6c-1.0824_co_2.61313 -6.98283_co_6.01434 -12_co_12c-5.17905_co_6.17879 -9.6806_co_14.65426 -14_co_24c-3.58452_co_7.75572 -4.66069_co_16.53091 -8_co_23c-2.93704_co_5.68979 -6_co_10 -8_co_16c-2_co_6 -5.28473_co_13.92485 -7_co_21c-1.20139_co_4.95547 -2.95517_co_9.54915 -4_co_13c-1.15913_co_3.82837 -2.59308_co_7.85713 -4_co_15c-1.75_co_8.88467 -2.06143_co_17.9915 -3_co_25c-1.07013_co_7.99092 -1_co_12 -1_co_15c0_co_6 1.30649_co_13.04834 2_co_18c1.00977_co_7.20975 3.42215_co_12.19073 5_co_16c2.23141_co_5.38708 5_co_9 6_co_12c2_co_6 3.7464_co_10.16119 7_co_15c2.78995_co_4.14923 5.53165_co_9.51703 11_co_14c8.36497_co_6.85764 19_co_11 30_co_16c11_co_5 13.12601_co_4.82281 16_co_7c7.34894_co_5.56717 15.04294_co_9.92578 22_co_14c5.03162_co_2.94666 11.90436_co_7.25803 17_co_9c6.8887_co_2.35495 14_co_4 25_co_5c11_co_1 27_co_1 41_co_1c14_co_0 16_co_0 21_co_0c4_co_0 12.95847_co_-0.49924 22_co_-1c7.98776_co_-0.44241 18.10059_co_-1.38779 26_co_-3c7.13306_co_-1.45581 17.85739_co_-4.46765 27_co_-7c8.88501_co_-2.461 15.69363_co_-3.73038 22_co_-8c1.17105_co_-0.79285 2_co_-3 5_co_-6c4_co_-4 6.64886_co_-9.19577 9_co_-13c2.62866_co_-4.25327 4.71411_co_-8.21167 7_co_-11c2.68976_co_-3.28101 4.78986_co_-6.07843 6_co_-9c1.71143_co_-4.13171 4.49829_co_-7.93796 5_co_-14c0.41241_co_-4.98297 0_co_-14 0_co_-27c0_co_-7 -1.37537_co_-8.94003 -7_co_-12c-5.5556_co_-3.0224 -11.58707_co_-7.73125 -20_co_-12c-9.60468_co_-4.87344 -17.08743_co_-8.79393 -22_co_-11c-6.11951_co_-2.74806 -11.96329_co_-4.16042 -16_co_-5c-5.95532_co_-1.23863 -11.05798_co_-1.16779 -17_co_-2c-7.20975_co_-1.00977 -11.01691_co_-1.9034 -17_co_-3c-5.01547_co_-0.91925 -11.10059_co_-1.38779 -19_co_-3c-7.13306_co_-1.45581 -15.88138_co_-4.2935 -23_co_-7c-5.91171_co_-2.24762 -9.93796_co_-3.49829 -16_co_-4c-4.98297_co_-0.4124 -8_co_-1 -12_co_-1c-3_co_0 -5.31_co_0.66251 -8_co_-1c-2.40601_co_-1.487 -3.15225_co_-2.23463 -5_co_-3c-1.30655_co_-0.5412 -2_co_-1 -4_co_-1c-1_co_0 -2_co_0 -3_co_0c-1_co_0 -2_co_0 -3_co_0c-1_co_0 -2_co_0 -3_co_0l-1_co_-1l0_co_0_qt_ id_eq__qt_svg_3_qt_ stroke-width_eq__qt_5_qt_ stroke_eq__qt_#000000_qt_ fill_eq__qt_none_qt_/&gt_sm_\n &lt_sm_/g&gt_sm_\n&lt_sm_/svg&gt_sm_\n\n    &lt_sm_canvas id_eq__qt_renderCanvas_qt_&gt_sm_&lt_sm_/canvas&gt_sm_\n\n    &lt_sm_script&gt_sm_\n\n   //$(_qt_#points_qt_).html(_qt_Loading..._qt_).load(_qt_infinity.svg_qt_)_sm_\n\n\n\n        var canvas _eq_ document.getElementById(_qt_renderCanvas_qt_)_sm_\n        var engine _eq_ new BABYLON.Engine(canvas_co_ true)_sm_\n\n        var createScene _eq_ function() {\n          var scene _eq_ new BABYLON.Scene(engine)_sm_\n          scene.clearColor _eq_ new BABYLON.Color3( .5_co_ .5_co_ .5)_sm_\n        \n          // camera\n          var camera _eq_ new BABYLON.ArcRotateCamera(_qt_camera1_qt__co_  0_co_ 0_co_ 0_co_ new BABYLON.Vector3(0_co_ 0_co_ -0)_co_ scene)_sm_\n          camera.setPosition(new BABYLON.Vector3(-5_co_ -5_co_ -1000))_sm_\n          camera.attachControl(canvas_co_ true)_sm_\n          // lights\n          var light _eq_ new BABYLON.HemisphericLight(_qt_light1_qt__co_ new BABYLON.Vector3(1_co_ 0.5_co_ 0)_co_ scene)_sm_\n          light.intensity _eq_ 0.7_sm_\n          var spot _eq_ new BABYLON.SpotLight(_qt_spot_qt__co_ new BABYLON.Vector3(25_co_ 15_co_ -10)_co_ new BABYLON.Vector3(-1_co_ -0.8_co_ 1)_co_ 15_co_ 1_co_ scene)_sm_\n          spot.diffuse _eq_ new BABYLON.Color3(1_co_ 1_co_ 1)_sm_\n          spot.specular _eq_ new BABYLON.Color3(0_co_ 0_co_ 0)_sm_\n          spot.intensity _eq_ 0.8_sm_\n          // material\n          var mat _eq_ new BABYLON.StandardMaterial(_qt_mat1_qt__co_ scene)_sm_\n          mat.alpha _eq_ 1.0_sm_\n          mat.diffuseColor _eq_ new BABYLON.Color3(0.5_co_ 0.5_co_ 1.0)_sm_\n          mat.backFaceCulling _eq_ false_sm_\n          //mat.wireframe _eq_ true_sm_\n        \n          // show axis\n          var showAxis _eq_ function(size) {\n            var makeTextPlane _eq_ function(text_co_ color_co_ size) {\n            var dynamicTexture _eq_ new BABYLON.DynamicTexture(_qt_DynamicTexture_qt__co_ 50_co_ scene_co_ true)_sm_\n            dynamicTexture.hasAlpha _eq_ true_sm_\n            dynamicTexture.drawText(text_co_ 5_co_ 40_co_ _qt_bold 36px Arial_qt__co_ color _co_ _qt_transparent_qt__co_ true)_sm_\n            var plane _eq_ new BABYLON.Mesh.CreatePlane(_qt_TextPlane_qt__co_ size_co_ scene_co_ true)_sm_\n            plane.material _eq_ new BABYLON.StandardMaterial(_qt_TextPlaneMaterial_qt__co_ scene)_sm_\n            plane.material.backFaceCulling _eq_ false_sm_\n            plane.material.specularColor _eq_ new BABYLON.Color3(0_co_ 0_co_ 0)_sm_\n            plane.material.diffuseTexture _eq_ dynamicTexture_sm_\n            return plane_sm_\n            }_sm_\n          \n            var axisX _eq_ BABYLON.Mesh.CreateLines(_qt_axisX_qt__co_ [ \n              new BABYLON.Vector3.Zero()_co_ new BABYLON.Vector3(size_co_ 0_co_ 0)_co_ new BABYLON.Vector3(size * 0.95_co_ 0.05 * size_co_ 0)_co_ \n              new BABYLON.Vector3(size_co_ 0_co_ 0)_co_ new BABYLON.Vector3(size * 0.95_co_ -0.05 * size_co_ 0)\n              ]_co_ scene)_sm_\n            axisX.color _eq_ new BABYLON.Color3(1_co_ 0_co_ 0)_sm_\n            var xChar _eq_ makeTextPlane(_qt_X_qt__co_ _qt_red_qt__co_ size / 10)_sm_\n            xChar.position _eq_ new BABYLON.Vector3(0.9 * size_co_ -0.05 * size_co_ 0)_sm_\n            var axisY _eq_ BABYLON.Mesh.CreateLines(_qt_axisY_qt__co_ [\n                new BABYLON.Vector3.Zero()_co_ new BABYLON.Vector3(0_co_ size_co_ 0)_co_ new BABYLON.Vector3( -0.05 * size_co_ size * 0.95_co_ 0)_co_ \n                new BABYLON.Vector3(0_co_ size_co_ 0)_co_ new BABYLON.Vector3( 0.05 * size_co_ size * 0.95_co_ 0)\n                ]_co_ scene)_sm_\n            axisY.color _eq_ new BABYLON.Color3(0_co_ 1_co_ 0)_sm_\n            var yChar _eq_ makeTextPlane(_qt_Y_qt__co_ _qt_green_qt__co_ size / 10)_sm_\n            yChar.position _eq_ new BABYLON.Vector3(0_co_ 0.9 * size_co_ -0.05 * size)_sm_\n            var axisZ _eq_ BABYLON.Mesh.CreateLines(_qt_axisZ_qt__co_ [\n                new BABYLON.Vector3.Zero()_co_ new BABYLON.Vector3(0_co_ 0_co_ size)_co_ new BABYLON.Vector3( 0 _co_ -0.05 * size_co_ size * 0.95)_co_\n                new BABYLON.Vector3(0_co_ 0_co_ size)_co_ new BABYLON.Vector3( 0_co_ 0.05 * size_co_ size * 0.95)\n                ]_co_ scene)_sm_\n            axisZ.color _eq_ new BABYLON.Color3(0_co_ 0_co_ 1)_sm_\n            var zChar _eq_ makeTextPlane(_qt_Z_qt__co_ _qt_blue_qt__co_ size / 10)_sm_\n            zChar.position _eq_ new BABYLON.Vector3(0_co_ 0.05 * size_co_ 0.9 * size)_sm_\n          }_sm_\n        \n          \n          \n          // shape\n          \n          \n          showAxis(5)_sm_\n          \n          return scene_sm_\n         \n        }_sm_\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        var scene _eq_ createScene()_sm_\n\n        engine.runRenderLoop(function () {\n            scene.render()_sm_\n        })_sm_\n\n        // Resize\n        window.addEventListener(_qt_resize_qt__co_ function () {\n            engine.resize()_sm_\n        })_sm_\n\n\n\n\n\n\n\n\n\n\n\n\n\n  function PathToPoints(path_co_ resolution_co_ onDone) {\n     console.log(_qt_1_qt_ + path)_sm_\n  var ctx _eq_ {}_sm_\n  ctx.resolution _eq_ resolution_sm_\n  ctx.onDone _eq_ onDone_sm_\n  ctx.points _eq_ []_sm_\n  ctx.interval _eq_ null_sm_\nconsole.log(_qt_tak_qt_)_sm_\n  // Walk up nodes until we find the root svg node\n  var svg _eq_ path_sm_\n  console.log(_qt_tak_qt_)_sm_\n  while (!(svg instanceof SVGSVGElement)) {\n     console.log(_qt_tak_qt_)_sm_\n    svg _eq_ svg.parentElement_sm_\n  }\n  // Create a rect_co_ which will be used to trace the path\n\n  var rect _eq_ document.createElementNS(_qt_http_dd_//www.w3.org/2000/svg_qt__co_ _qt_rect_qt_)_sm_\n  ctx.rect _eq_ rect_sm_\n  svg.appendChild(rect)_sm_\n\n  var motion _eq_ document.createElementNS(_qt_http_dd_//www.w3.org/2000/svg_qt__co_ _qt_animateMotion_qt_)_sm_\n  motion.setAttribute(_qt_path_qt__co_ path.getAttribute(_qt_d_qt_))_sm_\n  motion.setAttribute(_qt_begin_qt__co_ _qt_0_qt_)_sm_\n  motion.setAttribute(_qt_dur_qt__co_ _qt_10_qt_)_sm_ // TODO_dd_ set this to some larger value_co_ e.g. 10 seconds?\n  motion.setAttribute(_qt_repeatCount_qt__co_ _qt_1_qt_)_sm_\n  motion.onbegin _eq_ PathToPoints.beginRecording.bind(this_co_ ctx)_sm_\n  console.log(_qt_tak_qt_)_sm_\n  motion.onend _eq_ PathToPoints.stopRecording.bind(this_co_ ctx)_sm_\n  console.log(_qt_tak_qt_)_sm_\n\n  // Add rect\n  rect.appendChild(motion)_sm_\n  console.log(_qt_tak_qt_)_sm_\n}\n\nPathToPoints.beginRecording _eq_ function(ctx) {\n  console.log(_qt_1_qt_)_sm_\n  var m _eq_ ctx.rect.getScreenCTM()_sm_\n  ctx.points.push({x_dd_ m.e_co_ y_dd_ m.f})_sm_\n  ctx.interval _eq_ setInterval(PathToPoints.recordPosition.bind(this_co_ ctx)_co_ 1000*3/ctx.resolution)_sm_\n}\n\nPathToPoints.stopRecording _eq_ function(ctx) {\n   console.log(_qt_1_qt_)_sm_\n  clearInterval(ctx.interval)_sm_\n\n  // Remove the rect\n  ctx.rect.remove()_sm_\n\n  ctx.onDone(ctx.points)_sm_\n}\n  var chuj _eq_ _qt__qt__sm_\n  var stulej_sm_\nPathToPoints.recordPosition _eq_ function(ctx) {\n   console.log(_qt_1_qt_)_sm_\n  var m _eq_ ctx.rect.getScreenCTM()_sm_\n  ctx.points.push({x_dd_ m.e_co_ y_dd_ m.f})_sm_\n  console.log(ctx.points.length)_sm_\n}\n\n\n\n   function test(){\n    console.log(_qt_tak_qt_)_sm_\n    var aInputs _eq_ document.getElementsByTagName(_t_path_t_)_sm_\n    for (var i_eq_0_sm_i&lt_sm_aInputs.length_sm_i++) {\n     console.log(_qt_tak_qt_ + aInputs.length)_sm_\n       PathToPoints(aInputs_lt_em_gt__co_ 100_co_ function(p){\nvar shape _eq_ []_sm_\n  chuj _eq_ JSON.stringify(p)_sm_\n\n //points.textContent _eq_chuj_sm_\n var s _eq_ _qt__qt_\n\n  for(var i _eq_ 0 _sm_ i&lt_sm_p.length_sm_ i++)\n{\n \ns _eq_ s + _qt_new BABYLON.Vector3(_qt_+JSON.stringify(p_lt_/em_gt__lt_em_gt__lt_em_gt_.x)+_qt__co__qt_+ JSON.stringify(p_lt_/em_gt__lt_/em_gt__lt_em_gt__lt_em_gt__lt_em_gt_.y)+_qt__co_ 0)_co__qt__sm_\n console.log(_qt_zaczynam_qt_+ i)_sm_\n\nshape_lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt_ _eq_ new BABYLON.Vector3(p_lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt_.x - p[0].x_co_p_lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt_.y-p[0].y_co_ 0)_sm_\n}\nconsole.log(s)_sm_\nshape.push(shape[0])_sm_\n          \n         \n          \n          var path _eq_ [\n            BABYLON.Vector3.Zero()_co_\n            new BABYLON.Vector3(0_co_ 0_co_ -0.1)\n          ]_sm_\n            \n          var extruded _eq_ BABYLON.Mesh.ExtrudeShape(_qt_extruded_qt__co_ shape_co_ path_co_ 1_co_ 0_co_ 3_co_ scene)_sm_\n          var material _eq_ new BABYLON.StandardMaterial(_qt_material01_qt__co_ scene)_sm_\n\nextruded.material _eq_ material_sm_\n//material.diffuseTexture _eq_ new BABYLON.Texture(_qt_12281590_163625937325378_2125629366_o.jpg_qt__co_ scene)_sm_\n//material.diffuseColor _eq_ new BABYLON.Color3(p.fill)_sm_\n\n})_sm_\n\n    }\n  }\n\n\n\n\n\n          \n    &lt_sm_/script&gt_sm_\n&lt_sm_/body&gt_sm_\n&lt_sm_/html&gt_sm_\n_lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/code_gt__lt_/pre_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt_\n\n_lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_p_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt__lt_em_gt_\n\t \n_lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/em_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-12T19:31:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAs far as I understand_co_ you draw the SVG shape in a rectangle and then try to get back the points from the drawn figure_co_ don_t_t you ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI wouldn_t_t have done this way but would have instead _qt_translate_qt_ the SVG directives into some BJS maths directives_co_ and just compute the related positions_co_ without drawing anything.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI would have first searched the web for this kind of _qt_translator_qt_ or SVG parser.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"swat0284","Date":"2016-02-13T00:56:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tdunno how do this _sm_/\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-13T10:02:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tdon_t_t know either... it will take time to learn about SVG commands and how to translate them\n_lt_/p_gt_\n\n_lt_p_gt_\n\tunless some library exists somewhere else... I suppose it might exist\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]