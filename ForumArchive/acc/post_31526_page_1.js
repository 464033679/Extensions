[{"Owner":"Samuel Girardin","Date":"2017-07-09T10:18:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat_t_s not really bjs related_co_ But does anyone know if there is a TypeScript preprocessor plugin. for  vs communty  It could be useful to have some #DEFINE #IF etc_co_ to manage different version ? \n_lt_/p_gt_\n\n_lt_p_gt_\n\t I only found some exotic workflow and not related to visual studio. Any infos ?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2017-07-09T16:29:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Sam.  Sorry if I_t_m butting-in (talking about things that are over my head)... but... did you read _lt_a href_eq__qt_https_dd_//github.com/Microsoft/TypeScript/issues/4691_qt_ rel_eq__qt_external nofollow_qt__gt_this thing_lt_/a_gt_?  They seem to be debating about the things you speak-of.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt looks like about half of the opinions are pro- #DEFINE #IF_co_ and the other half are _qt_do it in a separate external process_qt_. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI found it with a _lt_a href_eq__qt_https_dd_//www.google.com/search?q_eq_TypeScript+preprocessor_qt_ rel_eq__qt_external nofollow_qt__gt_google search for ts preprocessor_lt_/a_gt_.  In that search_co_ there are some links to _qt__lt_a href_eq__qt_https_dd_//github.com/sergeyt/karma-typescript-preprocessor_qt_ rel_eq__qt_external nofollow_qt__gt_Karma_lt_/a_gt__qt_... which might be something.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMany more and smarter comments coming soon_co_ I_t_m sure.  Hope you_t_re doing well and having a fun summer.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"unintellisense","Date":"2017-07-09T19:08:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI don_t_t know of a Visual Studio specific solution_co_ nor a solution specific to any IDE for that matter. I have accomplished this using build/bundling process_co_ gulp/browserify with the tsify_co_ envify and uglify plugins.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is how I implemented it_co_ hopefully it makes sense as I am just copy/pasting and not trimming it down to the bare example.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_gulp.task(_t_browser_dd_watch_dd_min_t__co_ [_t_browser_dd_clean_t__co_ _t_browser_dd_static_dd_min_t_]_co_ () _eq_&gt_sm_ {\n  let bundler _eq_ browserify(path.join(__dirname_co_ _t_src_t__co_ _t_browserMain.ts_t_)_co_ { paths_dd_ [_t_./src_t_] })\n    .plugin(tsify_co_ tsconfig.compilerOptions)\n    .transform(browserifyCss)\n    .transform(envify_co_ { BUILD_FLAG_dd_ _t_production_t__co_ BUILD_MODE_dd_ _t_browser_t_ })\n    .plugin(watchify)_sm_\n\n  bundler.on(_t_update_t__co_ () _eq_&gt_sm_ { loadBundle(bundler_co_ true) })_sm_\n  loadBundle(bundler_co_ true)_sm_\n})_sm_\n\ngulp.task(_t_browser_dd_watch_dd_max_t__co_ [_t_browser_dd_clean_t__co_ _t_browser_dd_static_dd_max_t_]_co_ () _eq_&gt_sm_ {\n  let bundler _eq_ browserify(path.join(__dirname_co_ _t_src_t__co_ _t_browserMain.ts_t_)_co_ { paths_dd_ [_t_./src_t_] })\n    .plugin(tsify_co_ tsconfig.compilerOptions)\n    .transform(browserifyCss)\n    .transform(envify_co_ { BUILD_FLAG_dd_ _t_development_t__co_ BUILD_MODE_dd_ _t_browser_t_ })\n    .plugin(watchify)_sm_\n\n  bundler.on(_t_update_t__co_ () _eq_&gt_sm_ { loadBundle(bundler_co_ false) })_sm_\n  loadBundle(bundler_co_ false)_sm_\n})_sm_\n\nfunction loadBundle(bundler_co_ makeUgly) {\n  let now _eq_ new Date()_sm_\n  console.log(` ${(now.getHours() &lt_sm_ 10 ? _t_0_t_ _dd_ _t__t_) + now.getHours()}_dd_${(now.getMinutes() &lt_sm_ 10 ? _t_0_t_ _dd_ _t__t_) + now.getMinutes()}_dd_${(now.getSeconds() &lt_sm_ 10 ? _t_0_t_ _dd_ _t__t_) + now.getSeconds()} reloading bundle...`)_sm_\n\n  let newBundle _eq_ bundler.bundle().on(_t_error_t__co_ (error) _eq_&gt_sm_ console.error(error.toString()))\n    .pipe(source(_t_bundle.js_t_))_sm_\n  if (makeUgly) {\n    newBundle.pipe(streamify(uglify()))_sm_\n  }\n  newBundle.pipe(gulp.dest(__dirname + _t_/build_t_))\n    .on(_t_end_t__co_ function () {\n      let now _eq_ new Date()_sm_\n      console.log(` ${(now.getHours() &lt_sm_ 10 ? _t_0_t_ _dd_ _t__t_) + now.getHours()}_dd_${(now.getMinutes() &lt_sm_ 10 ? _t_0_t_ _dd_ _t__t_) + now.getMinutes()}_dd_${(now.getSeconds() &lt_sm_ 10 ? _t_0_t_ _dd_ _t__t_) + now.getSeconds()} bundle reloaded...`)_sm_\n    })_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_t_browser_dd_watch_dd_min_t_ and _t_browser_dd_watch_dd_max_t_ are the gulp tasks which will pass a different argument to envify_co_ the BUILD_FLAG property in particular being used later. I do the same thing on the server side but just using gulp-envify and gulp-uglify.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThen in a ts file_co_ you can refer to BUILD_FLAG_co_ which when compiled gets converted by envidy to the literal value passed in the gulp task.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_if (_qt_development_qt_ _eq__eq__eq_ process.env.BUILD_FLAG) {\n\tconsole.log(`attachControl_dd_ TopDownFocusCameraMouseInput`)\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tWhen compiled (with browser_dd_watch_dd_min task in this example) becomes \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_if (_qt_development_qt_ _eq__eq__eq_ _qt_production_qt_) {\n\tconsole.log(`attachControl_dd_ TopDownFocusCameraMouseInput`)\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tFinally_co_ uglifys dead code removal would completely remove this from the emitted js file.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDepending on your build setup you may be able to accomplish this with less pieces. There is a webpack loader _lt_a href_eq__qt_https_dd_//github.com/nippur72/ifdef-loader_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/nippur72/ifdef-loader_lt_/a_gt_ that lets you use something closer to compiler directives_co_ but I don_t_t use webpack and don_t_t really like the approach_co_ for some reason the directives being in comments (that would be ignored if the ts gets built differently_co_ I.E. without webpack) rubs me the wrong way. Hope this helps. I am also curious to see what solutions others might use.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Samuel Girardin","Date":"2017-07-09T21:04:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_span_gt_Hi @Wingnut_co_ thanks for the link. When I was asking myself that it would be cool to have this preprocessor thing_co_ I didn_t_t realize the subject is open since 2 years... My side is pro #DEFINE #IF. But I_t_m really a rookie on this part. I_t_m testing performances on _t_low_t_ level memory access for my project. I have plenty of methods like _dd_ _lt_/span_gt_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_//#IF SAFE\n         this.q _eq_ ETools.Malloc_new_quaternion()_sm_\n         E.dGeomGetQuaternion(this.dxGeom_co_ this.q)_sm_\n         return ETools.Pointer_To_Vector4(this.q_co_ true)_sm_\n// #IF FAST\n        return [Module.HEAPF64[((this.pointer_rot) &gt_sm_&gt_sm_ 3)]_co_ - Module.HEAPF64[((this.pointer_rot + 8) &gt_sm_&gt_sm_ 3)]_co_ - Module.HEAPF64[((this.pointer_rot + 16) &gt_sm_&gt_sm_ 3)]_co_ - Module.HEAPF64[((this.pointer_rot + 24) &gt_sm_&gt_sm_ 3)]]\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_And it would be really cool to compile the safe or the fast project easily with only the code I need. Performance test will be easier_co_ and  my _t_productivity_t_ will increase. I will stay tune on this preprocessor thing. And it_t_s not to hot on the boat for the moment.. I hope you_t_re doing well too._lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_@unintellisense_co_ thanks for your post. I_t_m really bad with gulp_co_ etc. I never took time to learn how to use it. That_t_s why I was asking for a _t_ready to fly_t_ magic preprocessor button ! Maybe I will write a simple parser that will erase the unwanted code before compiling._lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]