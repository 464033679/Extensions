[{"Owner":"alanz2223","Date":"2016-05-03T03:06:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI am trying the add first person controls to my world and want to basically have the WASD keys act like the Arrow keys_co_ but also would like to have the camera_t_s rotation lock onto the mouse so that when the mouse moves upward the camera looks up_co_ etc. I researched and found this post\n_lt_/p_gt_\n_lt_iframe data-embedcontent_eq__qt__qt_ frameborder_eq__qt_0_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/topic/5436-moving-camera-and-meshes/?do_eq_embed_qt__gt__lt_/iframe_gt_\n\n_lt_p_gt_\n\tBut unfortunately nothing was resolved.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tQuestion\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat property of the camera controls its movement relative to its current position? What I mean is  if I want to move the camera forward relative to where it is currently pointing_co_ and regardless of the global axis_co_ which property do I need to change?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am tried to change camera.rotation.x but nothing is happening to rotate it_co_ I am doing something wrong?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is my playground. The relevant stuff happens within the move/rotate player functions\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//babylonjs-playground.com/#1LYMQM%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonjs-playground.com/#1LYMQM#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Boz","Date":"2016-05-03T13:11:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI did not managed to get your playground working_co_ but here are my ideas _dd_\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tIf you want to move the camera relative to pointer location_co_ you can use _lt_strong_gt_engine.isPointerLock _eq_ true_lt_/strong_gt_. This will lock the pointer and every mouse move will act on the camera. In my opinion this method is better than applying rotation with A and D keys.\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tIf you want to move forward after rotating the camera with the mouse_co_ you have to compute how much you will move along X and Z axis. Here is how I do _dd_\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_pre_gt_\n_lt_code_gt_// Conversion ratio from degrees to radians\nvar deg2rad _eq_ Math.PI / 180_sm_\n\n// Add offset if you need\n// For example if your camera don_t_t start at rotation 0 but 90 degrees_co_ offset will be -90*deg2rad (do not forget to convert to radians with deg2rad)\nvar OFFSET _eq_ 0_sm_\n\n// Direction according to the key you pressed\n// Move forward _dd_ direction _eq_ 0\n// Move left _dd_ direction _eq_ 90\n// Move backwards _dd_ direction _eq_ 180\n// Move right _dd_ direction _eq_ 270\n\n// Modify direction according to camera angle\nvar newDir _eq_ direction * deg2rad + camera.alpha + OFFSET_sm_\n\n// Compute movement along x and z axis\nvar dx _eq_ -Math.sin(newDir) * speed_sm_ // In your case speed can be your this.directionImpulse\nvar dz _eq_ Math.cos(newDir) * speed_sm_\n\n// Set nex position to camera\ncamera.position.x +_eq_ dx_sm_\ncamera.position.z +_eq_ dz_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_WARNING _lt_/strong_gt__dd_ This example use an _lt_strong_gt_ArcRotateCamera _lt_/strong_gt_in order to get the _lt_strong_gt_alpha _lt_/strong_gt_value of the camera (rotation around Y axis)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is just an example of how you can move with these controls.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you got any problem you can ask me about that_co_ I already implemented it in a FPS-like project _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"alanz2223","Date":"2016-05-03T15:43:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tHello_co_ I tried setting engine.isPointerLock _eq_true but it doesn_t_t seem to affect anything. I think that the ArcRotateCamera + calculation would probably do it_co_ but I feel like there might be an easier way to do this. I have checked the source code for the _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Cameras/Inputs/babylon.freecamera.input.keyboard.ts#L76_qt_ rel_eq__qt_external nofollow_qt__gt_FreeCameraInputs_lt_/a_gt_ and the magic seems to be happening with the camera.cameraDirection.addInPlace() but it seems to manipulate private variables before that_co_ so I am not sure if there is a single clean way just to move the camera. I_t_ll experiment around a bit more and see what happens. Thanks\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Boz","Date":"2016-05-03T16:15:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYes_co_ if you want to check source code_co_ you have to look to ArrowKeys inputs and _qt_copy_qt_ it to your WASD\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_u_gt_isPointerLock _eq_ true_lt_/u_gt_ should work. You can also switch to fullscreen mode and lock pointer in the same way _dd_ _lt_strong_gt_engine.switchFullscreen(true)_sm__lt_/strong_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]