[{"Owner":"W1lly","Date":"2015-07-09T20:48:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello babylonians_co__lt_/p_gt__lt_br_gt__lt_p_gt_ _lt_/p_gt__lt_br_gt__lt_p_gt_This is my first post here_co_ don’t eat me please _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_. _lt_/p_gt__lt_br_gt__lt_p_gt_So I have been experiencing with babylon.js for a few weeks now_co_ and I would like to share with you an issue that I can ’t seem to be able to solve. _lt_/p_gt__lt_br_gt__lt_p_gt_ _lt_/p_gt__lt_br_gt__lt_p_gt_Let’s say I have a character in my game_co_ and I want to move this character using moveWithCollisions. How would you go about handling the case when the character is standing idle on a slope ? Assuming I also have gravity_co_ unless the player is trying to compensate the gravity by moving up the slope_co_ it will inexorably glide._lt_/p_gt__lt_br_gt__lt_p_gt_ _lt_/p_gt__lt_br_gt__lt_p_gt_Here is an example of what I mean_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#18FYXX%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#18FYXX#2_lt_/a_gt_. You can see the ball is first falling on the slope and then glides (which makes perfect sense since its a ball…). But now imagine the ball is not a ball anymore but a character_dd_ you probably don’t want the character to keep falling once it reached the slope (unless it’s a actually a slide…)_co_ right ?_lt_/p_gt__lt_br_gt__lt_p_gt_ _lt_/p_gt__lt_br_gt__lt_p_gt_What I tried so far was to detect when the character intersects with the slope using intersectsMesh. The problem of this is that I have to separate every slope of my game from the rest of the map so that they get their own precise bounding box (I tried to use mesh.subdivide but unfortunately the bounding boxes of the sub-meshes don’t seem to be used_co_ even with precision set to true for intersectsMesh…). Anyway I doubt this is the right way to do it._lt_/p_gt__lt_br_gt__lt_p_gt_ _lt_/p_gt__lt_br_gt__lt_p_gt_Any idea on how to prevent meshes from gliding on inclines ?_lt_/p_gt__lt_br_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-07-10T12:15:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_One theoretical solution would be to switch to the complete physics engine and set the sphere_t_s friction to 1_co_ but I_t_m really not familiar with this part of the engine to help you more..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Also there_t_s a working example right here (made by iiceman_co_ another fine folk from these premises)_dd_ _lt_a href_eq__qt_http_dd_//p215008.mittwaldserver.info/moveWithCollisions/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//p215008.mittwaldserver.info/moveWithCollisions/_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Edit_dd_ speak of the devil... _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-07-10T12:16:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey Willy_co_ welcome to the forum.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI remember playing around with moveWithCollisions and I noticed this behaviors_co_ too. I dug a bit trough old content and questions that I asked about moveWithCollisions. I found this playground_dd_ _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#1NQTNE%239_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#1NQTNE#9_lt_/a_gt_ where it doesn_t_t seem to happen. But I don_t_t know why without going trough the code again. But shouldn_t_t be too hard to figure out. Maybe that helps?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_ jahows link is the result I created after playing with the playground that I mentioned. Finding the solution might be easier in the playground code without all that fancy stuff around _lt_img alt_eq__qt__sm_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2015-07-10T12:26:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_You should start by getting a character to move to a destination on a flat surface.  Once you figure that out_co_ move onto inclines._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m thinking that a combination of friction and a force being applied to the character to get to a certain point will solve your issue._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-07-10T13:00:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi guys!  Unfortunately_co_ Adam_co_ there is no friction setting unless a physics engine is used.  The BJS built-in gravity_co_ intersect_co_ moveWithCollisions... does not use friction.  But_co_ hmm_co_ maybe a person could write a function that would simulate friction for our built-in system.  hmm._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But_co_ I have another strange idea (for non-physics engine).  (When don_t_t I?)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Put a function on your mesh...   mesh.maintainer _eq_ function() {}_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Call mesh.maintainer() inside the render loop.  It is ALWAYS being called._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_At the start of a moveWithCollisions... set mesh.maintainer _eq_ function() {}  (empty function) (turn it off)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As soon as .moveWithCollisions completes its move (when mesh.position _eq__eq_ moveTarget)...  set..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_mesh.maintainer _eq_ function() {_lt_/p_gt__lt_p_gt_    mesh.position _eq_ moveTarget_sm_  // or something similar.  Don_t_t let the mesh move from its previous moveWithCollisions target_lt_/p_gt__lt_p_gt_}_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Before all future moveWithCollisions... turn-off the maintainer again..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_mesh.maintainer _eq_ function() {}_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Essentially_co_ whenever .moveWithCollisions _lt_u_gt_is not_lt_/u_gt_ active_co_ the maintainer _lt_u_gt_is_lt_/u_gt_ active._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You would probably need to _t_monitor_t_ for when mesh.position _eq__eq_ moveTarget... inside the render loop_co_ too.  I_t_m not sure if .moveWithCollisions can be told to trigger a callback function when the moving has completed (such as mesh.onEndMovingWithCollisions())._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_*shrug*  Maybe.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  I hope you don_t_t want to add an inertia feature in a custom moveWithCollisions_co_ later.  That could be trouble.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_(Not really.  We_t_d just overshoot the MWC target a bit_co_ and put an EaseOut algorithm on the overshoot.  Ouch!   But MWC target and mesh.position would never match_co_ so there_t_s the problem.  So_co_ we don_t_t overshoot.  Just put EaseOut on the final steps of the MWC move.  Bigger OUCH!)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"W1lly","Date":"2015-07-10T18:53:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Wow thank you all for your answers_co_ it seems like a very active community!  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So yeah the idea was to avoid using physics. Since I don_t_t really need it for anything else I could save on calculation cost._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Wingnut_co_ if I understand correctly what your are proposing_co_ the problem is that in my case moveWithCollisions is called inside the render loop. This is because I also need to handle cases where my character should fall. Something I tried earlier was to treat the _qt_falling case_qt_ as a special case when my character is not intersecting with anything else. This way I can avoid calling moveWithCollisions on each frame_co_ but this is a somehow unreliable due to the approximated bounding boxes that are used... Well_co_ I could split my complex meshes into basic shaped meshes before exporting them for babylon_co_ but once again I have a feeling that there should be a better solution _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks a lot for your example iiceman ! That_t_s actually exactly what I was looking for. Event though I don_t_t understand how that work yet_co_ there is no reason I couldn_t_t apply this to my case _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-07-11T03:25:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ahh_co_ you have moveWIthCollisions inside the render loop?  nod.  Pickin/clickin instead of keypresses.  *nod*_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_See_co_ when you use keypresses... they automatically go into repeat mode... so its easy to do repeated little moveWithCollisions WITHOUT needing the MWC inside the render loop.  Instead_co_ it does one little MWC per keypress_co_ and holding a key... does continuous moving (WASD steering)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So_co_ yes_co_ with moveWithCollisions happening constantly (often with no target change)... yeah_co_ a _qt_maintainer()_qt_ func would not get much of a chance to run._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But still... the goal is to hold the mesh in .position ... when mwc isn_t_t trying to move it._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_maintainer() is a mesh lock.  Hold me here... unless MWC wants me to move.  IF MWC wants me to move_co_ disable the maintainer func_co_ let MWC complete its move_co_ and then turn on maintainer() again (lock the mesh_co_ no gravity-caused ramp-sliding allowed). _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Dunno.  Sorry that I am not being of more help.  I_t_m thinkin_t_.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  Anti-grav. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-07-11T06:56:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well_co_ that _qt_not inside the render loop_qt_ might be the main point. I think in my demo the move with collision is only executed_co_ if a target is set. So you click somewhere and the object moves until the target is reached and then stops the moveWithCollisons. (if I remember right that is of course_co_ still didn_t_t look into the code again _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ )_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"W1lly","Date":"2015-07-11T11:29:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes iiceman_co_ but event though it_t_s only executed if a target is set_co_ the main idea still works for me _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_. I just have to use pickWithRay to find the distance from the character_t_s position to the ground/mesh and use that to determine if I have to apply gravity or not._lt_/p_gt__lt_p_gt_Here is an example I made inspired from yours _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1OLJNU%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1OLJNU#2_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]