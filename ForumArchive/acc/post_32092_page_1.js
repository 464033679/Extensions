[{"Owner":"port25","Date":"2017-08-01T21:19:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m trying to create a racing game using BabylonJS (very similar to this_dd_ _lt_a href_eq__qt_http_dd_//hexgl.bkcore.com/play/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//hexgl.bkcore.com/play/_lt_/a_gt_). The game track is an uneven mesh with walls. All the the physics collision examples I have seen use a plane for a ground surface_co_ or a heightmap. I tried using Oimo.js_co_ setting the track as a MeshImposter_co_ and my racing vehicle as a BoxImposter. This isn_t_t working at all... The BoxImposter collides with the MeshImposter way before they visually appear to touch. Is there a better way to do this?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ should I be using a physics engine for the vehicle movement itself? Or would it be better to handle its movement manually?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2017-08-06T09:57:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Port25_co_ welcome to the forum.  No replies_co_ yet_co_ eh?  Sorry.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe MeshImpostor is a CannonJS-only thing_co_ and it only interacts with spheres_co_ at this time.  So_co_ you_t_re a bit limited_co_ in that scneario.  With your track being a meshImpostor_co_ your racing vehicle must use sphereImpostor(s).  With a one-sphereImpostor vehicle_co_ the realism would likely be somewhat weak_co_ and you would probably need to set that sphereImpostor to _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/27927-solved-player-want-to-standmove-on-moving-box/?do_eq_findComment&amp_sm_comment_eq_163698_qt_ rel_eq__qt__qt__gt_.fixedRotation _eq_ true_lt_/a_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnother way... is using multiple sphereImpostors on the vehicle_co_ connected together with tightly-constrained physics joints/links (joints/links - same thing). \n_lt_/p_gt_\n\n_lt_p_gt_\n\tOne thing to think about_dd_  SphereImpostors have very little surface contact with any other impostors_co_ so they are essentially friction-less.  Not good for mass-active wheeled vehicles with sideways inertia (during cornering).  If the sphereImpostor(s) is/are _lt_u_gt_rolling_lt_/u_gt_ upon the meshImpostor_co_ they CAN work pretty nice.  But if they start skidding/sliding_co_ it would be like ice.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ physics engines can get a bit _qt_heavy_qt_ on the CPU performance_co_ so racing speeds could be limited.  A non-physics engine approach would probably keep the speeds substantially better.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m not sure what the best approach is_co_ here.  I_t_ll keep thinking.  Perhaps others will have ideas_co_ so stay tuned.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]