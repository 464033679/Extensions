[{"Owner":"BabylonFan","Date":"2015-11-14T23:57:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi! I_t_m new to this so this is probably a dumb question.. Been trying to make a game where object moves through labyrinth without going through walls. I implemented collision detection to the point where I_t_m sure its working but when I tried to move it with .position method there was no collision happening so I ended up using the moveWithCollisions method. This works but once you press the button the object starts moving and doesn_t_t ever stop it just changes direction at another key press. It also increases speed and both of this thing make it very useful to move it through gaps in the walls and navigate it.. So is there a way to control speed and stop mesh before there is a collision/intersection? Or is there a whole different better way to implement movement of that kind? Any advice_co_ opinion and info welcome and thanks so much _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This is how code for one key press looks like_dd_ (sphere is the object we_t_re trying to move - i have yet to import it but at least I know how to do that)_lt_/p_gt__lt_p_gt_window.addEventListener(_qt_keydown_qt__co_ function(evt) {_lt_/p_gt__lt_div_gt_if (evt.keyCode_eq__eq_87){//forward_lt_/div_gt__lt_div_gt_                    scene.registerBeforeRender(function () {_lt_/div_gt__lt_div_gt_                        sphere.computeWorldMatrix(true)_sm__lt_/div_gt__lt_div_gt_                        //labyrinth.computeWorldMatrix(true)_sm__lt_/div_gt__lt_div_gt_                        if (!sphere.intersectsMesh(labyrinth_co_ true)) {_lt_/div_gt__lt_div_gt_                            //sphere.applyImpulse(new BABYLON.Vector3(premikanjeX_co_ 0_co_ premikanjeZ)_co_ sphere.position)_sm__lt_/div_gt__lt_div_gt_                            var forward _eq_ new BABYLON.Vector3(parseFloat(Math.sin(parseFloat(sphere.rotation.y))) / 8_co_ 0_co_ parseFloat(Math.cos(parseFloat(sphere.rotation.y))) / 8)_sm__lt_/div_gt__lt_div_gt_                            sphere.moveWithCollisions(forward)_sm__lt_/div_gt__lt_div_gt_                        }_lt_/div_gt__lt_div_gt_                    })_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_}_co_ false)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_ _lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-11-15T21:01:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey there and welcome to the forum. It might be a good idea to provide a playground example with you current approach so we can see your code in action and help you find a fix easier._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Here is an example i threw together in the awesome babylon playground_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2T2IC_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2T2IC_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It_t_s based on a tutorial from temechon about moving with physics (_lt_a href_eq__qt_http_dd_//www.pixelcodr.com/tutos/physics/physics.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.pixelcodr.com/tutos/physics/physics.html_lt_/a_gt_)_co_ but the basic idea stays the same with moveWithCollisions. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It seems you want to do things  a little bit differently since you only want to move your sphere according to it_t_s current rotation but maybe the example helps you though._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I am not sure how exactly your example works... I don_t_t think you need that !sphere.intersectsMesh.. stuff since the move with collisons does that already for you if you enable collisions in the scene. Maybe you just forgot to reset your forward vector on keyup?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I hope any of this helps. If not_co_ try to create your own playground example and I am sure we will find a solution _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-11-16T08:21:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_I noticed you have tried using the physics engine for that (apply impulse). I assume it don_t_t work out so well_co_ but I think it will actually fit your use case. Care to share your experience? _lt_/p_gt__lt_p_gt_Just a small not_co_ rotation.y is always a number_co_ there is no need to parse it as float. So is the result of math.cos._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BabylonFan","Date":"2015-11-16T09:14:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_It_t_s hard to use playground since I have some imported meshes in my code + there is so many more things happening that it_t_s a big pile of stuff right now xD otherwise I don_t_t have any real experience with the physics engine so I would really love it if I can avoid using it _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ thanks for everything I_t_ll try to figure out a way to implement the example in my code _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-12-14T19:13:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Just a little question about oimo and cannon _dd_ could we also use physic and collision while moving objects with mouse drag or physics engine systematicaly require impulses or velocity vectors to move objects ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Temechon","Date":"2015-12-14T19:18:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_physics engine systematicaly require impulses or velocity vectors to move objects_lt_/span_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-12-14T20:54:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_co_ I was pretty sure of this. Thanks._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-12-18T12:50:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi guys.  Fenomas gave us an interesting reminder_co_ recently.  He said something about physics objects often being launched into movement... with physics _qt_springs_qt_.  I have not tried a demo with that idea_co_ yet_co_ but I sure plan on it_co_ someday.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd_co_ don_t_t forget you can move physics-active mesh using standard positioning methods... IF you call mesh.updatePhysicsBodyPosition() afterwards_co_ like line 64 in this demo... _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#A4HF3%236_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#A4HF3#6_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd_co_ overlapping mesh impostors will cause them to automatically de-overlap... _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#8KNKC%2311_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#8KNKC#11_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd_co_ don_t_t forget about gravity.  Using a 500 mass anvil and a teeter-totter ... well_co_ you get the idea.  _lt_img alt_eq__qt__dd_D_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tI don_t_t know what _t_systematically_t_ means_co_ so maybe none of these methods are _t_systematic_t_.  Also_co_ these are all _lt_u_gt_starting_lt_/u_gt_ methods_co_ not stopping methods.  Setting the mesh physics state AGAIN... (especially with BABYLON.PhysicsEngine.NoImpostor) might stop a mesh in its tracks.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAdmin_co_ it might be wise to adjust any inconsistent spelling of _lt_em_gt_impostor_lt_/em_gt_ in our source code.  _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/search?utf8_eq_%E2%9C%93&amp_sm_q_eq_imposter&amp_sm_type_eq_Code_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/search?utf8_eq_%E2%9C%93&amp_sm_q_eq_imposter&amp_sm_type_eq_Code_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOnly one playground series was found that used the wrong spelling within code... _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#HMFDE%230_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#HMFDE#0_lt_/a_gt_  (and #1 and #2).  They look abandoned and broken for different reasons_co_ so maybe not worth repairing.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-12-18T13:37:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_109624_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_18608_qt_ data-ipsquote-username_eq__qt_Wingnut_qt_ data-cite_eq__qt_Wingnut_qt_ data-ipsquote-timestamp_eq__qt_1450443032_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Hi guys.  Fenomas gave us an interesting reminder_co_ recently.  He said something about physics objects often being launched into movement... with physics _qt_springs_qt_.  I have not tried a demo with that idea_co_ yet_co_ but I sure plan on it_co_ someday._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Ah ah_co_ simulating king of spring interaction is the way I went some years ago (in VRML _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_rolleyes.gif_qt_ alt_eq__qt__dd_rolleyes_dd__qt__gt_) to move physical objects with the mouse (determining mouse acceleration and applying it as a velocity to the object with a little inertia to have smooth movement)_co_ I remember it was not a fun struggle to obtain something convincing (and by the way I did not obtain something convincing _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_laugh.png_qt_ alt_eq__qt__dd_lol_dd__qt__gt_)._lt_/p_gt__lt_p_gt_I would have thought many years later physics engine would have provided an integrated way to drag mesh_co_ but it seems not _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_happy.png_qt_ alt_eq__qt_^_^_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/happy@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But since we can call _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_mesh.updatePhysicsBodyPosition() _lt_/span_gt_everything is allright then_co_ we still can move mesh with the mouse and have correct physics calcluations! Thanks for the piece of info Wingnut (and nice winter avatar _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_)._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-12-18T13:40:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_(Hmm_co_ in french we are often using the word _qt_systematically_qt_ to mean _qt_in all cases_qt_)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-12-18T17:30:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok_co_ I tried your suggestion Wingnut _dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#DJPVS_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#DJPVS_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Pretty simple in fact._lt_/p_gt__lt_p_gt_But it would be better if we could avoid the intersection between mesh._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_1. The physics should be more reactive. As a general rule_co_ I find that every scene with physics I saw on this forum always seem to be played in slow motion (even with 60 FPS). Is it possible to accelerate the physic time speed ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_2. For a better result I should also block the current mesh movement if the other collided mesh is heavier_co_ this could be easily done with _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_mesh.intersectMesh _lt_/span_gt_unfortunatly this function does not correctly work in Firefox (works nice in IE and Chrome though _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/15651-collision-takes-place-even-when-not-colliding/_qt__gt_http_dd_//www.html5gamedevs.com/topic/15651-collision-takes-place-even-when-not-colliding/_lt_/a_gt_ )_co_ maybe a truncate stuff in the calculations of FF ? _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-12-19T06:07:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi VP! _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Um..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_#1 - Have you ever played Supersonic Sled?  _lt_a href_eq__qt_http_dd_//www.nvidia.com/coolstuff/demos#!/supersonic-sled_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.nvidia.com/coolstuff/demos#!/supersonic-sled_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_PhysX running.. multi-threaded... yum.  Somewhere between Lynx and Supersonic Sled_co_ someone asked _qt_What IS a web browser?  What IS a game client?_qt_... you know... a bunch of _qt_by definition_qt_ labeling stuff.  Canvas is like a _qt_cave to hardware_qt_ but it has a bunch of sandbox _qt_thou shalt not_qt_ draped onto it _qt_by definition_qt_._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Did anyone understand that whatsoever?  I sure didn_t_t.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_#2 - Still missing a response to _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/15651-collision-takes-place-even-when-not-colliding/#entry109249_qt__gt_http_dd_//www.html5gamedevs.com/topic/15651-collision-takes-place-even-when-not-colliding/#entry109249_lt_/a_gt_ ?  *nod*  I_t_ll try some tests... see if I get the same results. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-12-21T12:49:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_1. Nope_co_ never played with Supersonic Sled. I had a look on youtube vids_co_ that_t_s nice (maybe a little bit outdated however)._lt_/p_gt__lt_p_gt_ 2. Yep_co_ still missing. I tried to figure out the problem but with no luck. Do you get same results on FF ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-12-21T15:30:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi vp.  You should DL Supersled and run it if you can.  The bridge explosion in high tessellation is just amazing.  And there_t_s a chicken gun... shoots physics-mass chickens at things... including the sled and bridge pieces.  The physics are nothing short of amazing_co_ and so are the laughs.  But even there_co_ when the poly_t_s are high_co_ it_t_s slow-motion speed.  It just seems to take SO MANY calculations to do good physics_co_ and I guess that_t_s understandable.  I_t_m right with you on this_co_ though.  The faster the better._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_#2.  I didn_t_t get time (or have enough energy) to test things well.  I ran it_co_ but I don_t_t quite understand what I am seeing_co_ yet.  The mouse drag quits working in both browsers after an intersect or two.  I_t_m not sure why that happens.  And_co_ the amount of output to my console is difficult to read._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I wish we had an easier test-scene.  And it doesn_t_t help that I have been seriously coding-lazy_co_ lately._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_position ok _dd_ 1.9665289155453785_co_ -74.3295659583294position ok _dd_ 1.8100786193533445_co_ -76.94343798575841position ok _dd_ 1.652248939021451_co_ -79.58035588593947collision position _dd_ 2.4816477010369837_co_ -82.29005710142906 -&gt_sm_ revert to position _dd_ 1.652248939021451_co_ -79.58035588593947collision position _dd_ 1.652248939021451_co_ -79.58035588593947  &lt_sm_&lt_sm__eq__eq__eq__eq_ -&gt_sm_ revert to position _dd_ 1.652248939021451_co_ -79.58035588593947position ok _dd_ 1.652248939021451_co_ -79.58035588593947_lt_/pre_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#11JY4O%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#11JY4O#1_lt_/a_gt_ - sliding the red sphere into the front of the green box_co_ with FF 41.0.2... this is some output I get.  The line with the arrow is the weird one.  Right after the revert to _qt_clear of intersection_qt_ (coi?)_co_ the next collision is the same location as the coi position.  How can that be?  *scratch scratch* _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Now to IE 11.0.9600 or something like that... IE won_t_t let me copy_t_n_t_paste the version number_co_ nor can I copy_t_n_t_paste select multiple lines of console output.  Nice work_co_ MS... sheesh.  SO_co_ I will show you ITS console output by pasting to forum... line by line.  (yikes - what a P.O.S. browser!)  Copy ALL is on the right click... oh boy.  In IE..._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_position ok _dd_ 1.0130338733668615_co_ -80.06446797980652collision position _dd_ 0.8948195175615972_co_ -82.44962365993439-&gt_sm_ revert to position _dd_ 1.0130338733668615_co_ -80.06446797980652collision position _dd_ 1.0130338733668615_co_ -80.06446797980652  &lt_sm_&lt_sm__eq__eq__eq__eq_-&gt_sm_ revert to position _dd_ 1.0130338733668615_co_ -80.06446797980652collision position _dd_ 1.0130338733668615_co_ -80.06446797980652-&gt_sm_ revert to position _dd_ 1.0130338733668615_co_ -80.06446797980652_lt_/pre_gt__lt_p_gt_Same as FF at the arrow.  An intersect has happened at a coi safe position.  I have not yet checked your playground to see if you are making a mistake in your console reporting or position reverting.  On this computer_co_ the scene is acting exactly the same in both browsers... which COULD indicate that there is a mistake in your code.  The console is showing similar activity_co_ too. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Also_co_ notice that the X position seems to change drastically upon collision.  In FF..._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_position ok _dd_ 1.652248939021451_co_ -79.58035588593947collision position _dd_ 2.4816477010369837_co_ -82.29005710142906_lt_/pre_gt__lt_p_gt_1.65 before intersect_co_ 2.48 when intersecting.  In IE..._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_position ok _dd_ 1.0130338733668615_co_ -80.06446797980652collision position _dd_ 0.8948195175615972_co_ -82.44962365993439_lt_/pre_gt__lt_p_gt_1.01 pre-intersect_co_ 0.89 at intersect.  hmm.  Not sure if that is pertinent._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I might not be able to get back to this until January_co_ but if you could make a really SIMPLE playground_co_ that might help.  And maybe you or others can see something in these console outputs... that could help.  (I_t_m not much help_co_ am I?  Sorry)  Be well._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-12-21T15:55:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yep_co_ I got the exact same results _dd_ a collision has happened at a previously _qt_coi_qt_ safe position. I don_t_t understand why._lt_/p_gt__lt_p_gt_I know that while I_t_m re-positionning the mesh to previous _qt_coi_qt_ position_co_ the mouse is still hovering a _qt_collision position_qt__co_ so the calculation of the new current position leads to collision_co_ but when we then move the mouse elsewhere_co_ next new positions should be ok..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I can_t_t make simpler PG_co_ it_t_s already ultra simple. It_t_s the drag_t_ndrop default demo with just an intersectMesh detection added. I don_t_t know how to simplify more_co_ even the console info is pretty straightforward_co_ isn_t_t it ? (you manage to see the incoherent behavior the same way as me)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But now there is new strange facts... _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_huh.png_qt_ alt_eq__qt__dd_huh_dd__qt__gt_  as if my comptuer is haunted by the forum messages... _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_ph34r.png_qt_ alt_eq__qt__dd_ph34r_dd__qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/ph34r@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_When I wrote that test scene_co_ the bug occured for me (in FF_co_ but I didn_t_t test in other browser at that time). Then DK wrote that it totally works for him_co_ so I checked in IE and Chrome_co_ and that was ok ! But now you tell me it doesn_t_t work for you in IE_co_ so I checked again_co_ and now it doesn_t_t work anymore for me in IE_co_ nor Chrome. Is my computer influenced by what is written in this forum ??! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_blink.png_qt_ alt_eq__qt__dd_blink_dd__qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-12-21T15:58:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_109938_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_18608_qt_ data-ipsquote-username_eq__qt_Wingnut_qt_ data-cite_eq__qt_Wingnut_qt_ data-ipsquote-timestamp_eq__qt_1450711847_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_On this computer_co_ the scene is acting exactly the same in both browsers... which COULD indicate that there is a mistake in your code._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Or in mesh.intersectMeshes  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  (maybe due to mesh matrix late updates or I don_t_t know what)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-12-21T17:45:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWell_co_ what I mean by simplify... is remove the mouse drags and use keypresses.  You are reverting (relocating) the mesh... against a mouse drag.  You are forcing the mesh to _qt_back off_qt_ while the mouse drag is still running on the IRQ (Interrupt request_co_ remember those?)  hehe.  So_co_ you force the mesh away from the intersection_co_ and then the drag tries to put it right back to where it was before the revert.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you keypress-tap the mesh into intersection (not keypress held down_co_ that will defeat the revert again)... then we might know more.  Maybe.  _dd_/\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOr_co_ maybe use a slow render-loop move... to get to the intersect_co_ and then remove the animated mover as soon as there is an intersect (so it doesn_t_t try to go back into intersect).  Then do your revert_co_ and see if you still have intersect.  I feel the dragging is causing problems here... maybe.  heh.  I think we need to get engineering-grade precision_co_ here.  Dragging has very little precision_co_ imho. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tGet the camera in real close_co_ show bounding boxes_co_ only 2 mesh_co_ change colors on mesh when we are intersected/not... show the values on-canvas and not in the console_co_ etc. ( text-spewing playground - _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#5R8A1_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#5R8A1_lt_/a_gt_ ) or maybe use dynamicTexture to put your readouts on a small plane parented to the camera.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLet_t_s get some precision_co_ here.  _lt_img alt_eq__qt__dd_)_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ data-emoticon_eq__qt__qt_ /_gt_  Intersection workshop 1.0_co_ ya know? \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-12-21T19:55:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The idea here is to add a collision check to the dragging system. That_t_s why I stick to drag method to move the object. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_happy.png_qt_ alt_eq__qt_^_^_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/happy@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In fact_co_ this is already a very simplified test PG _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_. In my real stress test scene_co_ I have many objects_co_ many colliders_co_ and I record the 20th latest good know _qt_coi_qt_ position for each object. Even when applying the oldest one (which throw back the moving object very far from the collider mesh_co_ it_t_s the same scenario_co_ some movement later_co_ it also stuck in position (even far from the collider)_co_ claiming intersecting_co_ but when can see by eyes that_t_s not the case)._lt_/p_gt__lt_p_gt_So I created this simple PG with some console log to demonstrate._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_How do you do a _qt_slow render loop move_qt_ ? Would be usefull to understand the problem (but the final purpose still is to have collision with a drag at real speed)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Ok_co_ simplified PG _dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#11JY4O%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#11JY4O#2_lt_/a_gt__lt_/p_gt__lt_p_gt_Kept only two cubes_co_ stronger zoom in_co_ changed color when mesh intersect. Showing bounding boxes for cubes is useless (they are identical to the cube themselves)._lt_/p_gt__lt_p_gt_Still logged info in console_co_ because we need history to sudy what happened when_co_ and in which context. Showing log in the canvas is accessible more directly (no need to press F12) but I think it_t_s not good (it takes more ressources and time than direct console_co_ so you_t_re biasing your realtime checking_co_ it_t_s much longer to code - debug is a process where you need to optimise time spent_co_ better to take time to produce smart code than to produce beautiful debug info -)and  knowing the fact that any coder needs to open it_t_s console all day long it_t_s not a big deal to provide some console.log I think (but maybe I_t_m wrong and nowadays console is a _qt_has been_qt_ process)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I know that the mouse position tends to put back the object to the collided position_co_ and this could be the thing to fix_co_ but for the moment nothing jump to my eyes as an evidence_co_ since even if mouse tends to force mesh in collided position_co_ we always keep only good position and immediatly move the objet to the correct one when bad is detected_co_ so we should never have the object stuck in collided position._lt_/p_gt__lt_p_gt_We still have some possibilities _dd__lt_/p_gt__lt_p_gt_- my logic of remembering good position is bad coded_co_ or inapplicable for some reason_lt_/p_gt__lt_p_gt_- the onpointermove plays a tricky game with us (multiple simultaneous calls ?)_lt_/p_gt__lt_p_gt_- intersectMeshes has a bug_lt_/p_gt__lt_p_gt_- mesh positioning or world matrix or I-don_t_t-know-what is not updated as quickly as the onpointermoves are called_co_ leading to kind of wrong intersectMeshes calculations_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-12-22T04:00:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi again!  Yeah_co_ that_t_s a slightly better playground.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I know that the mouse position tends to put back the object to the collided position_co_ and this could be the thing to fix_co_ but for the moment nothing jump to my eyes as an evidence_co_ since even if mouse tends to force mesh in collided position_co_ we always keep only good position and immediately move the object to the correct one when bad is detected_co_ so we should never have the object stuck in collided position._lt_/p_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But but but VP... what about the mouse pointer?  Did you move that away from the intersection as well?  No.  So the variable named _lt_em_gt_current_lt_/em_gt_ which SHOULD be renamed _lt_em_gt_currentPointerPos_lt_/em_gt_... went stale_co_ after your revert.  (it went out-of-offset-sync with the mesh revert position) You backed-off the mesh but you didn_t_t back-off the drag pointer position the same _lt_strong_gt__lt_u_gt_amount_lt_/u_gt__lt_/strong_gt_. _lt_strong_gt__lt_span style_eq__qt_font-size_dd_18px_sm__qt__gt_*_lt_/span_gt__lt_/strong_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Take a look at this one..._lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#11JY4O%235_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#11JY4O#5_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_u_gt_Very slowly_lt_/u_gt_ drag blue against green (to do the intersect).  You can actually see the mesh revert to the _qt_last good position_qt_ (you can see a little gap between the meshes).  Your _qt_last good position_qt_ is still a bad position... if you drag too fast (due to deep-buried intersect).  We can study the deep-buried intersect (dbi) problem later. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I temporarily disabled the snap-to-origin in pointerUp func. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Look at line 106.  As soon as an intersect occurs_co_ I shut-off the pointerMove listener_co_ so it can_t_t bounce. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Why does it bounce?  Because the mouse pointer position didn_t_t revert when the mesh reverts.  Keep in mind that mouse drag is not one single move.  It is a sequence of many many little moves... updated very fast._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m not sure how to fix this.  As you can see in line 87_co_ there I re-activate the pointerMove listener in the pointerUp func... sort of a kludgy way to do it.  The user needs to re-click on the blue box to do more dragging.  In essence_co_ that line is resetting _lt_em_gt_current_lt_/em_gt_ (and _lt_em_gt_startingPoint_lt_/em_gt_) to a fresh pointerDown position._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_strong_gt__lt_span style_eq__qt_font-size_dd_18px_sm__qt__gt_*_lt_/span_gt__lt_/strong_gt_ One might think that an easy fix is to set _lt_em_gt_current_lt_/em_gt_ _eq__eq_ revert position_co_ but that won_t_t work.  It is unlikely that the user did a pointerDown at the exact center of the blue box.  Pointer position will never (or very very rarely) match blue box position.  _lt_em_gt_Current_lt_/em_gt_ is likely a position on the ground plane... a position that is located behind the blue box._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_To be brief_co_ you cannot allow the pointer to continue dragging TOWARD intersect... after an intersect has happened.  You have to shut-off the drag_co_ or somehow reset its current drag position... to be the same position AS IF the user dragged the mesh to the revert position.  I suspect you would need to subtract revert position from intersect position_co_ and then subtract THAT difference... from _lt_em_gt_current._lt_/em_gt_  Careful here.  PickedPoint [returned from getGroundPosition()] is essentially a vector2 on the XZ ground plane... so be careful what kind of _lt_em_gt_subtracting_lt_/em_gt_ you use (when building a reverted _lt_em_gt_current_lt_/em_gt_ should you decide to calculate such a thing).  I bet you knew that already.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Maybe you could record lastGoodMeshPosition _lt_strong_gt_AND_lt_/strong_gt_ lastGood_lt_em_gt_Current_lt_/em_gt_PointerPosition_co_ right?  Revert BOTH of them.  *shrug*_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I hope you understand this_co_ and I hope I_t_m correct_co_ because it sure is difficult to explain. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_   It looks to me like intersect is working properly_co_ but I certainly could be wrong... about ALL of this.  But maybe not.  This is a fun and useful project/experiment_co_ no matter what.  Thanks for making the fresh PG_co_ and for putting up with my theories_co_ VP.  Even if I_t_m completely wrong and lost in the ozone_co_ I_t_m learning tons. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_PS_dd_ I believe that the _qt_stuck_qt_ is caused by a dbi that happens_co_ which fools your lastGoodPosition recorder_co_ so when you revert from this pointer-caused deep-intersect (dbi)... it reverts only PART WAY out-of the intersect condition.  In other words_co_ the deep intersect was actually TWO intersects deep into mesh (BBox) overlap_co_ so a single revert... only backed-out ONE step_co_ thus causing _qt_stuck_qt_.  Wow_co_ eh?  I_t_m scared!  heh_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"yuccai","Date":"2016-12-01T11:18:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou need to compute the world matrix of the mesh before checking collisions. In this way you_t_re sure that the good registered positions are correct.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is the PG _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#11JY4O%2310_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#11JY4O#10_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]