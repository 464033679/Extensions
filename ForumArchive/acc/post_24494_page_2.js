[{"Owner":"Deltakosh","Date":"2016-08-17T16:27:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tDo you mind creating a repro on the PG jsut to ensure I_t_m understanding correctly the problem?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"octopus","Date":"2016-08-17T20:52:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAlright_co_ I built _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JY0P0_qt_ rel_eq__qt_external nofollow_qt__gt_a playground_co_ here_lt_/a_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe scene seems to work quite naturally as long as lines 24 and 25 are thus_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t    var G _eq_ meters.G_sm_  // how do you decide what units or value to use here? the usual 9.81 is in meters!_lt_br /_gt_\n\t    var sizes _eq_ inches_sm_ // since G is in meters we_t_d expect to use meters here too_co_ right?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you set sizes to meters_co_ now how do you decide what to set G to? \n_lt_/p_gt_\n\n_lt_p_gt_\n\tFeel free to change these two values to see different scenarios. The scene never appears to change visually because everything else (camera_co_ light_co_ etc) are placed proportionally to the props in the scene. The gravity units _lt_em_gt_could_lt_/em_gt_ follow the same unit convention you choose if and only if you uncomment line 28. But for now_co_ leave it commented and see what_t_s up (or down) with gravity.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI hope the comments in the code help to explain what I am seeing and what I think would make things more logical. All of my experience so far has been with the Cannon physics engine and my findings are consistent with the few scenes I_t_ve built so far.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tKeep in mind that there are also impulses involved. The units on the impulses shouldn_t_t be arbitrary either. If the math is done correctly an impulse vector one unit long should be enough to move an unimpeded body of 1 unit of mass 1 unit of distance in 1 second_co_ and indeed we see this behaviour where the movement of the balls is consistent with the proportions entered.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe main point I am making is that when a European developer (for example) builds a scene in meters_co_ they will find that the default value of G will not be right. They will probably experiment with G (not knowing the relationship) until they find something that works. Then they will play with the impulses_co_ and since G was decided by experimentation and not any true relationships_co_ then their forces and impulses will be off as well. If the conversion factor of 0.0254 (line 28) is used then everything becomes predictable and sensible.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you want to see without the impulses_co_ just comment out the impulse lines and increase the heights of the balls to say 5*sizes.ball or 10*sizes.ball.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"yahiko","Date":"2016-08-18T10:48:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tHi_co_ I don_t_t really know Babylon or the physics engine used in your example_co_ but I am wondering wether time step needs conversion as well in order to make things work properly. The constant of gravity is an acceleration expressed in a distance unit divided by the square of a time step unit. Usually_co_ in Europe the distance unit is in meter and time step in second_co_ but in video games_co_ I often have to consider frame (or tick) as a time step. Maybe you might have a look at your conversions with that in mind. This could solve your understanding issue.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-08-18T13:20:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAbout the difference - \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am not sure I follow _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tBoth scenes will act the same if you use the right units throughout the scene -  _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JY0P0%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2JY0P0#3_lt_/a_gt_ and _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JY0P0%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2JY0P0#2_lt_/a_gt_ .  (works the same with the impulse as well)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou will need to work with the same units. If you chose meters as your length units_co_ use meters as your gravity as well. Chose cm? compensate your scene_t_s units (which you did so nicely with the meters_co_ inches_co_ feet objects)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI like the comment about the time step as well. The engine (cannon in that case) uses 1/60 as the default timestep. It can correct according to time_co_ but the recommendation is to not modify the timestep in each and every frame. So setting a higher gravity value_co_ while adjusting the timestep will also influence your scene.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut then again_co_ I am not too sure I understood your question. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"octopus","Date":"2016-08-18T16:25:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t@yahiko_co_ that_t_s a good point and fps certainly would play a factor_co_ but in this demo (and in most of my tests) the fps is at 60_co_ which is what most engines use as a basis and the math usually considers an fps of 60.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t@RaananW_co_ I do not believe your parameters in that demo are natural at all. true your parameters are consistent throughout. Yeah sure. Gravity is far too high_co_ these balls have a restitution of 0.99 (and the table 0.5)_co_ they should be very bouncy with those parameters. But_co_ they fall way too quickly. For both of those demos if you uncomment line 28 `G *_eq_ 0.0254` now you have a more natural looking scene.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere might be something I am missing. I have noticed that if you change the Physics engine to Oimo_co_ then gravity is once again completely different and I have no explanation of what is going on there. But for now I am still convinced that for optimal reality in Cannon_co_ the ratio of gravity to other units is similar to the ration of meters to inches. I haven_t_t yet been convinced otherwise.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tJust to clarify_co_ I never really meant to say that physics isn_t_t working properly. It all works great_co_ it is just a matter of scale. Gravity only seems to work_co_ imo_co_ if you scale it by the number of meters in an inch. All I am really saying is that as long as you are using inches in your scene and meters in your G then everything looks great. Its like you have an N scale model railroad and then you plop in one thing (in this case gravity) in a gigantic G scale. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt works and you can finagle it_co_ but it just makes more sense from a development stand point when everything is modelled using the same scale.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"octopus","Date":"2016-08-18T16:38:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tLet me try to explain one other way. This would seem to be the best way to code your scenes_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\ta- model in meters and use G_eq_9.81 (which would be m/s^2)_lt_br /_gt_\n\tb- model in feet and use G_eq_32.185 (which would be ft/s^2)_lt_br /_gt_\n\tc- model in inches and use G_eq_386.2205 (which would be inches/s^2)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat_t_s easy_co_ no? But those values do not produce realistic results.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor realistic results you ought to do this_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\ta- model in meters and use G_eq_0.249174_lt_br /_gt_\n\tb- model in feet and use G_eq_0.8128_lt_br /_gt_\n\tc- model in inches and use G_eq_9.81_lt_br /_gt__lt_br /_gt_\n\tIn the second case there is an important mathematical factor used to calculate G_co_ specifically 0.0254_co_ but why should there be? There should be a 1_dd_1 relationship between scene units and gravity units. If I were to build production code I would likely make myself a gravity setter function that always multiplies my value by the magical 0.0254_co_ then I would know that if I want Moon gravity or Jupiter gravity I need only look up what those values are and plop them into my code..\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn other words_co_ what I am suggesting is why not build these conversions (to shift G to the right units) within the Babylon engine? That is all.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo far_co_ I feel as though @JCPalmer is the only one who has actually grasped what it is I am trying to say. He said_co_ _qt__lt_span style_eq__qt_color_dd_rgb(39_co_42_co_52)_sm_font-family_dd__t_Helvetica Neue_t__co_ Helvetica_co_ Arial_co_ sans-serif_sm_font-size_dd_14px_sm_font-style_dd_normal_sm_font-weight_dd_normal_sm_letter-spacing_dd_normal_sm_line-height_dd_22.4px_sm_text-indent_dd_0px_sm_text-transform_dd_none_sm_white-space_dd_normal_sm_word-spacing_dd_0px_sm_float_dd_none_sm_background-color_dd_rgb(255_co_255_co_255)_sm__qt__gt_Looking at Blender game Engine_co_ gravity is set to 9.80.  If you change the scene units to _t_Imperial_t_ it changes to 32.15. _lt_/span_gt_ _qt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-08-18T16:53:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOn my computer_co_ multiplying gravity by .24 makes the ball drop from 386 inches in about a second.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JY0P0%2319_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2JY0P0#19_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tsame with meters_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JY0P0%2318_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2JY0P0#18_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tand feet_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JY0P0%2317_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2JY0P0#17_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"octopus","Date":"2016-08-18T18:01:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_140497_qt_ data-ipsquote-contentid_eq__qt_24494_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1471539188_qt_ data-ipsquote-userid_eq__qt_4289_qt_ data-ipsquote-username_eq__qt_adam_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t30 minutes ago_co_ adam said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tOn my computer_co_ multiplying gravity by .24 makes the ball drop from 386 inches in about a second.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JY0P0%235_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2JY0P0#5_lt_/a_gt_\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tWell that certainly seems like a reasonable test @adam. I tweaked a couple extra things (_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JY0P0%2311_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2JY0P0#11_lt_/a_gt_). Objects should fall 1/2 the G value in 1 second. But I agree your value might be better than mine. You have verified though that a factor is still involved_co_ I think it would be worth at least documenting that factor somewhere whatever it might actually be.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"aWeirdo","Date":"2016-08-18T18:12:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi again_co__lt_br /_gt_\n\tAs i_t_ve mentioned before.. gravity is calculated relatively correct_co_ relatively_co_ because it_t_s a game framework_co_ we cannot produce 100% correct results._lt_br /_gt__lt_br /_gt_\n\tWhat you believe is a bug_co_ is not a bug_co_ it is_co_ as i have also mentioned_co_ a simple question of _lt_strong_gt_perspective_lt_/strong_gt_. _lt_br /_gt__lt_br /_gt_\n\tsmall scenes with small objects with a camera very close by_co_ will produce appearance of very fast moving objects._lt_br /_gt_\n\tWhile bigger scenes will appear more realistic.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is a PG with the camera a bit further away_co_ and all objects enlarged(correctly scaled though)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JY0P0%2315_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2JY0P0#15_lt_/a_gt_ (click run a few times and it will avg. around 500ms)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTry setting sizes to inches and gravity to meters_co_ it will look wrong.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tand the otherway around it_t_s completely wrong_co_ while both being meters or both inches_co_ it looks good._lt_br /_gt__lt_br /_gt__lt_br /_gt__lt_br /_gt__lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-08-18T18:14:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_140503_qt_ data-ipsquote-contentid_eq__qt_24494_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1471543302_qt_ data-ipsquote-userid_eq__qt_23181_qt_ data-ipsquote-username_eq__qt_octopus_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t19 minutes ago_co_ octopus said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tObjects should fall 1/2 the G value in 1 second.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIf that is the case_co_ a value of .115 works for me now.  \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2JY0P0%2316_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2JY0P0#16_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMonths ago I set the value of gravity in my personal project to .1 of the default.  I guess I_t_ve got a pretty good eye. _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-08-18T18:26:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_140507_qt_ data-ipsquote-contentid_eq__qt_24494_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1471543936_qt_ data-ipsquote-userid_eq__qt_17943_qt_ data-ipsquote-username_eq__qt_aWeirdo_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t17 hours ago_co_ aWeirdo said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\ta simple question of _lt_strong_gt_perspective_lt_/strong_gt_\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t_lt_s_gt_I_t_m beginning to think that there could be an issue._lt_/s_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI don_t_t think there is an issue.  I just think the default value for gravity is too high.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_ well I guess that is an issue if BJS is simulating earth_t_s gravity by default.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"octopus","Date":"2016-08-19T20:43:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t@adam_co_ I pretty much agree with your latest conclusion. Not that there_t_s a problem with gravity per se_co_ just that there seems to be a factor involved when choosing what value to set it to. And I agree that it seems to be around the .115 mark (not 0.0254 as I was previously saying). This assumes of course that we are _lt_s_gt_trying to simulate Earth_t_s gravity_lt_/s_gt_ at 60fps. I_t_m not even sure how you would change the fps in BJS.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_ Actually it doesn_t_t matter which gravity_co_ you still have to multiply the desired acceleration by this factor.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]