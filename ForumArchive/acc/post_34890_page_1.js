[{"Owner":"BlackMojito","Date":"2018-01-05T09:58:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi Folks_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have got a disgusting safari bug as below \n_lt_/p_gt_\n\n_lt_p_gt_\n\t[Error] WebGL_dd_ drawElements_dd_ texture bound to texture unit 0 is not renderable. It maybe non-power-of-2 and have incompatible texture filtering or is not _t_texture complete_t__co_ or it is a float/half-float type with linear filtering and without the relevant float/half-float linear extension enabled._lt_br /_gt_\n\t    drawElements_lt_br /_gt_\n\t    draw (bimernetviewer.bundle.js_dd_11031)_lt_br /_gt_\n\t    _finalizeFrame (bimernetviewer.bundle.js_dd_33801)_lt_br /_gt_\n\t    _renderForCamera (bimernetviewer.bundle.js_dd_21799)_lt_br /_gt_\n\t    _processSubCameras (bimernetviewer.bundle.js_dd_21808)_lt_br /_gt_\n\t    render (bimernetviewer.bundle.js_dd_22011)_lt_br /_gt_\n\t    (anonymous function) (bimernetviewer.bundle.js_dd_119017)_lt_br /_gt_\n\t    _renderLoop (bimernetviewer.bundle.js_dd_10266)_lt_br /_gt_\n\t    (anonymous function)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe relative code is \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_private _createOverlayRenderTarget()_dd_ void {\n        let canvas _eq_ this.internalScene.getEngine().getRenderingCanvas()_sm_\n\n        this._selectionGroupRenderTarget _eq_ new BABYLON.RenderTargetTexture(_t_overlayRenderTarget_t__co_ { width_dd_ canvas.width_co_ height_dd_ canvas.height }_co_\n            this.internalScene_co_ false_co_ false_co_ BABYLON.Engine.TEXTURETYPE_UNSIGNED_INT_co_ false_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE)_sm_\n\n        this._selectionGroupRenderTarget.hasAlpha _eq_ true_sm_\n\n        this._selectionGroupRenderTarget.clearColor _eq_ new BABYLON.Color4(0.0_co_ 0.0_co_ 0.0_co_ 0.0)_sm_\n        this.internalScene.customRenderTargets.push(this._selectionGroupRenderTarget)_sm_\n\n        this._selectionGroupRenderTarget.onBeforeRender _eq_ () _eq_&gt_sm_ {\n            let overlayMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes().slice()_sm_\n            overlayMeshes _eq_ overlayMeshes.filter(e _eq_&gt_sm_ e.renderingGroupId _eq__eq__eq_ 2)_sm_\n            this._selectionGroupRenderTarget.renderList _eq_ []_sm_\n            for (let mesh of overlayMeshes) {\n                this._selectionGroupRenderTarget.renderList.push(mesh)_sm_\n            }\n\n            let secondaryMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes(false)_sm_\n            for (let mesh of secondaryMeshes) {\n                if (mesh.renderingGroupId _eq__eq__eq_ 2) {\n                    mesh.visibility _eq_ 1.0_sm_\n                }\n            }\n        }_sm_\n\n        this._selectionGroupRenderTarget.onAfterRender _eq_ () _eq_&gt_sm_ {\n            let secondaryMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes(false)_sm_\n            for (let mesh of secondaryMeshes) {\n                if (mesh.renderingGroupId _eq__eq__eq_ 2) {\n                    mesh.visibility _eq_ 0.0_sm_\n                }\n            }\n        }_sm_\n    }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI tried to hard code the target size to something like 1024 x 1024 and I did not get the error anymore. But the result was not what I expected. Well does anyone know a solution please?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"aWeirdo","Date":"2018-01-05T16:00:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-blackmojito/?do_eq_hovercard_qt_ data-mentionid_eq__qt_28947_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-blackmojito/_qt_ rel_eq__qt__qt__gt_@BlackMojito_lt_/a_gt__lt_br /_gt__lt_br /_gt_\n\tIf the error is caused by texture being _lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#353c41_sm_font-size_dd_14px_sm__qt__gt_non-power-of-2_co__lt_/span_gt__lt_br /_gt_\n\ttry using CLAMP_ADDRESSMODE_sm__lt_br /_gt__lt_br /_gt_\n\tI can_t_t say for sure it_t_ll work_co_ but it might.\n_lt_/p_gt_\n\n_lt_div style_eq__qt_background-color_dd_#fffffe_sm_color_dd_#000000_sm_font-size_dd_14px_sm__qt__gt_\n\t_lt_div_gt_\n\t\t_lt_pre_gt_\n_lt_code_gt_material.diffuseTexture.wrapU _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm_\nmaterial.diffuseTexture.wrapV _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm__lt_/code_gt__lt_/pre_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BlackMojito","Date":"2018-01-06T08:41:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_200434_qt_ data-ipsquote-contentid_eq__qt_34890_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1515168030_qt_ data-ipsquote-userid_eq__qt_17943_qt_ data-ipsquote-username_eq__qt_aWeirdo_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t16 hours ago_co_ aWeirdo said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tHi _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-blackmojito/?do_eq_hovercard_qt_ data-mentionid_eq__qt_28947_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/28947-blackmojito/_qt_ rel_eq__qt__qt__gt_@BlackMojito_lt_/a_gt__lt_br /_gt__lt_br /_gt_\n\t\t\tIf the error is caused by texture being _lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#353c41_sm_font-size_dd_14px_sm__qt__gt_non-power-of-2_co__lt_/span_gt__lt_br /_gt_\n\t\t\ttry using CLAMP_ADDRESSMODE_sm__lt_br /_gt__lt_br /_gt_\n\t\t\tI can_t_t say for sure it_t_ll work_co_ but it might.\n\t\t_lt_/p_gt_\n\n\t\t_lt_div style_eq__qt_background-color_dd_#fffffe_sm_color_dd_#000000_sm_font-size_dd_14px_sm__qt__gt_\n\t\t\t_lt_div_gt_\n\t\t\t\t_lt_pre_gt_\n\n_lt_code_gt_material.diffuseTexture.wrapU _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm_\nmaterial.diffuseTexture.wrapV _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm__lt_/code_gt__lt_/pre_gt_\n\n\t\t\t\t_lt_p_gt_\n\t\t\t\t\t \n\t\t\t\t_lt_/p_gt_\n\t\t\t_lt_/div_gt_\n\t\t_lt_/div_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/17943-aweirdo/?do_eq_hovercard_qt_ data-mentionid_eq__qt_17943_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/17943-aweirdo/_qt_ rel_eq__qt__qt__gt_@aWeirdo_lt_/a_gt__co_ thanks_co_ it did solve my problem. But I still have very weird safari problem. When I zoom in (my model covers more pixels)_co_ the fps becomes crazily low. I don_t_t have this problem with Chrome. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI don_t_t any special things in my rendering pipeline. All I have is a customized post processing pipeline.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_import * as BABYLON from _t_babylonjs_t_\nimport * as Capabilities from _t_../Device/Capabilities_t_\nimport { RenderOptions_co_ SceneOptions } from _t_../../Preferences_t_\nimport { RenderScene } from _t_../../Scene/RenderScene_t_\nimport { MAX_CUTPLANE_COUNT_co_ CUTPLANES_UNIFORM_NAME_co_ CUTPLANE_COUNT_UNIFORM_NAME } from _t_../../Material/MaterialCommonDefinitions_t_\n\nimport * as ssao_frag from _t_../Shaders/glsl/ssao_frag.glsl_t_\nimport * as gamma_correction_frag from _t_../Shaders/glsl/gamma_correction_frag.glsl_t_\nimport * as final_merge_frag from _t_../Shaders/glsl/final_merge_frag.glsl_t_\n\nexport class AdvancedPostProcessRenderPipeline extends BABYLON.PostProcessRenderPipeline {\n\n    private _renderScene_dd_ RenderScene_sm_\n    private _firstUpdate_dd_ boolean _eq_ true_sm_\n\n    private _selectionGroupRenderTarget_dd_ BABYLON.RenderTargetTexture_sm_\n\n    // SSAO\n    readonly SSAOOriginalSceneColorEffect_dd_ string _eq_ _qt_SSAOOriginalSceneColorEffect_qt__sm_\n    readonly SSAORenderEffect_dd_ string _eq_ _qt_SSAORenderEffect_qt__sm_\n    readonly SSAOBlurHRenderEffect_dd_ string _eq_ _qt_SSAOBlurHRenderEffect_qt__sm_\n    readonly SSAOBlurVRenderEffect_dd_ string _eq_ _qt_SSAOBlurVRenderEffect_qt__sm_\n    readonly SSAOCombineRenderEffect_dd_ string _eq_ _qt_SSAOCombineRenderEffect_qt__sm_\n\n    public _ssaoRadius_dd_ number _eq_ 10_sm_\n    public _ssaoBase_dd_ number _eq_ 0.5_sm_\n    public _ssaoTotalStrength_dd_ number _eq_ 1.0_sm_\n    public _ssaoMaxZ_dd_ number _eq_ 100.0_sm_\n    public _ssaoMinZAspect_dd_ number _eq_ 0.2_sm_\n\n    private _ssaoSamples_dd_ number _eq_ 16_sm_\n    private _ssaoSampleSphere_dd_ number[]_sm_\n    private _ssaoSamplerOffsets_dd_ number[]_sm_\n\n    private _ssaoExpensiveBlur_dd_ boolean _eq_ true_sm_\n\n    private _depthTexture_dd_ BABYLON.Texture_sm_\n    private _normalTexture_dd_ BABYLON.Texture_sm_\n    private _positionTexture_dd_ BABYLON.Texture_sm_\n\n    private _randomTexture_dd_ BABYLON.DynamicTexture_sm_\n\n    private _originalColorPostProcess_dd_ BABYLON.PassPostProcess_sm_\n    private _ssaoPostProcess_dd_ BABYLON.PostProcess_sm_\n    private _blurHPostProcess_dd_ BABYLON.PostProcess_sm_\n    private _blurVPostProcess_dd_ BABYLON.PostProcess_sm_\n    private _ssaoCombinePostProcess_dd_ BABYLON.PostProcess_sm_\n\n    private _ssaoRatio_dd_ any_sm_\n\n    // FXAA\n    readonly FxaaPostProcessId_dd_ string _eq_ _t_FxaaPostProcessEffect_t__sm_\n    private _fxaaEnabled_dd_ boolean _eq_ true_sm_\n    private _fxaa_dd_ BABYLON.FxaaPostProcess_sm_\n\n    // Tone Mapping\n    readonly ToneMappingPostProcessId_dd_ string _eq_ _t_ToneMappingPostProcessEffect_t__sm_\n    private _toneMappingEnabled_dd_ boolean _eq_ true_sm_\n    private _toneMapping_dd_ BABYLON.TonemapPostProcess_sm_\n\n    // Final Merge\n    readonly FinalMergePostProcessId_dd_ string _eq_ _t_FinalMergePostProcessEffect_t__sm_\n    private _finalMerge_dd_ BABYLON.PostProcess_sm_\n\n    // Gamma Correction\n    readonly GammaCorrectionPostProcessId_dd_ string _eq_ _t_GammaCorrectionPostProcessEffect_t__sm_\n    private _gammaCorrection_dd_ BABYLON.PostProcess_sm_\n\n    private _defaultPipelineTextureType_dd_ number_sm_\n    private _hdr_dd_ boolean _eq_ false_sm_\n\n    constructor(name_dd_ string_co_ renderScene_dd_ RenderScene_co_ ratio_dd_ any_co_ cameras?_dd_ BABYLON.Camera[]_co_ hdr?_dd_ boolean) {\n        super(renderScene.scene.getEngine()_co_ name)_sm_\n\n        this._renderScene _eq_ renderScene_sm_\n\n        if (!Capabilities.isMRTSupported()) {\n            BABYLON.Tools.Error(_qt_SSAO 2 needs WebGL 2 support._qt_)_sm_\n            return_sm_\n        }\n\n        var caps _eq_ this._renderScene.scene.getEngine().getCaps()_sm_\n        if (hdr) {\n            this._hdr _eq_ hdr &amp_sm_&amp_sm_ (caps.textureHalfFloatRender || caps.textureFloatRender)_sm_\n        }\n\n        if (this._hdr) {\n            if (caps.textureHalfFloatRender) {\n                this._defaultPipelineTextureType _eq_ BABYLON.Engine.TEXTURETYPE_HALF_FLOAT_sm_\n            }\n            else if (caps.textureFloatRender) {\n                this._defaultPipelineTextureType _eq_ BABYLON.Engine.TEXTURETYPE_FLOAT_sm_\n            }\n        } else {\n            this._defaultPipelineTextureType _eq_ BABYLON.Engine.TEXTURETYPE_UNSIGNED_INT_sm_\n        }\n\n        this._ssaoRadius _eq_ RenderOptions.ssao2Radius_sm_\n        this._ssaoBase _eq_ RenderOptions.ssao2Base_sm_\n        this._ssaoTotalStrength _eq_ RenderOptions.ssao2TotalStrength_sm_\n        this._ssaoMaxZ _eq_ RenderOptions.ssao2MaxZ_sm_\n        this._ssaoMinZAspect _eq_ RenderOptions.ssao2MinZ_sm_\n        this._ssaoSamples _eq_ RenderOptions.ssao2Samples_sm_\n\n        var ssaoRatio _eq_ ratio.ssaoRatio || ratio_sm_\n        var blurRatio _eq_ ratio.blurRatio || ratio_sm_\n        this._ssaoRatio _eq_ {\n            ssaoRatio_dd_ ssaoRatio_co_\n            blurRatio_dd_ blurRatio\n        }_sm_\n\n        // Set up assets\n        let geometryBufferRenderer _eq_ &lt_sm_BABYLON.GeometryBufferRenderer&gt_sm_renderScene.scene.enableGeometryBufferRenderer()_sm_\n        this._createRandomTexture()_sm_\n        this._depthTexture _eq_ geometryBufferRenderer.getGBuffer().textures[0]_sm_\n        this._normalTexture _eq_ geometryBufferRenderer.getGBuffer().textures[1]_sm_\n\n        this._createColorBufferPostProcess()_sm_\n        this._createSSAOPostProcess(1.0)_sm_\n        this._createBlurPostProcess(ssaoRatio_co_ blurRatio)_sm_\n        this._createSSAOCombinePostProcess(blurRatio)_sm_\n\n        this._createToneMappingPostProcess()_sm_\n        this._createFinalMergePostProcess()_sm_\n        this._createFXAAPostProcess()_sm_\n        this._createGammaCorrectionPostProcess()_sm_\n\n        // Set up pipeline\n        this._setupPipeline()_sm_\n\n        // Finish\n        renderScene.scene.postProcessRenderPipelineManager.addPipeline(this)_sm_\n        if (cameras)\n            renderScene.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name_co_ cameras)_sm_\n\n        this._createOverlayRenderTarget()_sm_\n    }\n\n    dispose(disableGeometryBufferRenderer_dd_ boolean _eq_ false)_dd_ void {\n        for (var i _eq_ 0_sm_ i &lt_sm_ this.internalScene.cameras.length_sm_ i++) {\n            var camera _eq_ this.internalScene.cameras[i]_sm_\n\n            this._originalColorPostProcess.dispose(camera)_sm_\n            this._ssaoPostProcess.dispose(camera)_sm_\n            this._blurHPostProcess.dispose(camera)_sm_\n            this._blurVPostProcess.dispose(camera)_sm_\n            this._ssaoCombinePostProcess.dispose(camera)_sm_\n            this._fxaa.dispose(camera)_sm_\n            this._toneMapping.dispose(camera)_sm_\n            this._finalMerge.dispose(camera)_sm_\n            this._gammaCorrection.dispose(camera)_sm_\n        }\n\n        this._randomTexture.dispose()_sm_\n        this._selectionGroupRenderTarget.dispose()_sm_\n\n        if (disableGeometryBufferRenderer)\n            this.internalScene.disableGeometryBufferRenderer()_sm_\n\n        this.internalScene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name_co_ this.internalScene.cameras)_sm_\n\n        super.dispose()_sm_\n    }\n\n    private get internalScene()_dd_ BABYLON.Scene {\n        return this._renderScene.scene_sm_\n    }\n\n    private _createOverlayRenderTarget()_dd_ void {\n        let canvas _eq_ this.internalScene.getEngine().getRenderingCanvas()_sm_\n\n        this._selectionGroupRenderTarget _eq_ new BABYLON.RenderTargetTexture(_t_overlayRenderTarget_t__co_ { width_dd_ canvas.width_co_ height_dd_ canvas.height }_co_\n            this.internalScene_co_ false_co_ false_co_ this._defaultPipelineTextureType_co_ false_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE)_sm_\n\n        this._selectionGroupRenderTarget.wrapU _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm_\n        this._selectionGroupRenderTarget.wrapV _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm_\n\n        this._selectionGroupRenderTarget.hasAlpha _eq_ true_sm_\n\n        this._selectionGroupRenderTarget.clearColor _eq_ new BABYLON.Color4(0.0_co_ 0.0_co_ 0.0_co_ 0.0)_sm_\n        this.internalScene.customRenderTargets.push(this._selectionGroupRenderTarget)_sm_\n\n        this._selectionGroupRenderTarget.onBeforeRender _eq_ () _eq_&gt_sm_ {\n            let overlayMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes().slice()_sm_\n            overlayMeshes _eq_ overlayMeshes.filter(e _eq_&gt_sm_ e.renderingGroupId _eq__eq__eq_ 2)_sm_\n            this._selectionGroupRenderTarget.renderList _eq_ []_sm_\n            for (let mesh of overlayMeshes) {\n                this._selectionGroupRenderTarget.renderList.push(mesh)_sm_\n            }\n\n            let secondaryMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes(false)_sm_\n            for (let mesh of secondaryMeshes) {\n                if (mesh.renderingGroupId _eq__eq__eq_ 2) {\n                    mesh.visibility _eq_ 1.0_sm_\n                }\n            }\n        }_sm_\n\n        this._selectionGroupRenderTarget.onAfterRender _eq_ () _eq_&gt_sm_ {\n            let secondaryMeshes _eq_ this._renderScene.secondarySceneRoot.getChildMeshes(false)_sm_\n            for (let mesh of secondaryMeshes) {\n                if (mesh.renderingGroupId _eq__eq__eq_ 2) {\n                    mesh.visibility _eq_ 0.0_sm_\n                }\n            }\n        }_sm_\n    }\n\n    private _setupPipeline()_dd_ void {\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.SSAOOriginalSceneColorEffect_co_ () _eq_&gt_sm_ { return this._originalColorPostProcess_sm_ }_co_ true))_sm_\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.SSAORenderEffect_co_ () _eq_&gt_sm_ { return this._ssaoPostProcess_sm_ }_co_ true))_sm_\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.SSAOBlurHRenderEffect_co_ () _eq_&gt_sm_ { return this._blurHPostProcess_sm_ }_co_ true))_sm_\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.SSAOBlurVRenderEffect_co_ () _eq_&gt_sm_ { return this._blurVPostProcess_sm_ }_co_ true))_sm_\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.SSAOCombineRenderEffect_co_ () _eq_&gt_sm_ { return this._ssaoCombinePostProcess_sm_ }_co_ true))_sm_\n\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.ToneMappingPostProcessId_co_ () _eq_&gt_sm_ { return this._toneMapping_sm_ }_co_ true))_sm_\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.FinalMergePostProcessId_co_ () _eq_&gt_sm_ { return this._finalMerge_sm_ }_co_ true))_sm_\n\n        if (this.fxaaEnabled) {\n            this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.FxaaPostProcessId_co_ () _eq_&gt_sm_ { return this._fxaa_sm_ }_co_ true))_sm_\n            //this._fxaa.autoClear _eq_ !this._hdr_sm_\n        }\n        this.addEffect(new BABYLON.PostProcessRenderEffect(this.internalScene.getEngine()_co_ this.GammaCorrectionPostProcessId_co_ () _eq_&gt_sm_ { return this._gammaCorrection_sm_ }_co_ true))_sm_\n    }\n\n    resize()_dd_ void {\n        let canvas _eq_ this.internalScene.getEngine().getRenderingCanvas()_sm_\n        this._selectionGroupRenderTarget.resize({ width_dd_ canvas.width_co_ height_dd_ canvas.height })_sm_\n    }\n\n    _rebuild() {\n        this._firstUpdate _eq_ true_sm_\n        super._rebuild()_sm_\n    }\n\n    enableSSAO(enabled_dd_ boolean)_dd_ void {\n        if (enabled) {\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.SSAORenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.SSAOBlurHRenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.SSAOBlurVRenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.SSAOCombineRenderEffect_co_ this.internalScene.activeCamera)_sm_\n        } else {\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.SSAORenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.SSAOBlurHRenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.SSAOBlurVRenderEffect_co_ this.internalScene.activeCamera)_sm_\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.SSAOCombineRenderEffect_co_ this.internalScene.activeCamera)_sm_\n        }\n    }\n\n    enableToneMapping(enabled_dd_ boolean)_dd_ void {\n        if (enabled) {\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.ToneMappingPostProcessId_co_ this.internalScene.activeCamera)_sm_\n        } else {\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.ToneMappingPostProcessId_co_ this.internalScene.activeCamera)_sm_\n        }\n    }\n\n    enableGammaCorrection(enabled_dd_ boolean)_dd_ void {\n        if (enabled) {\n            this.internalScene.postProcessRenderPipelineManager.enableEffectInPipeline(this._name_co_ this.GammaCorrectionPostProcessId_co_ this.internalScene.activeCamera)_sm_\n        } else {\n            this.internalScene.postProcessRenderPipelineManager.disableEffectInPipeline(this._name_co_ this.GammaCorrectionPostProcessId_co_ this.internalScene.activeCamera)_sm_\n        }\n    }\n\n    set ssaoSamples(n_dd_ number) {\n        this._ssaoPostProcess.updateEffect(_qt_#define SAMPLES _qt_ + n + _qt_\\n#define SSAO_qt_)_sm_\n        this._ssaoSamples _eq_ n_sm_\n        this._ssaoSampleSphere _eq_ this._generateHemisphere()_sm_\n\n        this._firstUpdate _eq_ true_sm_\n    }\n\n    get ssaoSamples()_dd_ number {\n        return this._ssaoSamples_sm_\n    }\n\n    set ssaoExpensiveBlur(b_dd_ boolean) {\n        this._blurHPostProcess.updateEffect(_qt_#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE _qt_ + (b ? _qt_1_qt_ _dd_ _qt_0_qt_) + _qt_\\n_qt__co_\n            null_co_ [_qt_textureSampler_qt__co_ _qt_depthSampler_qt_])_sm_\n        this._blurVPostProcess.updateEffect(_qt_#define BILATERAL_BLUR\\n#define SAMPLES 16\\n#define EXPENSIVE _qt_ + (b ? _qt_1_qt_ _dd_ _qt_0_qt_) + _qt_\\n_qt__co_\n            null_co_ [_qt_textureSampler_qt__co_ _qt_depthSampler_qt_])_sm_\n        this._ssaoExpensiveBlur _eq_ b_sm_\n        this._firstUpdate _eq_ true_sm_\n    }\n\n    get ssaoExpensiveBlur()_dd_ boolean {\n        return this._ssaoExpensiveBlur_sm_\n    }\n\n    // Private Methods\n    private _createBlurPostProcess(ssaoRatio_dd_ number_co_ blurRatio_dd_ number)_dd_ void {\n        this._ssaoSamplerOffsets _eq_ []_sm_\n        var expensive _eq_ this._ssaoExpensiveBlur_sm_\n\n        for (var i _eq_ -8_sm_ i &lt_sm_ 8_sm_ i++) {\n            this._ssaoSamplerOffsets.push(i * 2 + 0.5)_sm_\n        }\n\n        this._blurHPostProcess _eq_ new BABYLON.PostProcess(_qt_BlurH_qt__co_ _qt_ssao2_qt__co_ [_qt_outSize_qt__co_ _qt_samplerOffsets_qt__co_ _qt_near_qt__co_ _qt_far_qt__co_ _qt_radius_qt_]_co_ [_qt_depthSampler_qt_]_co_ \n                                                        ssaoRatio_co_ null_co_ BABYLON.Texture.TRILINEAR_SAMPLINGMODE_co_ this.internalScene.getEngine()_co_ \n                                                        false_co_ _qt_#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE _qt_ + (expensive ? _qt_1_qt_ _dd_ _qt_0_qt_) + _qt_\\n_qt__co_ \n                                                        this._defaultPipelineTextureType)_sm_\n\n        this._blurHPostProcess.onApply _eq_ (effect_dd_ BABYLON.Effect) _eq_&gt_sm_ {\n            if (!this.internalScene.activeCamera) {\n                return_sm_\n            }\n\n            effect.setFloat(_qt_outSize_qt__co_ this._ssaoCombinePostProcess.width &gt_sm_ 0 ? this._ssaoCombinePostProcess.width _dd_ this._originalColorPostProcess.width)_sm_\n            effect.setFloat(_qt_near_qt__co_ this.internalScene.activeCamera.minZ)_sm_\n            effect.setFloat(_qt_far_qt__co_ this.internalScene.activeCamera.maxZ)_sm_\n            effect.setFloat(_qt_radius_qt__co_ this._ssaoRadius)_sm_\n            effect.setTexture(_qt_depthSampler_qt__co_ this._depthTexture)_sm_\n\n            if (this._firstUpdate) {\n                effect.setArray(_qt_samplerOffsets_qt__co_ this._ssaoSamplerOffsets)_sm_\n            }\n        }_sm_\n\n        this._blurVPostProcess _eq_ new BABYLON.PostProcess(_qt_BlurV_qt__co_ _qt_ssao2_qt__co_ [_qt_outSize_qt__co_ _qt_samplerOffsets_qt__co_ _qt_near_qt__co_ _qt_far_qt__co_ _qt_radius_qt_]_co_ [_qt_depthSampler_qt_]_co_ \n                                                        blurRatio_co_ null_co_ BABYLON.Texture.TRILINEAR_SAMPLINGMODE_co_ this.internalScene.getEngine()_co_ \n                                                        false_co_ _qt_#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_V\\n#define SAMPLES 16\\n#define EXPENSIVE _qt_ + (expensive ? _qt_1_qt_ _dd_ _qt_0_qt_) + _qt_\\n_qt__co_ \n                                                        this._defaultPipelineTextureType)_sm_\n                                                        \n        this._blurVPostProcess.onApply _eq_ (effect_dd_ BABYLON.Effect) _eq_&gt_sm_ {\n            if (!this.internalScene.activeCamera) {\n                return_sm_\n            }\n\n            effect.setFloat(_qt_outSize_qt__co_ this._ssaoCombinePostProcess.height &gt_sm_ 0 ? this._ssaoCombinePostProcess.height _dd_ this._originalColorPostProcess.height)_sm_\n            effect.setFloat(_qt_near_qt__co_ this.internalScene.activeCamera.minZ)_sm_\n            effect.setFloat(_qt_far_qt__co_ this.internalScene.activeCamera.maxZ)_sm_\n            effect.setFloat(_qt_radius_qt__co_ this._ssaoRadius)_sm_\n            effect.setTexture(_qt_depthSampler_qt__co_ this._depthTexture)_sm_\n\n            if (this._firstUpdate) {\n                effect.setArray(_qt_samplerOffsets_qt__co_ this._ssaoSamplerOffsets)_sm_\n                this._firstUpdate _eq_ false_sm_\n            }\n        }_sm_\n    }\n\n    private _generateHemisphere()_dd_ number[] {\n        var numSamples _eq_ this._ssaoSamples_sm_\n        var result _eq_ []_sm_\n        var vector_co_ scale_sm_\n\n        var rand _eq_ (min_dd_ number_co_ max_dd_ number) _eq_&gt_sm_ {\n            return Math.random() * (max - min) + min_sm_\n        }\n\n        var i _eq_ 0_sm_\n        while (i &lt_sm_ numSamples) {\n            vector _eq_ new BABYLON.Vector3(\n                rand(-1.0_co_ 1.0)_co_\n                rand(-1.0_co_ 1.0)_co_\n                rand(0.3_co_ 1.0))_sm_\n            vector.normalize()_sm_\n            scale _eq_ i / numSamples_sm_\n            scale _eq_ BABYLON.Scalar.Lerp(0.1_co_ 1.0_co_ scale * scale)_sm_\n            vector.scaleInPlace(scale)_sm_\n\n            result.push(vector.x_co_ vector.y_co_ vector.z)_sm_\n            i++_sm_\n        }\n\n        return result_sm_\n    }\n\n    private _createColorBufferPostProcess()_dd_ void {\n        this._originalColorPostProcess _eq_ new BABYLON.PassPostProcess(_qt_SSAOOriginalSceneColor_qt__co_ 1.0_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ this.internalScene.getEngine()_co_ false_co_ this._defaultPipelineTextureType)_sm_\n    }\n\n    private _createSSAOPostProcess(ratio_dd_ number)_dd_ void {\n        var numSamples _eq_ this._ssaoSamples_sm_\n\n        this._ssaoSampleSphere _eq_ this._generateHemisphere()_sm_\n\n        let shader _eq_ BABYLON.Effect.ShadersStore[_t_custom_ssao2_t_ + _t_FragmentShader_t_]_sm_\n        if (!shader) {\n            let ssao_frag_shader_dd_ string _eq_ ssao_frag_sm_\n            BABYLON.Effect.ShadersStore[_t_custom_ssao2_t_ + _t_FragmentShader_t_] _eq_ ssao_frag_shader_sm_\n        }\n\n        this._ssaoPostProcess _eq_ new BABYLON.PostProcess(_qt_ssao2_qt__co_ _qt_custom_ssao2_qt__co_\n            [\n                _qt_sampleSphere_qt__co_ _qt_samplesFactor_qt__co_ _qt_randTextureTiles_qt__co_ _qt_totalStrength_qt__co_ _qt_radius_qt__co_\n                _qt_base_qt__co_ _qt_range_qt__co_ _qt_projection_qt__co_ _qt_near_qt__co_ _qt_far_qt__co_ _qt_texelSize_qt__co_\n                _qt_xViewport_qt__co_ _qt_yViewport_qt__co_ _qt_maxZ_qt__co_ _qt_minZAspect_qt_//_co_ _qt_cutPlaneCount_qt__co_ _qt_cutPlanes_qt__co_ _qt_viewMatrixInv_qt_\n            ]_co_\n            [_qt_randomSampler_qt__co_ _qt_normalSampler_qt_]_co_\n            ratio_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_\n            this.internalScene.getEngine()_co_ false_co_\n            _qt_#define MAX_CUTPLANE_COUNT _qt_ + MAX_CUTPLANE_COUNT + _qt_\\n#define SAMPLES _qt_ + numSamples + _qt_\\n#define SSAO_qt__co_ this._defaultPipelineTextureType)_sm_\n\n        this._ssaoPostProcess.onApply _eq_ (effect_dd_ BABYLON.Effect) _eq_&gt_sm_ {\n            if (this._firstUpdate) {\n                effect.setArray3(_qt_sampleSphere_qt__co_ this._ssaoSampleSphere)_sm_\n                effect.setFloat(_qt_randTextureTiles_qt__co_ 4.0)_sm_\n            }\n\n            if (!this.internalScene.activeCamera) {\n                return_sm_\n            }\n\n            effect.setFloat(_qt_samplesFactor_qt__co_ 1 / this._ssaoSamples)_sm_\n            effect.setFloat(_qt_totalStrength_qt__co_ this._ssaoTotalStrength)_sm_\n            effect.setFloat2(_qt_texelSize_qt__co_ 1 / this._ssaoPostProcess.width_co_ 1 / this._ssaoPostProcess.height)_sm_\n            effect.setFloat(_qt_radius_qt__co_ this._ssaoRadius)_sm_\n            effect.setFloat(_qt_maxZ_qt__co_ this._ssaoMaxZ)_sm_\n            effect.setFloat(_qt_minZAspect_qt__co_ this._ssaoMinZAspect)_sm_\n            effect.setFloat(_qt_base_qt__co_ this._ssaoBase)_sm_\n            effect.setFloat(_qt_near_qt__co_ this.internalScene.activeCamera.minZ)_sm_\n            effect.setFloat(_qt_far_qt__co_ this.internalScene.activeCamera.maxZ)_sm_\n            effect.setFloat(_qt_xViewport_qt__co_ Math.tan(this.internalScene.activeCamera.fov / 2) * this.internalScene.getEngine().getAspectRatio(this.internalScene.activeCamera_co_ true))_sm_\n            effect.setFloat(_qt_yViewport_qt__co_ Math.tan(this.internalScene.activeCamera.fov / 2))_sm_\n            effect.setMatrix(_qt_projection_qt__co_ this.internalScene.getProjectionMatrix())_sm_\n\n            let viewMatrixInv _eq_ BABYLON.Matrix.Identity()_sm_\n            this.internalScene.getViewMatrix().invertToRef(viewMatrixInv)_sm_\n            effect.setMatrix(_qt_viewMatrixInv_qt__co_ viewMatrixInv)_sm_\n\n            effect.setTexture(_qt_textureSampler_qt__co_ this._depthTexture)_sm_\n            effect.setTexture(_qt_normalSampler_qt__co_ this._normalTexture)_sm_\n            effect.setTexture(_qt_randomSampler_qt__co_ this._randomTexture)_sm_\n        }_sm_\n    }\n\n    private _createSSAOCombinePostProcess(ratio_dd_ number)_dd_ void {\n        this._ssaoCombinePostProcess _eq_ new BABYLON.PostProcess(_qt_ssaoCombine_qt__co_ _qt_ssaoCombine_qt__co_ []_co_ [_qt_originalColor_qt_]_co_\n            ratio_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_\n            this.internalScene.getEngine()_co_ false_co_ _t__t__co_ this._defaultPipelineTextureType)_sm_\n\n        this._ssaoCombinePostProcess.onApply _eq_ (effect_dd_ BABYLON.Effect) _eq_&gt_sm_ {\n            effect.setTextureFromPostProcess(_qt_originalColor_qt__co_ this._originalColorPostProcess)_sm_\n        }_sm_\n    }\n\n    private _createRandomTexture()_dd_ void {\n        var size _eq_ 512_sm_\n\n        this._randomTexture _eq_ new BABYLON.DynamicTexture(_qt_SSAORandomTexture_qt__co_ size_co_ this.internalScene_co_ false_co_ BABYLON.Texture.TRILINEAR_SAMPLINGMODE)_sm_\n        this._randomTexture.wrapU _eq_ BABYLON.Texture.WRAP_ADDRESSMODE_sm_\n        this._randomTexture.wrapV _eq_ BABYLON.Texture.WRAP_ADDRESSMODE_sm_\n\n        var context _eq_ this._randomTexture.getContext()_sm_\n\n        var rand _eq_ (min_dd_ number_co_ max_dd_ number) _eq_&gt_sm_ {\n            return Math.random() * (max - min) + min_sm_\n        }\n\n        var randVector _eq_ BABYLON.Vector3.Zero()_sm_\n\n        for (var x _eq_ 0_sm_ x &lt_sm_ size_sm_ x++) {\n            for (var y _eq_ 0_sm_ y &lt_sm_ size_sm_ y++) {\n                randVector.x _eq_ rand(0.0_co_ 1.0)_sm_\n                randVector.y _eq_ rand(0.0_co_ 1.0)_sm_\n                randVector.z _eq_ 0.0_sm_\n\n                randVector.normalize()_sm_\n\n                randVector.scaleInPlace(255)_sm_\n                randVector.x _eq_ Math.floor(randVector.x)_sm_\n                randVector.y _eq_ Math.floor(randVector.y)_sm_\n\n                context.fillStyle _eq_ _t_rgb(_t_ + randVector.x + _t__co_ _t_ + randVector.y + _t__co_ _t_ + randVector.z + _t_)_t__sm_\n                context.fillRect(x_co_ y_co_ 1_co_ 1)_sm_\n            }\n        }\n\n        this._randomTexture.update(false)_sm_\n    }\n\n    // FXAA\n    get fxaaEnabled()_dd_ boolean {\n        return this._fxaaEnabled_sm_\n    }\n\n    set fxaaEnabled(enabled_dd_ boolean) {\n        if (this._fxaaEnabled _eq__eq__eq_ enabled) {\n            return_sm_\n        }\n        this._fxaaEnabled _eq_ enabled_sm_\n\n        this._setupPipeline()_sm_\n    }\n\n    private _createFXAAPostProcess()_dd_ void {\n        this._fxaa _eq_ new BABYLON.FxaaPostProcess(_qt_fxaa_qt__co_ 1.0_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ this.internalScene.getEngine()_co_ false_co_ this._defaultPipelineTextureType)_sm_\n    }\n\n    // Gamma Correction\n    private _createGammaCorrectionPostProcess()_dd_ void {\n        let shader _eq_ BABYLON.Effect.ShadersStore[_t_gamma_correction_t_ + _t_FragmentShader_t_]_sm_\n        if (!shader) {\n            let gamma_correction_frag_shader_dd_ string _eq_ gamma_correction_frag_sm_\n            BABYLON.Effect.ShadersStore[_t_gamma_correction_t_ + _t_FragmentShader_t_] _eq_ gamma_correction_frag_shader_sm_\n        }\n        this._gammaCorrection _eq_ new BABYLON.PostProcess(_qt_gamma_correction_qt__co_ _qt_gamma_correction_qt__co_\n            [\n                _qt_gamma_qt_\n            ]_co_\n            []_co_\n            1.0_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_\n            this.internalScene.getEngine()_co_ false_co_ _t__t__co_ this._defaultPipelineTextureType)_sm_\n\n        this._gammaCorrection.onApply _eq_ (effect_dd_ BABYLON.Effect) _eq_&gt_sm_ {\n            effect.setFloat(_t_gamma_t__co_ RenderOptions.gammaValue)_sm_\n        }_sm_\n    }\n\n    // Tone Mapping\n    private _createToneMappingPostProcess()_dd_ void {\n        this._toneMapping _eq_ new BABYLON.TonemapPostProcess(_t_tone_mapping_t__co_ RenderOptions.toneMappingMethod_co_ RenderOptions.toneMappingExposureAdjustment_co_\n            null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_ this.internalScene.getEngine()_co_ this._defaultPipelineTextureType)_sm_\n    }\n\n    // Final Merge\n    private _createFinalMergePostProcess()_dd_ void {\n        let shader _eq_ BABYLON.Effect.ShadersStore[_t_final_merge_t_ + _t_FragmentShader_t_]_sm_\n        if (!shader) {\n            let final_merge_frag_shader_dd_ string _eq_ final_merge_frag_sm_\n            BABYLON.Effect.ShadersStore[_t_final_merge_t_ + _t_FragmentShader_t_] _eq_ final_merge_frag_shader_sm_\n        }\n        this._finalMerge _eq_ new BABYLON.PostProcess(_qt_final_merge_qt__co_ _qt_final_merge_qt__co_\n            [\n                _t_selectionColor_t__co_ _t_resolution_t_\n            ]_co_\n            [\n                _t_selectionSampler_t_\n            ]_co_\n            1.0_co_ null_co_ BABYLON.Texture.BILINEAR_SAMPLINGMODE_co_\n            this.internalScene.getEngine()_co_ false_co_ _t__t__co_ this._defaultPipelineTextureType)_sm_\n\n        this._finalMerge.onApply _eq_ (effect_dd_ BABYLON.Effect) _eq_&gt_sm_ {\n            effect.setFloat3(_t_selectionColor_t__co_ SceneOptions.selectionColor.r_co_ SceneOptions.selectionColor.g_co_ SceneOptions.selectionColor.b)_sm_\n            effect.setFloat2(_qt_resolution_qt__co_ 1.0 / this._finalMerge.width_co_ 1.0 / this._finalMerge.height)_sm_\n            effect.setTexture(_t_selectionSampler_t__co_ this._selectionGroupRenderTarget)_sm_\n        }_sm_\n    }\n\n    private supportsMultiSampleRenderTargets()_dd_ boolean {\n        return Capabilities.WebGLVersion(this.internalScene.getEngine()) &gt_sm__eq_ 2.0_sm_\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]