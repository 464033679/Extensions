[{"Owner":"Baker Xiao","Date":"2017-09-22T03:38:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt seems setting a material with diffuse texture on a solid particle system-generated mesh would cause webGL errors. We have a PG repro in_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#ZFH51N%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#ZFH51N#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe errors reported in the console are_dd_ [.Offscreen-For-WebGL-0x7f8318dd3a00]GL ERROR _dd_GL_INVALID_OPERATION _dd_ glDrawElements_dd_ attempt to access out of range vertices in attribute 2\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRendering the SPS without the material works perfectly fine. Any clue what could be causing the problem?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-22T07:31:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tDid you check that the imported mesh model has UVs ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe SPS copies the mesh model settings (geometry_co_ uvs_co_ colors_co_ etc) when building its own geometry. If something lacks in the model_co_ then it lacks in the SPS...\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Baker Xiao","Date":"2017-09-22T18:46:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_189563_qt_ data-ipsquote-contentid_eq__qt_33038_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1506065488_qt_ data-ipsquote-userid_eq__qt_5453_qt_ data-ipsquote-username_eq__qt_jerome_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t11 hours ago_co_ jerome said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tDid you check that the imported mesh model has UVs ?\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThe SPS copies the mesh model settings (geometry_co_ uvs_co_ colors_co_ etc) when building its own geometry. If something lacks in the model_co_ then it lacks in the SPS...\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThat might be it! Although we did try setting the uvs value of the SolidParticles. Is that not supposed to help with this case?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-22T18:51:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tSetting the UVs in the SPS just modifies the mesh UV initial values by shifting them for some percentage but it can invent these initial values. Your model needs UVs if you want to apply a texture anyway.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Baker Xiao","Date":"2017-09-22T18:53:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_189678_qt_ data-ipsquote-contentid_eq__qt_33038_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1506106276_qt_ data-ipsquote-userid_eq__qt_5453_qt_ data-ipsquote-username_eq__qt_jerome_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t1 minute ago_co_ jerome said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tSetting the UVs in the SPS just modifies the mesh UV initial values by shifting them for some percentage but it can invent these initial values. Your model needs UVs if you want to apply a texture anyway.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tGot it. Thanks a lot _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5453_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/_qt_ rel_eq__qt__qt__gt_@jerome_lt_/a_gt_! \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Baker Xiao","Date":"2017-09-22T19:28:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tbtw _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5453_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/_qt_ rel_eq__qt__qt__gt_@jerome_lt_/a_gt_ we are running into another problem_dd_ _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#N6PH8X_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#N6PH8X_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tas mentioned in the documentation_co_ we are expecting computeParticleRotation_eq_false to prevent updates_co_ but still allow a rotation to be set initially. However setting it to false seems to make all following setParticle calls to reset the rotation to 0. Any idea what we might be missing?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-23T04:38:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is the expected behavior actually.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe SPS is designed to be able to manage a big number of solid particles_co_ but everything is done CPU side. Including the rotation computations_co_ what are the one the heaviest part of all the internal computations .\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo choices were done to give priority to some optimizations over some others _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- only the particle initial status is stored (the status at build time) as a reference (imagine it_t_s some mesh local space_co_ in comparison)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- only the translation and the scaling_co_ among all the possible transformations_co_ are applied anyway from this initial status when calling setParticles()... meaning that_co_ if the rotation computation is disabled_co_ the initial rotation (at build time) only is kept (it_t_s zero_co_ by default). This is the case you_t_re encountering and this is done in purpose for users wanting faster animation without rotations.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat said_co_ if you need to give only one initial rotation to your particles_co_ then pass some _lt_em_gt_positionFunction_lt_/em_gt_ as a parameter to _lt_em_gt_addShape()_lt_/em_gt_ before building the SPS. This position function will modify the initial geometry (so the initial status) of the particles added by this call. Thus_co_ you could set them with your custom initial rotation. Any further call to _lt_em_gt_setParticles_lt_/em_gt_()_co_ even with _lt_em_gt_computeRotation_lt_/em_gt_ set to false_co_ won_t_t reset this initial status to zero.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/overviews/solid_particle_system#create-an-immutable-sps_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/overviews/solid_particle_system#create-an-immutable-sps_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs a comparison_co_ the positionFunction would be a way to bake your own transformation in the mesh local space at construction time.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn the contrary_co_ if you need to update the particle rotations at least once after the SPS construction and if you need to re-apply this rotation on next calls of setParticles()_co_ you musn_t_t unfortunately set _lt_em_gt_computeRotation_lt_/em_gt_ to false then.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-23T04:44:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOoops maybe I spoke too fast\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI need to check if it really bakes the transformation or not_co_ just can_t_t remember.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Baker Xiao","Date":"2017-09-23T04:44:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_189720_qt_ data-ipsquote-contentid_eq__qt_33038_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1506141534_qt_ data-ipsquote-userid_eq__qt_5453_qt_ data-ipsquote-username_eq__qt_jerome_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t5 minutes ago_co_ jerome said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThis is the expected behavior actually.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThe SPS is designed to be able to manage a big number of solid particles_co_ but everything is done CPU side. Including the rotation computations_co_ what are the one the heaviest part of all the internal computations .\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tSo choices were done to give priority to some optimizations over some others _dd_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t- only the particle initial status is stored (the status at build time) as a reference (imagine it_t_s some mesh local space_co_ in comparison)\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t- only the translation and the scaling_co_ among all the possible transformations_co_ are applied anyway from this initial status when calling setParticles()... meaning that_co_ if the rotation computation is disabled_co_ the initial rotation (at build time) only is kept (it_t_s zero_co_ by default). This is the case you_t_re encountering and this is done in purpose for users wanting faster animation without rotations.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThat said_co_ if you need to give only one initial rotation to your particles_co_ then pass some _lt_em_gt_positionFunction_lt_/em_gt_ as a parameter to _lt_em_gt_addShape()_lt_/em_gt_ before building the SPS. This position function will modify the initial geometry (so the initial status) of the particles added by this call. Thus_co_ you could set them with your custom initial rotation. Any further call to _lt_em_gt_setParticles_lt_/em_gt_()_co_ even with _lt_em_gt_computeRotation_lt_/em_gt_ set to false_co_ won_t_t reset this initial status to zero.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/overviews/solid_particle_system#create-an-immutable-sps_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/overviews/solid_particle_system#create-an-immutable-sps_lt_/a_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tAs a comparison_co_ the positionFunction would be a way to bake your own transformation in the mesh local space at construction time.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tIn the contrary_co_ if you need to update the particle rotations at least once after the SPS construction and if you need to re-apply this rotation on next calls of setParticles()_co_ you musn_t_t unfortunately set _lt_em_gt_computeRotation_lt_/em_gt_ to false then.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tAh I see. I think the positionFunction is a good solution to this problem. Will try it out! Thanks again!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-23T04:49:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#N6PH8X%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#N6PH8X#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tmmhh... the positionFunction doesn_t_t seem to bake the initial status either. As everything was done by choices_co_ I have to remember the reason why by checking the code back.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAll the rest I said in the former post is right anyway_co_ about how the rotations are computed or not from the initial status.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Baker Xiao","Date":"2017-09-23T04:52:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_189723_qt_ data-ipsquote-contentid_eq__qt_33038_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1506142144_qt_ data-ipsquote-userid_eq__qt_5453_qt_ data-ipsquote-username_eq__qt_jerome_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t1 minute ago_co_ jerome said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#N6PH8X%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#N6PH8X#1_lt_/a_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tmmhh... the positionFunction doesn_t_t seem to bake the initial status either. As everything was done by choices_co_ I have to remember the reason why by checking the code back.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tAll the rest I said in the former post is right anyway_co_ about how the rotations are computed or not from the initial status.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tHmm... in that case_co_ what_t_s a good way to address the scenario where we need to rotate some of the particles initially but never rotate them again? Right now what I_t_m doing is to never call setParticles again_co_ but that prevents us from changing the position of the particles as well. Seems it would be a good addition to allow some initial transformations to be baked into the geometry. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-23T05:16:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ I got it about the reason.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tActually_co_ the transformations (translation_co_ scaling_co_ rotation but also billboard) are required to be done in certain order like for meshes _dd_ rotations come always before translations.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat_t_s why_co_ storing in memory only the global last computed coordinates to pass to the GPU for performance reasons_co_ we need to re-apply the rotation computation each time to get new final coordinates as the SPS doesn_t_t store each particle vertex last state coordinates_co_ but only the transformation (position_co_ rotation_co_ scaling) to apply to all of them.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNot sure I_t_m clear...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEx _dd_ 1 SPS is 10K particles and is a big geometry _dd_ millions of coordinates to pass to the GPU (so one big final array)\n_lt_/p_gt_\n\n_lt_p_gt_\n\teach particle stores its own set of transformations and a reference to its shared geometry model\n_lt_/p_gt_\n\n_lt_p_gt_\n\teach particle is_co_ say_co_ 40 or 50 vertices_co_ so hundreds of coordinates per particle stored successively in the final array\n_lt_/p_gt_\n\n_lt_p_gt_\n\teach particle transformation computation updates in the big final array the part (so hundreds of floats) related to this current particle from its set of transformations\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs particles share the same geometry model and as the particle vertex last state coordinates isn_t_t stored_co_ there_t_s no per particle baking possibility for now unless implementing some system that would multiply the memory consumption by far.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNevertheless_co_ I will try to do a way to this ...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn your case_co_ as you have to call setParticles() to reapply the rotations_co_ the right way is to call it only when necessary (not every frame maybe)_co_ maybe also to use the start and end indexes ( _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/overviews/solid_particle_system#start-and-end-indexes-for-setparticles_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/overviews/solid_particle_system#start-and-end-indexes-for-setparticles_lt_/a_gt_ ) to modify only the required particles.... and to tolerate the rotation computation when unavoidable _sm_-)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Baker Xiao","Date":"2017-09-23T05:32:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_189726_qt_ data-ipsquote-contentid_eq__qt_33038_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1506143809_qt_ data-ipsquote-userid_eq__qt_5453_qt_ data-ipsquote-username_eq__qt_jerome_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t10 minutes ago_co_ jerome said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tOk_co_ I got it about the reason.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tActually_co_ the transformations (translation_co_ scaling_co_ rotation but also billboard) are required to be done in certain order like for meshes _dd_ rotations come always before translations.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThat_t_s why_co_ storing in memory only the last computed coordinates to passed to the GPU for performance reasons_co_ we need to re-apply the rotation computation each time to get new final coordinates as the SPS doesn_t_t store each particle vertex last state coordinates_co_ but only the transformation (position_co_ rotation_co_ scaling) to apply to all of them.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tNot sure I_t_m clear...\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tEx _dd_ 1 SPS is 10K particles and is a big geometry _dd_ millions of coordinates to pass to the GPU (so one big final array)\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\teach particle stores its own set of transformations and a reference to its shared geometry model\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\teach particle is_co_ say_co_ 40 or 50 vertices_co_ so hundreds of coordinates stored successively in the final array\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\teach particle transformation computation updates in the big final array the part (so hundreds of floats) related to this current particle from its set of transformations\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tAs particles share the same geometry model and as the particle vertex last state coordinates isn_t_t store_co_ there_t_s no per particle baking possibility for now unless implementing some system that would multiply the memory consumption by far.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tNevertheless_co_ I will try to do a way to this ...\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tAhhh_co_ I got the picture. Looks like there_t_s a tradeoff between memory v.s. compute.. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-23T05:45:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tExactly\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd as we deal with thousands or dozens of thousands occurences_co_ we need to make choices _dd_ multiply CPU cycles or (far) more memory allocation\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Baker Xiao","Date":"2017-09-23T05:55:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_189728_qt_ data-ipsquote-contentid_eq__qt_33038_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1506145553_qt_ data-ipsquote-userid_eq__qt_5453_qt_ data-ipsquote-username_eq__qt_jerome_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t3 minutes ago_co_ jerome said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tExactly\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tAnd as we deal with thousands or dozens of thousands occurences_co_ we need to make choices _dd_ multiply CPU cycles or (far) more memory allocation\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIf there_t_s no solution that satisfies both_co_ one idea is to make it a setting so that the user can choose to optimize towards CPU or memory? For us_co_ the situation is kind of awkward because we just have about 50 particles... using instanced meshes has its own overhead_co_ so I_t_m using SPS. I would definitely want to give up some memory to save CPU cycles given the low amount of particles. But I totally see that enabling these choices is a lot of work. _lt_img alt_eq__qt__dd_P_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ title_eq__qt__dd_P_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2017-09-23T08:28:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIf you have only 50 particles_co_ you can keep the rotation computations enabled anyway_co_ you won_t_t even notice the difference compared to disabled rotations. That_t_s just a speck of dust for the CPU.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI thought you had something like 10K particles. At this level the optimizers really matter. But for 50 particles_co_ the difference between computer/un-computed rotations would be only micro-seconds... nothing to be concerned about _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tSo my advice would be _dd_ keep the rotation computations enabled and enjoy all the SPS other features ! \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tNote _dd_ for any standard mesh_co_ its WorldMatrix (so all its transformations _dd_ position_co_ scaling_co_ rotation) is computed/cached anyway_co_ even if it_t_s not rotated_co_ translated from a draw call to the other. As it_t_s quite complex to guess what a user wants to do or has just done with all its objects in the scene_co_ plenty of computations are done under the hood to be sure that_t_s things are in the final right place_co_ even when un-changed.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2018-01-25T14:41:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\told thread up ...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAn internal modification in the SPS now stores each solid particle (sort of) rotation matrix. This means the particle last rotation status is kept even when setting the SPS property _lt_em_gt_.computeParticleRotation_lt_/em_gt_ to _lt_em_gt_false _lt_/em_gt_now\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]