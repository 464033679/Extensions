[{"Owner":"timetocode","Date":"2018-12-02T10:07:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello there.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat is intended method of playing the same sound multiple times *concurrently* without re-downloading the sound file from the server?\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_const gunshot _eq_ new BABYLON.Sound(_t_foo_t__co_ _qt_sounds/gun_semi_etc.wav_qt__co_ scene_co_ null_co_ { volume_dd_ 1 })_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tIf I have multiple players or bots in my game_co_ any of them can produce gunfire. As each of them shoots_co_ I end up with a separate web request per entity_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img alt_eq__qt_image.png.e9eafb7fac217265d9d1afc9a67ffa15.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_21307_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_12/image.png.e9eafb7fac217265d9d1afc9a67ffa15.png_qt_ /_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m accustomed to howler_co_ where the first time a sound is created_co_ like _t_foo.wav_t_ it will load it from the server.  Any subsequent sound objects created that play _t_foo.wav_t_  will build themselves from the same sound data without an xhr. How do I accomplish the equivalent?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTY TY _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Raggar","Date":"2018-12-02T10:36:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI use the AssetsManager to load all my sounds_co_ and put them into an array at predictable indexes. This way_co_ I can clone the sounds and attach them to all players.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_/////Task\nvar gunshotSound3 _eq_ assetsManager.addBinaryFileTask(_qt_soundTask3_qt__co_ _qt_sounds/gs3.ogg_qt_)_sm_\n\n/////onSuccess callback\ngunshotSound3.onSuccess _eq_ function (task){\n\tvar gs3 _eq_ new BABYLON.Sound(_qt_gunshotSound3_qt__co_ task.data_co_ scene_co_ null_co_ { loop_dd_ false_co_ autoplay_dd_ false_co_ spatialSound_dd_ true })_sm_\n\tsounds[2] _eq_ gs3_sm_\n\tgs3.setVolume(0.6)_sm_\n}\n\n/////Player creation\nfunction player(gunIndex_co_ ..._co_ ..._co_ ...){\n///gunIndex _eq_ 2_sm_\n...\n......\n...\n...\n\n\n    this.gunSound _eq_ sounds[gunIndex].clone(_qt_gunSound_qt_)_sm_\n    this.gunSound.attachToMesh(this.mesh)_sm_\t\n}\n\t\n/////Gunshot sound needed\nplayer.gunSound.play()_sm_\t\t\t\t\n\t\t\t\n\n/////New weapon etc.\nplayer.gunSound.dispose()_sm_\nplayer.gunSound _eq_ null_sm_\nplayer.gunSound _eq_ sounds[x].clone(_qt_gunSound_qt_)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"timetocode","Date":"2018-12-02T12:10:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks Raggar that looks good!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI wonder if anyone would be interested in having this behavior added to the api. Or maybe just tacked on by including a file. The following is all pseudo code_co_ but I will probably implement it for real on Monday.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUsage_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_BABYLON.SoundAtlas.add(_t_filename.ext_t_) // etc for all sounds\nBABYLON.SoundAtlas.load(scene_co_ callback) // starts loading\n\n// using a sound from the atlas_co_ while mimicking the original BJS api\nconst gunshot _eq_ BABYLON.Sound.FromAtlas(_t_gunshot_t__co_ _t_filename.ext_t__co_ scene_co_ { volume_dd_ 1 })_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tPossible extension to babylon Sound_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_BABYLON.Sound.prototype.FromAtlas _eq_ (name_co_ filepath_co_ scene_co_ options) _eq_&gt_sm_ {\n    const cachedSound _eq_ BABYLON.SoundAtlas.get(filepath)\n    if (!cachedSound) {\n        throw new Error(_t_Sound not found in SoundAtlas_t_)\n    }\n\n    const sound _eq_ cachedSound.clone()\n    sound.name _eq_ name\n    sound.updateOptions(options) // autoplay won_t_t work without some minor modification\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tPresumably would not work with multiple scenes. Everything I_t_ve made is all single scene with programmatically spawned meshes_co_ so I_t_m not sure what would have to change.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSound atlas_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_/* Sound Atlas */\nconst BABYLON _eq_ require(_t_babylonjs_t_)\nconst basePath _eq_ _t_./sounds/_t_ // should be modifiable instead\n\nconst sounds _eq_ new Map()\nconst soundFilenames _eq_ []\n\nconst queueSounds _eq_ (assetsManager_co_ scene) _eq_&gt_sm_ {\n    soundFilenames.forEach(soundFilename _eq_&gt_sm_ {\n        const path _eq_ `${basePath}`\n        const name _eq_ `${basePath}${soundFileName}`\n\n        const binaryTask _eq_ assetsManager.addBinaryFileTask(name _t__t__co_ path_co_ soundFilename)\n        binaryTask.onSuccess _eq_ (task) _eq_&gt_sm_ {\n            const sound _eq_ new BABYLON.Sound(task.name_co_ task.data_co_ scene_co_ null_co_ {})\n            sounds.set(task.name_co_ sound)\n        }\n    })\n}\n\nconst add _eq_ (soundFilename) _eq_&gt_sm_ {\n    soundFilenames.push(soundFilename)\n}\n\n\nconst load _eq_ (scene_co_ cb) _eq_&gt_sm_ {\n    const assetsManager _eq_ new BABYLON.AssetsManager(scene)\n    queueSounds(assetsManager_co_ scene)\n    assetsManager.onFinish _eq_ () _eq_&gt_sm_ { cb() }\n    assetsManager.onTaskError _eq_ (task) _eq_&gt_sm_ { console.log(_t_error loading task_t__co_ task) }\n    assetsManager.load()\n}\n\nmodule.exports.add _eq_ add\nmodule.exports.load _eq_ load_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tHaven_t_t tried it yet_co_ but that_t_s the gist of it.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]