[{"Owner":"Pryme8","Date":"2017-07-07T04:24:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSo I am getting ready to do dynamic LOD terrain by using chunking and T-Junctions and so I was making the function to create the mesh data._lt_br /_gt_\n\tI am fully aware of _lt_a href_eq__qt_http_dd_//babylonjsguide.github.io/advanced/Custom_qt_ rel_eq__qt_external nofollow_qt_ style_eq__qt_color_dd_#ad1457_sm__qt__gt_http_dd_//babylonjsguide.github.io/advanced/Custom_lt_/a_gt_ but in it_co_ there is nothing that covers the thing I need to know because its only shows building one facet.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#IJTGJ3_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#IJTGJ3_lt_/a_gt__lt_br /_gt__lt_br /_gt_\n\tSo I have my first variance of the 8 T-Junctions and now I am wondering how I do the uv set up because all of the facets share the 0 position/point.  _lt_br /_gt_\n\tdo I just repeat the uv data on that point? _lt_br /_gt__lt_br /_gt_\n\tso for example if I was just gonna do the first two facets_dd__lt_br /_gt_\n\tvar uv _eq_ [_lt_br /_gt_\n\t//facet 0_lt_br /_gt_\n\t0_co_1_co__lt_br /_gt_\n\t0.5_co_ 0.5_co__lt_br /_gt_\n\t0.5_co_ 1_co__lt_br /_gt_\n\t//facet 1_lt_br /_gt_\n\t0.5_co_ 0.5_co__lt_br /_gt_\n\t1_co_ 1_co__lt_br /_gt_\n\t0.5_co_ 1_lt_br /_gt_\n\t]_sm__lt_br /_gt__lt_br /_gt_\n\tNotice how I use 0.5_co_ 0.5 twice?  This will be repeated for every facet because they all share the 0 point?  I figured this is correct but before I make assumptions It would be worth asking!_lt_br /_gt__lt_br /_gt_\n\tUpdate/EDIT ***_lt_br /_gt_\n\tjust need to know if this is correct_co_ I guess I could write up a quick shader to show UV positions but I_t_m being lazy and want to go to bed.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t    var mesh _eq_ new BABYLON.Mesh(_t_tPlane_t__co_ scene)_sm__lt_br /_gt_\n\t    var vData _eq_ new BABYLON.VertexData()_sm__lt_br /_gt_\n\t    var hs _eq_ size*0.5_sm__lt_br /_gt_\n\t    var points _eq_ _lt_br /_gt_\n\t    [_lt_br /_gt_\n\t        0_co_0_co_0_co_          //0_lt_br /_gt_\n\t        -1*hs_co_0_co_1*hs_co_   //1_lt_br /_gt_\n\t        0_co_0_co_1*hs_co_       //2_lt_br /_gt_\n\t        1*hs_co_0_co_1*hs_co_    //3_lt_br /_gt_\n\t        1*hs_co_0_co_0_co_       //4_lt_br /_gt_\n\t        1*hs_co_0_co_-1*hs_co_   //5_lt_br /_gt_\n\t        0_co_0_co_-1*hs_co_      //6_lt_br /_gt_\n\t        -1*hs_co_0_co_-1*hs_co_  //7_lt_br /_gt_\n\t        -1*hs_co_0_co_0       //8\n_lt_/p_gt_\n\n_lt_p_gt_\n\t    ]_sm__lt_br /_gt_\n\t    var indices _eq_ _lt_br /_gt_\n\t    [_lt_br /_gt_\n\t        1_co_0_co_2_co__lt_br /_gt_\n\t        0_co_3_co_2_co__lt_br /_gt_\n\t        0_co_4_co_3_co__lt_br /_gt_\n\t        0_co_5_co_4_co__lt_br /_gt_\n\t        0_co_6_co_5_co__lt_br /_gt_\n\t        7_co_6_co_0_co__lt_br /_gt_\n\t        8_co_7_co_0_co__lt_br /_gt_\n\t        1_co_8_co_0_lt_br /_gt_\n\t    ]_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t    var normals _eq_ []_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t    BABYLON.VertexData.ComputeNormals(points_co_ indices_co_ normals)_sm__lt_br /_gt_\n\t    _lt_br /_gt_\n\t    var uv _eq__lt_br /_gt_\n\t    [_lt_br /_gt_\n\t        0_co_1_co_ 0.5_co_ 0.5_co_ 0.5_co_ 1_co__lt_br /_gt_\n\t        0.5_co_ 0.5_co_ 1_co_ 1_co_ 0.5_co_ 1_co__lt_br /_gt_\n\t        0.5_co_ 0.5_co_ 1_co_ 0.5_co_ 1_co_ 1_co__lt_br /_gt_\n\t        0.5_co_ 0.5_co_ 1_co_ 0_co_ 1_co_ 0.5_co__lt_br /_gt_\n\t        0.5_co_ 0.5_co_ 0.5_co_ 0_co_ 1_co_ 0_co__lt_br /_gt_\n\t        0_co_ 0_co_ 0_co_ 0.5_co_ 0.5_co_ 0.5_co__lt_br /_gt_\n\t        0_co_ 0.5_co_ 0_co_ 0_co_ 0.5_co_ 0.5_co__lt_br /_gt_\n\t        0_co_ 1_co_ 0_co_ 0.5_co_ 0.5_co_ 0.5_lt_br /_gt_\n\t    ]_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t    vData.positions _eq_ points_sm__lt_br /_gt_\n\t    vData.indices _eq_ indices_sm__lt_br /_gt_\n\t    vData.normals _eq_ normals_sm__lt_br /_gt_\n\t    vData.uv _eq_ uv_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t    vData.applyToMesh(mesh)_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#IJTGJ3%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#IJTGJ3#2_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2017-07-07T12:33:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNearly there\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1) Each point has to be matched to one position on the image_co_ so 8 points then 8 uv pairs\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2) You missed the line vData.uv _eq_ uv from the playground  BUT\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3) vData.uvs  needs the s\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHope this PG helps _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/#IJTGJ3%233_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//playground.babylonjs.com/#IJTGJ3#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you have a plane with left front corner at (p_co_ q) and width w and height h_co_ the for any point (x_co_ z) in the plane for a straight mapping of an image onto the plane\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthe uv pair for (x_co_ z) is ( (x - p)/w_co_ (z - q)/h )\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOf course you can mess around with the uvs if you want.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2017-07-07T13:57:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tthank you john_co_ I have struggled with a equation to do UVs and _qt_the uv pair for (x_co_ z) is ( (x - p)/w_co_ (z - q)/h )_qt_ makes a lot of since now thank you!_lt_br /_gt__lt_br /_gt_\n\tI thought it was per facet but now I understand its per position point!  Your a boss!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]