[{"Owner":"Evalum","Date":"2018-10-17T09:34:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello! I am playing around with particle system and I am using UV scrolling to animate textures of particles. I am able to provide time into custom shader to offset UV coordinates but I would also like to have random but persistent offset for each individual particle. Does anyone know how to do that?\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_vec2 uv _eq_ vUV + vec2(0.0_co_ time + particleUniqueOffset)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tWhere time is provided as global uniform (accessible for all the particles) and particleUniqueOffset is random value created when the particle was initialized and stays persistent throughout its lifetime.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ll provide the code snippet that I use for now\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_BABYLON.Effect.ShadersStore[_qt_myParticleFragmentShader_qt_] _eq_\n_qt_#ifdef GL_ES\\n_qt_ +\n_qt_precision highp float_sm_\\n_qt_ +\n_qt_#endif\\n_qt_ +\n\n_qt_varying vec2 vUV_sm_\\n_qt_ +                     // Provided by babylon.js\n\n_qt_uniform sampler2D diffuseSampler_sm_\\n_qt_ +     // Provided by babylon.js\n_qt_uniform float time_sm_\\n_qt_ +                   // This one is custom so we need to declare it to the effect\n\n_qt_void main(void) {\\n_qt_ +\n\t_qt_vec4 a _eq_ texture2D(diffuseSampler_co_ vUV)_sm_\\n_qt_ +\n\t_qt_vec4 b _eq_ texture2D(diffuseSampler_co_ vUV + vec2(0.0_co_ -time * 0.3))_sm_\\n_qt_ +\n    _qt_gl_FragColor _eq_ a * b_sm_\\n_qt_ +\n_qt_}\\n_qt_ +\n_qt__qt__sm_\n\n// Effect\nvar effect _eq_ engine.createEffectForParticles(_qt_myParticle_qt__co_ [_qt_time_qt_])_sm_\n\n// Particles\nvar particleSystem _eq_ new BABYLON.ParticleSystem(_qt_particles_qt__co_ 4000_co_ scene_co_ effect)_sm_\nparticleSystem.particleTexture _eq_ new BABYLON.Texture(_qt_wood_wraith_poison.png_qt__co_ scene)_sm_\nparticleSystem.minEmitBox _eq_ new BABYLON.Vector3(0.3_co_ 1.0_co_ 0.3)_sm_\nparticleSystem.maxEmitBox _eq_ new BABYLON.Vector3(-0.3_co_ 3.0_co_ -0.3)_sm_\nparticleSystem.minSize _eq_ 2.0_sm_\nparticleSystem.maxSize _eq_ 3.0_sm_\nparticleSystem.minLifeTime _eq_ 100_sm_\nparticleSystem.emitter _eq_ BABYLON.Vector3.Zero()_sm_\nparticleSystem.manualEmitCount _eq_ 3_sm_\nparticleSystem.blendMode _eq_ BABYLON.ParticleSystem.BLENDMODE_STANDARD_sm_\nparticleSystem.direction1 _eq_ BABYLON.Vector3.Zero()_sm_\nparticleSystem.direction2 _eq_ BABYLON.Vector3.Zero()_sm_\nparticleSystem.start()_sm_\n\neffect.onBind _eq_ function () {\n    effect.setFloat(_qt_time_qt__co_ time)_sm_\n}_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Sebavan","Date":"2018-10-17T14:11:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis would require to add a custom attribute which is not supported by the particles custom shaders. As _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_Â told me you might be able to use the particles animation sheets instead ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI bet he might come in as soon as he ll be available to add more precision to the thread _lt_span_gt__lt_span class_eq__qt_ipsEmoji_qt__gt_ðŸ™‚_lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Evalum","Date":"2018-10-17T17:03:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI think I_t_ll write extension to particles to include particle instance attributes to add more variability to individual particles. I am thinking of attaching hook to particle emit event where I_t_ll attach instance attribute(s) or do more individual stuff for particle.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Evalum","Date":"2018-10-18T07:14:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI got it _qt_hacky_qt_ fixed currently as I can not afford to spend any more time on this. I am taking advantage of vColor in fragment shader and I am storing my random offsets in color.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_BABYLON.Effect.ShadersStore[_qt_myParticleFragmentShader_qt_] _eq_\n_qt_#ifdef GL_ES\\n_qt_ +\n_qt_precision highp float_sm_\\n_qt_ +\n_qt_#endif\\n_qt_ +\n\n_qt_varying vec2 vUV_sm_\\n_qt_ +                     // Provided by babylon.js\n_qt_varying vec4 vColor_sm_\\n_qt_ +\n\n_qt_uniform sampler2D diffuseSampler_sm_\\n_qt_ +     // Provided by babylon.js\n_qt_uniform float time_sm_\\n_qt_ +                   // This one is custom so we need to declare it to the effect\n\n_qt_void main(void) {\\n_qt_ +\n\t_qt_vec4 a _eq_ texture2D(diffuseSampler_co_ vUV + vec2(vColor.b * 0.5 - 0.25_co_ 0.0))_sm_\\n_qt_ +\n\t_qt_vec4 b _eq_ texture2D(diffuseSampler_co_ vUV + vec2(0.0_co_ -(time + vColor.r)*(0.05 + vColor.g * 0.15)) * (1.0 + vColor.b))_sm_\\n_qt_ +\n    _qt_b.a *_eq_ vColor.a_sm_ \\n_qt_ +\n    _qt_gl_FragColor _eq_ a * b_sm_\\n_qt_ +\n_qt_}\\n_qt_ +\n_qt__qt__sm_\n\n// Effect\nvar effect _eq_ engine.createEffectForParticles(_qt_myParticle_qt__co_ [_qt_time_qt_])_sm_\n\n// Particles\nvar particleSystem _eq_ new BABYLON.ParticleSystem(_qt_particles_qt__co_ 400_co_ scene_co_ effect)_sm_\nparticleSystem.particleTexture _eq_ new BABYLON.Texture(_qt_wood_wraith_poison.png_qt__co_ scene)_sm_\nparticleSystem.minEmitBox _eq_ new BABYLON.Vector3(0.5_co_ 1.5_co_ 0.5)_sm_\nparticleSystem.maxEmitBox _eq_ new BABYLON.Vector3(-0.5_co_ 1.5_co_ -0.5)_sm_\nparticleSystem.minSize _eq_ 3.0_sm_\nparticleSystem.maxSize _eq_ 5.0_sm_\nparticleSystem.minLifeTime _eq_ 999_sm_\nparticleSystem.maxLifeTime _eq_ 999_sm_\nparticleSystem.emitter _eq_ avatar_sm_//new BABYLON.Vector3(4.2_co_ 3.0_co_ 0.0)_sm_\nparticleSystem.manualEmitCount _eq_ 5_sm_\nparticleSystem.direction1 _eq_ new BABYLON.Vector3(0.0_co_ 0.0_co_ 0.0)_sm_\nparticleSystem.direction2 _eq_ new BABYLON.Vector3(0.0_co_ 0.0_co_ 0.0)_sm_\nparticleSystem.blendMode _eq_ BABYLON.ParticleSystem.BLENDMODE_STANDARD_sm_\nparticleSystem.color1 _eq_ new BABYLON.Color4(0.0_co_ 0.0_co_ 0.0_co_ 1.0)_sm_\nparticleSystem.color2 _eq_ new BABYLON.Color4(1.0_co_ 1.0_co_ 1.0_co_ 1.0)_sm_\n\nparticleSystem.start()_sm_\n\neffect.onBind _eq_ function () {\n    effect.setFloat(_qt_time_qt__co_ time)_sm_\n\t\n}_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n_lt_video controls class_eq__qt_ipsEmbeddedVideo_qt_ data-controller_eq__qt_core.global.core.embeddedvideo_qt_ data-fileid_eq__qt_20569_qt__gt_\n\t_lt_source src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_10/warlock3.mp4.cdf10736524bbbd409e0a1ca9d99de79.mp4_qt_ type_eq__qt_video/mp4_qt__gt_\n\t_lt_a class_eq__qt_ipsAttachLink_qt_ href_eq__qt_//www.html5gamedevs.com/applications/core/interface/file/attachment.php?id_eq_20569_qt__gt_warlock3.mp4_lt_/a_gt_\n_lt_/video_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-10-18T19:56:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is really nice! excellent work\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFlagging as solved _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]