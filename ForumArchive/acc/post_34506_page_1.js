[{"Owner":"WingWorldWeeks","Date":"2017-12-11T17:09:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_ve been prototyping a local co-op game that involves multiple players moving around on the same screen.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhere my trouble has come_co_ is with inputs and handling multiple key presses and movement.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ve tried using the action manager to apply forces_co_ impulses_co_ or setting linear velocity on key down_co_ but all of them seem to feel very buggy_co_ especially when trying to press multiple keys.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA sample of my code looks like the following_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_    scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyDownTrigger_co_ function (evt) {\n        console.log(evt.sourceEvent.key)_sm_\n\n        var velocity _eq_ player.physicsImpostor.getLinearVelocity()_sm_\n\n        if (evt.sourceEvent.key _eq__eq_ _qt_w_qt_ || evt.sourceEvent.key _eq__eq_ _qt_W_qt_) {\n            //player.applyImpulse(new BABYLON.Vector3(0_co_ 0_co_ 10)_co_ player.position)_sm_\n            //player.physicsImpostor.applyForce(new BABYLON.Vector3(0_co_ 0_co_ 100)_co_ player.position)_sm_\n            player.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(velocity.x_co_ velocity.y_co_ 20))_sm_\n        }\n        if (evt.sourceEvent.key _eq__eq_ _t_a_t_ || evt.sourceEvent.key _eq__eq_ _t_A_t_) {\n            //player.applyImpulse(new BABYLON.Vector3(-10_co_ 0_co_ 0)_co_ player.position)_sm_\n            //player.physicsImpostor.applyForce(new BABYLON.Vector3(-100_co_0_co_0)_co_ player.position)_sm_\n            player.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(-20_co_ velocity.y_co_ velocity.z))_sm_\n        }\n        if (evt.sourceEvent.key _eq__eq_ _t_s_t_ || evt.sourceEvent.key _eq__eq_ _t_S_t_) {\n            //player.applyImpulse(new BABYLON.Vector3(0_co_ 0_co_ -10)_co_ player.position)_sm_\n            //player.physicsImpostor.applyForce(new BABYLON.Vector3(0_co_ 0_co_ -100)_co_ player.position)_sm_\n            player.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(velocity.x_co_ velocity.y_co_ -20))_sm_\n        }\n        if (evt.sourceEvent.key _eq__eq_ _t_d_t_ || evt.sourceEvent.key _eq__eq_ _t_D_t_) {\n            //player.applyImpulse(new BABYLON.Vector3(10_co_ 0_co_ 0)_co_ player.position)_sm_\n            //player.physicsImpostor.applyForce(new BABYLON.Vector3(100_co_ 0_co_ 0)_co_ player.position)_sm_\n            player.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(20_co_ velocity.y_co_ velocity.z))_sm_\n        }\n    }))_sm_\n\n    scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyUpTrigger_co_ function (evt) {\n        console.log(evt.sourceEvent.key + _qt_ up_qt_)_sm_\n\n        var velocity _eq_ player.physicsImpostor.getLinearVelocity()_sm_\n\n        if (evt.sourceEvent.key _eq__eq_ _qt_w_qt_ || evt.sourceEvent.key _eq__eq_ _qt_W_qt_ || evt.sourceEvent.key _eq__eq_ _t_s_t_ || evt.sourceEvent.key _eq__eq_ _t_S_t_) {\n            player.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(velocity.x_co_ velocity.y_co_ 0))_sm_\n        }\n        else if (evt.sourceEvent.key _eq__eq_ _t_a_t_ || evt.sourceEvent.key _eq__eq_ _t_A_t_ || evt.sourceEvent.key _eq__eq_ _t_d_t_ || evt.sourceEvent.key _eq__eq_ _t_D_t_) {\n            player.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0_co_ velocity.y_co_ velocity.z))_sm_\n        }\n\n    }))_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t My question is_co_ what is the best practice to handle movement of a simple object (I_t_m currently just using a cube)_co_ and have it work with multiple key presses? Keep in mind this will be repeated for multiple players_co_ so I_t_d like to to be as modular as possible\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-12-11T19:17:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_ you should look how we handle keys on FreeCamera for instance_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Cameras/Inputs/babylon.freeCameraKeyboardMoveInput.ts_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Cameras/Inputs/babylon.freeCameraKeyboardMoveInput.ts_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBasically_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- every time a key is pressed the associated boolean is turned to true\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- on every frame_co_ we check the list of booleans and apply the associated transform_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Cameras/Inputs/babylon.freeCameraKeyboardMoveInput.ts#L88_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Cameras/Inputs/babylon.freeCameraKeyboardMoveInput.ts#L88_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]