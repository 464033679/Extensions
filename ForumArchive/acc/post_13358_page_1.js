[{"Owner":"JCPalmer","Date":"2015-03-24T17:11:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I have this problem_dd_  The source code for my 3D font is too big for the over the web Uglify page I was using.  I wanted to save prebuilt fonts when I post Dialog to the extensions repository.  This means most will not have to run Blender / Tower of Babel._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have already reduced the # of letters in both 2D &amp_sm_ 3D fonts down to 96_co_ by breaking them into 2 modules_dd_ Font3D &amp_sm_ Font3D_EXT (same pattern for 2D).  You set the version using the ENGLISH_STD var before generation in the .blend_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_# delete any characters that you are sure NOT to use# for english set file / module name ending id 2D or 3D# for european chars end in 2D_EXT_co_ 3D_EXTENGLISH_STD _eq_ Trueif ENGLISH_STD_dd_    VOWELS_U _eq_ _t_AEIOU_t_    VOWELS_L _eq_ _t_aeiou_t_    CONS_U _eq_ _t_BCDFGHJKLMNPQRSTVWXYZ_t_    CONS_L _eq_ _t_bcdfghjklmnpqrstvwxyz_t_    NUMBERS _eq_ _t_0123456789_t_    SPECIALS _eq_ _t__co_.!?_eq_+-*&amp_sm_^%$#@`~_sm_)[]{}\\_t__qt__&lt_sm_&gt_sm_/|\\\\_t_else_dd_    VOWELS_U _eq_ _t_ÁÀÂÄÉÈÊËÎÏÔÖØÙÛÜÆ_t_    VOWELS_L _eq_ _t_áàâäéèêëîïôöøùûüæ_t_    CONS_U _eq_ _t_ÇÑ_t_    CONS_L _eq_ _t_çñß_t_    NUMBERS _eq_ _t__t_    SPECIALS _eq_ _t__t__lt_/pre_gt__lt_p_gt_Also means_co_ unless you need these letters there is no need to load the _EXT.js._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The Gulp process already has a uglify.  Could there be a way added or documentation on how to Uglify your own files?  I am sort of hanging on for dear life in regard to Node._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Jeff_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-03-24T19:39:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well_co_ I had to my Gulp actually working again.  The typescript version change broke me.  Did not need that part for this_co_ but need a working build._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Playing on my own_co_ I made a file in the Gulp dir_co_ called makeUgly.js.  The site I based it on is the first line comment.  I added a surrounding function_co_ args_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_// based on_dd_  _lt_a href_eq__qt_http_dd_//davidwalsh.name/compress-uglifyvar_qt__gt_http_dd_//davidwalsh.name/compress-uglifyvar_lt_/a_gt_ UglifyJS _eq_ require(_t_uglify-js_t_)_sm_var fs _eq_ require(_t_fs_t_)_sm_var makeUgly _eq_ function(path_co_ fileIn){    if (path.lastIndexOf(_t_/_t_) + 1 !_eq__eq_ path.length) { path  +_eq_ _t_/_t__sm_ }    var fileOut _eq_ fileIn.replace(_t_.js_t__co_ _t_.min.js_t_)_sm_        var result _eq_ UglifyJS.minify(path + fileIn_co_ {   \t    mangle_dd_ true_co_\t    compress_dd_ {\t\t    sequences_dd_ true_co_\t\t    dead_code_dd_ true_co_\t\t    conditionals_dd_ true_co_\t\t    booleans_dd_ true_co_\t\t    unused_dd_ true_co_\t\t    if_return_dd_ true_co_\t\t    join_vars_dd_ true_co_\t\t    drop_console_dd_ true\t    }    })_sm_    fs.writeFileSync(path + fileOut_co_ result.code)_sm_}_sm__lt_/pre_gt__lt_p_gt_When I looked to see how start it based on what gulpfile.js was_co_ I realized gulp had its own uglify.  I have now edited gulpfile.js_co_ aading this_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_gulp.task(_t_makeUgly_t_ _co_function(path_co_ fileIn) {  if (path.lastIndexOf(_t_/_t_) + 1 !_eq__eq_ path.length) { path  +_eq_ _t_/_t__sm_ }  return gulp.src([path + fileIn])    .pipe(rename({suffix_dd_ _t_.min_t_}))    .pipe(uglify())    .pipe(gulp.dest(path))})_sm__lt_/pre_gt__lt_p_gt_Still trying determine how call this and specifying arguments._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-03-24T20:53:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_which one is the best relatively to size?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-03-25T13:42:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Do not know.  Gulp does not have args????  Need a fourth party addon_co_ _lt_a href_eq__qt_https_dd_//www.npmjs.com/package/gulp-param_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.npmjs.com/package/gulp-param_lt_/a_gt_.  The _lt_span_gt_uglify-js way also needs to be installed.  I am not confident enough to modify / butcher my system.  I need this to build babylonJS.  These _t_Node people_t_ only ever tell you how to install something_co_ but never un-install.  Guess 3D font users will just have to do it themselves for now._lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span_gt_I also do not know if TOB generated source code should_lt_/span_gt_ vary that much by the compressor_co_ in terms of output size.  There is very little branching.  I do all that in python._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-04-08T18:46:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I have just revisited this.  I only got the Gulp-uglify with arguments to work.  Modified gulpfile.js_dd__lt_/p_gt__lt_p_gt_ - changed line 1 to_dd_  _lt_strong_gt_ var gulp _eq_ require(_t_gulp-param_t_)(require(_t_gulp_t_)_co_ process.argv)_co__lt_/strong_gt__lt_/p_gt__lt_p_gt_ - added this task at the bottom_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_/** * task to uglify a file passed as an argument */gulp.task(_t_makeUgly_t_ _co_function(path_co_ fileIn) {  if (path.lastIndexOf(_t_/_t_) + 1 !_eq__eq_ path.length) { path  +_eq_ _t_/_t__sm_ }  return gulp.src([path + fileIn])    .pipe(rename({suffix_dd_ _t_.min_t_}))    .pipe(uglify())    .pipe(gulp.dest(path))})_sm__lt_/pre_gt__lt_p_gt_I also typed this in on the command line _dd_ (sudo) _lt_strong_gt_npm install gulp-param_lt_/strong_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_From command line entered_dd_   _lt_strong_gt_gulp makeUgly --path /js-dev/Extensions/Dialog/fonts --fileIn Font3D.js_lt_/strong_gt__lt_/p_gt__lt_p_gt_It worked.  Compression was not great since it was mostly numbers specifying vertices_co_ but should load faster being on only 24 lines._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Question is can or should this be PR_t_ed?  I need it for 7 JS files in Extensions (morph_co_ POV_co_ dialog_co_ Font2D_co_ Font3D_co_ Font2d_EXT_co_ Font3D_EXT).  Could be useful_co_ If you wish to uglify your own game_co_ and it also got too big for the web page based uglifiers.  Not sure what you would have to do as far as install to new or existing systems._lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-04-08T20:14:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_yes sounds good to me for a PR_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]