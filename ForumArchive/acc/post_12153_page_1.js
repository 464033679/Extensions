[{"Owner":"Kai_","Date":"2015-02-01T16:33:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I am new to Babylon.js and love it for its simplicity and superior performance compared to other frameworks_co_ like three.js_co_ when it comes to WebGL rendering_co_ compared to CSS3d and Canvas rendering._lt_/p_gt__lt_p_gt_Having quite some experience using desktop OpenGL up to 4.4 and GLSL as well_co_ I recently switched to WebGL to support rendering in the browser client._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Now_co_ my question is how would I setup a GL_DEPTH_COMPONENT24  texture to a FBO and disable color-writing via glColorMask with the high-level objects offered by Babylon.js?_lt_/p_gt__lt_p_gt_I have no trouble rolling my own TypeScript class for that. Just want to know whether something like this exists and how the API is supposed to be. I had a look at babylon.depthRenderer.ts_co_ but currently don_t_t know how to compose that into a functioning pipeline with the rest of Babylon.js._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What I want to do here is to port my existing hybrid rasterization and path tracing demo (which I did for the _lt_a href_eq__qt_http_dd_//www.lwjgl.org/_qt_ rel_eq__qt_external nofollow_qt__gt_LWJGL_lt_/a_gt_ team _lt_a href_eq__qt_https_dd_//github.com/httpdigest/lwjgl3/blob/master/src/tests/org/lwjgl/demo/opengl/raytracing/HybridDemoSsboInstancing.java_qt_ rel_eq__qt_external nofollow_qt__gt_here_lt_/a_gt_) from desktop OpenGL to WebGL._lt_/p_gt__lt_p_gt_And the first thing I try to figure out here is how to do a depth-only pass with Babylon.js for the screen-quad fragment shader to start the shadow rays at the correct scene position. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks in advance!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co__lt_/p_gt__lt_p_gt_Kai_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-01T17:10:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ah_co_ it seems that WebGL does not support rendering depth to texture_co_ as is stated here_dd_ _lt_a href_eq__qt_http_dd_//stackoverflow.com/questions/7255814/webgl-render-depth-to-fbo-texture-does-not-work_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//stackoverflow.com/questions/7255814/webgl-render-depth-to-fbo-texture-does-not-work_lt_/a_gt__lt_/p_gt__lt_p_gt_And it also seems that I would be using _lt_strong_gt_scene.enableDepthRenderer().getDepthMap()_lt_/strong_gt_ to get the texture that the _lt_em_gt_depth.fragment.fx_lt_/em_gt_ shader wrote the depth information (from gl_FragCoord.z) into._lt_/p_gt__lt_p_gt_WebGL/OpenGL ES 2.0 seems like a shock when coming from OpenGL 4.3  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wacko.png_qt_ alt_eq__qt__dd_wacko_dd__qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-02-01T17:13:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello and welcome _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Yes you_t_re right this is a shock_dd_) but with it comes the awesomeness of cross-platform!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Here is just a little bit of documentation for DepthRenderer_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//doc.babylonjs.com/page.php?p_eq_24825_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/page.php?p_eq_24825_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-01T18:54:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Thank you._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_But nonetheless_co_ great work with Babylon.js to you and the other David!  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_Recently watched you both on the Babylon.js introduction video on Microsoft Virtual Academy_co_ and great work with that!_lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_Babylon.js is the first WebGL framework I found featuring everything needed for our company to build a great web-enabled dsolution for one of our big customers about visualizing TOGAF IT landscapes as a city_co_ like what _lt_a href_eq__qt_http_dd_//www.inf.usi.ch/phd/wettel/codecity.html_qt_ rel_eq__qt_external nofollow_qt__gt_CodeCity_lt_/a_gt_ does but on a big scale and hopefully with a bit more fidelity. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_br_gt__lt_div_gt_So it_t_s not going to be a game._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_But I wanted to have some kind of global illumination_co_ or at least ambient occlusion (not SSAA_co_ but real AO)_co_ to make the city look more like _lt_a href_eq__qt_http_dd_//www.local-guru.net/blender/cube_town.png_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.local-guru.net/blender/cube_town.png_lt_/a_gt_ (image)._lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_It also seems that WebGL 1.0 / OpenGL ES 2.0 does not support Shader Storage Buffer Objects_co_ so I guess I will be using RGB/XYZ-textures then to hold the scene objects_co_ which currently only comprise of axis-aligned boxes with just min/max corner coordinates._lt_/div_gt__lt_br_gt__lt_div_gt_Hopefully_co_ ES 3.1 will find it_t_s way soon into WebGL.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_Cheers_co__lt_/div_gt__lt_br_gt__lt_div_gt_Kai_lt_/div_gt__lt_br_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-02-01T21:44:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_We are working on SSAO FYI _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m looking forward to see wonders that you will create with Babylon.js _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-01T22:33:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_I am liking Babylon.js more and more every second is spend on it!  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_div_gt_Right now I decided to not write depth information from gl_FragCoord.z (which strangely no one knows exactly what it contains and how to linearize it to get the view-space distance to the camera _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_) but just instead simply render the view-space position in RGB/XYZ._lt_/div_gt__lt_div_gt_And for that I needed the viewMatrix and the projectionMatrix separately._lt_/div_gt__lt_div_gt_And voilà_co_ having a look at babylon.scene.ts it is able to produce these exact values via _viewMatrix and _projectionMatrix or their respective getters._lt_/div_gt__lt_div_gt_Wonderful!_lt_/div_gt__lt_/div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_70051_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_12153_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt_ data-cite_eq__qt_Deltakosh_qt_ data-ipsquote-timestamp_eq__qt_1422827059_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_We are working on SSAO FYI _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Yes_co_ I saw that ssao shader there. But speaking of gl_FragCoord.z_co_ I also saw that the depth.fragment.fx shader outputs some _qt_depth_qt_ using gl_FragCoord.z divided by _qt_far_qt_ (which I guess is the camera far plane distance). But does this fraction make sense? I mean_co_ is it correlated to the actual depth or view-distance to the scene? Or am I missing something?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I did an experiment with that shader (using a small desktop OpenGL demo) and read-back what it outputs in a render target_co_ and those values are quite small.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_I mean_co_ gl_FragCoord.z is 0.0 at the near plane and 1.0 at the far plane_co_ so dividing by far will give you values between 0.0 and 1.0/far._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Anyway_co_ I will use plain view-space position to overcome that hassle of converting gl_FragCoord.z back to linear view-space.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-02-02T05:01:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Actually z is not clamped. This is why we divide it by max val_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-02T09:24:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Hi David_co__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_thanks for your replies and support so far!_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_70098_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_12153_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt_ data-cite_eq__qt_Deltakosh_qt_ data-ipsquote-timestamp_eq__qt_1422853292_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Actually z is not clamped._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Hmm... empirics says otherwise_co_ I_t_m afraid.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_unsure.png_qt_ alt_eq__qt__dd_unsure_dd__qt__gt__lt_/p_gt__lt_p_gt_Also in the GLSL 1.3 spec chapter 7.2 it stands_dd_ _lt_em_gt__qt_The z component is the depth value that would be used for the fragment’s depth if no shader contained any writes to gl_FragDepth._qt__lt_/em_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Have you actually tried reading-back the values from a floating point texture render target?_lt_/p_gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_I have tried it now on three different PC_t_s with different graphics cards and drivers and what I get when simply projecting a quad facing the viewer is that I get the following results for the following settings of a perspective projection_dd__lt_/div_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_near _eq_   0.1far  _eq_ 100.0_lt_/pre_gt__lt_p_gt_Now the table with the actual values (first is actual z-distance from camera in linear view-space and second is gl_FragCoord.z value)_dd__lt_/p_gt__lt_/div_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_z-dist   gl_FragCoord.z----------------------- 0.11    0.09100008 0.20    0.5005005 1.00    0.900900910.0     0.99099150.0     0.99899990.0     0.999888899.0     0.99998987_lt_/pre_gt__lt_/div_gt__lt_div_gt_So_co_ it seems they in fact are between 0.0 and 1.0 and non-linear._lt_/div_gt__lt_div_gt_This is also what some of my web researches_co_ regarding what gl_FragCoord.z is_co_ have given_dd_ [1]_co_ [2]_co_ [3]_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_The main of my fragment shader is simply this_dd__lt_/div_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_  gl_FragColor _eq_ vec4(gl_FragCoord.z_co_ 0_co_ 0_co_ 1)_sm__lt_/pre_gt__lt_p_gt_And I am reading back the values of the floating point texture via glGetTexImage._lt_/p_gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_[1]_dd_ _lt_a href_eq__qt_https_dd_//www.opengl.org/discussion_boards/showthread.php/164089-gl_FragCoord-z_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.opengl.org/discussion_boards/showthread.php/164089-gl_FragCoord-z_lt_/a_gt__lt_/div_gt__lt_div_gt_[2]_dd_ _lt_a href_eq__qt_http_dd_//stackoverflow.com/questions/7777913/how-to-render-depth-linearly-in-modern-opengl-with-gl-fragcoord-z-in-fragment-sh_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//stackoverflow.com/questions/7777913/how-to-render-depth-linearly-in-modern-opengl-with-gl-fragcoord-z-in-fragment-sh_lt_/a_gt__lt_/div_gt__lt_div_gt_[3]_dd_ _lt_a href_eq__qt_http_dd_//www.txutxi.com/?p_eq_182_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.txutxi.com/?p_eq_182_lt_/a_gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_The [1] is actually quite good in explaining how to linearize the value back again._lt_/div_gt__lt_div_gt_There is a comment by oc2ki saying that converting back to linear view-space can be achieved via_dd__lt_/div_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_float Z _eq_ gl_ProjectionMatrix[3].z/(gl_FragCoord.z * -2.0 + 1.0 - gl_ProjectionMatrix[2].z)_sm__lt_/pre_gt__lt_div_gt_But anyway. For doing SSAO with depth discontinuity checks I would not rely too much on actual depth values because of their non-linearity and of precision loss when converting back_co_ but simply using a G-buffer with gl_Position.z values written out as RGB/XYZ texture._lt_/div_gt__lt_div_gt_Could be perfectly intermingled with the also necessary normals in RGB. So normals go in RGB and linear view-space z goes into A._lt_/div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co__lt_/p_gt__lt_/div_gt__lt_div_gt_Kai_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-02-02T19:31:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hum but did you do your experiment on OpenGL or WebGL?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If yes I have to fix my DepthRenderer_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-02T20:03:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I have tried it with a native OpenGL ES 2.0 program on a tablet with Tegra K1 CPU/GPU_co_ since WebGL 1.0 is derived from OpenGL ES 2.0._lt_/p_gt__lt_p_gt_But furthermore_co_ the _lt_a href_eq__qt_https_dd_//www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf_qt_ rel_eq__qt_external nofollow_qt__gt_OpenGL ES 2.0 Shading Language Specification_lt_/a_gt_ also states under 7.2_co_ that _lt_em_gt__qt_The z component is the depth value that will be used for the fragment_t_s depth._qt__lt_/em_gt__lt_/p_gt__lt_p_gt_And it would be most inconvenient and unpleasant for a lot of people if Khronos happened to change the semantics of gl_FragCoord.z there between desktop OpenGL and ES.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_But I will right now try it also with a native WebGL program_co_ and let you know!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co__lt_/p_gt__lt_p_gt_Kai_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-02T20:41:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Here is a small showcase of rendering into FBO texture and reading back the values with glReadPixels. It prints-out on the console the read-back value. In this particular case my print-out is 0.9989989995956421 for near _eq_ 0.1 and far _eq_ 100.0 and zDest _eq_ 50.0._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I am using _lt_a href_eq__qt_https_dd_//github.com/toji/gl-matrix_qt_ rel_eq__qt_external nofollow_qt__gt_glMatrix.js_lt_/a_gt_ for the projection matrix and view matrix computation. _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_&lt_sm_html&gt_sm_&lt_sm_body&gt_sm_&lt_sm_script src_eq__qt_glMatrix.min.js_qt_&gt_sm_&lt_sm_/script&gt_sm_&lt_sm_canvas id_eq__qt_webgl_qt_ width_eq__qt_1_qt_ height_eq__qt_1_qt_&gt_sm_&lt_sm_/canvas&gt_sm_&lt_sm_script type_eq__qt_text/javascript_qt_&gt_sm_function draw() {    try {        gl _eq_ document.getElementById(_qt_webgl_qt_)            .getContext(_qt_experimental-webgl_qt_)_sm_        if (!gl) { throw _qt_x_qt__sm_ }    } catch (err) {        throw _qt_Your web browser does not support WebGL!_qt__sm_    }        var zDist _eq_ 50.0_sm_    var near _eq_ 0.1_sm_    var far _eq_ 100.0_sm_        // Query extension    var OES_texture_float _eq_ gl.getExtension(_t_OES_texture_float_t_)_sm_    if (!OES_texture_float) {        throw new Error(_qt_No support for OES_texture_float_qt_)_sm_    }        var fbo _eq_ gl.createFramebuffer()_sm_    gl.bindFramebuffer(gl.FRAMEBUFFER_co_ fbo)_sm_    var tex _eq_ gl.createTexture()_sm_    gl.bindTexture(gl.TEXTURE_2D_co_ tex)_sm_    gl.texParameteri(gl.TEXTURE_2D_co_ gl.TEXTURE_MIN_FILTER_co_ gl.NEAREST)_sm_    gl.texParameteri(gl.TEXTURE_2D_co_ gl.TEXTURE_MAG_FILTER_co_ gl.NEAREST)_sm_    gl.texImage2D(gl.TEXTURE_2D_co_ 0_co_ gl.RGBA_co_ 1_co_ 1_co_ 0_co_ gl.RGBA_co_ gl.FLOAT_co_ null)_sm_    gl.framebufferTexture2D(gl.FRAMEBUFFER_co_ gl.COLOR_ATTACHMENT0_co_ gl.TEXTURE_2D_co_ tex_co_ 0)_sm_    var prog _eq_ gl.createProgram()_sm_    var addshader _eq_ function(type_co_ source) {        var s _eq_ gl.createShader(type)_sm_        gl.shaderSource(s_co_ source)_sm_        gl.compileShader(s)_sm_        if (!gl.getShaderParameter(s_co_ gl.COMPILE_STATUS)) {            throw _qt_Could not compile _qt_+type+_qt_ shader_dd_\\n\\n_qt_+gl.getShaderInfoLog(s)_sm_        }        gl.attachShader(prog_co_ s)_sm_    }_sm_    addshader(gl.VERTEX_SHADER_co_ _qt_attribute vec3 pos_sm__qt_+        _qt_uniform mat4 projection_sm__qt_+        _qt_uniform mat4 view_sm__qt_+        _qt_void main() {_qt_+        _qt_    gl_Position _eq_ projection * view * vec4(pos_co_ 1.0)_sm__qt_+        _qt_}_qt_)_sm_    addshader(gl.FRAGMENT_SHADER_co_ _qt_void main() {_qt_+        _qt_    gl_FragColor _eq_ vec4(gl_FragCoord.z_co_ 0_co_ 0_co_ 0)_sm__qt_+        _qt_}_qt_)_sm_    gl.linkProgram(prog)_sm_    if (!gl.getProgramParameter(prog_co_ gl.LINK_STATUS)) {        throw _qt_Could not link the shader program!_qt__sm_    }    gl.useProgram(prog)_sm_        var mvMatrix _eq_ mat4.create()_sm_    var pMatrix _eq_ mat4.create()_sm_    mat4.lookAt([0.0_co_ 0.0_co_ zDist]_co_ [0.0_co_ 0.0_co_ 0.0]_co_ [0.0_co_ 1.0_co_ 0.0]_co_ mvMatrix)_sm_    mat4.perspective(45_co_ 1_co_ near_co_ far_co_ pMatrix)_sm_        gl.uniformMatrix4fv(gl.getUniformLocation(prog_co_ _t_projection_t_)_co_ false_co_ pMatrix)_sm_    gl.uniformMatrix4fv(gl.getUniformLocation(prog_co_ _t_view_t_)_co_ false_co_ mvMatrix)_sm_        gl.bindBuffer(gl.ARRAY_BUFFER_co_ gl.createBuffer())_sm_    gl.bufferData(gl.ARRAY_BUFFER_co_ new Float32Array([        -1_co_ -1_co_ 0_co_         1_co_ -1_co_ 0_co_         1_co_  1_co_ 0_co_        -1_co_  1_co_ 0    ])_co_ gl.STATIC_DRAW)_sm_    var attr _eq_ gl.getAttribLocation(prog_co_ _qt_pos_qt_)_sm_    gl.enableVertexAttribArray(attr)_sm_    gl.vertexAttribPointer(attr_co_ 3_co_ gl.FLOAT_co_ false_co_ 0_co_ 0)_sm_        gl.viewport(0_co_ 0_co_ 1_co_ 1)_sm_    gl.drawArrays(gl.TRIANGLE_STRIP_co_ 0_co_ 4)_sm_    var pixels _eq_ new Float32Array(4)_sm_    gl.readPixels(0_co_ 0_co_ 1_co_ 1_co_ gl.RGBA_co_ gl.FLOAT_co_ pixels)_sm_    console.log(pixels[0])_sm_}draw()_sm_&lt_sm_/script&gt_sm_&lt_sm_/body&gt_sm_&lt_sm_/html&gt_sm__lt_/pre_gt__lt_p_gt_Unfortunately_co_ the above does not work on Firefox 35_co_ but does on Chrome 41_co_ 42 (Canary) and IE11_co_ because (and that is just unbelievable... _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ WebGL... *sigh*) the WebGL spec does not define color-renderable floating-point formats and also does not define FLOAT to be a valid type for readPixels_co_ as it states under _lt_a href_eq__qt_https_dd_//www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.12_qt_ rel_eq__qt_external nofollow_qt__gt_5.14.12. _qt_Reading back pixels_qt__lt_/a_gt__dd_ _lt_em_gt__qt_Only two combinations of format and type are accepted. The first is format RGBA and type UNSIGNED_BYTE. The second is an implementation-chosen format._qt__lt_/em_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-02-02T22:50:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Crap you_t_re right!!! I_t_ll check my DepthRenderer_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-02T22:59:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Yeah_co_  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ I guess I_t_ve spent too many years of my life reading OpenGL core and extension specs.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_br_gt__lt_div_gt_Was just not up-to-date on the specifics of ES 2.0 and WebGL. Have to catch up on that._lt_/div_gt__lt_br_gt__lt_div_gt_But I would very much like to help you guys out on Babylon.js_co_ as I personally think it_t_s a great undertaking to further WebGL usage and development and it is just what I need right now. If I can I will contribute my soon-to-come path tracing renderer with a first ambient occlusion integrator to Babylon._lt_/div_gt__lt_br_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2015-02-02T23:50:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello and welcome Kai_ _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The depth calculation should be _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_float depth _eq_ gl_FragCoord.z / gl_FragCoord.w_sm__lt_/pre_gt__lt_p_gt_gl_FragCoord.z is the same output style between OpenGL and OpenGLES_co_ it stores the z value of gl_Position but divided by gl_Position.w._lt_/p_gt__lt_p_gt_After each vertex transformation (I mean end of vertex_t_s main function)_co_ OpenGL will divide (x_co_ y_co_ z) by w in gl_Position and will set w to 1 / w_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So_co_ to find the starting value of gl_Position.z before the division_co_ you must multiply gl_FragCoord.z by gl_Position.w. Then_co__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_float depth _eq_ gl_FragCoord.z / (1 / gl_FragCoord.w) _eq_ gl_FragCoord.z * gl_FragCoord.w_sm__lt_/pre_gt__lt_p_gt_According to the depth renderer_co_ if we want a depth value in the [0_co_ camera.maxZ] interval_co_ we should do _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_float depth _eq_ (gl_FragCoord.z / gl_FragCoord.w) / far_sm__lt_/pre_gt__lt_p_gt_Hope it helped you ! _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-03T00:03:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Hello Luaacro_co__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_many thanks for your suggestion!_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_In fact_co_ I also tried what you suggested not long ago_co_ as that was proposed by a variety of stackoverflow_co_ gamedev and other posts on the web._lt_/div_gt__lt_div_gt_But again from empirics_co_ this also does not give linear view-space z._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_And there are people on the web trying to explain_co_ why that is_dd__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_a href_eq__qt_http_dd_//stackoverflow.com/questions/13711252/what-does-gl-fragcoord-z-gl-fragcoord-w-represent_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//stackoverflow.com/questions/13711252/what-does-gl-fragcoord-z-gl-fragcoord-w-represent_lt_/a_gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_a href_eq__qt_https_dd_//www.opengl.org/discussion_boards/showthread.php/179953-%28gl_FragCoord-z-gl_FragCoord-w%29-for-quick-depth-calculation-camera-to-fragment_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.opengl.org/discussion_boards/showthread.php/179953-%28gl_FragCoord-z-gl_FragCoord-w%29-for-quick-depth-calculation-camera-to-fragment_lt_/a_gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_The whole _qt_back-to-linear-view-space_qt_-computation is a whole lot more complicated_co_ as the opengl.org wiki article here tries to explain with too much math_dd__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_a href_eq__qt_https_dd_//www.opengl.org/wiki/Compute_eye_space_from_window_space#From_XYZ_of_gl_FragCoord_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.opengl.org/wiki/Compute_eye_space_from_window_space#From_XYZ_of_gl_FragCoord_lt_/a_gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_Here is also an interesting post explaining in detail the computation of gl_FragCoord.z from the gl_Vertex attribute_dd__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_a href_eq__qt_http_dd_//stackoverflow.com/questions/10264949/glsl-gl-fragcoord-z-calculation-and-setting-gl-fragdepth_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//stackoverflow.com/questions/10264949/glsl-gl-fragcoord-z-calculation-and-setting-gl-fragdepth_lt_/a_gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_it [_lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm_font-size_dd_14px_sm_background-color_dd_rgb(255_co_255_co_255)_sm__qt__gt_gl_FragCoord.z] _lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_stores the z value of gl_Position but divided by gl_Position.w_lt_/span_gt__lt_/p_gt__lt_/div_gt__lt_/blockquote_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm_font-size_dd_14px_sm_background-color_dd_rgb(255_co_255_co_255)_sm__qt__gt_In fact_co_ gl_FragCoord.z is the gl_Position.z before the division made by OpenGL._lt_/span_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_According to the mentioned articles (and I have yet to find the relevant section on the OpenGL spec_co_ so I will be very glad if someone can point me to that) I think this is wrong._lt_/p_gt__lt_p_gt_The _lt_a href_eq__qt_https_dd_//www.khronos.org/registry/gles/specs/2.0/es_full_spec_2.0.25.pdf_qt_ rel_eq__qt_external nofollow_qt__gt_OpenGL ES 2.0 spec_lt_/a_gt_ is only saying under section 3.8_dd_ _lt_em_gt__qt_The built-in variable gl_FragCoord holds the window coordinates x_co_ y_co_ z_co_ and 1/w for the fragment._qt__lt_/em_gt__lt_/p_gt__lt_/div_gt__lt_div_gt_So we just have to figure out_co_ what _lt_em_gt_window coordinates_lt_/em_gt_ means for the z-dimension.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wacko.png_qt_ alt_eq__qt__dd_wacko_dd__qt__gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_But I think we are geeting there! I guess  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_Cheers_co__lt_/div_gt__lt_div_gt_Kai_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-03T00:56:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Okay_co_ guys. The answer was right in front_co_ mentioned by _lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_oc2ki on the opengl.org thread _lt_a href_eq__qt_https_dd_//www.opengl.org/discussion_boards/showthread.php/164089-gl_FragCoord-z#post_1159540_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.opengl.org/discussion_boards/showthread.php/164089-gl_FragCoord-z#post_1159540_lt_/a_gt_ (and also by BionicBytes on _lt_a href_eq__qt_https_dd_//www.opengl.org/discussion_boards/showthread.php/176043-Please-help-gl_fragcoord-to-world-coordinates#post_1229449_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.opengl.org/discussion_boards/showthread.php/176043-Please-help-gl_fragcoord-to-world-coordinates#post_1229449_lt_/a_gt_)_lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_I was just too lazy to try it out.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_ _lt_/span_gt__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_float Z _eq_ gl_ProjectionMatrix[3].z/(gl_FragCoord.z * -2.0 + 1.0 - gl_ProjectionMatrix[2].z)_sm__lt_/pre_gt__lt_p_gt_I tried this and it actually works_co_ regardless of the _qt_near_qt_ or _qt_far_qt_ settings or the field-of-view_dd__lt_/p_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_precision highp float_sm_uniform mat4 projection_sm_uniform float far_sm_void main() {    float Z _eq_ projection[3].z/(gl_FragCoord.z * 2.0 - 1.0 + projection[2].z)_sm_    float clamped _eq_ Z/far_sm_    gl_FragColor _eq_ vec4(gl_FragCoord.z_co_ Z_co_ clamped_co_ 0)_sm_}_lt_/pre_gt__lt_p_gt_There_co_ _lt_strong_gt_Z_lt_/strong_gt_ gives the actual _lt_em_gt_linear_lt_/em_gt_ distance along the view-z-dimension from the camera center (not from the near plane!) to the fragment._lt_/p_gt__lt_p_gt_And _lt_strong_gt_clamped_lt_/strong_gt_ gives then the _lt_em_gt_linear _lt_/em_gt_distance in [0...1]._lt_/p_gt__lt_p_gt_I negated the proposed solution_co_ because it was giving me negative values_co_ since I guess in NDC space the z axis is swapped. This way_co_ the value of _lt_strong_gt_Z_lt_/strong_gt_ is now always positive._lt_/p_gt__lt_/div_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co__lt_/p_gt__lt_p_gt_Kai_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2015-02-03T09:59:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I did a mistake myself when writing my post_co_ gl_FragCoord.z is ALWAYS gl_Position.z / gl_Position.w_co_ I was confused ^^_lt_/p_gt__lt_p_gt_I don_t_t agree because ( gl_FragCoord.z / gl_FragCoord.w)  / far is linearized in the [0_co_ camera.maxZ] interval. In your shader you can try to test a value using the rule of three_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_They say _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_float Z _eq_ gl_ProjectionMatrix[3].z/(gl_FragCoord.z * -2.0 + 1.0 - gl_ProjectionMatrix[2].z)_sm__lt_/pre_gt__lt_p_gt_because multiplying projection matrix by (Px_co_ Py_co_ Pz_co_ 1.0) gives -Pz in the w result component. Using the above line_co_ it just reverses the calculation by passing the projection matrix to the fragment shader_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-03T10:15:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey Luaacro_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_thanks for your corrections and clarifications._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I may not be that good at math  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ but what I see from those computations and the values they produce_co_ they _lt_strike_gt_are not correct_lt_/strike_gt_ do not give linear view-space z-distance_co_ I am afraid._lt_/p_gt__lt_p_gt_Please do not take me wrong here. I do not want to be offending or rude in any way._lt_/p_gt__lt_p_gt_It_t_s just that I tried _lt_em_gt_(_lt_/em_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt__lt_em_gt_gl_FragCoord.z / gl_FragCoord.w) _lt_/em_gt_as well as divided by _lt_em_gt_far_lt_/em_gt_ and it gives values that do not seem to be directly related to the view-space z-distance. And I yet have to find an interpretation for what theses values really mean.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_ _lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_It might seem for sensible values of _lt_em_gt_far _lt_/em_gt_and _lt_em_gt_near_lt_/em_gt__co_ where _lt_em_gt_near _lt_/em_gt_is close to zero_co_ that it _qt_looks_qt_ like it_t_s _lt_em_gt_linear (_lt_/em_gt_plus/minus some delta for floating-point imprecision)_co_ but I happen to see that it is actually not linear._lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_And by _lt_em_gt_linear _lt_/em_gt_I mean that our proposed _t_z_t_ computation is a linear function of the actual z-distance_co_ and should at best be the identity function (always plus/minus floating-point imprecisions)._lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_If you want to reproduce_co_ I conclude my test sources here. It_t_s basically the same as I posted above_co_ just with your computation_dd__lt_/span_gt__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_function draw() {    var gl _eq_ document.getElementById(_qt_webgl_qt_).getContext(_qt_experimental-webgl_qt_)_sm_        var zDist _eq_ 20.0_sm_ // &lt_sm_- change this to alter the z-distance to the camera    var near _eq_ 10.0_sm_    var far _eq_ 100.0_sm_    var OES_texture_float _eq_ gl.getExtension(_t_OES_texture_float_t_)_sm_    if (!OES_texture_float) {        throw new Error(_qt_No support for OES_texture_float_qt_)_sm_    }    var fbo _eq_ gl.createFramebuffer()_sm_    gl.bindFramebuffer(gl.FRAMEBUFFER_co_ fbo)_sm_    var tex _eq_ gl.createTexture()_sm_    gl.bindTexture(gl.TEXTURE_2D_co_ tex)_sm_    gl.texParameteri(gl.TEXTURE_2D_co_ gl.TEXTURE_MIN_FILTER_co_ gl.NEAREST)_sm_    gl.texParameteri(gl.TEXTURE_2D_co_ gl.TEXTURE_MAG_FILTER_co_ gl.NEAREST)_sm_    gl.texImage2D(gl.TEXTURE_2D_co_ 0_co_ gl.RGBA_co_ 1_co_ 1_co_ 0_co_ gl.RGBA_co_ gl.FLOAT_co_ null)_sm_    gl.framebufferTexture2D(gl.FRAMEBUFFER_co_ gl.COLOR_ATTACHMENT0_co_ gl.TEXTURE_2D_co_ tex_co_ 0)_sm_    var prog _eq_ gl.createProgram()_sm_    var addshader _eq_ function(type_co_ source) {        var s _eq_ gl.createShader(type)_sm_        gl.shaderSource(s_co_ source)_sm_        gl.compileShader(s)_sm_        if (!gl.getShaderParameter(s_co_ gl.COMPILE_STATUS)) {            throw _qt_Could not compile _qt_+type+_qt_ shader_dd_\\n\\n_qt_+gl.getShaderInfoLog(s)_sm_        }        gl.attachShader(prog_co_ s)_sm_    }_sm_    addshader(gl.VERTEX_SHADER_co_ _qt_attribute vec3 pos_sm__qt_+        _qt_uniform mat4 projection_sm__qt_+        _qt_uniform mat4 view_sm__qt_+        _qt_void main() {_qt_+        _qt_    gl_Position _eq_ projection * view * vec4(pos_co_ 1.0)_sm__qt_+        _qt_}_qt_)_sm_    addshader(gl.FRAGMENT_SHADER_co_        _qt_precision highp float_sm__qt_+        _qt_uniform mat4 projection_sm__qt_+        _qt_uniform float far_sm__qt_+        _qt_void main() {_qt_+        _qt_    float z1 _eq_ projection[3].z/(gl_FragCoord.z * 2.0 - 1.0 + projection[2].z)_sm__qt_+        _qt_    float z1Clamped _eq_ z1/far_sm__qt_+        _qt_    float z2 _eq_ gl_FragCoord.z / gl_FragCoord.w_sm__qt_+        _qt_    float z2Clamped _eq_ z2 / far_sm__qt_+        _qt_    gl_FragColor _eq_ vec4(z1_co_ z1Clamped_co_ z2_co_ z2Clamped)_sm__qt_+        _qt_}_qt_)_sm_    gl.linkProgram(prog)_sm_    if (!gl.getProgramParameter(prog_co_ gl.LINK_STATUS)) {        throw _qt_Could not link the shader program!_qt__sm_    }    gl.useProgram(prog)_sm_    gl.disable(gl.CULL_FACE)_sm_    var mvMatrix _eq_ mat4.create()_sm_    var pMatrix _eq_ mat4.create()_sm_    mat4.lookAt([0.0_co_ 0.0_co_ zDist]_co_ [0.0_co_ 0.0_co_ 0.0]_co_ [0.0_co_ 1.0_co_ 0.0]_co_ mvMatrix)_sm_    mat4.perspective(45_co_ 1_co_ near_co_ far_co_ pMatrix)_sm_    gl.uniformMatrix4fv(gl.getUniformLocation(prog_co_ _t_projection_t_)_co_ false_co_ pMatrix)_sm_    gl.uniformMatrix4fv(gl.getUniformLocation(prog_co_ _t_view_t_)_co_ false_co_ mvMatrix)_sm_    gl.uniform1f(gl.getUniformLocation(prog_co_ _t_far_t_)_co_ far)_sm_        gl.bindBuffer(gl.ARRAY_BUFFER_co_ gl.createBuffer())_sm_    gl.bufferData(gl.ARRAY_BUFFER_co_ new Float32Array([        -1_co_ -1_co_ 0_co_         1_co_ -1_co_ 0_co_         1_co_  1_co_ 0_co_        -1_co_  1_co_ 0    ])_co_ gl.STATIC_DRAW)_sm_    var attr _eq_ gl.getAttribLocation(prog_co_ _qt_pos_qt_)_sm_    gl.enableVertexAttribArray(attr)_sm_    gl.vertexAttribPointer(attr_co_ 3_co_ gl.FLOAT_co_ false_co_ 0_co_ 0)_sm_    gl.viewport(0_co_ 0_co_ 1_co_ 1)_sm_    gl.drawArrays(gl.TRIANGLE_STRIP_co_ 0_co_ 4)_sm_    var pixels _eq_ new Float32Array(4)_sm_    gl.readPixels(0_co_ 0_co_ 1_co_ 1_co_ gl.RGBA_co_ gl.FLOAT_co_ pixels)_sm_    console.log(_t_expected_dd_ _t_ + zDist)_sm_    console.log(_t_z1_dd_ _t_ + pixels[0])_sm_ // &lt_sm_- this value should be very close/identical to zDist    console.log(_t_z1Clamped_dd_ _t_ + pixels[1])_sm_    console.log(_t_z2_dd_ _t_ + pixels[2])_sm_ // &lt_sm_- this value should also be very close/identical to zDist    console.log(_t_z2Clamped_dd_ _t_ + pixels[3])_sm_}_lt_/pre_gt__lt_p_gt_Following are some outputs from the program for various values of _lt_em_gt_near_lt_/em_gt__co_ _lt_em_gt_far_lt_/em_gt_ and _lt_em_gt_zDist._lt_/em_gt__lt_/p_gt__lt_p_gt_zDist ist the actual z-view-distance from the camera center to the fragment._lt_/p_gt__lt_p_gt_z1 is the computation proposed on the opengl.org wiki thread._lt_/p_gt__lt_p_gt_z2 is your computation of (.z/.w)_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_near      far     zDist   z1                  z2----------------------------------------------------------------- 0.1      100.0   10.0     9.999945640563964   9.90990924835205  0.1      100.0   20.0    19.999773025512695  19.919918060302734  0.1      100.0   90.0    90.00005340576172   89.989990234375   10.0      100.0   11.0    11.0                 1.1111115217208862        &lt_sm_- z2 is way off10.0      100.0   20.0    20.000001907348633  11.111111640930175         &lt_sm_- here_co_ too 10.0      100.0   90.0    90.00000762939453   88.8888931274414           &lt_sm_- z2 a bit off   _lt_/pre_gt__lt_p_gt_Maybe I am misunderstanding you_co_ what your computation should actually produce. But what I want to have_co_ is a computation that produces from gl_FragCoord.z and the other parameters available to a fragment shader (be it implicit or explicit uniforms) the actual view-space z-distance._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co__lt_/p_gt__lt_p_gt_Kai_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2015-02-03T16:30:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Oh_co_ I know what is happening !_lt_/p_gt__lt_p_gt_Don_t_t worry you_t_re not offending or what_co_ this a very interesting question and remark _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In fact_co_ using your method assures that you_t_ll find the exactly gl_Position.z value because you_t_re using original values of the perspective matrix. Using z/w_co_ we_t_ll have a loss of precision due to the division by 1.0._lt_/p_gt__lt_p_gt_The division by 1.0 is needed because gl_FragCoord must be homogeneous coordinates due to the other calculations OpenGL(ES) will operate._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But_co_ to save performances in your shaders_co_ it is advised to use z/w_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-03T17:13:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Thanks for your information!_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_Using z/w_co_ we_t_ll have a loss of precision due to the division by 1.0._lt_/span_gt__lt_/p_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Wha? Okay_co_ but then there is a pretty big loss of precision for the fourth row in the values table above..._lt_/p_gt__lt_/div_gt__lt_div_gt_When the value should have been 11.0 but was actuall 1.11 ??? _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ That_t_s almost ahundred percent off...  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_div_gt_I still do not believe that .z/.w really really actually does give us linear z-distance.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  and nothing can convince me otherwise anymore.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_Another performant solution_co_ as also remarked by the same person on that mentioned opengl.org post_co_ is to just use interpolated varyings from vertex to fragment shader._lt_/div_gt__lt_div_gt_To spare us all that hassle with dividing here and projection there.. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_I mean_co_ really_co_ if we anyway have the vertex information_co_ then why not just use it.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_Then_co_ I would just do in the vertex shader_dd__lt_/div_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_uniform mat4 viewMatrix_sm_uniform mat4 projectionMatrix_sm_varying float viewZ_sm_ // z-distance in linear view-spacevoid main(void) {  vec4 viewPosition _eq_ viewMatrix * vec4(inputVertexPosition_co_ 1.0)_sm_  viewZ _eq_ viewPosition.z_sm_  gl_Position _eq_ projectionMatrix * viewPosition_sm_}_lt_/pre_gt__lt_p_gt_Cheers_co__lt_/p_gt__lt_p_gt_Kai_lt_/p_gt__lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Luaacro","Date":"2015-02-03T21:06:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_It looks like the z1 value is in [0_co_ far] and z2 is [near_co_ far]_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-02-03T21:34:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m following this thread closely and I just tried hacking a bit the current BJS depth renderer_dd_ in the _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/Shaders/depth.fragment.fx#L19_qt_ rel_eq__qt_external nofollow_qt__gt_depth fragment shader_lt_/a_gt__co_ I changed this line_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_float depth _eq_ gl_FragCoord.z / far_sm__lt_/pre_gt__lt_p_gt_Into this one_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_float depth _eq_ gl_FragCoord.z / gl_FragCoord.w / far_sm__lt_/pre_gt__lt_p_gt_And it works quite great! Also_co_ much simpler than passing the projection matrix as a uniform._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Just thought I_t_d let you guys know._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-03T21:48:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello jahow_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_it_t_s great that you do it for Babylon.js!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Yeah_co_ it_t_s a nice talk we have here.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt__gt__lt_div_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_And it works quite great! Also_co_ much simpler than passing the projection matrix as a uniform._lt_/span_gt__lt_/p_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_Okay_co_ then do it this way_co_ if the end results look okay_co_ as that is all that counts at the end of the day in computer graphics. always has been.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co__lt_/p_gt__lt_p_gt_Kai_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-02-03T21:53:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Note that I was just providing some intel to you guys_co_ not trying to put an end to this discussion _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_em_gt__lt_span style_eq__qt_font-size_dd_12px_sm__qt__gt_And I wouldn_t_t dare interrupting people that can actually code hand-made webgl._lt_/span_gt__lt_/em_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kai_","Date":"2015-02-03T21:58:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ah_co_ no_co_ it_t_s okay. haha.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think_co_ I am through with it now. Actually having spent two days straight reading specs_co_ doing a whole lot of web research_co_ experimenting here and there and finally concluding_dd__lt_/p_gt__lt_p_gt_ah what the hell_co_ I just use the view-position as varying from the vertex shader._lt_/p_gt__lt_p_gt_That settles it for me_co_ at least._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But you can go on.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]