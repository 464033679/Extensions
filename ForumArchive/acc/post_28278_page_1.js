[{"Owner":"georage","Date":"2017-02-07T19:05:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tDoes anyone have any evidence (anecdotal even) on which method would be quickest?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Scenario A_dd__lt_/strong_gt_ Dispose of 200 static meshes and create 12 new ones.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Scenario B_dd__lt_/strong_gt_ Dispose of the whole scene and create a new scene with 13 static meshes. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Scenario C_dd_ _lt_/strong_gt_Not sure this is possible_co_ but can you make babylon.js not render meshes? I could _qt_turn off_qt_ the 200 static meshes so they do not interact with lights and player input. This would be the preferred method_co_ I think_co_ since it would minimize object creation_co_ which in C is an expensive process.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI can test it_co_ of course_co_ but was wondering if anyone had any best practices on how to make that as seamless as possible. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for any input.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tEDIT_dd_ Looks like setEnabled() may make Scenario C possible! I will test it!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//doc.babylonjs.com/classes/2.4/node_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/classes/2.4/node_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2017-02-07T19_dd_13_dd_09Z_t_ title_eq__t_02/07/2017 07_dd_13  PM_t_ data-short_eq__t_1 yr_t__gt_February 7_co_ 2017_lt_/time_gt_ by georage_lt_/strong_gt_\n\t\n\t\t_lt_br_gt_i may have answered my own question\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-02-07T19:31:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWell_co_ if you consider memory footprint_co_ I would do A.  If there are meshes you do not have_co_ you have to pay the creation cost no matter what.  If you never are going to need something anymore_co_ disposing of meshes would save memory on both cpu &amp_sm_ gpu.  Do not think disposing would more than 16.67 millis_co_ (one 60 hz frame).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tyou could easily switch between A or C and test either way.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_mesh.dispose()\n\nor\n\nmesh.setEnabled(false)_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tIf you go the dispose route_co_ make sure you do not store references to the meshes in your own code.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"georage","Date":"2017-02-07T20:02:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks_co_ this seems to work quickly ... not sure about memory issues but can tweak later. I won_t_t have more than 250 simple meshes in memory at a time either way_co_ I don_t_t think.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_function disableAllMeshesExcept(star_co_ scene){\n        log(scene.meshes.length + _qt_ meshes detected_qt_)_sm_\n        var countMesh _eq_ 0_sm_\n        for (var i _eq_ 0_sm_ i &lt_sm_ scene.meshes.length_sm_ i++) {\n            if(scene.meshes[i] !_eq_ star){\n                //log(scene.meshes[i].sName)_sm_\n                scene.meshes[i].setEnabled(false)_sm_\n                countMesh++_sm_\n            }\n        }    \n        log(countMesh + _qt_ meshes disabled_qt_)_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]