[{"Owner":"jackbob","Date":"2016-11-18T20:40:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am rather new to Babylon. I am using the AssetManger to load OBJ/MTL. I am executing my renderloop in the onFinish callback on the AssetManager. I want to make adjustments to the material created when the MTL-file was loaded (adjust the emissive color). However_co_ it appears that the materials are not yet created when onFinish is called (i.e. they are still undefined). How do I know when the materials have been properly created so that I can make my adjustments?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have something along the lines of this_co_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_const scene _eq_ createScene()_sm_ // Setup camera etc.\nconst loader _eq_ new BABYLON.AssetsManager(scene)_sm_\n\nconst model _eq_ loader.addMeshTask(_qt_model_qt__co_ _qt__qt__co_ _qt_source/_qt__co_ _qt_Model.obj_qt_)_sm_\nmodel.onSuccess _eq_ (t) _eq_&gt_sm_ {\n  t.loadedMeshes.forEach((m) _eq_&gt_sm_ {\n    m.position.x _eq_ 0_sm_\n    m.position.y _eq_ 0_sm_\n    m.position.z _eq_ 0_sm_\n  })_sm_\n}_sm_\n\nloader.onFinish _eq_ (task) _eq_&gt_sm_ {\n  // task[0].loadedMeshes[0].material is undefined...\n  \n  engine.runRenderLoop(() _eq_&gt_sm_ {\n    scene.render()_sm_\n  })_sm_\n}_sm_\n\nloader.load()_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBest_co__lt_br /_gt_\n\tBob\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-11-19T18:06:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi bob!  Sorry about the problems.  No errors seen on console _lt_em_gt_network_lt_/em_gt_ areas... like _qt_404_qt_ for the .mtl file?  Wouldn_t_t the texture be loaded separately with a _lt_em_gt_textureTask? _lt_/em_gt_ Not sure.  I_t_m not very experienced with .obj and .mtl loading_co_ but I found this monster playground demo... with all sorts of object-loader crap.  In fact_co_ it might contain the entire obj loader SYSTEM.  I don_t_t know who coded it or what its purpose_co_ but take a look _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1S9WC2%235_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1S9WC2#5_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaterial/Texture _lt_em_gt_.isReady_lt_/em_gt_ might not be activating_co_ but maybe the mtl isn_t_t even loading correctly.  Check your stuff... and I_t_ll keep thinking.  Sorry for the slow and bad reply.  I_t_ll do some studying.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jackbob","Date":"2016-11-19T20:07:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThank you for your suggestions Wingnut.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt does not appear to be an issue with fetching the resources from the server. Everything loads nicely_co_ both the OBJ and MTL files are loaded and rendered appropriately. However_co_ I don_t_t know where I should hook in my logic to alter the materials that were automatically created from the MTL file? I would think there would be a way to observe the material state and wait till it is ready (and the textures loaded etc.) and then make modifications to the material properties_co_ but I am not sure how. I have browsed the documentation and currently I am going through the sourcecode of the file loader.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt appears to be the way material loading has been implemented in the _lt_strong_gt__parseSolid_lt_/strong_gt_ method in _lt_strong_gt_babylon.objFileLoader.ts_lt_/strong_gt_ where the materials are loaded async while the function returns as soon as the meshes have loaded (leaving the material callback hanging without anyway to know when it is done...). See _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/994980196670fb581f75b31bfbb8ed90fd21bebb/loaders/OBJ/babylon.objFileLoader.ts#L834_qt_ rel_eq__qt_external nofollow_qt__gt_this file on Github_lt_/a_gt_. Can anybody confirm this?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t(The code snippet you referred to_co_ Wingnut_co_ appears to be an (early?) implementation of the obj loader).\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Nabroski","Date":"2016-11-19T21:12:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\thm interessting_dd__lt_br /_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#28YUR5%23135_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#28YUR5#135_lt_/a_gt__lt_br /_gt__lt_br /_gt__lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5733-wingnut/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5733_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5733-wingnut/_qt_ rel_eq__qt__qt__gt_@Wingnut_lt_/a_gt_ also an interesting task to get the material from onfinish function _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_br /_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#28YUR5%23136_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#28YUR5#136_lt_/a_gt__lt_/span_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]