[{"Owner":"Hersir","Date":"2017-04-04T06:37:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tHi my app is crashing on initial load (not always)_co_ looks like that happens when scene start to load_co_ after error site is reloaded and works further ok. I am trying to get more debug info _co_ but right now I have only this message GL Support_dd_ can **NOT** render to 1 texture. Have anyone had similar issues? Works great on desktop.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Hersir","Date":"2017-04-04T07:28:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tCrash logs say EXC_BAD_ACCESS sigsegv but looks like to could by anything _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Hersir","Date":"2017-04-04T08:20:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tLooks like the crash is caused by big .babylon file_co_ found lot of threads about crashes on iOS safari where big json file is loaded. Crash usually happens directly after file is loaded\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2017-04-04T11:44:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYes_co_ you must pay a lot of attention on mobiles. Memory is constraint and trying to load a model bigger than 50 MB could easily fail as the browser is taking too much memory to load the JSON and parse it in memory.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you can_co_ try to use our incremental system to avoid this problem_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/using_the_incremental_loading_system_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/using_the_incremental_loading_system_lt_/a_gt_ but even so_co_ it could still generate crashes. Espilit using this approach_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs.com/Demos/Espilit_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/Demos/Espilit_lt_/a_gt_ works perfectly well on iOS but Hill Valley could sometimes crash for instance _lt_a href_eq__qt_http_dd_//www.babylonjs.com/Demos/HillValley_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/Demos/HillValley_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNote also that big textures could also saturate more quickly the memory on mobile and generate crashes too. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tDavid\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Hersir","Date":"2017-04-04T11:55:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5482-davrous/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5482_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5482-davrous/_qt_ rel_eq__qt__qt__gt_@davrous_lt_/a_gt_ Thx for input yes my file right now is more than 50mb_co_ I will look at splitting_co_ but will it help if I load separate meshes and build scene at runtime? Also could parsing process be moved to separate thread if possible?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2017-04-04T12:49:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tYes_co_ building yourself the scene with separate calls to ImportMesh could help. Separated thread in JavaScript means Web Worker_co_ it could help by avoiding blocking the UI thread but this won_t_t help memory wise which is our main issue there. Plus it_t_s often useless as the communication back to the main thread is often complicated and doesn_t_t offer performance boost. Loading a _qt_big_qt_ (for mobile) mesh at once is mainly a memory issue. \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]