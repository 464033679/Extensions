[{"Owner":"speps","Date":"2014-05-22T19:57:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi all_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I want to make a game where I will update meshes in real time. I tried some simple code starting from the hello world _dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        var canvas _eq_ document.getElementById(_qt_renderCanvas_qt_)_sm_        var engine _eq_ new BABYLON.Engine(canvas_co_ true)_sm_        var scene _eq_ new BABYLON.Scene(engine)_sm_        var camera _eq_ new BABYLON.ArcRotateCamera(_qt_Camera_qt__co_ 1_co_ 0.8_co_ 10_co_ new BABYLON.Vector3(0_co_ 0_co_ 0)_co_ scene)_sm_        var light0 _eq_ new BABYLON.PointLight(_qt_Omni_qt__co_ new BABYLON.Vector3(0_co_ 1_co_ 1)_co_ scene)_sm_        scene.activeCamera.attachControl(canvas)_sm_        var dynMesh _eq_ new BABYLON.Mesh(_qt_dynMesh_qt__co_ scene)_sm_        //dynMesh.setVerticesData([-0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ 0.5_co_ 0.0_co_ -0.5_co_ 0.5_co_ 0.0]_co_ BABYLON.VertexBuffer.PositionKind_co_ true)_sm_        //dynMesh.setVerticesData([0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0]_co_ BABYLON.VertexBuffer.NormalKind_co_ true)_sm_        engine.runRenderLoop(function () {            dynMesh.setVerticesData([-0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ 0.5_co_ 0.0_co_ -0.5_co_ 0.5_co_ 0.0]_co_ BABYLON.VertexBuffer.PositionKind_co_ true)_sm_            dynMesh.setVerticesData([0.0_co_ 0.0_co_ -1.0_co_ 0.0_co_ 0.0_co_ -1.0_co_ 0.0_co_ 0.0_co_ -1.0_co_ 0.0_co_ 0.0_co_ -1.0]_co_ BABYLON.VertexBuffer.NormalKind_co_ true)_sm_            dynMesh.setIndices([0_co_ 2_co_ 1_co_ 3_co_ 2_co_ 0])_sm_            scene.render()_sm_        })_sm__lt_/pre_gt__lt_p_gt_As is_co_ I don_t_t see anything (except for one frame when I press F5). However_co_ if I uncomment the 2 setVerticesData then I see the original vertices only and not the modified ones (note how the normals are reversed between the 2 calls)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Is this the proper way of updating meshes in real time? Before the render() call seemed appropriate._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co_ Remi._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-05-22T21:06:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_It works for me_dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs.com/playground/#1R2RKA%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/playground/#1R2RKA#1_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"gwenael","Date":"2014-05-22T21:44:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Works for me too._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I love this playground_co_ that is even easier for debugging than with jsfiddle. May I suggest an improvement? Possibility to provide the url for the version of babylon.js that we want to use. Or maybe the playground always uses the latest version of github_co_ does it?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-05-22T21:52:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_it does _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"speps","Date":"2014-05-23T10:29:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Argh_co_ what version does the playground use? I think I am on 1.11 from GitHub._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"gwenael","Date":"2014-05-23T10:32:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The latest one from GitHub according to Deltakosh previous answer._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2014-05-25T09:40:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi Speps_co_ welcome to the forum!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I am going to take this a step further_co_ and introduce you to the NEW way to do vertexData. Its not working correctly for me_co_ but this will take you in a new direction_co_ and then maybe the experts will tell me what I am doing wrong.  Notice that I stay away from the render loop... which runs fast and continuous.  There is no reason to do repeated vertex data setting once per frame.  It slows the scene.  You should be able to update the vertexData outside of the render loop_co_ and the renderer will see the change on the next frame rendered._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_&lt_sm_!DOCTYPE html&gt_sm_&lt_sm_html xmlns_eq__qt_http_dd_//www.w3.org/1999/xhtml_qt_&gt_sm_&lt_sm_head&gt_sm_\t&lt_sm_meta http-equiv_eq__qt_Content-Type_qt_ content_eq__qt_text/html_sm_ charset_eq_utf-8_qt_/&gt_sm_\t&lt_sm_title&gt_sm_Speps Dynamic Mesh Test&lt_sm_/title&gt_sm_\t&lt_sm_script src_eq__qt_./js/hand.minified-1.3.7.js_qt_&gt_sm_&lt_sm_/script&gt_sm_\t&lt_sm_script src_eq__qt_./js/babylon.1.11.0.js_qt_&gt_sm_&lt_sm_/script&gt_sm_\t&lt_sm_style type_eq__qt_text/css_qt_&gt_sm_\t\thtml_co_body_co_#canvas {\t\t\twidth_dd_100%_sm_\t\t\theight_dd_100%_sm_\t\t\tpadding_dd_0_sm_\t\t\tmargin_dd_0_sm_\t\t\toverflow_dd_ hidden_sm_\t\t\tbackground-color_dd_ black_sm_\t\t}\t\t#button {\t\t\tcolor_dd_ white_sm_\t\t\tfont-size_dd_ 14pt_sm_\t\t\tfont-weight_dd_ bold_sm_\t\t\tpadding-left_dd_4pt_sm_\t\t\tpadding-right_dd_4pt_sm_\t\t\tbackground-color_dd_ red_sm_\t\t\tborder_dd_ red outset 3pt_sm_\t\t\tcursor_dd_ pointer_sm_\t\t}\t&lt_sm_/style&gt_sm_&lt_sm_/head&gt_sm_&lt_sm_body&gt_sm_\t&lt_sm_div id_eq__qt_buttonbar_qt_ style_eq__qt_background-color_dd_ rgb(55_co_ 55_co_ 75)_sm__qt_&gt_sm_\t\t&lt_sm_span id_eq__qt_button_qt_ onclick_eq__qt_changeit()_qt_&gt_sm_ click me &lt_sm_/span&gt_sm_\t&lt_sm_/div&gt_sm_\t&lt_sm_canvas id_eq__qt_canvas_qt_&gt_sm_&lt_sm_/canvas&gt_sm_\t&lt_sm_script&gt_sm_\tvar which _eq_ _qt_original_qt__sm_  // a global - oh no.  \tvar canvas _eq_ document.getElementById(_qt_canvas_qt_)_sm_\t// Check support\tif (!BABYLON.Engine.isSupported()) {\t\twindow.alert(_t_Browser not supported_t_)_sm_\t}\telse {\t\tvar engine _eq_ new BABYLON.Engine(canvas_co_ true)_sm_\t\tvar scene _eq_ createScene(engine)_sm_\t\tengine.runRenderLoop(function () {\t\tscene.render()_sm_\t})_sm_\t// Be ready for a window resize\t\twindow.addEventListener(_qt_resize_qt__co_ function () {\t\tengine.resize()_sm_\t})_sm_}// ------------------------------------------function createScene(engine) {\tvar scene _eq_ new BABYLON.Scene(engine)_sm_\tvar camera _eq_ new BABYLON.ArcRotateCamera(_qt_Camera_qt__co_ 1_co_ 0.8_co_ 5_co_ new BABYLON.Vector3(0_co_ 0_co_ 0)_co_ scene)_sm_\tvar light0 _eq_ new BABYLON.PointLight(_qt_Omni_qt__co_ new BABYLON.Vector3(0_co_ 1_co_ 1)_co_ scene)_sm_\tscene.activeCamera.attachControl(canvas)_sm_\tvar dynMesh _eq_ new BABYLON.Mesh(_qt_dynMesh_qt__co_ scene_co_ true)_sm_ // the basic mesh_co_ made once.\toriginal()_sm_\treturn scene_sm_}// ------------------------------------------function changeit() {\tif (which _eq__eq_ _qt_original_qt_) {\t\tmodified()_sm_\t\tconsole.log(_qt_changed it to modified_qt_)_sm_\t}\telse {\t\toriginal()_sm_\t\tconsole.log(_qt_changed it to original_qt_)_sm_\t}}// ------------------------------------------\tfunction original() {\t\tvar scene _eq_ engine.scenes[0]_sm_\t\tvar dynMesh _eq_ scene.getMeshByName(_qt_dynMesh_qt_)_sm_\t\twhich _eq_ _qt_original_qt__sm_\t\tvar vertexData _eq_ new BABYLON.VertexData()_sm_\t\tvertexData.positions _eq_ [-0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ 0.5_co_ 0.0_co_ -0.5_co_ 0.5_co_ 0.0]_sm_\t\tvertexData.normals _eq_ [0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0]_sm_\t\tvertexData.indices _eq_ [0_co_ 2_co_ 1_co_ 3_co_ 2_co_ 0]_sm_\t\tvertexData.applyToMesh(dynMesh_co_ true)_sm_\t}// ------------------------------------------\tfunction modified() {\t\tvar scene _eq_ engine.scenes[0]_sm_\t\tvar dynMesh _eq_ scene.getMeshByName(_qt_dynMesh_qt_)_sm_\t\twhich _eq_ _qt_modified_qt__sm_\t\tvar vertexData _eq_ new BABYLON.VertexData()_sm_\t\tvertexData.positions _eq_ [-0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ 0.5_co_ 0.0_co_ -0.5_co_ 0.5_co_ 0.0]_sm_\t\tvertexData.normals _eq_ [0.0_co_ 0.0_co_ -1.0_co_ 0.0_co_ 0.0_co_ -1.0_co_ 0.0_co_ 0.0_co_ -1.0_co_ 0.0_co_ 0.0_co_ -1.0]_sm_\t\tvertexData.indices _eq_ [0_co_ 2_co_ 1_co_ 3_co_ 2_co_ 0]_sm_\t\tvertexData.applyToMesh(dynMesh_co_ true)_sm_\t}// ------------------------------------------&lt_sm_/script&gt_sm_&lt_sm_/body&gt_sm_&lt_sm_/html&gt_sm__lt_/pre_gt__lt_p_gt_Note that I am using 1.11.0.  It should work just fine for your experiment... but adjust at will. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_When I click the button to change between original and modified... I get Error_dd_ WebGL_dd_ drawElements_dd_ no VBO bound to enabled vertex attrib index 0... with Firefox 21.  I am newbie_co_ especially to updating vertexData dynamically.  But not only is the example above a better way to do it (avoiding the render loop and using functions instead)_co_ but it also shows the newest way of setting vertexData for current and future versions of babylon.js.  Now if we can get some expert to tell us why I/we cannot update dynMesh with new vertexData... even though it is set to updatable _eq_ true ... that would be great.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think Gwenael talked about this once before.  The mesh_co_ created in createScene ONCE... should maintain its VBO_co_ and therefore Speps should be able to re-apply modified vertexData as many times as he wishes_co_ right?  Can someone tell us why the VBO for dynMesh... fell out of scope/availability_co_ if it did?  Thanks._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-05-25T19:49:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello_co_ vertexData.applyToMesh if for creation only_co_ you have to use mesh.updateVerticesData to update a dynamic mesh_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_BTW_co_ 1.12 will add a vertexData.updateMesh function for your convenience _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2014-05-25T23:01:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks Deltakosh!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Ok_co_ Speps_co_ in order for dynMesh.updateVerticesData to work_co_ I had to revert back to the older way of creating dynMesh... where the mesh carries its data WITH it.  (In the newer version that uses a  2-object method_co_ the VertexData object sort of _qt_casts_qt_ the data into the shape of the mesh_co_ but the mesh doesn_t_t carry the data with it).  (As I understand all this).  So_co_ since I have been pasting the thread full of code to this point_co_ I might as well maintain that habit.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_&lt_sm_!DOCTYPE html&gt_sm_&lt_sm_html xmlns_eq__qt_http_dd_//www.w3.org/1999/xhtml_qt_&gt_sm_&lt_sm_head&gt_sm_\t&lt_sm_meta http-equiv_eq__qt_Content-Type_qt_ content_eq__qt_text/html_sm_ charset_eq_utf-8_qt_/&gt_sm_\t&lt_sm_title&gt_sm_Speps Dynamic Mesh Test&lt_sm_/title&gt_sm_\t&lt_sm_script src_eq__qt_./js/hand.minified-1.3.7.js_qt_&gt_sm_&lt_sm_/script&gt_sm_\t&lt_sm_script src_eq__qt_./js/babylon.1.11.0.js_qt_&gt_sm_&lt_sm_/script&gt_sm_\t&lt_sm_style type_eq__qt_text/css_qt_&gt_sm_\t\thtml_co_body_co_#canvas {\t\t\twidth_dd_100%_sm_\t\t\theight_dd_100%_sm_\t\t\tpadding_dd_0_sm_\t\t\tmargin_dd_0_sm_\t\t\toverflow_dd_ hidden_sm_\t\t\tbackground-color_dd_ black_sm_\t\t}\t\t#button {\t\t\tcolor_dd_ white_sm_\t\t\tfont-size_dd_ 14pt_sm_\t\t\tfont-weight_dd_ bold_sm_\t\t\tpadding-left_dd_4pt_sm_\t\t\tpadding-right_dd_4pt_sm_\t\t\tbackground-color_dd_ red_sm_\t\t\tborder_dd_ red outset 3pt_sm_\t\t\tline-height_dd_ 2em_sm_\t\t\tcursor_dd_ pointer_sm_\t\t}\t&lt_sm_/style&gt_sm_&lt_sm_/head&gt_sm_&lt_sm_body&gt_sm_\t&lt_sm_div id_eq__qt_buttonbar_qt_ style_eq__qt_background-color_dd_ rgb(55_co_ 55_co_ 75)_sm__qt_&gt_sm_\t\t&lt_sm_span id_eq__qt_button_qt_ onclick_eq__qt_changeit()_qt_&gt_sm_ click me &lt_sm_/span&gt_sm_\t&lt_sm_/div&gt_sm_\t&lt_sm_canvas id_eq__qt_canvas_qt_&gt_sm_&lt_sm_/canvas&gt_sm_\t&lt_sm_script&gt_sm_\tvar which _eq_ _qt_original_qt__sm_\tvar canvas _eq_ document.getElementById(_qt_canvas_qt_)_sm_\t// Check support\tif (!BABYLON.Engine.isSupported()) {\t\twindow.alert(_t_Browser not supported_t_)_sm_\t}\telse {\t\tvar engine _eq_ new BABYLON.Engine(canvas_co_ true)_sm_\t\tvar scene _eq_ createScene(engine)_sm_\t\tengine.runRenderLoop(function () {\t\tscene.render()_sm_\t})_sm_\t\t// Be ready for a window resize\t\twindow.addEventListener(_qt_resize_qt__co_ function () {\t\tengine.resize()_sm_\t})_sm_}// ------------------------------------------function createScene(engine) {\tvar scene _eq_ new BABYLON.Scene(engine)_sm_\tvar camera _eq_ new BABYLON.ArcRotateCamera(_qt_Camera_qt__co_ 1_co_ 0.8_co_ 5_co_ new BABYLON.Vector3(0_co_ 0_co_ 0)_co_ scene)_sm_\tvar light0 _eq_ new BABYLON.PointLight(_qt_Omni_qt__co_ new BABYLON.Vector3(0_co_ 1_co_ 1)_co_ scene)_sm_\tscene.activeCamera.attachControl(canvas)_sm_\tcreateDynMesh(scene)_sm_\treturn scene_sm_}// ------------------------------------------function createDynMesh(scene) {\tvar dynMesh _eq_ new BABYLON.Mesh(_qt_dynMesh_qt__co_ scene_co_ true)_sm_\tdynMesh.setVerticesData([-0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ 0.5_co_ 0.0_co_ -0.5_co_ 0.5_co_ 0.0]_co_ BABYLON.VertexBuffer.PositionKind_co_ true)_sm_\tdynMesh.setVerticesData([0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0]_co_ BABYLON.VertexBuffer.NormalKind_co_ true)_sm_\tdynMesh.setIndices([0_co_ 2_co_ 1_co_ 3_co_ 2_co_ 0])_sm_}// ------------------------------------------function changeit() {\tvar scene _eq_ engine.scenes[0]_sm_\tvar dynMesh _eq_ scene.getMeshByName(_qt_dynMesh_qt_)_sm_\tif (which _eq__eq_ _qt_modified_qt_) {\t\tvar positions _eq_ [-0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ 0.5_co_ 0.0_co_ -0.5_co_ 0.5_co_ 0.0]_sm_\t\tvar normals _eq_ [0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0_co_ 0.0_co_ 0.0_co_ 1.0]_sm_\t\tvar indices _eq_ [0_co_ 2_co_ 1_co_ 3_co_ 2_co_ 0]_sm_\t\tdynMesh.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ positions)_sm_\t\tdynMesh.updateVerticesData(BABYLON.VertexBuffer.NormalKind_co_ normals)_sm_\t\tdynMesh.setIndices(indices)_sm_\t\twhich _eq_ _qt_original_qt__sm_\t\tconsole.log(_qt_changed it to original_qt_)_sm_\t}\telse {\t\tvar positions _eq_ [-0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ -0.5_co_ 0.0_co_ 0.5_co_ 0.5_co_ 0.0_co_ -0.5_co_ 0.5_co_ 0.0]_sm_\t\tvar normals _eq_ [0.0_co_ 0.0_co_ -1.0_co_ 0.0_co_ 0.0_co_ -1.0_co_ 0.0_co_ 0.0_co_ -1.0_co_ 0.0_co_ 0.0_co_ -1.0]_sm_\t\tvar indices _eq_ [0_co_ 2_co_ 1_co_ 3_co_ 2_co_ 0]_sm_\t\tdynMesh.updateVerticesData(BABYLON.VertexBuffer.PositionKind_co_ positions)_sm_\t\tdynMesh.updateVerticesData(BABYLON.VertexBuffer.NormalKind_co_ normals)_sm_\t\tdynMesh.setIndices(indices)_sm_\t\twhich _eq_ _qt_modified_qt__sm_\t\tconsole.log(_qt_changed it to modified_qt_)_sm_\t}}// ------------------------------------------&lt_sm_/script&gt_sm_&lt_sm_/body&gt_sm_&lt_sm_/html&gt_sm__lt_/pre_gt__lt_p_gt_This seems to work just fine.  Thanks for bringing-up this subject_co_ because I was able to learn some things with you.  I hope I did not ruin the fun of your experiment by pasting this code.  As Deltakosh mentioned_co_ your experiment is also promoting the addition of a new function on the VertexData object... a sister to .applyToMesh() ...called .updateMesh().  Congratulations on your contribution to the babylon.js framework!  That is quite a good accomplishment for someone who is so new to the forum!  Well done!  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"gwenael","Date":"2014-05-27T07:44:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_39885_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_6645_qt_ data-ipsquote-username_eq__qt_Wingnut_qt_ data-cite_eq__qt_Wingnut_qt_ data-ipsquote-timestamp_eq__qt_1401010856_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_I think Gwenael talked about this once before.  The mesh_co_ created in createScene ONCE... should maintain its VBO_co_ and therefore Speps should be able to re-apply modified vertexData as many times as he wishes_co_ right?  Can someone tell us why the VBO for dynMesh... fell out of scope/availability_co_ if it did?  Thanks._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Since this talk_co_ the geometry system has been added and some fixes were provided so Wingnut your first solution may work with the latest babylon.js version. Nevertheless_co_ keep in mind that applyToMesh_co_ as mentioned by Deltakosh_co_ should be used for creation since it creates new instances of VBO like setVerticesData does. With the current babylon.js version you can update vertices data by calling setVerticesData even on non updatable meshes BUT each time it creates new VBO and so it_t_s not a good practice. You should use updateVerticesData like you did in your last answer. This function works only for updatable meshes._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"speps","Date":"2014-05-29T20:06:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks Wingnut for the wonderful explanation_co_ I_t_m excited with Babylon_t_s future support for vertex data_co_ the API looks much nicer._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I tried with your second method_co_ unfortunately_co_ I couldn_t_t see it working _dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs.com/playground/#YEUDZ_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/playground/#YEUDZ_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Supposedly_co_ with this code_co_ you should see the square growing and flipping normals every second._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In Firefox 29_co_ the console displays the message in the log happily (Updated mesh with counter ##) and doesn_t_t complain._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_However in SeaMonkey 2.26_co_ I get an error _dd_ this._vertexBuffers[a] is undefined (babylon.js line 13)._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2014-05-30T14:50:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_My pleasure.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Holy cow_co_ Speps_co_ you have quite the mad scientist experiment going in the playground_co_ there.  The code I pasted just flipped the plane_t_s normals via a button press.  You have taken it into a whole new realm_co_ there. I like looking at your code_co_ though.  It is pretty much over my head.  Maybe some nearby experts will take a look at it_co_ and have some comments.  I_t_ll be watching... and keep us posted here_co_ if you_t_d be so kind.  What you are trying is interesting_co_ and you are certainly not as _qt_newbie_qt_ as I first assumed.  That playground piece has some advanced stuff going-on... I like it.  Your counter and animationFrame stuff is quite fascinating_co_ at least to me._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"speps","Date":"2014-05-30T16:35:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_The animFrame stuff is from Pixi_co_ it_t_s using the API to get accurate timings for game loops. I guess that_t_s also what Babylon uses for the render loop but it_t_s not exposed like it is in Pixi._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I wanted some _qt_advanced_qt_ code because in my game (and this example illustrates how I will use the API). I will need to update the mesh very often (every couple of frames for example). I will have to create a mesh along a spline (like a tunnel or a road) but if Babylon doesn_t_t support that easily (maybe the next version)_co_ I might take a look at other engines._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I hope someone can figure this out_co_ I guess the error I get in SeaMonkey is something relevant._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2014-05-31T14:16:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This is my fault. The setVerticesData function signature is (values_co_ kind_co_ updatable) where updateVerticesData signature is (kind_co_ values). Really sorry about that_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I will unify that for next update on github (I will keep (kind_co_ values) pattern)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]