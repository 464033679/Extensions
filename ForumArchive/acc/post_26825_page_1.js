[{"Owner":"Dad72","Date":"2016-12-05T14:38:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEverything is said in the title. If I do _lt_em_gt_scene.metadata_lt_/em_gt__co_ this returns _lt_em_gt_null_lt_/em_gt_. If I made _lt_em_gt_sphere.metadata_lt_/em_gt__co_ same thing_co_ it returns _lt_em_gt_null_lt_/em_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUnless it is not done to return the node but to add. In this case oops_co_ I had not understood this property.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#75C29%230_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#75C29#0_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-12-05T18:22:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tmetadata is a field that you can use for your own purpose. null by default but you can use it to save user data\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2016-12-05T18:44:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ I see. I thought about that_co_ but I was not sure.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks DK\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-12-06T00:41:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi guys.  I did some playing.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI created this .babylon file in atom editor.  _lt_a href_eq__qt_https_dd_//github.com/Wingnutt/misc/blob/master/puppychow2.babylon_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/Wingnutt/misc/blob/master/puppychow2.babylon_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tJust 2 mesh... pasted-in text... fight fight fight until it json validated.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  (I_t_m not too good with my braces and brackets).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd I forgot to null-out the materials_co_ but no big deal.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNotice that the first mesh... the Plane... has _qt_metadata_qt__dd__qt_hello_fishlips!_qt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow into the PG...  _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2C8LVE%2312_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2C8LVE#12_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd there it is... hello_fishlips!  (see console)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI really only needed one mesh... to _qt_haul-in_qt_ the _qt_hello_fishlips_qt_ data_co_ and the mesh could be invisible.  In fact_co_ i could probably use a light_co_ or camera... or even less.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDad72_co_ you need to make that .babylon file just as tiny as possible_co_ and yet still have it deliver _qt_hello_fishlips_qt_ data... into the scene. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tOnce you have it really small (text editor trial_t_n_t_error)_co_ now make your server _lt_u_gt_generate_lt_/u_gt_ the same small file. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen server is successfully generating tiny .babylon file and _lt_em_gt_metadata_lt_/em_gt_ is still importing into scene properly... then tell server to JSON-serialize a JS object_co_ and put THAT string into _lt_em_gt_metadata._lt_/em_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe objective is to retrieve JS object from server... into scene... using serialize-at-server_co_ de-serialize (parse) -at-scene. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tA tiny .babylon file... is being used as a wheelbarrow...  or as FedEx.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tIf you get THAT far... then try serializing some HUGE object at the server... and see if the metadata wheelbarrow has a strong tire and good load springs.  Can you bring-in a 1 meg string?  5 meg?  10 meg?  Wow! \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you continue tests... could you report your discoveries_co_ please?  I would be interested in knowing how much string length... we can _qt_haul into a scene_qt_... with the _lt_em_gt_metadata _lt_/em_gt_wheelbarrow.  thx.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2016-12-06T01:47:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_153758_qt_ data-ipsquote-contentid_eq__qt_26825_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1480984902_qt_ data-ipsquote-userid_eq__qt_5733_qt_ data-ipsquote-username_eq__qt_Wingnut_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t59 minutes ago_co_ Wingnut said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tIf you continue tests... could you report your discoveries_co_ please?  I would be interested in knowing how much string length... we can _qt_haul into a scene_qt_... with the _lt_em_gt_metadata _lt_/em_gt_wheelbarrow.  thx.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI do not think there_t_s any particular limit if we send a string Json.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut I_t_m still not sure what the metadata property is useful for. What does it do in the end?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-12-06T03:13:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIn your case_co_ it would contain a Collection object... holding editorEvent objects_co_ or at least _qt_entries_qt_.  Each editorEvent object contains one _qt_action_qt_ by a user.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhich node changed_co_ which property changed_co_ what time was the change_co_ which user-editor changed it_co_ etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe server would be continuously publishing a fresh eventCollection.babylon to a folder.  It always contains ALL of the semi-recent editorEvents from all scene collaborators.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn a way_co_ that server-generated_co_ continuously-fresh eventCollection file... is a radio broadcasting tower.  It is always broadcasting a fresh list (collection) of _qt_What has everyone been doing in their editors_co_ recently_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen one of your users/editors retrieves a fresh eventCollection_co_ it parses the metadata string into being a Collection object packed with _qt_recent editor actions from everyone_qt_... and then it checks WHICH of these events it has already _qt_serviced_qt__co_ and which it hasn_t_t.  (it updates itself)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDoes editor/user #3 have a mesh scaling to do on a red box (a scaling that was done by editor/user #1)? (an un-serviced event from another editor).   Then do it.  All editors/users are trying to _qt_stay fresh_qt_ per the eventCollection.babylon file.  Possibly every 15 seconds_co_ all _qt_subscribed_qt_ editors... go get the freshest eventCollection.babylon file... and check it for new editorEvents (from others).  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAND_co_ everytime a user does a change to a scene... it must be immediately broadcast from editor to server_co_ and then server makes a new eventCollection.babylon file (adding that editorEvent to the DB that the server is maintaining).  After server adds editorEvent to its DB object_co_ it serializes that DB object_co_ and writes a new eventCollection.babylon file... with THAT serialization string in the metadata.  In less than 15 secs_co_ all subscribed editors will pull a fresh copy of that file... grab the metadata_co_ JSON parse it into a perfect clone of the server_t_s editorEvent DB... and start looking for new events (un-serviced events).  The editor will _qt_check the mail_qt__co_ so-to-speak.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAre there any instructions for changes in the shared scene?  If so_co_ do them... and then flag that event as _qt_serviced_qt_.  You don_t_t want any editor to do a change twice_co_ right?  Avoid accidental _qt_double servicing_qt_ of an arriving editorEvent.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWith me?  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAll editors_t_/users_t_ scenes are automatically retrieving eventCollection.babylon OFTEN... and checking _qt_What has changed?_qt_.  _qt_What_t_s new?_qt_  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tAt some point_co_ you will have to delete old events from the DB_co_ so it doesn_t_t get too big.  Events over 1 minute old... get deleted... because the server assumes that all _qt_listeners_qt_ have  gotten the fresh mail bag by then.  For collaborations of 20 editors/users all working on same scene... maybe 2 minutes.  EditorEvents older than 2 minutes... are removed from the _qt_What_t_s New?_qt_ list.... forever gone.  (or at least stored in the servers _qt_allSessionEvents_qt_ big database).  By storing all session events_co_ you can _qt_replay_qt_ the session in an editor_co_ too.  The scene could re-draw itself... simply by _qt_playing back_qt_ all the recorded editorEvents from all the users during that session.  FUN!  An odd type of SAVE_co_ eh?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis allows _qt_late arrivers_qt_ to the collaboration... to get _qt_caught up_qt__co_ too.  The server can send them a _qt_special collection_qt_ (a third .babylon file... maybe called _qt_catchUp.babylon_qt_?)... which contains ALL editorEvents from ALL users since the start of the collaboration session.  It contains all _qt_deltas_qt_ (changes) to the main scene file... that all the collaborators have done_co_ so far.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNeat_co_ huh?  The ultimate _qt_Who has done what?_qt_ central log.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI wonder what data an EditorEvent object will need to contain.  Essentially_co_ every action that can be done in an editor... which everyone needs to have _qt_broadcasted_qt_.... must have its own _lt_em_gt_type_lt_/em_gt_ of event.  For example_co_ there will be scaling events_co_ and positioning events_co_ and rotation events_co_ and material events_co_ and and and... LOTS of different kinds of events.  They all go into the server_t_s _qt_master event bucket_qt_... and are used to generate the next latest _qt_what_t_s new?_qt_ eventCollection.  (and to help generate big fat catchUp.babylon files for late arrivers to the session... with the help of the master collection of allSessionEvents maintained at server).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWeird_co_ huh?  Client-side packet pull.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  In a way_co_ it is also _qt_Editor TV_qt_ because one person can operate one editor... and hundreds can _lt_u_gt_watch_lt_/u_gt_ those changes happen in THEIR editors.... almost _qt_live_qt_.  Quite a nice learning tool.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-12-06T03:40:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tOh_co_ if you are asking what .metadata_t_s _lt_em_gt_purpose_lt_/em_gt_ _lt_u_gt_really_lt_/u_gt_ is... I don_t_t think it has a purpose.  We can use it for anything.  You would be using it as a suitcase/wheelbarrow.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  Lee Press-On Object-holder.  A fanny-pack attached to a .babylon file.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2016-12-06T11:35:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAnd in the case of adding new object to the scene? Is what a string Json can add the object to the scene. Modifying properties is quite simple to do_co_ but adding primitive objects or meshing complex_co_ I am interrogative about it. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor the system of event I thought to create a file per user connected and each file would have a timestamp to recover the files below the current timestamp_co_ then delete them when they are updated.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI prefer to create several small files (small package) and one per user for the same event. But I wonder about the creation of objects on the scenes. Will I have to perform functions like_dd_ SceneLoader.ImportMesh ? Or is that a string json can add the object to the scene?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2016-12-06T13:50:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYeah_co_ good questions... good thinking.  I would use a createMesh-type editorEvent.  When an editor/user _qt_sees_qt_ a new createMesh-type editorEvent arrive_co_ it _qt_harvests_qt_ a bunch of data about meshtype_co_ mesh size_co_ subdivs_co_ name_co_ lots of data that was inserted into the editorEvent at the point of creation.  This createMesh editorEvent contains everything needed... for another client (a remote client) to assemble a string like _qt_BABYLON.MeshBuilder.CreateSomething(_qt_\\_qt_ + createMeshEditorEvent.name +_qt_\\_qt__co_ etc etc.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe editorEvent _qt_processor_qt_ built into each editor... can _qt_assemble_qt_ (derive) JS strings (from inbound createMesh editorEvents) that can be locally evalled.  When they are evalled_co_ they create the mesh_co_ same as if the local user executed that BJS command.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBUT... none of the editors will have saved TheBigScene.babylon.  At the end of a session_co_ somebody _lt_em_gt_must_lt_/em_gt_ serialize/save their entire scene to the server... or else future sessions won_t_t start with _qt_the latest big scene_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt won_t_t be easy.  Two important parts in each editor_dd_  editorEventCreator() and editorEventReader_Interpreter_Servicer().  In essence_co_ you are adding EditorProgrammingLanguage to the editors.  Let_t_s call it EPL.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tEach EPL _qt_command_qt_ starts as an editorEvent.  And your new EPL interpretter... knows what to do with incoming createMesh-type EditorEvent_t_s.  (let_t_s call them CMEE_t_s).  It knows how to convert an arriving CMEE... into a strip of JS_co_ and then be locally eval_t_d (to create the mesh in the local scene).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAgain_co_ this action has NOT saved the change to the _qt_big shared scene_qt_.  Perhaps... after every 200 editorEvents_co_ one of the editors saves the full scene back to the server (possibly behind the scenes_co_ unknown to the collaborators.)  Or perhaps the _qt_big scene_qt_ is only saved when the LAST collaborator remaining in the session... closes their editor_co_ and thus ends the session.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou are starting to ask very difficult questions.  I am just guessing and predicting_co_ but... you will want to give your editors as much power as possible.  To do that_co_ createMesh will need to be one of your editorEvent service-types.  At each editor... you might create an _qt_EditorEvent EventType Marshaller_qt_.  It _qt_sorts_qt_ editorEvents like a post office worker might sort letters.  CreateMesh-type packets [editorEvents] will be sent to the CreateMesh Service Handler.  PropertyChange packets will be sent to the PropertyChangeServiceHandler.  Each serviceType has its own serviceHandler.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut_co_ if you are going to allow complex mesh _lt_em_gt_modelling _lt_/em_gt_in your editors... that is much more difficult.  Or if you are going to allow a user to import a mesh... then that user_t_s editor must build a LoadMesh-type editorEvent... and send it to everybody.  (Upon arriving at an editor_co_ that packet-type would be marshalled to the LoadMeshServiceHandler.)  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tThis is one way to do it.  I once created a similar system_co_ except it used little XML packets_co_ with MANY packet _qt_service types_qt_.  The server rarely logged_co_ built_co_ or listened-to these XML packets.  The server simply re-broadcast ALL inbound packets.... to all listening clients.  (all users in _qt_the room_qt_).  At each client_co_ inbound XML packets were sorted to their correct serviceHandlers_co_ and their contained data used to make the changes/actions. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy client was a browser-based CSS-ready chat client_co_ so I had _qt_send chat line_qt_ service_co_ _qt_play sound_qt_ service_co_ showPicture service_co_ embedVideo service_co_ and _qt_embed vrml_qt_ service_co_ etc.  (it was multi-media chat).  Any single user.. could put-on a multi-media show for all other listeners.  (storytelling).  They MUST use media already published on the web... to tell the story.  Multi-media DJ.  In fact_co_ there was a automatic _qt_Can everyone play this mimetype?_qt_ checker packet.  It would find users in room who were not prepared to play certain media types_co_ and it would report WHICH users couldn_t_t _qt_play_qt_ the media... before the DJ fired the _qt_media cannon_qt_.  This helped people help each other... get mimetypes assigned to media players... so EVERY listener in the room... could enjoy the media type.  (esp true for video types).  It was a _qt_Who can play .mp4 and who can_t_t... in this room?_qt_-service.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  Failed-media-play prevention system. _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tBut it is the same as yours.  You will have many event-types (service types) and serviceHandlers to handle all of them. My packet-marshaller was where I converted the XML in the packet (parsed it)... to a forMyPurpose object.  Main thing_co_ it put &lt_sm_serviceType&gt_sm_ _lt_strong_gt_this info_lt_/strong_gt_ &lt_sm_/serviceType&gt_sm_ into _lt_em_gt_forMyPurposeObject.type_lt_/em_gt_.  As soon as the marshaller (mail sorting person) determined what serviceType_co_ it sent that forMyPurpose _lt_em_gt_middleware_lt_/em_gt_ object... to the correct serviceHandler for THAT serviceType.  By keeping your serviceHandlers specific for a certain serviceType (a binding between TYPE and HANDLER)... then it is real easy to add new serviceTypes and serviceHandlers to the client... in the future.  They are _qt_modular_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLets pretend... that you will allow text chat among all collaborators.  Now_co_ you add the ChatService as one of the legal eventTypes that an editor can send and receive.  You really have only 3 steps to do... to add chatService.  1. Teach each editor to _lt_u_gt_build_lt_/u_gt_ a OUTBOUND chatServicePacket with some text and maybe some inline CSS within it.  2.  Install a chatServiceHandler in each editor... that knows how to _lt_u_gt_read_lt_/u_gt_/handle INBOUND chatServicePackets.  3.  Tell each editor_t_s marshaller/packetSorter... that the chatService is now a _qt_legal_qt_ packet type... because the chatServiceHandler is available to receive packets.  ChatService has been _qt_registered_qt_ as a legal packet type.  It is _qt_open for business_qt_.  heh\n_lt_/p_gt_\n\n_lt_p_gt_\n\tLet_t_s pretend you want to add a _qt_texture preview_qt_ service... where a popup window opens and everyone_t_s editor loads a picture into it.  _qt_What do you guys think of THIS texture?_qt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSame procedure.  You would _qt_register_qt_ the texturePreviewService as a legal serviceType for the marshaller (bind this serviceType to a serviceHandler).  Install a serviceHandler that knows what to do-with an inbound texturePreviewService packet... and then you have registered a new service for all your editors.  A texturePreviewService packet (editorEvent)... probably has very little data in it.  Mostly_co_ timestamp_co_ a URL_co_ and perhaps WHO SENT THIS.  One user is _qt_requesting_qt_ that all other editors... open SOME URL in a pop-up window. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tA considerate person would do permissions_co_ too.  _qt_Jimmy would like you to view a texture in a popup window.  Ok?  Y/N?_qt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis keeps users from spamming each other with pornography in the editor_t_s popup window.  _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tIn my now-abandoned multi-media chat client (called Xoozilla)_co_ you could send _qt_playAudioRequest_qt_ packets to each other_co_ too.  For fun_co_ the server could send playAudio service packets to all users.  If 5 minutes had passed_co_ and no users had sent chatService packets (the room was quiet)... then the server would start looping crickets chirping... in all clients.  hehe. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tXoozilla was created for multi-media story-telling_co_ as well as multi-media chat.  The playAudio service would append an &lt_sm_embed&gt_sm_ or &lt_sm_object&gt_sm_ HTML element onto each chatter_t_s DOM-based chat screen... with a URL installed.  When that &lt_sm_embed&gt_sm_ was appended onto the user_t_s DOM tree_co_ their own browser would go find the web-published audio file_co_ and start playing it.  SO_co_ the playAudio serviceHandler (available on each client)... created an &lt_sm_embed&gt_sm_ element_co_ installed the URL_co_ and then appended it to &lt_sm_chatwindow&gt_sm_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSorry for being so long-winded... but... I wanted to give you the few ideas I have.  You will likely have BETTER ideas than mine.  When I wrote my chat client... I was like a baby with a chainsaw.  Just making a mess and experimenting_co_ but the proof of concept was successful. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou need packet creators (for outbound packets)... and a serviceMarshaller and serviceHandlers (for inbound packets).  My clients used webby telnet clients... to connect to a telnet server... which essentially just distributed all service packets to everyone who was _qt_in the chat room_qt_.  In effect_co_ _qt_broadcasting_qt_... with a MOO server (MUD/MUSH server).  (For text adventure games_co_ but I sent/received a different kind of text thru the server... xml packets - little XmlDocument-types.).  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tEPL.  Editor Programming Language.  A Dad72 Production.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  In the case of XML...  Dad72 Markup Language v1.0.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  When you invent a markup language (make-up your own tag names and document rules)... you store those tag definitions and document rules... in a thing called a DTD (document type declaration) and XML validators can use those DTD_t_s... to make sure your XML packets are _qt_valid_qt_.  More about that later_co_ as needed.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tPhew... so much talking by Wingnut_co_ huh?  Sorry.  Be well.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2016-12-06T15:32:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWoaw_co_ indeed_co_ it does a lot of reading. Ok_co_ I_t_m see what I_t_m gonna do._lt_br /_gt_\n\tOn the other hand my collaboration system will not be on remote editors of one another_co_ they will all on the same domain http (not local) connect with a session system in PHP.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThank you for all the information you gave me.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]