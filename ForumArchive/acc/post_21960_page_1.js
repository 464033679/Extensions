[{"Owner":"GrosSacASacs","Date":"2016-04-15T22:25:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI am not sure if this is a bug or not. When I use something like sphere.position.y _eq_ string1_sm_ if string1 can be converted into a number it will _co_ and this value is used to update what you see on the screen. So far so good.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow when I did sphere.position.y +_eq_ 1_sm_ I expected it to use the internal number it used to position ittself correctly on the y axis and to add 1 to it_co_ but instead used string1 as a basis_co_ and the result is far off.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhy does sphere.position.y _eq_ ... not transform into a number both sides the internal number but also the public number_sm_ what you get back when you look for sphere.position.y  again.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSee in the console_co_ in this playground\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1QFFPV%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1QFFPV#1_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Samuel Girardin","Date":"2016-04-15T22:36:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaybe you need to retrieve positions as string in a json file_co_ in this case juste use  parseFloat(_qt_3.5_qt_).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1QFFPV%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1QFFPV#2_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"GrosSacASacs","Date":"2016-04-15T22:40:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI know about parseFloat and how to bypass this problem_co_ what I want to know is_co_ why is the external sphere.position.y not updated with the same number that was internally used to calculate the sphere position in space ?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-04-16T15:43:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello there is no internal/external number. The position.y is a member and not a property.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSO when you set position.y _eq_ string_co_ you change the internal value\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2016-04-16T16:08:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_125194_qt_ data-ipsquote-contentid_eq__qt_21960_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1460760001_qt_ data-ipsquote-userid_eq__qt_20346_qt_ data-ipsquote-username_eq__qt_GrosSacASacs_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t17 hours ago_co_ GrosSacASacs said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tI know about parseFloat and how to bypass this problem_co_ what I want to know is_co_ why is the external sphere.position.y not updated with the same number that was internally used to calculate the sphere position in space ?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tWhen you set the y property to a string_co_ and then add 2 a few lines later_co_ those commands execute synchronously_co_ before Babylon has a chance to do anything. In other words_co_ doing_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_sphere.position.y _eq_ _qt_3.5_qt__sm_\n\nsphere.position.y +_eq_ 2_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tis exactly the same as doing_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var y _eq_ _qt_3.5_qt__sm_\n\ny +_eq_ 2_sm_\n\nsphere.position.y _eq_ y_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tor even_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_sphere.position.y _eq_ _qt_3.5_qt_ + 2_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThe code executes the same way_co_ Babylon doesn_t_t have anything to do with it.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"GrosSacASacs","Date":"2016-04-16T16:16:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI am not sure about that_co_ I looked at the babylon source a little bit and saw heavy Object.defineProperty usage. When y is changed maybe a setter function is called to handle that_co_ parseFloat it_co_ calculate the new position.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2016-04-16T16:50:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_125251_qt_ data-ipsquote-contentid_eq__qt_21960_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1460823404_qt_ data-ipsquote-userid_eq__qt_20346_qt_ data-ipsquote-username_eq__qt_GrosSacASacs_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t26 minutes ago_co_ GrosSacASacs said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tI am not sure about that_co_ I looked at the babylon source a little bit and saw heavy Object.defineProperty usage. When y is changed maybe a setter function is called to handle that_co_ parseFloat it_co_ calculate the new position.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIt could do that in principle but it doesn_t_t. _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ Mesh.position is a Vector3_co_ and if babylon_t_s core vector class defined setters to call parseFloat every time one of their coordinates changed I think that would affect performance..\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"GrosSacASacs","Date":"2016-04-16T21:18:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThe reason I say parseFloat or similar is called is that you need a number to determine the position of the sphere. So maybe it is indeed called elsewhere_co_ maybe in the renderloop_co_ that would also make sense with wha_lt_strong_gt_t Delkatosh _lt_/strong_gt_said\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2016-04-17T04:05:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_125272_qt_ data-ipsquote-contentid_eq__qt_21960_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1460841482_qt_ data-ipsquote-userid_eq__qt_20346_qt_ data-ipsquote-username_eq__qt_GrosSacASacs_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t6 hours ago_co_ GrosSacASacs said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThe reason I say parseFloat or similar is called is that you need a number to determine the position of the sphere. So maybe it is indeed called elsewhere_co_ maybe in the renderloop_co_ that would also make sense with wha_lt_strong_gt_t Delkatosh _lt_/strong_gt_said\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tBabylon isn_t_t calling parseFloat explicitly_co_ the string just gets converted back to a number once the engine starts doing math. Javascript is loose that way_co_ many of the math operators will implicitly cast to number types if they can.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var s _eq_ _qt_3.5_qt_\n\ns + 1       // _qt_3.51_qt_\ns * 2       // 7\ntypeof(s*2) // number_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI haven_t_t checked_co_ but probably the first thing BJS does with the position vector is transform it_co_ meaning it gets multiplied_co_ so the results don_t_t wind up breaking anything.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNote however_co_ that you should try to avoid misusing types this way for performance reasons. Modern Javascript VMs are fast because they do a good job of speeding up code that uses types consistently_co_ and if they can_t_t figure out what type each variable should be they tend to get slow.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"GrosSacASacs","Date":"2016-04-17T20:24:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tAll makes sense now_co_ thanks alot fenomas\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]