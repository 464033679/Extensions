[{"Owner":"Pab144","Date":"2018-10-04T18:25:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey there Babylonians_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow can I go about appending or importing multiple files into my babylon.js scene using something like a for() loop_co_ I have 28 files which add up to a ridiculous 30million plus verts and there is no way I can load them up all at once because i get an _qt_allocation size overflow_qt_ error on Firefox_co_ Chrome crashes_co_ and ironically it opens up on MS Edge but runs very slowly.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBecause of these errors caused by the 2.0GB size of my .babylon file I decided to break my model into 28 pieces all under 200MB so I could load them individually_co_ using the following code_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_            let sections_eq_[\n                _qt_background-site_qt__co_ _qt_section-1_qt__co_ _qt_section-2_qt__co_ _qt_section-3_qt__co_\n                _qt_section-4_qt__co_  _qt_section-5_qt__co_  _qt_section-6_qt__co_  _qt_section-7_qt__co_\n                _qt_section-8_qt__co_  _qt_section-9_qt__co_  _qt_section-10_qt__co_ _qt_section-11_qt__co_\n                _qt_section-12_qt__co_ _qt_section-13_qt__co_  _qt_section-14_qt__co_  _qt_section-15_qt__co_\n                _qt_section-16_qt__co_ _qt_section-17_qt__co_ _qt_section-18_qt__co_ _qt_section-19_qt__co_\n                _qt_section-20_qt__co_ _qt_section-21_qt__co_ _qt_section-22_qt__co_ _qt_section-23_qt__co_\n                _qt_section-24_qt__co_ _qt_section-25_qt__co_ _qt_section-26_qt__co_ _qt_section-27_qt__co_\n                _qt_section-28_qt_\n            ]_sm_\n\n            for(let i _eq_ 0_sm_ i &lt_sm_ sections.length_sm_ i++){\n                BABYLON.SceneLoader.ImportMesh(_qt__qt__co_ _qt_assets/site/_qt__co_ sections[i]+_qt_.babylon_qt_ _co_scene)_sm_\n            }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThis works on every browser_co_  and smoothly too.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ data-fileid_eq__qt_20342_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_10/house-test.jpg.9ab720507e3d1dedae840f21116822fd.jpg_qt_ rel_eq__qt__qt__gt__lt_img alt_eq__qt_house-test.thumb.jpg.bbf55222118a781694f3e868ebe36947.jpg_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_20342_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_10/house-test.thumb.jpg.bbf55222118a781694f3e868ebe36947.jpg_qt_ /_gt__lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEven though this works_co_ it breaks other things in my code like I can_t_t modify the imported model_t_s materials to add lightmaps_co_ I also can_t_t do things like set the target of my camera to the position of one of my models without getting an _qt_undefined_qt_ error.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAll help is welcomed.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2018-10-04T18:57:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou can only work on an imported mesh when you know it has loaded and so you need a callback function see _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1BAPRM%230_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1BAPRM#0_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"bghgary","Date":"2018-10-04T22:13:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tLoading assets is asynchronous_co_ so you have to wait for the load to complete before you can access the models that are loaded. Using callback functions is difficult as you will need to count the number of callbacks that have completed. This is much easier if you use promises. Here is an example_dd_ _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#U2KKMK%236_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#U2KKMK#6_lt_/a_gt_. In your case_co_ you should create a promises array and store each of the returned promise into that array and then call Promise.all on the array. Like this_dd_ _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#U2KKMK%237_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#U2KKMK#7_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pab144","Date":"2018-10-05T15:08:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_ll give promises a try_co_ callbacks might be to cumbersome for this particular problem.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ll post my results as soon as I have them.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThank you for the advice gentlemen.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-10-05T15:58:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tscene.executeWhenReady( () _eq_&gt_sm_ { console.log(_t_blah_t_)_sm_ } )_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tis also available.  I think it works better with Append() rather than ImportMesh().  This leaves all the accounting to the framework.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_  If you are having problems with memory and want to serialize_co_ then you would want to put the next Append inside of the callback_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_const sections_eq_[\n                _qt_background-site_qt__co_ _qt_section-1_qt__co_ _qt_section-2_qt__co_ _qt_section-3_qt__co_\n                _qt_section-4_qt__co_  _qt_section-5_qt__co_  _qt_section-6_qt__co_  _qt_section-7_qt__co_\n                _qt_section-8_qt__co_  _qt_section-9_qt__co_  _qt_section-10_qt__co_ _qt_section-11_qt__co_\n                _qt_section-12_qt__co_ _qt_section-13_qt__co_  _qt_section-14_qt__co_  _qt_section-15_qt__co_\n                _qt_section-16_qt__co_ _qt_section-17_qt__co_ _qt_section-18_qt__co_ _qt_section-19_qt__co_\n                _qt_section-20_qt__co_ _qt_section-21_qt__co_ _qt_section-22_qt__co_ _qt_section-23_qt__co_\n                _qt_section-24_qt__co_ _qt_section-25_qt__co_ _qt_section-26_qt__co_ _qt_section-27_qt__co_\n                _qt_section-28_qt_\n            ]_sm_\nlet i _eq_ 0_sm_\n\nfunction loadSection() {\n    if (i _eq__eq_ sections.length) \n        allLoaded()_sm_\n    else {\n        BABYLON.SceneLoader.Append(_qt__qt__co_ _qt_assets/site/_qt__co_ sections[i]+_qt_.babylon_qt_ _co_scene_co_ () _eq_&gt_sm_ {\n            i +_eq_ 1_sm_\n            loadSection()_sm_\n        })_sm_\n    }\n}\n\nfunction allLoaded() {\n    // normal post loading\n}\n\n// actually start it\nloadSection()_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]