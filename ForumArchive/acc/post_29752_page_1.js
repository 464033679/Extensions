[{"Owner":"AlbertTJames","Date":"2017-04-13T16:26:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI had trouble loading sounds and playing them directly at startup. I realised that the AssetManager calls the onFinish callback before loaded sounds _audioBuffer is set and are _readyToPlay.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI dont know if it was a designed choice but it would be really useful either ifÂ the asset manager waited by default for the readytoplay flag to be set_co_ or if there was an option to set when adding the job to the manager.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-04-13T16:28:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tPing _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5482-davrous/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5482_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5482-davrous/_qt_ rel_eq__qt__qt__gt_@davrous_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2017-04-13T16:35:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m not sure to understand your issue. Here_t_s the doc I_t_ve written on AssetManager + Sounds_dd_Â _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/overviews/playing_sounds_and_music#loading-a-sound-using-the-assets-manager_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/overviews/playing_sounds_and_music#loading-a-sound-using-the-assets-manager_lt_/a_gt_Â using this PG sample_dd_Â _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#PCY1J%238_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#PCY1J#8_lt_/a_gt_Â and this one is playing immediatly once loaded_dd_Â _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#PCY1J%2338_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#PCY1J#38_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCan you please share a PG of the issue you_t_ve got on your side?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDavid\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"AlbertTJames","Date":"2017-04-13T17:05:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tLooking at your PG I understand the way it was intended to work. The asset manager loads raw data_co_ then you state for each sound a callback when the Sound object will be finished transforming the data into readable sound (_audioBuffer) ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tÂ I see how I can fix my problem better on my end_co_ and I am not sure indeed that the behavior I am requesting is really relevant_co_ my bad.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo explain where my request come from is that I am building a little layer of abstraction above Babylon andÂ I have a function that can load a bunch of assets and store them into an external object to be used by different scenes and interact with the website too. I was intended for user to simply call this function with an object like so_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_taskObject.assetsToLoad _eq_ {\n      logo2_dd_ _t_/assets/experiment-js-light.svg_t__co_\n      heldenklage_dd_ {\n        path_dd_ _t_/assets/sounds/nietzscheHeldenklage.mp3_t__co_\n        type_dd_ _t_sound_t__co_\n      }_co_\n    }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tthe function would return a promise resolving when the assetManager finished all its work.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt was using the assetManager like that_dd_Â _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#PCY1J%2340_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#PCY1J#40_lt_/a_gt_Â \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnyways..Â I understand that I have to give a callback when creating the sound_co_ but in this context it is not ideal.Â \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI will just make a bunch of separate promises waiting for the sounds to be ready to play before resolving the main loader.Â \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut I am curious_co_ what takes time between AssetManager loading and the sound being processed ?Â \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"AlbertTJames","Date":"2017-04-13T17:32:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSo maybe - for this post not to be for nothing_co_ here is the solution I am using to make sure the sounds are ready before resolving.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe deferred function I am using is pretty basic_co_ adapted from somewhere_co_ can_t_t remember where.. maybe bluebird_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_function Deferred() {\n  this.resolve _eq_ null\n  this.reject _eq_ null\n\n  /* A newly created Pomise object.\n   * Initially in pending state.\n   */\n  this.promise _eq_ new Promise((resolve_co_ reject) _eq_&gt_sm_ {\n    this.resolve _eq_ resolve\n    this.reject _eq_ reject\n  })\n  Object.freeze(this)\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd there is the loading function_co_ there is a lot of elements that will be useful to nobody_co_ the two important part are surrounded by // IMPORTANT PART ++ // ðŸ˜™\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_loadAssets(assetObject _eq_ mandatory()_co_ scene _eq_ mandatory()_co_ assetFolder _eq_ _t__t_) {\n    if (assetObject.constructor !_eq__eq_ Object) {\n      throw new Error(_t_TaskObject.loadAssets_dd_ assetObject is not an Object_t_)\n    }\n\n    if ((assetFolder _eq__eq__eq_ _t__t_) &amp_sm_&amp_sm_ (typeof this.ASSETS_FOLDER !_eq__eq_ _t_undefined_t_)) {\n      assetFolder _eq_ this.ASSETS_FOLDER\n    }\n\n    const textureFormats _eq_ [_t_png_t__co_ _t_bmp_t__co_ _t_jpg_t__co_ _t_tiff_t__co_ _t_svg_t_]\n    const soundFormats _eq_ [_t_wav_t__co_ _t_mp3_t__co_ _t_flac_t__co_ _t_aac_t__co_ _t_mp4_t__co_ _t_ogg_t_]\n\n    const assetManager _eq_ new BABYLON.AssetsManager(scene)\n    const R _eq_ this.R\n\n    const binaryPromises _eq_ []\n\n    const names _eq_ Object.keys(assetObject)\n    let field\n    let type\n    let path\n    for (let i _eq_ 0_sm_ i &lt_sm_ names.length_sm_ i++) {\n      field _eq_ assetObject[names[i]]\n\n      if (field.constructor _eq__eq__eq_ String) {\n        path _eq_ this.ASSETS_FOLDER + field\n\n        if (textureFormats.indexOf(R.getFormat(path)) !_eq__eq_ -1) {\n          type _eq_ _t_texture_t_\n        } else if (soundFormats.indexOf(R.getFormat(path)) !_eq__eq_ -1) {\n          type _eq_ _t_sound_t_\n        } else {\n          console.warn(_t_TaskObject.loadAssets_dd_ asset invalid or not implement with shorthand function_t_)\n          type _eq_ _t_invalid_t_\n        }\n      } else if ((field.constructor _eq__eq__eq_ Object) &amp_sm_&amp_sm_ (Object.keys(field).includes([_t_path_t__co_ _t_type_t_]))) {\n        path _eq_ this.ASSETS_FOLDER + field.path\n        type _eq_ field.type\n      } else {\n        console.warn(_t_TaskObject.loadAssets_dd_ asset invalid or not implement with shorthand function_t_)\n        type _eq_ _t_invalid_t_\n      }\n\n      if (type _eq__eq__eq_ _t_texture_t_) {\n        const assetManagerTask _eq_ assetManager.addTextureTask(`${names[i]}Task`_co_ path)\n        assetManagerTask.onSuccess _eq_ function (task) {\n          R.add({\n            textures_dd_ {\n              [this.textureName]_dd_ task.texture_co_\n            }_co_\n          })\n        }.bind({\n          textureName_dd_ names[i]_co_\n        })\n      } else if (type _eq__eq__eq_ _t_sound_t_) {\n        // IMPORTANT PART ++++++++++ //\n        const assetManagerTask _eq_ assetManager.addBinaryFileTask(`${names[i]}Task`_co_ path)\n        assetManagerTask.onSuccess _eq_ function (task) {\n          const isReady _eq_ new Deferred()\n          binaryPromises.push(isReady.promise)\n          R.add({\n            sounds_dd_ {\n              [this.soundName]_dd_ new BABYLON.Sound(this.soundName_co_ task.data_co_ scene_co_ isReady.resolve)_co_\n            }_co_\n          })\n        }.bind({\n          soundName_dd_ names[i]_co_\n        })\n      }\n      // TODO all the rest such as Meshes.. what else ?\n    }\n\n    /* --- Create a Deferred promise that will resolve after loading is complete --- */\n    const loadDeferred _eq_ new Deferred()\n\n    assetManager.load()\n    assetManager.onFinish _eq_ function onFinish(tasks) {\n      debuglog(_t_TaskObject.loadAssets_dd_ tasks completed_t__co_ tasks)\n\n      // IMPORTANT PART +++++ //\n      Promise.all(binaryPromises).then(() _eq_&gt_sm_ loadDeferred.resolve(tasks))\n    }\n\n    return loadDeferred.promise\n  }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_br /_gt_\n\tAnyways_co_ thanks _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]