[{"Owner":"haestflod","Date":"2016-09-01T21:38:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_ I_t_m outlining the silhouette of a mesh when mouseovering by using this technique_dd__lt_br /_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#24758V%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#24758V#1_lt_/a_gt__lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI was originally only using 1 camera but I ran into antialiasing issues. The antialiasing was turned off when the postprocess was enabled on mouseover and then on when leaving creating a flicker on nearby meshes. So I am currently using 2 cameras like in that example. However after checking performance I noticed that adding the second camera doubles the draw calls going from (~70 -&gt_sm_ ~140)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIs there a way to tell second camera to only render the mouseovered meshes?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2016-09-01T21:43:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/Layermasks_and_Multi-cam_Textures_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/Layermasks_and_Multi-cam_Textures_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"haestflod","Date":"2016-09-02T14:59:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks that worked._lt_br /_gt__lt_br /_gt_\n\tFor those wondering what I did_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_// Main camera has default layerMask (0x0FFFFFFF)\n// Outline camera has layermask 0x20000000_sm_\n\n// When adding mesh to outline\nmesh.layerMask _eq_ 0x2FFFFFFF_sm_\n\n// When clearing the outline renderTarget (disabling outline)\nfor (let i _eq_ 0_sm_ i &lt_sm_ renderList.length_sm_ ++i){\n  renderList[i].layerMask _eq_ 0x0FFFFFFF_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]