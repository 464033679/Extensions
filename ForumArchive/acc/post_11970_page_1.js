[{"Owner":"ajselvig","Date":"2015-01-24T17:43:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ve implemented a basic scene that uses the ActionManager and OnIntersectionEnterTrigger to detect collisions between two meshes. However_co_ it seems like a new action manager needs to be created for every node in the scene_co_ and a new action for every _lt_em_gt_combination_lt_/em_gt_ of nodes in the scene_co_ if I want to execute code when any arbitrary pair of nodes collide. This leads to N! actions (where N is # of nodes in the scene)_co_ which can get out of control very quickly._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Is there a way to simply detect _lt_em_gt_all_lt_/em_gt_ intersection events that occur in the physics engine (I_t_m using Oimo) and execute a function? _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-24T17:49:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello intersections are not handled by the physics engine for performance reasons_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_And for performance reasons again we cannot check all meshes but only those which have OnIntersection triggers_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ajselvig","Date":"2015-01-24T17:56:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_But they _lt_em_gt_are_lt_/em_gt_ being checked at some point. Somewhere (I don_t_t know if it_t_s Babylon or Oimo)_co_ there is a little piece of code that says _qt_oh_co_ these two meshes collided_co_ let_t_s apply opposing forces and preserve momentum_co_ etc..._qt_. This happens for every mesh_co_ regardless of whether there has been an OnIntersectionEnterTrigger applied. All I_t_m looking for is a hook into that function._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-24T19:23:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_No _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ Intersections are checked ony for meshes that have OnIntersectionEnterTrigger/OnIntersectionExitTrigger or for meshes that are target of  OnIntersectionEnterTrigger/OnIntersectionExitTrigger _dd__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/babylon.scene.ts#L1023_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/babylon.scene.ts#L1023_lt_/a_gt__lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/babylon.scene.ts#L1241_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/babylon.scene.ts#L1241_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-01-24T23:44:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_@ajselvig_dd_ If I understand right_co_ then you can use Babylon to check collisions between specific meshes_co_ just like DK said. The collisions for _qt_everything_qt_ that you talk about are probably computed by Oimo. Maybe that_t_s more like a question for the folks at Oimo JS. Maybe they fire some event when their physics engine computes those collisions? But I do not know about that (nor could I find anything about this when googling it)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Maybe the question is more about what you want to achieve in the end?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I assume you got a lot of meshes. So checking all combinations is out of the question? I remember I read something about efficient collision detection a while ago where a similar problem was mentioned. The idea there was not to check everything with everything but to limit the objects that need to be checked. Therefore (if I remember it right) they introduced a second step before the actual collision detection where they try to find the objects that need checking before actually running the collision detection._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So lets assume you have 10 000 meshes and you want an event when two of them collide. Instead of checking each of the 10 000 with all the other 9 999 you first find out what other meshes are actually close to the current one and then only check those. Maybe you can cluster your scene into a fixed number of sections and for each mesh that you check collisions with you only check those that are in the same section? Of course if you are checking a mesh that_t_s close to the border of one sections you might want to check collisions with the meshes that are in this close sector_co_ too. So instead of checking all 10000 you only check those that are in one of the four sections (try to imagine 4 cube like sections arranged in a 2x2 matrix) close to the one you are currently trying to find collisions with. In the worse case all 10 000 are in those four sections_co_ but then you might want to increase the number of sections. The number of sections could even be set dynamically_dd_ start with 20 (big) sections and if the number of close meshes is too high you increase the number of (now smaller) sections until you get a reasonable number of objects that you need to check collision with._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You get what I mean? Not sure if I managed to explain it right. Well_co_ was just an idea... let me know what you think ... maybe it_t_s too much overhead and just makes things worse  _sm_P_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Edit_dd_ maybe I even found the article from back then_dd_ _lt_a href_eq__qt_http_dd_//buildnewgames.com/broad-phase-collision-detection/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//buildnewgames.com/broad-phase-collision-detection/_lt_/a_gt_ not sure if it was this one but somehow looks familiar. The thing that I described is the Spatial Partitioning_co_ I assume_co_ so you might want to look into that. How to implement it depends on your sue case_co_ of course. What I described above was just my very basic idea of how it works. Maybe one of the smarter than me guys around here has a better approach for you _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ajselvig","Date":"2015-01-25T00:02:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_&gt_sm_&gt_sm_ The collisions for _qt_everything_qt_ that you talk about are probably computed by Oimo. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Yes_co_ that seems to be the case. It_t_s certainly happening_co_ just not at the Babylon level. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_&gt_sm_&gt_sm_ _lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_But I do not know about that (nor could I find anything about this when googling it)._lt_/span_gt__lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_Right_co_ I also tried googling it. The engine seems to work very well_co_ but the documentation is almost non-existent. _lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_&gt_sm_&gt_sm_ _lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_Instead of checking each of the 10 000 with all the other 9 999 you first find out what other meshes are actually close to the current one and then only check those..._lt_/span_gt__lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(40_co_40_co_40)_sm_font-family_dd_helvetica_co_ arial_co_ sans-serif_sm__qt__gt_I get what you_t_re saying_co_ and it definitely make sense. I would tend to believe that Oimo is already using a similar algorithm for their collision detection_co_ though. After all_co_ these calculations _lt_em_gt_do_lt_/em_gt_ have to be performed for their system to work correctly. Writing my own is possible_co_ but I_t_d like to reduce the complexity and tie into their system if I can. _lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ll try to investigate further to see if there_t_s a way I can hack into Oimo. Thanks for the responses._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-01-25T13:20:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Oimo has a CollisionDetector class_co_ _lt_span style_eq__qt_color_dd_rgb(0_co_134_co_179)_sm_font-family_dd_Consolas_co_ _t_Liberation Mono_t__co_ Menlo_co_ Courier_co_ monospace_sm_font-size_dd_12px_sm__qt__gt_OIMO_lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(51_co_51_co_51)_sm_font-family_dd_Consolas_co_ _t_Liberation Mono_t__co_ Menlo_co_ Courier_co_ monospace_sm_font-size_dd_12px_sm__qt__gt_._lt_/span_gt__lt_span style_eq__qt_color_dd_rgb(121_co_93_co_163)_sm_font-family_dd_Consolas_co_ _t_Liberation Mono_t__co_ Menlo_co_ Courier_co_ monospace_sm_font-size_dd_12px_sm__qt__gt_CollisionDetector _lt_/span_gt_which is the parent class of 4 different implementation of collision detectors. They don_t_t have any callback (something oike onCDollisionDetected)_co_ but they have a detectCollision function_co_ what is being triggered while updating Oimo_t_s manifest._lt_/p_gt__lt_p_gt_Maybe this is the place to look at... But this is truly out of Babylon_t_s scope _dd_-)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ajselvig","Date":"2015-01-25T16:28:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks for the direction!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]