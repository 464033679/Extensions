[{"Owner":"Wingnut","Date":"2017-03-13T18:22:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1IAR36%2312_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1IAR36#12_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat series_co_ and that playground... is SO cool!  And I love the questions and answers_co_ too.  _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/23736-rolento/?do_eq_hovercard_qt_ data-mentionid_eq__qt_23736_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/23736-rolento/_qt_ rel_eq__qt__qt__gt_@Rolento_lt_/a_gt_ and other readers... NasimiAsl_t_s ShaderBuilder extension uses a programming style called Fluent... and that_t_s why it looks so unusual. You can learn more about Fluent interfaces _lt_a href_eq__qt_https_dd_//www.sitepoint.com/javascript-like-boss-understanding-fluent-apis/_qt_ rel_eq__qt_external nofollow_qt__gt_here_lt_/a_gt__co_ and at other web places.  Funny-looking stuff_co_ huh?  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  (Just in case Rolento was thinking _qt_What the hell language is THIS thing programmed-in?_qt_)  _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tHey Naz... what is best way to _qt_display_qt_ entire shader program(s) instead of compiling?  Is there a way to _qt_view_qt_?  Do we view _qt_result_qt_?  And_co_ can we paste that _qt_result_qt_ into Babylon.ShadersStore_co_ and HTML &lt_sm_SCRIPT&gt_sm_ elements_co_ and into .fx files?  Curious.  I like to _lt_em_gt_see_lt_/em_gt_ code that ShaderBuilder _qt_assembles_qt_ (if possible).  (thx).  Again_co_ great thread.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"NasimiAsl","Date":"2017-03-13T19:02:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_167054_qt_ data-ipsquote-contentid_eq__qt_28531_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1489429375_qt_ data-ipsquote-userid_eq__qt_5733_qt_ data-ipsquote-username_eq__qt_Wingnut_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t41 minutes ago_co_ Wingnut said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1IAR36%2312_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1IAR36#12_lt_/a_gt_\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThat series_co_ and that playground... is SO cool!  And I love the questions and answers_co_ too.  _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/23736-rolento/?do_eq_hovercard_qt_ data-mentionid_eq__qt_23736_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/23736-rolento/_qt_ rel_eq__qt__qt__gt_@Rolento_lt_/a_gt_ and other readers... NasimiAsl_t_s ShaderBuilder extension uses a programming style called Fluent... and that_t_s why it looks so unusual. You can learn more about Fluent interfaces _lt_a href_eq__qt_https_dd_//www.sitepoint.com/javascript-like-boss-understanding-fluent-apis/_qt_ rel_eq__qt_external nofollow_qt__gt_here_lt_/a_gt__co_ and at other web places.  Funny-looking stuff_co_ huh?  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  (Just in case Rolento was thinking _qt_What the hell language is THIS thing programmed-in?_qt_)  _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tHey Naz... what is best way to _qt_display_qt_ entire shader program(s) instead of compiling?  Is there a way to _qt_view_qt_?  Do we view _qt_result_qt_?  And_co_ can we paste that _qt_result_qt_ into Babylon.ShadersStore_co_ and HTML &lt_sm_SCRIPT&gt_sm_ elements_co_ and into .fx files?  Curious.  I like to _lt_em_gt_see_lt_/em_gt_ code that ShaderBuilder _qt_assembles_qt_ (if possible).  (thx).  Again_co_ great thread.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_pre_gt_\n_lt_code_gt_precision highp float_sm_\n#extension GL_OES_standard_derivatives _dd_ enable\n\n\n \n                       varying vec2 vuv_sm_\n                       varying vec3 pos_sm_\n                       varying vec3 nrm_sm_\n                       uniform  sampler2D  txtRef_0_sm_\n                       uniform  sampler2D  txtRef_1_sm_\n                       uniform  sampler2D  txtRef_2_sm_\n                       uniform  vec3 center_sm_\n                       uniform  vec3 camera_sm_\n                       uniform  float time_sm_\n                       vec3 random3(vec3 c) {   float j _eq_ 4096.0*sin(dot(c_co_vec3(17.0_co_ 59.4_co_ 15.0)))_sm_   vec3 r_sm_   r.z _eq_ fract(512.0*j)_sm_ j *_eq_ .125_sm_  r.x _eq_ fract(512.0*j)_sm_ j *_eq_ .125_sm_ r.y _eq_ fract(512.0*j)_sm_  return r-0.5_sm_  } \n                       float rand(vec2 co){   return fract(sin(dot(co.xy _co_vec2(12.9898_co_78.233))) * 43758.5453)_sm_ } \n                       const float F3 _eq_  0.3333333_sm_const float G3 _eq_  0.1666667_sm_\n                       float simplex3d(vec3 p) {   vec3 s _eq_ floor(p + dot(p_co_ vec3(F3)))_sm_   vec3 x _eq_ p - s + dot(s_co_ vec3(G3))_sm_  vec3 e _eq_ step(vec3(0.0)_co_ x - x.yzx)_sm_  vec3 i1 _eq_ e*(1.0 - e.zxy)_sm_  vec3 i2 _eq_ 1.0 - e.zxy*(1.0 - e)_sm_   vec3 x1 _eq_ x - i1 + G3_sm_   vec3 x2 _eq_ x - i2 + 2.0*G3_sm_   vec3 x3 _eq_ x - 1.0 + 3.0*G3_sm_   vec4 w_co_ d_sm_    w.x _eq_ dot(x_co_ x)_sm_   w.y _eq_ dot(x1_co_ x1)_sm_  w.z _eq_ dot(x2_co_ x2)_sm_  w.w _eq_ dot(x3_co_ x3)_sm_   w _eq_ max(0.6 - w_co_ 0.0)_sm_   d.x _eq_ dot(random3(s)_co_ x)_sm_   d.y _eq_ dot(random3(s + i1)_co_ x1)_sm_   d.z _eq_ dot(random3(s + i2)_co_ x2)_sm_  d.w _eq_ dot(random3(s + 1.0)_co_ x3)_sm_  w *_eq_ w_sm_   w *_eq_ w_sm_  d *_eq_ w_sm_   return dot(d_co_ vec4(52.0))_sm_     }  \n                       float noise(vec3 m) {  return   0.5333333*simplex3d(m)   +0.2666667*simplex3d(2.0*m) +0.1333333*simplex3d(4.0*m) +0.0666667*simplex3d(8.0*m)_sm_   } \n                       float dim(vec3 p1 _co_ vec3 p2){   return sqrt((p2.x-p1.x)*(p2.x-p1.x)+(p2.y-p1.y)*(p2.y-p1.y)+(p2.z-p1.z)*(p2.z-p1.z))_sm_ }\n                       vec2  rotate_xy(vec2 pr1_co_vec2  pr2_co_float alpha) {vec2 pp2 _eq_ vec2( pr2.x - pr1.x_co_   pr2.y - pr1.y )_sm_return  vec2( pr1.x + pp2.x * cos(alpha*3.14159265/180.) - pp2.y * sin(alpha*3.14159265/180.)_co_pr1.y + pp2.x * sin(alpha*3.14159265/180.) + pp2.y * cos(alpha*3.14159265/180.))_sm_} \n vec3  r_y(vec3 n_co_ float a_co_vec3 c) {vec3 c1 _eq_ vec3( c.x_co_  c.y_co_   c.z )_sm_c1.x _eq_ c1.x_sm_c1.y _eq_ c1.z_sm_vec2 p _eq_ rotate_xy(vec2(c1.x_co_c1.y)_co_ vec2( n.x_co_  n.z )_co_ a)_sm_n.x _eq_ p.x_sm_n.z _eq_ p.y_sm_return n_sm_ } \n vec3  r_x(vec3 n_co_ float a_co_vec3 c) {vec3 c1 _eq_ vec3( c.x_co_  c.y_co_   c.z )_sm_c1.x _eq_ c1.y_sm_c1.y _eq_ c1.z_sm_vec2 p _eq_ rotate_xy(vec2(c1.x_co_c1.y)_co_ vec2( n.y_co_  n.z )_co_ a)_sm_n.y _eq_ p.x_sm_n.z _eq_ p.y_sm_return n_sm_ } \n vec3  r_z(vec3 n_co_ float a_co_vec3 c) {  vec3 c1 _eq_ vec3( c.x_co_  c.y_co_   c.z )_sm_vec2 p _eq_ rotate_xy(vec2(c1.x_co_c1.y)_co_ vec2( n.x_co_  n.y )_co_ a)_sm_n.x _eq_ p.x_sm_n.y _eq_ p.y_sm_return n_sm_ }\n                       vec3 normalMap() { vec4 result _eq_ vec4(0.)_sm_ result _eq_ vec4(0.5)_sm__sm_ \n                  result _eq_ vec4( normalize( nrm -(normalize(result.xyz)*2.0-vec3(1.))*(max(-0.5_co_min(0.5_co_0.5)) ))_co_1.0)_sm_ return result.xyz_sm_}\n                       float specularMap() { vec4 result _eq_ vec4(0.)_sm_float float_result _eq_ 0._sm_ float_result _eq_ 1.0_sm__sm_ return float_result _sm_}\n                       \n                        \nvoid main(void) { \n     int discardState _eq_ 0_sm_\n     vec4 result _eq_ vec4(0.)_sm_\n     vec3 centeri_2_ _eq_ center_sm_\nvec3 ppo_2_ _eq_ r_z( vec3(vuv.x_co_vuv.y_co_0.)_co_0._co_centeri_2_)_sm_  \n ppo_2_ _eq_ r_y( ppo_2__co_0._co_centeri_2_)_sm_  \n ppo_2_ _eq_ r_x( ppo_2__co_0._co_centeri_2_)_sm_ \nvec3 nrm_2_ _eq_ r_z( normalMap()_co_0._co_centeri_2_)_sm_  \n nrm_2_ _eq_ r_y( nrm_2__co_0._co_centeri_2_)_sm_  \n nrm_2_ _eq_ r_x( nrm_2__co_0._co_centeri_2_)_sm_  \n                        vec4 color_2_ _eq_ texture2D(txtRef_0 _co_ppo_2_.xy*vec2(1._co_1.)+vec2(0._co_0.))_sm_\n                        if(nrm_2_.z &lt_sm_ 1.){ \n                       result _eq_ vec4(color_2_.rgb _co_ 1.)_sm_ \n                       }vec4 resHelp_2_ _eq_ result_sm_ vec4 result_1 _eq_ vec4(0.)_sm_\n                  result_1 _eq_ result_sm_result _eq_ resHelp_2_ _sm_vec3 centeri_3_ _eq_ center_sm_\nvec3 ppo_3_ _eq_ r_z( vec3(vec2(vuv*7.).x_co_vec2(vuv*7.).y_co_0.)_co_0._co_centeri_3_)_sm_  \n ppo_3_ _eq_ r_y( ppo_3__co_0._co_centeri_3_)_sm_  \n ppo_3_ _eq_ r_x( ppo_3__co_0._co_centeri_3_)_sm_ \nvec3 nrm_3_ _eq_ r_z( normalMap()_co_0._co_centeri_3_)_sm_  \n nrm_3_ _eq_ r_y( nrm_3__co_0._co_centeri_3_)_sm_  \n nrm_3_ _eq_ r_x( nrm_3__co_0._co_centeri_3_)_sm_  \n                        vec4 color_3_ _eq_ texture2D(txtRef_1 _co_ppo_3_.xy*vec2(1._co_1.)+vec2(0._co_0.))_sm_\n                        if(nrm_3_.z &lt_sm_ 1.){ \n                       result _eq_ vec4(color_3_.rgb _co_ 1.)_sm_ \n                       }vec4 resHelp_3_ _eq_ result_sm_ vec4 result_2 _eq_ vec4(0.)_sm_\n                  result_2 _eq_ result_sm_result _eq_ resHelp_3_ _sm_vec3 centeri_4_ _eq_ center_sm_\nvec3 ppo_4_ _eq_ r_z( vec3(vec2(vuv*20.).x_co_vec2(vuv*20.).y_co_0.)_co_0._co_centeri_4_)_sm_  \n ppo_4_ _eq_ r_y( ppo_4__co_0._co_centeri_4_)_sm_  \n ppo_4_ _eq_ r_x( ppo_4__co_0._co_centeri_4_)_sm_ \nvec3 nrm_4_ _eq_ r_z( normalMap()_co_0._co_centeri_4_)_sm_  \n nrm_4_ _eq_ r_y( nrm_4__co_0._co_centeri_4_)_sm_  \n nrm_4_ _eq_ r_x( nrm_4__co_0._co_centeri_4_)_sm_  \n                        vec4 color_4_ _eq_ texture2D(txtRef_0 _co_ppo_4_.xy*vec2(1._co_1.)+vec2(0._co_0.))_sm_\n                        if(nrm_4_.z &lt_sm_ 1.){ \n                       result _eq_ vec4(color_4_.rgb _co_ 1.)_sm_ \n                       }vec4 res_5_ _eq_ vec4(0.)_sm_\nres_5_.x _eq_  result.x_sm_\nres_5_.y _eq_  result.y_sm_\nres_5_.z _eq_  result.z_sm_\nres_5_.w _eq_  result.w_sm_\nres_5_  _eq_  vec4(result.x*noise(pos*0.08+vec3(0._co_time*0.01_co_0.))_co_result.x*noise(pos*0.08+vec3(0._co_time*0.01_co_0.))_co_result.x*noise(pos*0.08+vec3(0._co_time*0.01_co_0.))_co_result.x*noise(pos*0.08+vec3(0._co_time*0.01_co_0.)))_sm_\nresult _eq_ res_5_ _sm_vec4 resHelp_5_ _eq_ result_sm_ vec4 result_3 _eq_ vec4(0.)_sm_\n                  result_3 _eq_ result_sm_result _eq_ resHelp_5_ _sm_vec3 centeri_6_ _eq_ center_sm_\nvec3 ppo_6_ _eq_ r_z( vec3(vec2(vuv*24.).x_co_vec2(vuv*24.).y_co_0.)_co_0._co_centeri_6_)_sm_  \n ppo_6_ _eq_ r_y( ppo_6__co_0._co_centeri_6_)_sm_  \n ppo_6_ _eq_ r_x( ppo_6__co_0._co_centeri_6_)_sm_ \nvec3 nrm_6_ _eq_ r_z( normalMap()_co_0._co_centeri_6_)_sm_  \n nrm_6_ _eq_ r_y( nrm_6__co_0._co_centeri_6_)_sm_  \n nrm_6_ _eq_ r_x( nrm_6__co_0._co_centeri_6_)_sm_  \n                        vec4 color_6_ _eq_ texture2D(txtRef_1 _co_ppo_6_.xy*vec2(1._co_1.)+vec2(0._co_0.))_sm_\n                        if(nrm_6_.z &lt_sm_ 1.){ \n                       result _eq_ vec4(color_6_.rgb _co_ 1.)_sm_ \n                       }vec4 resHelp_6_ _eq_ result_sm_ vec4 result_4 _eq_ vec4(0.)_sm_\n                  result_4 _eq_ result_sm_result _eq_ resHelp_6_ _sm_vec3 centeri_7_ _eq_ center_sm_\nvec3 ppo_7_ _eq_ r_z( vec3(vec2(vuv*14.).x_co_vec2(vuv*14.).y_co_0.)_co_0._co_centeri_7_)_sm_  \n ppo_7_ _eq_ r_y( ppo_7__co_0._co_centeri_7_)_sm_  \n ppo_7_ _eq_ r_x( ppo_7__co_0._co_centeri_7_)_sm_ \nvec3 nrm_7_ _eq_ r_z( normalMap()_co_0._co_centeri_7_)_sm_  \n nrm_7_ _eq_ r_y( nrm_7__co_0._co_centeri_7_)_sm_  \n nrm_7_ _eq_ r_x( nrm_7__co_0._co_centeri_7_)_sm_  \n                        vec4 color_7_ _eq_ texture2D(txtRef_2 _co_ppo_7_.xy*vec2(1._co_1.)+vec2(0._co_0.))_sm_\n                        if(nrm_7_.z &lt_sm_ 1.){ \n                       result _eq_ vec4(color_7_.rgb _co_ 1.)_sm_ \n                       }vec4 resHelp_7_ _eq_ result_sm_ vec4 result_5 _eq_ vec4(0.)_sm_\n                  result_5 _eq_ result_sm_result _eq_ resHelp_7_ _sm_float c _eq_  abs(noise(pos*0.001))_sm_result _eq_ vec4( min(1._co_c*5.-4.) )_sm_vec4 resHelp_8_ _eq_ result_sm_ vec4 result_6 _eq_ vec4(0.)_sm_\n                  result_6 _eq_ result_sm_result _eq_ resHelp_8_ _sm_result _eq_ vec4( min(1._co_c*5.-3.) )_sm_vec4 resHelp_9_ _eq_ result_sm_ vec4 result_7 _eq_ vec4(0.)_sm_\n                  result_7 _eq_ result_sm_result _eq_ resHelp_9_ _sm_result _eq_ vec4( min(1._co_c*5.-2.) )_sm_vec4 resHelp_10_ _eq_ result_sm_ vec4 result_8 _eq_ vec4(0.)_sm_\n                  result_8 _eq_ result_sm_result _eq_ resHelp_10_ _sm_result _eq_ vec4( min(1._co_c*5.-1.) )_sm_vec4 resHelp_11_ _eq_ result_sm_ vec4 result_9 _eq_ vec4(0.)_sm_\n                  result_9 _eq_ result_sm_result _eq_ resHelp_11_ _sm_result _eq_ vec4( min(1._co_c*5.-0.) )_sm_vec4 resHelp_12_ _eq_ result_sm_ vec4 result_10 _eq_ vec4(0.)_sm_\n                  result_10 _eq_ result_sm_result _eq_ resHelp_12_ _sm_vec3 centeri_13_ _eq_ center_sm_\nvec3 ppo_13_ _eq_ r_z( vec3(vuv.x_co_vuv.y_co_0.)_co_0._co_centeri_13_)_sm_  \n ppo_13_ _eq_ r_y( ppo_13__co_0._co_centeri_13_)_sm_  \n ppo_13_ _eq_ r_x( ppo_13__co_0._co_centeri_13_)_sm_ \nvec3 nrm_13_ _eq_ r_z( normalMap()_co_0._co_centeri_13_)_sm_  \n nrm_13_ _eq_ r_y( nrm_13__co_0._co_centeri_13_)_sm_  \n nrm_13_ _eq_ r_x( nrm_13__co_0._co_centeri_13_)_sm_  \n                        vec4 color_13_ _eq_ texture2D(txtRef_0 _co_ppo_13_.xy*vec2(1._co_1.)+vec2(0._co_0.))_sm_\n                        if(nrm_13_.z &lt_sm_ 1.){ \n                       result _eq_ vec4(color_13_.rgb _co_ 1.)_sm_ \n                       } if( ((result_6.x*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_6.x*1.-0.))) &lt_sm_ 0.5 - -0.48  &amp_sm_&amp_sm_ ((result_6.y*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_6.y*1.-0.))) &lt_sm_ 0.5 - -0.48  &amp_sm_&amp_sm_ ((result_6.z*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_6.z*1.-0.))) &lt_sm_ 0.5 - -0.48  ) { vec4 oldrs_14_ _eq_ vec4(result)_sm_float al_14_ _eq_ max(0.0_co_min(1.0_co_1.0-(((result_6.x*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_6.x*1.-0.))) + ((result_6.y*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_6.y*1.-0.))) + ((result_6.z*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_6.z*1.-0.))))/3.0+(0.)))_sm_ float  l_14_ _eq_  1.0-al_14__sm_  result _eq_ result_1_sm_ result _eq_ result*al_14_ +  oldrs_14_ * l_14__sm_    } if( ((result_7.x*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_7.x*1.-0.))) &lt_sm_ 0.5 - -0.48  &amp_sm_&amp_sm_ ((result_7.y*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_7.y*1.-0.))) &lt_sm_ 0.5 - -0.48  &amp_sm_&amp_sm_ ((result_7.z*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_7.z*1.-0.))) &lt_sm_ 0.5 - -0.48  ) { vec4 oldrs_15_ _eq_ vec4(result)_sm_float al_15_ _eq_ max(0.0_co_min(1.0_co_1.0-(((result_7.x*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_7.x*1.-0.))) + ((result_7.y*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_7.y*1.-0.))) + ((result_7.z*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_7.z*1.-0.))))/3.0+(0.)))_sm_ float  l_15_ _eq_  1.0-al_15__sm_  result _eq_ result_2_sm_ result _eq_ result*al_15_ +  oldrs_15_ * l_15__sm_    } if( ((result_8.x*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_8.x*1.-0.))) &lt_sm_ 0.5 - -0.48  &amp_sm_&amp_sm_ ((result_8.y*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_8.y*1.-0.))) &lt_sm_ 0.5 - -0.48  &amp_sm_&amp_sm_ ((result_8.z*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_8.z*1.-0.))) &lt_sm_ 0.5 - -0.48  ) { vec4 oldrs_16_ _eq_ vec4(result)_sm_float al_16_ _eq_ max(0.0_co_min(1.0_co_1.0-(((result_8.x*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_8.x*1.-0.))) + ((result_8.y*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_8.y*1.-0.))) + ((result_8.z*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_8.z*1.-0.))))/3.0+(0.)))_sm_ float  l_16_ _eq_  1.0-al_16__sm_  result _eq_ result_3_sm_ result _eq_ result*al_16_ +  oldrs_16_ * l_16__sm_    } if( ((result_9.x*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_9.x*1.-0.))) &lt_sm_ 0.5 - -0.48  &amp_sm_&amp_sm_ ((result_9.y*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_9.y*1.-0.))) &lt_sm_ 0.5 - -0.48  &amp_sm_&amp_sm_ ((result_9.z*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_9.z*1.-0.))) &lt_sm_ 0.5 - -0.48  ) { vec4 oldrs_17_ _eq_ vec4(result)_sm_float al_17_ _eq_ max(0.0_co_min(1.0_co_1.0-(((result_9.x*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_9.x*1.-0.))) + ((result_9.y*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_9.y*1.-0.))) + ((result_9.z*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_9.z*1.-0.))))/3.0+(0.)))_sm_ float  l_17_ _eq_  1.0-al_17__sm_  result _eq_ result_4_sm_ result _eq_ result*al_17_ +  oldrs_17_ * l_17__sm_    } if( ((result_10.x*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_10.x*1.-0.))) &lt_sm_ 0.5 - -0.48  &amp_sm_&amp_sm_ ((result_10.y*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_10.y*1.-0.))) &lt_sm_ 0.5 - -0.48  &amp_sm_&amp_sm_ ((result_10.z*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_10.z*1.-0.))) &lt_sm_ 0.5 - -0.48  ) { vec4 oldrs_18_ _eq_ vec4(result)_sm_float al_18_ _eq_ max(0.0_co_min(1.0_co_1.0-(((result_10.x*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_10.x*1.-0.))) + ((result_10.y*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_10.y*1.-0.))) + ((result_10.z*1.-0.)&gt_sm_1.0 ? 0. _dd_ max(0._co_(result_10.z*1.-0.))))/3.0+(0.)))_sm_ float  l_18_ _eq_  1.0-al_18__sm_  result _eq_ result_5_sm_ result _eq_ result*al_18_ +  oldrs_18_ * l_18__sm_    } \n     if(discardState _eq__eq_ 0)gl_FragColor _eq_ result_sm_ \n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tvertex\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_precision highp float_sm_\n                       attribute vec3 position_sm_\n                       attribute vec3 normal_sm_\n                       attribute vec2 uv_sm_\n                       varying vec2 vuv_sm_\n                       varying vec3 pos_sm_\n                       varying vec3 nrm_sm_\n                       uniform   mat4 worldViewProjection_sm_\n                       uniform  vec3 center_sm_\n                       uniform  vec3 camera_sm_\n                       uniform  float time_sm_\n                       vec3 random3(vec3 c) {   float j _eq_ 4096.0*sin(dot(c_co_vec3(17.0_co_ 59.4_co_ 15.0)))_sm_   vec3 r_sm_   r.z _eq_ fract(512.0*j)_sm_ j *_eq_ .125_sm_  r.x _eq_ fract(512.0*j)_sm_ j *_eq_ .125_sm_ r.y _eq_ fract(512.0*j)_sm_  return r-0.5_sm_  } \n                       float rand(vec2 co){   return fract(sin(dot(co.xy _co_vec2(12.9898_co_78.233))) * 43758.5453)_sm_ } \n                       const float F3 _eq_  0.3333333_sm_const float G3 _eq_  0.1666667_sm_\n                       float simplex3d(vec3 p) {   vec3 s _eq_ floor(p + dot(p_co_ vec3(F3)))_sm_   vec3 x _eq_ p - s + dot(s_co_ vec3(G3))_sm_  vec3 e _eq_ step(vec3(0.0)_co_ x - x.yzx)_sm_  vec3 i1 _eq_ e*(1.0 - e.zxy)_sm_  vec3 i2 _eq_ 1.0 - e.zxy*(1.0 - e)_sm_   vec3 x1 _eq_ x - i1 + G3_sm_   vec3 x2 _eq_ x - i2 + 2.0*G3_sm_   vec3 x3 _eq_ x - 1.0 + 3.0*G3_sm_   vec4 w_co_ d_sm_    w.x _eq_ dot(x_co_ x)_sm_   w.y _eq_ dot(x1_co_ x1)_sm_  w.z _eq_ dot(x2_co_ x2)_sm_  w.w _eq_ dot(x3_co_ x3)_sm_   w _eq_ max(0.6 - w_co_ 0.0)_sm_   d.x _eq_ dot(random3(s)_co_ x)_sm_   d.y _eq_ dot(random3(s + i1)_co_ x1)_sm_   d.z _eq_ dot(random3(s + i2)_co_ x2)_sm_  d.w _eq_ dot(random3(s + 1.0)_co_ x3)_sm_  w *_eq_ w_sm_   w *_eq_ w_sm_  d *_eq_ w_sm_   return dot(d_co_ vec4(52.0))_sm_     }  \n                       float noise(vec3 m) {  return   0.5333333*simplex3d(m)   +0.2666667*simplex3d(2.0*m) +0.1333333*simplex3d(4.0*m) +0.0666667*simplex3d(8.0*m)_sm_   } \n                       float dim(vec3 p1 _co_ vec3 p2){   return sqrt((p2.x-p1.x)*(p2.x-p1.x)+(p2.y-p1.y)*(p2.y-p1.y)+(p2.z-p1.z)*(p2.z-p1.z))_sm_ }\n                       vec2  rotate_xy(vec2 pr1_co_vec2  pr2_co_float alpha) {vec2 pp2 _eq_ vec2( pr2.x - pr1.x_co_   pr2.y - pr1.y )_sm_return  vec2( pr1.x + pp2.x * cos(alpha*3.14159265/180.) - pp2.y * sin(alpha*3.14159265/180.)_co_pr1.y + pp2.x * sin(alpha*3.14159265/180.) + pp2.y * cos(alpha*3.14159265/180.))_sm_} \n vec3  r_y(vec3 n_co_ float a_co_vec3 c) {vec3 c1 _eq_ vec3( c.x_co_  c.y_co_   c.z )_sm_c1.x _eq_ c1.x_sm_c1.y _eq_ c1.z_sm_vec2 p _eq_ rotate_xy(vec2(c1.x_co_c1.y)_co_ vec2( n.x_co_  n.z )_co_ a)_sm_n.x _eq_ p.x_sm_n.z _eq_ p.y_sm_return n_sm_ } \n vec3  r_x(vec3 n_co_ float a_co_vec3 c) {vec3 c1 _eq_ vec3( c.x_co_  c.y_co_   c.z )_sm_c1.x _eq_ c1.y_sm_c1.y _eq_ c1.z_sm_vec2 p _eq_ rotate_xy(vec2(c1.x_co_c1.y)_co_ vec2( n.y_co_  n.z )_co_ a)_sm_n.y _eq_ p.x_sm_n.z _eq_ p.y_sm_return n_sm_ } \n vec3  r_z(vec3 n_co_ float a_co_vec3 c) {  vec3 c1 _eq_ vec3( c.x_co_  c.y_co_   c.z )_sm_vec2 p _eq_ rotate_xy(vec2(c1.x_co_c1.y)_co_ vec2( n.x_co_  n.y )_co_ a)_sm_n.x _eq_ p.x_sm_n.y _eq_ p.y_sm_return n_sm_ }\n                       void main(void) { \n    pos _eq_ position_sm_ \n    nrm _eq_ normal_sm_ \n    vec4 result _eq_ vec4(pos_co_1.)_sm_  \n      vuv _eq_ uv_sm_\n     \n    gl_Position _eq_ worldViewProjection * result_sm_\n     \n }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t_lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tBABYLON.Effect.ShadersStore[_qt_ShaderBuilder_1PixelShader_qt_]\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Rolento","Date":"2017-03-13T20:33:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/13038-nasimiasl/?do_eq_hovercard_qt_ data-mentionid_eq__qt_13038_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/13038-nasimiasl/_qt_ rel_eq__qt__qt__gt_@NasimiAsl_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAwesome_co_ your guidance has been A++++.  I need a few days to go over the content you provided and get my head into the domain of shader code_co_ but this looks pretty amazing. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tA question I was going to ask was how do I make the texture transition regions (joins) appear non straight (i.e. random / more natural).  However_co_ looking at some of the posts above I can see similar effects to what I am wanting have been illustrated.  So once again I just need some time to digest what has been said.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThank you for your help on this topic_co_ you have been a great help!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"BitOfGold","Date":"2017-03-14T17:10:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tMy _qt_dream_qt_ multi-material shader would be_dd__lt_br /_gt__lt_br /_gt_\n\t- 4 or 16 full PBR Materials (with all settings and parameters_co_ lights and shadows_co_ parallax occlusion and ambient lighting_co_ fog etc. )_lt_br /_gt_\n\t- Blended by a 16 color SplatMap_co_ weighted by _lt_strong_gt_displacement_lt_/strong_gt_ (for example pebbles come out of the grass first_co_ sand coming out of the water etc.)_lt_br /_gt_\n\t- PBR could use albedo + RAD maps (Roughness_co_ Ambient_co_ Displacement compressed into) for less memory_co_ with optional metallic 8 bit texture._lt_br /_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow that is just a dream. i know it_t_s wishful thinking._lt_br /_gt__lt_br /_gt_\n\tI already found 3 different approaches_lt_br /_gt_\n\t- _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/13038-nasimiasl/?do_eq_hovercard_qt_ data-mentionid_eq__qt_13038_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/13038-nasimiasl/_qt_ rel_eq__qt__qt__gt_@NasimiAsl_lt_/a_gt_ _t_s ShaderBuilder_co_ it is so universal_co_ but it would be very hard to replicate a PBR material with it I think. If only_co_ a ShaderBuilder _qt_plugged into_qt_ a PBR or Standard material_co_ into vertex and fragment shaders_co_ to generate and mix and distort textures or vertexes)_lt_br /_gt_\n\t- _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/24012-mackeyk24/?do_eq_hovercard_qt_ data-mentionid_eq__qt_24012_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/24012-mackeyk24/_qt_ rel_eq__qt__qt__gt_@MackeyK24_lt_/a_gt_ _t_s SplatMap from Unity exporter_co_ I don_t_t know if it would be usable outside of Unity_co_ I think not. But_co_ it is closer than terrainMaterial._lt_br /_gt_\n\t- and terrainMaterial_co_ which works well_co_ but only uses diffuse and normal maps_co_ but nothing else_co_ and does not support ambientColor. So not even on StandardMaterial_t_s level._lt_br /_gt__lt_br /_gt_\n\tI bump into difficulties like_lt_br /_gt_\n\t_qt_How do I tweak the StandardMateral with a vertex shader_co_ that distorts vegetation vith a noise? (wind on leaves)?_qt__lt_br /_gt_\n\t_qt_How do I make a terrain material with all that PBR can give? And also a StandardMaterial version for low quality version?_qt__lt_br /_gt_\n\t_qt_How do I make parallax corrected cubemap reflection on the terrain_co_ or on watery surface?_qt__lt_br /_gt_\n\t_qt_How could I define different texture input / material input connections_co_ like normal map in RG channels and displacement in B (no need for a _qt_third_qt_ normal map component_co_ but .jpg cannot store alpha maps). or with only one albedo and one RAD map_co_ I could make many fully PBR materials_co_ instead of wasting texture memory with using RGBA texture for a 8 bit ambient texture..._qt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSorry for being too long. A bit too much. But much of my problems have the same root!_lt_br /_gt_\n\tI would like to use PBR and Standard materials_co_ but I need _qt_tweeks._qt_ like vertex noise or texture movement_co_ or need some mixing/remapping of input textures.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Maybe_lt_/strong_gt_ the road to take is just rewriting the PBR material for supporting all that I want in my fork of babylon_co_ but it seems others have similar problems too._lt_br /_gt__lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]