[{"Owner":"HugoMcPhee","Date":"2015-03-30T12:14:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m trying to show a render target texture on a plane that shows a post processed version of the scene._lt_br_gt_I can get the render target texture to draw the scene to the plane_co_ but I can_t_t get a post effect to work on it_lt_/p_gt__lt_p_gt_Here_t_s my example code_lt_br_gt_ _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_            var postProcessConvolution_sm_            var renderTarget _eq_ new BABYLON.RenderTargetTexture(_qt_depth_qt__co_ 1024_co_ newScene_co_false_co_ true)_sm_            newScene.customRenderTargets.push(renderTarget)_sm_            renderTarget.renderList _eq_ newScene.meshes_sm_            renderTarget.onBeforeRender _eq_ function () {                postProcessConvolution _eq_ new BABYLON.ConvolutionPostProcess(_qt_convolution_qt__co_ BABYLON.ConvolutionPostProcess.EdgeDetect2Kernel_co_ 0.7_co_ mainCamera)_sm_            }            renderTarget.onAfterRender _eq_ function () {                postProcessConvolution.dispose()_sm_            }_lt_/pre_gt__lt_p_gt_I thought it would apply the process_co_ then render the texture_co_ then dispose the post process. _lt_br_gt_Without the .dispose() the post process is applied to the whole scene every frame._lt_/p_gt__lt_p_gt_has anyone succesfully done this before?_lt_br_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"HugoMcPhee","Date":"2015-03-30T13:27:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Instead of trying to use a post process_co_ I just used the fragment shader part (.fragment.fx) from the posteffect in a new _qt_ShaderMaterial_qt_ and applied that onto the plane_co_ then I passed the renderTargetTexture to that ShaderMaterial and the effect was the same._lt_br_gt__lt_br_gt_Here_t_s what the final code was_lt_br_gt_ _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var kalideMaterial _eq_ new BABYLON.ShaderMaterial(_qt_kalideShader_qt__co_ newScene_co_ _qt_./kalideMat_qt__co_{    attributes_dd_ [_qt_position_qt__co_ _qt_uv_qt_]_co_    uniforms_dd_ [_qt_worldViewProjection_qt_]})_sm_backBackDrop.material _eq_ kalideMaterial_sm_kalideMaterial.setTexture(_qt_textureSampler_qt__co_ renderTarget)_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]