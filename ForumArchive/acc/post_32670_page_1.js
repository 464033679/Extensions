[{"Owner":"MackeyK24","Date":"2017-08-30T17:46:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tRoot Motion or In Place... What type of animations are we supposed (or can we) use just in place or can we use root motion... \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf using root motion how do keep collider in sync and how to deal with the player moving forward instead in addition to user input ???\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-08-30T19:34:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tCan you help me understand what root motion does?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2017-08-31T10:49:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_187253_qt_ data-ipsquote-contentid_eq__qt_32670_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1504121641_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t15 hours ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tCan you help me understand what root motion does?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//docs.unity3d.com/Manual/RootMotion.html_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//docs.unity3d.com/Manual/RootMotion.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBasically they allow the translation on the _t_Root Bone_t_ ... So if your animation moves the root bone position like a walking animation (instead of doing the walking animation while staying at position zero)... they allow that... they must some how use that forward motion each frame... If you _t_UNCHECK_t_ apply root motion... they keep the mesh at position zero at runtime giving you an in place animation even if the animation has root bone motion...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy little light weight _t_Apply Root Motion_t_ detect for false... if that off... I zero the X and Z RIGHT BEFORE I compute the translation matrix for each bone... that way I don_t_t have to constantly check each frame to zero the X and Y positions... I just do that at runtime (I may event put an options to not actually zero but offset by the original x and z ... that we just take off whatever the animation put on from starting position so the X and Z might not actually be 0 but will be the start position ... maybe is started at z 0.1 or something like that... anyways thats seems to be working so far)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn C# code in the loop that goes thru each bone... I compute the matrix for each frame of the animations building keys from the cupped matrix and stick on that bone.animation ... Since I am fixing and offsetting the X and Z during the actual Animation Frame Sampling... They just going the scene already on the bone with no runtime code need to fix/offset to remove and root bone motion... But as you stated before ... all this could be avoided if you use IN-PLACE animations... but they are harder to find ALL in-place animation for a complete character setup _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBTW... Here is how I do that in C# before it ever gets serialized into the scene_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_AnimationMode.BeginSampling()_sm_\nfor (var i _eq_ 0_sm_ i &lt_sm_ clipFrameCount_sm_ i++)\n{\n    Matrix4x4 local_sm_\n    clip.SampleAnimation(source_co_ i * frameTime)_sm_\n    if (applyRootMotion _eq__eq_ false &amp_sm_&amp_sm_ transform _eq__eq_ skinnedMesh.rootBone) {\n        float positionX _eq_ transform.localPosition.x_sm_\n        float positionY _eq_ transform.localPosition.y_sm_\n        float positionZ _eq_ transform.localPosition.z_sm_\n        if (animationState !_eq_ null) {\n            positionY _eq_ Mathf.Clamp(positionY_co_ 0.0f_co_ animationState.clampRootPositionY)_sm_\n            if (animationState.zeroRootPositionsXZ) {\n                positionX _eq_ 0.0f_sm_\n                positionZ _eq_ 0.0f_sm_\n            }\n        }\n        local _eq_ Matrix4x4.TRS(new Vector3(positionX_co_ positionY_co_ positionZ)_co_ transform.localRotation_co_ transform.localScale)_sm_\n    } else {\n        local _eq_ Matrix4x4.TRS(transform.localPosition_co_ transform.localRotation_co_ transform.localScale)_sm_\n    }\n    float[] matrix _eq_ new[] {\n        local[0_co_ 0]_co_ local[1_co_ 0]_co_ local[2_co_ 0]_co_ local[3_co_ 0]_co_\n        local[0_co_ 1]_co_ local[1_co_ 1]_co_ local[2_co_ 1]_co_ local[3_co_ 1]_co_\n        local[0_co_ 2]_co_ local[1_co_ 2]_co_ local[2_co_ 2]_co_ local[3_co_ 2]_co_\n        local[0_co_ 3]_co_ local[1_co_ 3]_co_ local[2_co_ 3]_co_ local[3_co_ 3]\n    }_sm_\n    var key _eq_ new BabylonAnimationKey\n    {\n        frame _eq_ (i + frameOffest)_co_\n        values _eq_ matrix\n    }_sm_\n    keys.Add(key)_sm_\n}\nAnimationMode.EndSampling()_sm_\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2017-08-31T11:24:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI recommend not moving the root bone.  Move the mesh instead.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-08-31T16:21:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1BZJVJ%23110_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1BZJVJ#110_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2017-09-01T06:56:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_187357_qt_ data-ipsquote-contentid_eq__qt_32670_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1504196510_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t14 hours ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1BZJVJ%23110_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1BZJVJ#110_lt_/a_gt_\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t Im sorry _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ ... but I don_t_t get what your trying to show here... the movement in the z direction by adding 0.05 _lt_img alt_eq__qt__dd_(_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ title_eq__qt__dd_(_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tDoes this anyway have to do with how unity is applying root motion to the animation... basically I think the motion from the animation is supposed to drive the actual movement of the character... I think that what Root Motion actually does.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-09-01T20:29:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSo it could really be different.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m not sure yet how this could work _lt_img alt_eq__qt__dd_(_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ title_eq__qt__dd_(_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2017-09-02T01:07:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_187357_qt_ data-ipsquote-contentid_eq__qt_32670_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1504196510_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 8/31/2017 at 6_dd_21 AM_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#1BZJVJ%23110_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#1BZJVJ#110_lt_/a_gt_\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tYo _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think that might work... It looks like you just take _qt_Runspeed_qt_ to the Z  and use turning for the Root Motion (I guess just rotation) and just always go forward on Z or backwards if negative value on Z\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTake a look at this_dd_ _lt_a href_eq__qt_https_dd_//docs.unity3d.com/Manual/ScriptingRootMotion.html_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//docs.unity3d.com/Manual/ScriptingRootMotion.html_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-09-04T02:45:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk I understand. Root motion is kind of animation for the mesh. The bones will deform the mesh and the root motion animation will move / rotate the mesh itself. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf this is correct then we just need to export mesh root motion animations alongside bones animations right?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2017-09-04T05:44:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_187642_qt_ data-ipsquote-contentid_eq__qt_32670_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1504493125_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t2 hours ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tOk I understand. Root motion is kind of animation for the mesh. The bones will deform the mesh and the root motion animation will move / rotate the mesh itself. \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tIf this is correct then we just need to export mesh root motion animations alongside bones animations right?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tYo thanks _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat is exactly what I am doing now...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDuring the encoding of the transformation matrix of each bone_co_ I do the following_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1... Check of is root bone transform_co_ if so encode the position and rotation of the root transform to babylon animation key and REMOVE/RESET (via animator clip options) existing position and rotation values for that bone in the matrix calculations... So we will end up the the full animation (baked or zero out root bone translation with a copy of the real translation for the root bone store in another set of animation key)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTake a look a the c# Code_co_ this code _t_SAMPLES_t_ each animation clip frame for each bone_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_AnimationMode.BeginSampling()_sm_\nfor (var i _eq_ 0_sm_ i &lt_sm_ clipFrameCount_sm_ i++)\n{\n    Matrix4x4 local_sm_\n    int frameIndex _eq_ (i + frameOffest)_sm_\n    clip.SampleAnimation(source_co_ i * frameTime)_sm_\n    if (transform _eq__eq_ skinnedMesh.rootBone) {\n        float positionX _eq_ transform.localPosition.x_sm_\n        float positionY _eq_ transform.localPosition.y_sm_\n        float positionZ _eq_ transform.localPosition.z_sm_\n        float rotationX _eq_ transform.localRotation.eulerAngles.x * (float)Math.PI / 180_sm_\n        float rotationY _eq_ transform.localRotation.eulerAngles.y * (float)Math.PI / 180_sm_\n        float rotationZ _eq_ transform.localRotation.eulerAngles.z * (float)Math.PI / 180_sm_\n        Quaternion rotationQT _eq_ transform.localRotation_sm_         \n        if (encodeRootMotions) {\n            // Build Transform Root Motion Keys\n            if (cycled _eq__eq_ false) {\n                pxkeys.Add(new BabylonAnimationKey {\n                    frame _eq_ frameIndex_co_\n                    values _eq_ new[] { positionX }\n                })_sm_\n                pykeys.Add(new BabylonAnimationKey {\n                    frame _eq_ frameIndex_co_\n                    values _eq_ new[] { positionY }\n                })_sm_\n                pzkeys.Add(new BabylonAnimationKey {\n                    frame _eq_ frameIndex_co_\n                    values _eq_ new[] { positionZ }\n                })_sm_\n                rxkeys.Add(new BabylonAnimationKey {\n                    frame _eq_ frameIndex_co_\n                    values _eq_ new[] { rotationX }\n                })_sm_\n                rykeys.Add(new BabylonAnimationKey {\n                    frame _eq_ frameIndex_co_\n                    values _eq_ new[] { rotationY }\n                })_sm_\n                rzkeys.Add(new BabylonAnimationKey {\n                    frame _eq_ frameIndex_co_\n                    values _eq_ new[] { rotationZ }\n                })_sm_\n            }\n        }\n        // Bake Root Motion Translations\n        if (settings.loopBlendOrientation || settings.keepOriginalOrientation) {\n            if (settings.keepOriginalOrientation) {\n                rotationQT _eq_ Quaternion.Euler(originalRX_co_ originalRY_co_ originalRZ)_sm_\n            } else {\n                rotationQT _eq_ Quaternion.Euler(rotationQT.eulerAngles.x_co_ settings.orientationOffsetY_co_ rotationQT.eulerAngles.z)_sm_\n            }\n        }\n        if (settings.loopBlendPositionY || settings.keepOriginalPositionY) {\n            if (settings.heightFromFeet) {\n                positionY _eq_ Mathf.Clamp(positionY_co_ 0.0f_co_ settings.level + clampFeetPositionY)_sm_\n            } else {\n                positionY _eq_ originalPY + clampFeetPositionY_sm_\n            }\n        }\n        if (zeroRootPositionsXZ) {\n            positionX _eq_ 0.0f_sm_\n            positionZ _eq_ 0.0f_sm_\n        } else {\n            if (settings.loopBlendPositionXZ || settings.keepOriginalPositionXZ) {\n                if (settings.keepOriginalPositionXZ) {\n                    positionX _eq_ originalPX_sm_\n                    positionZ _eq_ originalPZ_sm_\n                } else {\n                    positionX _eq_ 0.0f_sm_\n                    positionZ _eq_ 0.0f_sm_\n                }\n            }\n        }\n        local _eq_ Matrix4x4.TRS(new Vector3(positionX_co_ positionY_co_ positionZ)_co_ rotationQT_co_ transform.localScale)_sm_\n    } else {\n        local _eq_ Matrix4x4.TRS(transform.localPosition_co_ transform.localRotation_co_ transform.localScale)_sm_\n    }\n    float[] matrix _eq_ new[] {\n        local[0_co_ 0]_co_ local[1_co_ 0]_co_ local[2_co_ 0]_co_ local[3_co_ 0]_co_\n        local[0_co_ 1]_co_ local[1_co_ 1]_co_ local[2_co_ 1]_co_ local[3_co_ 1]_co_\n        local[0_co_ 2]_co_ local[1_co_ 2]_co_ local[2_co_ 2]_co_ local[3_co_ 2]_co_\n        local[0_co_ 3]_co_ local[1_co_ 3]_co_ local[2_co_ 3]_co_ local[3_co_ 3]\n    }_sm_\n    var key _eq_ new BabylonAnimationKey\n    {\n        frame _eq_ frameIndex_co_\n        values _eq_ matrix\n    }_sm_\n    keys.Add(key)_sm_\n}\nAnimationMode.EndSampling()_sm_\nframeOffest +_eq_ clipFrameCount_sm_\ntotalFrameCount +_eq_ clipFrameCount_sm_\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThe new Root animation keys encoding like this_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_//\n// Format Root Motion Keys\n//\nstring property _eq_ _qt_none_qt__sm_\nif (pxkeys.Count &gt_sm_ 0)\n{\n    property _eq_ _qt_metadata.state.animPosition.x_qt__sm_\n    anims.Add(new BabylonAnimation\n    {\n        dataType _eq_ (int)BabylonAnimation.DataType.Float_co_\n        name _eq_ property + _qt_ animation_qt__co_\n        keys _eq_ pxkeys.ToArray()_co_\n        framePerSecond _eq_ frameRate_co_\n        enableBlending _eq_ false_co_\n        blendingSpeed _eq_ 0.0f_co_\n        loopBehavior _eq_ (animationState !_eq_ null) ? (int)animationState.loopBehavior _dd_ (int)BabylonAnimation.LoopBehavior.Relative_co_\n        property _eq_ property\n    })_sm_\n}\nproperty _eq_ _qt_none_qt__sm_\nif (pykeys.Count &gt_sm_ 0)\n{\n    property _eq_ _qt_metadata.state.animPosition.y_qt__sm_\n    anims.Add(new BabylonAnimation\n    {\n        dataType _eq_ (int)BabylonAnimation.DataType.Float_co_\n        name _eq_ property + _qt_ animation_qt__co_\n        keys _eq_ pykeys.ToArray()_co_\n        framePerSecond _eq_ frameRate_co_\n        enableBlending _eq_ false_co_\n        blendingSpeed _eq_ 0.0f_co_\n        loopBehavior _eq_ (animationState !_eq_ null) ? (int)animationState.loopBehavior _dd_ (int)BabylonAnimation.LoopBehavior.Relative_co_\n        property _eq_ property\n    })_sm_\n}\nproperty _eq_ _qt_none_qt__sm_\nif (pzkeys.Count &gt_sm_ 0)\n{\n    property _eq_ _qt_metadata.state.animPosition.z_qt__sm_\n    anims.Add(new BabylonAnimation\n    {\n        dataType _eq_ (int)BabylonAnimation.DataType.Float_co_\n        name _eq_ property + _qt_ animation_qt__co_\n        keys _eq_ pzkeys.ToArray()_co_\n        framePerSecond _eq_ frameRate_co_\n        enableBlending _eq_ false_co_\n        blendingSpeed _eq_ 0.0f_co_\n        loopBehavior _eq_ (animationState !_eq_ null) ? (int)animationState.loopBehavior _dd_ (int)BabylonAnimation.LoopBehavior.Relative_co_\n        property _eq_ property\n    })_sm_\n}\nproperty _eq_ _qt_none_qt__sm_\nif (rxkeys.Count &gt_sm_ 0)\n{\n    property _eq_ _qt_metadata.state.animRotation.x_qt__sm_\n    anims.Add(new BabylonAnimation\n    {\n        dataType _eq_ (int)BabylonAnimation.DataType.Float_co_\n        name _eq_ property + _qt_ animation_qt__co_\n        keys _eq_ rxkeys.ToArray()_co_\n        framePerSecond _eq_ frameRate_co_\n        enableBlending _eq_ false_co_\n        blendingSpeed _eq_ 0.0f_co_\n        loopBehavior _eq_ (animationState !_eq_ null) ? (int)animationState.loopBehavior _dd_ (int)BabylonAnimation.LoopBehavior.Relative_co_\n        property _eq_ property\n    })_sm_\n}\nproperty _eq_ _qt_none_qt__sm_\nif (rykeys.Count &gt_sm_ 0)\n{\n    property _eq_ _qt_metadata.state.animRotation.y_qt__sm_\n    anims.Add(new BabylonAnimation\n    {\n        dataType _eq_ (int)BabylonAnimation.DataType.Float_co_\n        name _eq_ property + _qt_ animation_qt__co_\n        keys _eq_ rykeys.ToArray()_co_\n        framePerSecond _eq_ frameRate_co_\n        enableBlending _eq_ false_co_\n        blendingSpeed _eq_ 0.0f_co_\n        loopBehavior _eq_ (animationState !_eq_ null) ? (int)animationState.loopBehavior _dd_ (int)BabylonAnimation.LoopBehavior.Relative_co_\n        property _eq_ property\n    })_sm_\n}\nproperty _eq_ _qt_none_qt__sm_\nif (rzkeys.Count &gt_sm_ 0)\n{\n    property _eq_ _qt_metadata.state.animRotation.z_qt__sm_\n    anims.Add(new BabylonAnimation\n    {\n        dataType _eq_ (int)BabylonAnimation.DataType.Float_co_\n        name _eq_ property + _qt_ animation_qt__co_\n        keys _eq_ rzkeys.ToArray()_co_\n        framePerSecond _eq_ frameRate_co_\n        enableBlending _eq_ false_co_\n        blendingSpeed _eq_ 0.0f_co_\n        loopBehavior _eq_ (animationState !_eq_ null) ? (int)animationState.loopBehavior _dd_ (int)BabylonAnimation.LoopBehavior.Relative_co_\n        property _eq_ property\n    })_sm_\n}\n//\n// Cache Babylon Animation Keys\n//\nif (anims.Count &gt_sm_ 0)\n{\n    List&lt_sm_BabylonAnimation&gt_sm_ sourceAnimiamtions _eq_ null_sm_\n    if (SceneBuilder.AnimationCurveKeys.ContainsKey(sourceId)) {\n        sourceAnimiamtions _eq_ SceneBuilder.AnimationCurveKeys[sourceId]_sm_\n    } else {\n        sourceAnimiamtions _eq_ new List&lt_sm_BabylonAnimation&gt_sm_()_sm_\n        SceneBuilder.AnimationCurveKeys.Add(sourceId_co_ sourceAnimiamtions)_sm_\n    }\n    foreach (var anim in anims) {\n        sourceAnimiamtions.Add(anim)_sm_\n    }\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThis works great so far... Then on the client side\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1... I use these to function to update the current root motion for the animPosition keys frames encoded for for the root transform/bone\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_private updateRootMotion()_dd_void {\n    if (this.owned.metadata !_eq_ null &amp_sm_&amp_sm_ this.owned.metadata.state !_eq_ null) {\n        if (this.owned.metadata.state.animPosition !_eq_ null) {\n            this._rootPosition _eq_ this.owned.metadata.state.animPosition_sm_\n            this._rootPosition.subtractToRef(this._lastPosition_co_ this._deltaPosition)_sm_\n            this._lastPosition.x _eq_ this._rootPosition.x_sm_\n            this._lastPosition.y _eq_ this._rootPosition.y_sm_\n            this._lastPosition.z _eq_ this._rootPosition.z_sm_\n        }\n        if (this.owned.metadata.state.animRotation !_eq_ null) {\n            this._rootRotation _eq_ this.owned.metadata.state.animRotation_sm_\n            this._rootRotation.subtractToRef(this._lastRotation_co_ this._deltaRotation)_sm_\n            this._lastRotation.x _eq_ this._rootRotation.x_sm_\n            this._lastRotation.y _eq_ this._rootRotation.y_sm_\n            this._lastRotation.z _eq_ this._rootRotation.z_sm_\n        }\n    }\n}\nprivate resetRootMotion()_dd_void {\n    this._lastPosition.x _eq_ 0.0_sm_\n    this._lastPosition.y _eq_ 0.0_sm_\n    this._lastPosition.z _eq_ 0.0_sm_\n    this._lastRotation.x _eq_ 0.0_sm_\n    this._lastRotation.y _eq_ 0.0_sm_\n    this._lastRotation.z _eq_ 0.0_sm_\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe update root motion gets called every frame... I use a _t_LastPosition_t_ holder to calculate the DELTA changes of the position and rotation\n_lt_/p_gt_\n\n_lt_p_gt_\n\tand expose as a few function on the new animator component... So can at anytime call_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tanimation.getRootPosition() - Get the original rootPosition vector recorded into the animations\n_lt_/p_gt_\n\n_lt_p_gt_\n\tanimation.getRootRotation() - Same as above but for rotations\n_lt_/p_gt_\n\n_lt_p_gt_\n\tanimation.getDeltaPosition() - The calculated delta changes from the last frame\n_lt_/p_gt_\n\n_lt_p_gt_\n\tanimation.getDeltaRotation() - Same as above but for rotations\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI can then use regular movement code to move the _t_Container_t_ game object ... not the actual skinned mesh transform but its parent.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo in a TestPlayer.ts controller that is attach to the parent object... I get a reference to the _t_Animator Component_t_ ... Just like you would do in Unity_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var mannequinn_dd_BABYLON.AbstractMesh _eq_ this.getChildMesh(_qt_Mannequinn_qt_)_sm_\nif (mannequinn !_eq_ null) {\n    this._animator _eq_ this.manager.findSceneComponent(_qt_BABYLON.AnimationState_qt__co_ mannequinn)_sm_\n    if (this._animator !_eq_ null) {\n\n        // Note All loaded and ready\n\n    } else {\n        console.log(_qt_Failed to locate animator for mannequinn_dd_ _qt_ + mannequinn.name)_sm_\n    }\n} else {\n    console.log(_qt_Failed to locate mannequin mesh_dd_ _qt_ + mannequinn.name)_sm_\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI can then make call it its public functions like_co_ getDeltaPosition() and use that delta to move the player with velocity_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_if (this._animator !_eq_ null) {\n    var deltaPosition_dd_BABYLON.Vector3 _eq_ this._animator.getDeltaPosition()_sm_\n    var deltaRotation_dd_BABYLON.Vector3 _eq_ this._animator.getDeltaRotation()_sm_\n    if (this._character !_eq_ null) {\n        var delta_dd_number _eq_ this.manager.deltaTime_sm_          \n\n        //var ang_dd_number _eq_ (deltaRotation.y * (this.rotateSpeed * 0.5)) / delta_sm_\n        //this.mesh.physicsImpostor.setAngularVelocity(new BABYLON.Vector3(0_co_-ang_co_0))_sm_\n        //this.mesh.rotation.y +_eq_ -ang_sm_\n\n        this._inputVelocity.x _eq_ (deltaPosition.x * this.moveSpeed) / delta_sm_\n        this._inputVelocity.y _eq_ 0.0_sm_\n        this._inputVelocity.z _eq_ (deltaPosition.z * this.moveSpeed) / delta_sm_\n        \n        var jumped_dd_boolean _eq_ (this.manager.getKeyInput(this.keyboardJump) || this.manager.getButtonInput(this.buttonJump))_sm_\n        if (jumped _eq__eq__eq_ true) this._inputVelocity.y _eq_ this.jumpForce_sm_\n        \n        this._character.move(this._inputVelocity_co_ jumped)_sm_\n    }\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tDud everything so far is working great... EXCEPT FOR MY LACK OF 3D-Game stuff... For example ... I am TOTALLY shitty at rotation and quaternions and smoothly rotating.... I don_t_t know that part is always so _t_Fuzzy_t_ for me... Especially compared to ALL the other stuff I can do BOTH in Babylon Typscript and Unity C# (as you can tell by the toolkit itself)... But rotations ALWAYS fuck me up _lt_img alt_eq__qt__dd_(_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ title_eq__qt__dd_(_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tSo I have my current rotation code remarked in the example about.... What I need is to SMOOTHLY rotate the parent game object with the Root Bone rotation delta.... With the code I am use above_co_ trying to rotate with angular velocity as well as regular mesh.rotation... it SANPS around too fast and looks funny._dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_//var ang_dd_number _eq_ (deltaRotation.y * (this.rotateSpeed * 0.5)) / delta_sm_\n//this.mesh.physicsImpostor.setAngularVelocity(new BABYLON.Vector3(0_co_-ang_co_0))_sm_\n//this.mesh.rotation.y +_eq_ -ang_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tOne last part is when switching from walk to run... you can see a _t_Hard Jump_t_ because I also don_t_t really now HOW to use enableBlending and BlendingSpeed... I red the docs ... but I still can_t_t get the desired smoothness in between animation clip changes\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut that is my progress so far... I am going to make a video so you can actually see what I am talking about and see the animation system action.... Maybe you can then tell me what I need to do to go further _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MrVR","Date":"2018-05-21T02:01:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNO root motion  \n_lt_/p_gt_\n\n_lt_div class_eq__qt_ipsEmbeddedVideo_qt__gt_\n\t_lt_div_gt_\n\t\t_lt_iframe allowfullscreen_eq__qt_true_qt_ frameborder_eq__qt_0_qt_ height_eq__qt_270_qt_ src_eq__qt_https_dd_//www.youtube.com/embed/ov9pyx4MAOo?feature_eq_oembed_qt_ width_eq__qt_480_qt__gt__lt_/iframe_gt_\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n_lt_p_gt_\n\tWith root motion  \n_lt_/p_gt_\n\n_lt_div class_eq__qt_ipsEmbeddedVideo_qt__gt_\n\t_lt_div_gt_\n\t\t_lt_iframe allowfullscreen_eq__qt_true_qt_ frameborder_eq__qt_0_qt_ height_eq__qt_270_qt_ src_eq__qt_https_dd_//www.youtube.com/embed/YuD29-Xr7Oc?feature_eq_oembed_qt_ width_eq__qt_480_qt__gt__lt_/iframe_gt_\n\t_lt_/div_gt_\n_lt_/div_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]