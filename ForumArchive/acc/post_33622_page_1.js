[{"Owner":"paleRider","Date":"2017-10-24T19:34:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi everybody.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere I come again with a new question for this incredible community. By the way_co_ I think it will be _qt_super easy_qt_ for someone which a good knowledge of the _lt_strong_gt_BJS_lt_/strong_gt_ internals.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe case is that_co_ following with my current development (tap simulator) I_t_m now focused on the performance.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMy doubts are mainly about the proper use of the method _qt_clone_qt_ of the _qt_Texture_qt_ object.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Doubt 1)_lt_/strong_gt_ Suppose you have a _lt_strong_gt_Standard Material_lt_/strong_gt__co_ you create it following the usual way_co_ something like this_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_matFoo_eq_new BABYLON.StandardMaterial(_qt_Foo_Material_qt__co_myScene)_sm_\nmatFoo.diffuseColor_eq_new BABYLON.Color3(0_co_0_co_0)_sm_\nmatFoo.opacityTexture_eq_textFoo_sm_\nmatFoo.emissiveTexture_eq_textFoo_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tNote that we are using the texture (textFoo) on two channels_co_ opacity and emissive. Is this effective in terms of resource economy or I must follow this other approach?_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_matFoo_eq_new BABYLON.StandardMaterial(_qt_Foo_Material_qt__co_myScene)_sm_\nmatFoo.diffuseColor_eq_new BABYLON.Color3(0_co_0_co_0)_sm_\nmatFoo.opacityTexture_eq_textFoo.clone_sm_\nmatFoo.emissiveTexture_eq_textFoo.clone_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t _lt_strong_gt_Doubt 2_lt_/strong_gt_) Now we have a similar scenario_co_ when we must assign a previously created texture_co_ but this time we want to assign it to a series of _lt_strong_gt_Particles_lt_/strong_gt__dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_...\ntextSprite_eq_new BABYLON.Texture(_qt_assets/textures/flarealpha.png_qt__co_myScene)_sm_\n...\nmyParticles_eq_new BABYLON.ParticleSystem(_qt_Particles_qt__co_10000_co_myScene)_sm_\nmyParticles.emitter_eq_new BABYLON.Vector3(0_co_0_co_0)_sm_\nmyParticles.particleTexture_eq_textSprite_sm_\n..._lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThis time_co_ as we have a lot of particles chances are that it is better to use _lt_em_gt_textSprite.clone()_lt_/em_gt_ in order to assign the sprite image to each particle_co_ at last line of shown code. Isn´t it?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Doubt 3_lt_/strong_gt_) Last but not least. When you (as me) arrives at the conclusion that PBR materials are the way-to-go (in order to achieve a decent look with your CGs)_co_ you are going to use_co_ among others_co_ the environment channel  (dds files in current 3.0 version of BJS). Here I have certainly a doubt and a thought. Going first with the last_co_ I think the environment should not be a PBR Material property (as currently is)_co_ but a scene one_co_ as certainly is very weird to think in a scene with more than one environment (?). Anyway_co_ as at the moment this is not the case_co_ and we have to assign the same value of _qt_environment_qt_ for each PBR Material_co_ we find ourselves setting time after time the same texture (dds file) in this way (_lt_u_gt_please focus only on the reflectionTexture property_lt_/u_gt_)_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_...\nmatTube_eq_new BABYLON.PBRMaterial(_qt_MaterialPBR_Tube_qt__co_myScene)_sm_\nmatTube.albedoTexture_eq_new BABYLON.Texture(_qt_assets/models/Tubo_BaseColor.png_qt__co_myScene)_sm_\nmatTube.metallicTexture_eq_new BABYLON.Texture(_qt_assets/models/Tubo_Metalico_PBR.png_qt__co_myScene)_sm_\nmatTube.bumpTexture_eq_new BABYLON.Texture(_qt_assets/models/Tubo_Normal.png_qt__co_myScene)_sm_\nmatTube.reflectionTexture_eq_textEnvironment_sm_\nmatTube.microSurface_eq_0.96_sm_\nmatTube.useRoughnessFromMetallicTextureAlpha_eq_false_sm_\nmatTube.useRoughnessFromMetallicTextureGreen_eq_true_sm_\n//\nmatTap_eq_new BABYLON.PBRMaterial(_qt_MaterialPBR_Tap_qt__co__Scene)_sm_\nmatTap.albedoTexture_eq_new BABYLON.Texture(_qt_assets/models/mono/Manetas_BaseColor.png_qt__co_myScene)_sm_\nmatTap.metallicTexture_eq_new BABYLON.Texture(_qt_assets/models/mono/Manetas_Metallic_PBR.png_qt__co_myScene)_sm_\nmatTap.bumpTexture_eq_new BABYLON.Texture(_qt_assets/models/mono/Manetas_Normal.png_qt__co_myScene)_sm_\nmatTap.reflectionTexture_eq_textEnvironment_sm_\nmatTap.microSurface_eq_0.96_sm_\nmatTap.useRoughnessFromMetallicTextureAlpha_eq_false_sm_\nmatTap.useRoughnessFromMetallicTextureGreen_eq_true_sm_\n//\nmatSprinkler_eq_new BABYLON.PBRMaterial(_qt_MaterialPBR_Sprinkler_qt__co_myScene)_sm_\nmatSprinkler.albedoTexture_eq_new BABYLON.Texture(_qt_assets/model/mono/Resto_BaseColor.png_qt__co_myScene)_sm_\nmatSprinkler.metallicTexture_eq_new BABYLON.Texture(_qt_assets/models/mono/Resto_Metallic_PBR.png_qt__co_myScene)_sm_\nmatSprinkler.bumpTexture_eq_new BABYLON.Texture(_qt_assets/models/mono/Resto_Normal.png_qt__co_myScene)_sm_\nmatSprinkler.reflectionTexture_eq_textEnvironment_sm_\nmatSprinkler.microSurface_eq_0.96_sm_\nmatSprinkler.useRoughnessFromMetallicTextureAlpha_eq_false_sm_\nmatSprinkler.useRoughnessFromMetallicTextureGreen_eq_true_sm_\n...\n\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tHere_co_ as in the case of my first doubt_co_ I_t_m thinking_co_ obviously in using _qt_matXXX._lt_u_gt_reflectionTexture_eq_textEnvironment.clone()_sm__lt_/u_gt__qt__co_ but I don´t know if that is a way to enhance performance_co_ and by the way if dds files are buffered in a way they can benefit of texture cloning mechanism.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tOk_co_ this is all_co_ sorry for the length of the question and_co_ as always_co_ thanks in advance for your time!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRegards.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-10-25T23:46:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey_dd_)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tso _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. The option 1 is better. But cloning is not a big deal as only some number values will be duplicated. The internal texture will be shared\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. see #1. No need to clone either\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3. scene.environmentTexture is exactly here for that. Only set this value and nothing in the material itself. The value exists at both levels because you may want to specify a specific one for a given material\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"paleRider","Date":"2017-10-26T15:50:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks _lt_strong_gt_Deltakosh_lt_/strong_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m going to test all this_co_ mainly the _lt_strong_gt_Scene.environmentTexture_lt_/strong_gt_ and we_t_ll back again in order to check this question as _qt__lt_strong_gt_solved_lt_/strong_gt__qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBest regards.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-10-26T23:14:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tSounds good\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"paleRider","Date":"2017-10-27T05:36:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOnly one more thing _lt_strong_gt_Deltakosh_lt_/strong_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBased on your explanation_co_ what would be an appropriate case to use texture.clone?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for your time.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2017-10-27T10:07:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tA texture has a lot of parameters which can be changed (like v and uOffset etc_t_). If you want to use the same texture_co_ but change the parameters in one of the objects_co_ you could use the clone method. Internally it will reuse the texture data_co_ taking the new parameters.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"paleRider","Date":"2017-10-27T14:28:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk _lt_strong_gt_RaananW_lt_/strong_gt__co_ I see.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI don´t know now why _co_ but the case is that I thought assigning the same texture to different material _qt_channels_qt_ (diffuse_co_ ) of the same or a different mesh_co_ had a performance hit when not done by means of a clone of that texture.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMisunderstandings  happen!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for your time guys... I think this question is solved.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2017-10-29T02:53:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/18630-palerider/?do_eq_hovercard_qt_ data-mentionid_eq__qt_18630_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/18630-palerider/_qt_ rel_eq__qt__qt__gt_@paleRider_lt_/a_gt_-\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs for your last question_dd_\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_193187_qt_ data-ipsquote-contentid_eq__qt_33622_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1509082601_qt_ data-ipsquote-userid_eq__qt_18630_qt_ data-ipsquote-username_eq__qt_paleRider_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 10/26/2017 at 10_dd_36 PM_co_ paleRider said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tBased on your explanation_co_ what would be an appropriate case to use texture.clone?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI definitely clone meshes which are imported_co_ along with the materials which I apply in my babylon.js script when I am creating thousands (even hundreds)  of objects to apply procedural animation. Especially if the materials are 20 lines of code with multiple shaders and textures. In testing_co_ I find this reduced my memory usage_co_ especially garbage collection. and in cloning vs. instancing - I find cloning provides me with far more control over properties of individual meshes and their attributes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]