[{"Owner":"sparkbuzz","Date":"2015-07-08T08:45:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I want to draw a flat ground plane with a reference grid and I_t_m wondering what would be the best technique to use with Babylon.js._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ve considered creating a fragment shader_co_ but I_t_m not familiar with GLSL and struggling with things like anti-aliasing. I_t_ve been fiddling with some code I got from a StackOverflow question_co_ but I_t_m afraid I don_t_t have enough experience with GLSL to take things further to solve issues with broken lines and aliasing._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_precision mediump float_sm_varying vec2 vUV_sm_void main(void) {    if(fract(vUV.x / 0.1) &lt_sm_ 0.01 || fract(vUV.y / 0.1) &lt_sm_ 0.01) {        gl_FragColor _eq_ vec4(0.25_co_ 0.5_co_ 1.0_co_ 1.0)_sm_    } else {        gl_FragColor _eq_ vec4(0.9_co_ 0.9_co_ 0.9_co_ 1.0)_sm_    }}_lt_/pre_gt__lt_p_gt_Here_t_s what the result looks like_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2015/post-15331-0-83798500-1436345104.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2015/post-15331-0-83798500-1436345104_thumb.png_qt_ data-fileid_eq__qt_4601_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-15331-0-83798500-1436345104_thumb.p_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Other solutions I came across while Googling about included using a texture material_co_ and using the Canvas 2D API to dynamically draw the grid_co_ meaning I could make the grid adaptive as the view distance changes. I just think_co_ however_co_ a texture consumes much more memory than a shader would_co_ and perhaps a shader would be faster._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Another_co_ and I bet poorer_co_ solution I considered included just creating line objects in the scene._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_/div_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-07-08T15:39:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_This is always a tough question. Using lines could be interesting a performance wise it should be ok_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sparkbuzz","Date":"2015-07-08T17:33:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Well_co_ shader wise_co_ here_t_s what I come up so far_dd__lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt__lt_a href_eq__qt_http_dd_//www.babylonjs.com/cyos/#IBHRN%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/cyos/#IBHRN#1_lt_/a_gt__lt_/div_gt__lt_br_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sparkbuzz","Date":"2015-07-08T17:42:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Here_t_s the result of the above shader in my application. I_t_m not sure how to get rid of the gaps caused by aliasing._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2015/post-15331-0-74891400-1436377359.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2015/post-15331-0-74891400-1436377359_thumb.png_qt_ data-fileid_eq__qt_4603_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-15331-0-74891400-1436377359_thumb.p_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sparkbuzz","Date":"2015-07-08T19:08:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Another iteration_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs.com/cyos/#IBHRN%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/cyos/#IBHRN#2_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_#extension GL_OES_standard_derivatives _dd_ enableprecision highp float_sm_varying vec2 vUV_sm_void main(void) {    float divisions _eq_ 10.0_sm_    float thickness _eq_ 0.01_sm_    float delta _eq_ 0.05 / 2.0_sm_        float x _eq_ fract(vUV.x / (1.0 / divisions))_sm_    float xdelta _eq_ fwidth(x) * 2.5_sm_    x _eq_ smoothstep(x - xdelta_co_ x + xdelta_co_ thickness)_sm_        float y _eq_ fract(vUV.y / (1.0 / divisions))_sm_    float ydelta _eq_ fwidth(y) * 2.5_sm_    y _eq_ smoothstep(y - ydelta_co_ y + ydelta_co_ thickness)_sm_        float c _eq_ clamp(x + y_co_ 0.1_co_ 1.0)_sm_        gl_FragColor _eq_ vec4(c_co_ c_co_ c_co_ 1.0)_sm_}_lt_/pre_gt__lt_p_gt_No more gaps_co_ but still weird artifacts. Not really sure how to get the lines perfectly smooth..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2015/post-15331-0-70198900-1436382387.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2015/post-15331-0-70198900-1436382387_thumb.png_qt_ data-fileid_eq__qt_4604_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-15331-0-70198900-1436382387_thumb.p_qt__gt__lt_/a_gt__lt_/p_gt__lt_/div_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-07-08T21:06:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_If you want your grid lines to have actual thickness (as if they were drawn on the ground)_co_ your best bet is to use a tiled texture with mip mapping. Using a shader for this will be too much trouble and I don_t_t think there is any real advantage._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you don_t_t care having lines with a constant thickness_co_ using lines meshes as DK suggested would be a very simple solution. Whichever solution you decide to go by_co_ performance should not be a concern for you._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-07-08T22:53:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_That_t_s what I did on my editor. the use of a transparent texture with a grid that repeats and the result is pretty good._lt_br_gt_ _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint lang-auto_qt__gt_                var grid _eq_ BABYLON.Mesh.CreateGround(_qt_GridLevelWater_qt__co_ 100_co_ 100_co_ 1_co_ scene_co_ false)_sm_\t\tvar materialGrid _eq_ new BABYLON.StandardMaterial(_qt_textureGrid_qt__co_ scene)_sm_\t\tmaterialGrid.diffuseTexture _eq_ new BABYLON.Texture(_qt_Images/grid.png_qt__co_ scene)_sm_\t\tmaterialGrid.diffuseTexture.hasAlpha _eq_ true_sm_\t\tmaterialGrid.diffuseTexture.uScale _eq_ 5.0_sm_\t\tmaterialGrid.diffuseTexture.vScale _eq_ 5.0_sm_\t\tgrid.material _eq_ materialGrid_sm_\t\tgrid.position.y _eq_ -0.05_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sparkbuzz","Date":"2015-07-09T06:55:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Mmm_co_ I like jahow_t_s idea of the lines being constant thickness_co_ no matter the distance from the camera. I_t_m going to do some A-B testing with a texture as well_co_ as I might want to render some text on the texture later on._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sparkbuzz","Date":"2015-07-09T07:08:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_@dad72_co_ here_t_s the result when using a 64x64 PNG texture_co_ I_t_m seeing lines being broken_co_ but I think the problem here is mipmapping. Just need to figure out how to turn that on._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2015/post-15331-0-34766500-1436425724.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2015/post-15331-0-34766500-1436425724_thumb.png_qt_ data-fileid_eq__qt_4605_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-15331-0-34766500-1436425724_thumb.p_qt__gt__lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I tried using a post process filter to add fxaa anti-aliasing_co_ but I_t_m not sure if I_t_m doing it right_co_ not seeing any difference_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var camera_dd_BABYLON.ArcRotateCamera _eq_ new BABYLON.ArcRotateCamera(_t_main_camera_t__co_ Math.PI / 4_co_ Math.PI * 0.3_co_ 18_co_ BABYLON.Vector3.Zero()_co_ this.scene)_sm_camera.attachControl(canvas_co_ true)_sm_camera.inertia _eq_ 0_sm_camera.angularSensibility _eq_ 250_sm_camera.attachPostProcess(new BABYLON.FxaaPostProcess(_qt_fxaa_qt__co_ 1.0_co_ camera_co_ BABYLON.Texture.TRILINEAR_SAMPLINGMODE_co_ engine_co_ true))_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sparkbuzz","Date":"2015-07-09T07:34:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m seeing something really weird. It doesn_t_t matter if I turn anti-aliasing on/off on the following call_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var engine_dd_BABYLON.Engine _eq_ new BABYLON.Engine(canvas_co_ true)_sm__lt_/pre_gt__lt_p_gt_the second parameter doesn_t_t appear to make any difference on the texture?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_EDIT_dd_ Scrap that_co_ I see that AA only affects geometry_co_ not textures_co_ so how do I apply AA to textures?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-07-09T10:11:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_First of all_co_ please note that if you can transpose your problem into a _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/_qt_ rel_eq__qt_external nofollow_qt__gt_playground_lt_/a_gt__co_ it will be easier to help you._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Now_co_ I don_t_t think AA is what you_t_re looking for (and neither is the smoothing parameter in engine creation). What you experience is exactly what MIP mapping was invented for _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_There is a parameter in the texture creator to enable mip mapping_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/page.php?p_eq_25221_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/page.php?p_eq_25221_lt_/a_gt__lt_/p_gt__lt_p_gt_Mip mapping is on by default I think_co_ so in theory you shouldn_t_t even have to worry about it..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For the record_dd__lt_/p_gt__lt_p_gt_- FXAA operates in screen space and smoothes pixels next to each other (not sure how exactly that works though!)_co_ but it won_t_t bring you back _qt_missing_qt_ ones on the far grid lines_lt_/p_gt__lt_p_gt_- Engine smoothing (on by default) operates on the edges of rendered polygons_co_ and draws antialiased edges instead of hard ones_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_EDIT_dd_ actually I realized my answer was incomplete_dd_ in this case_co_ _lt_strong_gt_anisotropic filtering_lt_/strong_gt_ might also help you. Still_co_ this should be enabled by default_co_ so again_co_ without a live example it_t_s hard to tell where you issue may be._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sparkbuzz","Date":"2015-07-09T11:07:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_My code_t_s written in Typescript_co_ and I_t_m not sure if the playground will allow me to upload my texture image_co_ but that_t_s definitely a good suggestion._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think the ultimate solution is just going to be to create a mesh with a bunch of line mesh children. So far the result is much better than the texture approach_co_ and I like the fact that the lines remain the same thickness despite the camera distance._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-07-09T11:09:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Uploading won_t_t work_co_ but loading data from an external resource should be possible._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Feel free to drop a screenshot here once you_t_re satisfied with the result _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ no shame in boasting._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"sparkbuzz","Date":"2015-07-09T15:38:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Here_t_s the result using BABYLON.LineMesh_co_ much better..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_To get the center lines thicker I_t_ll use planes_co_ and perhaps scale them based on camera distance_co_ to keep their width uniform._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a class_eq__qt_ipsAttachLink ipsAttachLink_image_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2015/post-15331-0-73711100-1436456240.png_qt_ rel_eq__qt_external nofollow_qt__gt__lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_07_2015/post-15331-0-73711100-1436456240_thumb.png_qt_ data-fileid_eq__qt_4608_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_post-15331-0-73711100-1436456240_thumb.p_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]