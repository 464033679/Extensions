[{"Owner":"MackeyK24","Date":"2017-08-21T13:39:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIn unity they have transform.forward_co_ right and up.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe docs for unity say the forward is _dd_ _t_The blue axis of the transform in world space._t_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_using UnityEngine_sm_\nusing System.Collections_sm_\n\npublic class ExampleClass _dd_ MonoBehaviour {\n    public float thrust_sm_\n    public Rigidbody rb_sm_\n    void Start() {\n        rb _eq_ GetComponent&lt_sm_Rigidbody&gt_sm_()_sm_\n    }\n    void Update() {\n        rb.AddForce(transform.forward * thrust)_sm_\n    }\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow would I do this in Babylon.... \n_lt_/p_gt_\n\n_lt_p_gt_\n\tYo _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ or ANYBODY _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tHow do we get the forward vector in Babylon... Would this work_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_        /** The blue axis of the transform in world space. */\n        public static GetForwardVector(mesh_dd_AbstractMesh_co_ force?_dd_boolean)_dd_BABYLON.Vector3 {\n            var matrix_dd_BABYLON.Matrix _eq_ mesh.computeWorldMatrix(force)_sm_\n            return BABYLON.Vector3.TransformCoordinates(BABYLON.Vector3.Forward()_co_ matrix)_sm_\n        }\n        \n        /** The red axis of the transform in world space. */\n        public static GetRightVector(mesh_dd_AbstractMesh_co_ force?_dd_boolean)_dd_BABYLON.Vector3 {\n            var matrix_dd_BABYLON.Matrix _eq_ mesh.computeWorldMatrix(force)_sm_\n            return BABYLON.Vector3.TransformCoordinates(BABYLON.Vector3.Right()_co_ matrix)_sm_\n        }\n\n        /** The green axis of the transform in world space. */\n        public static GetUpVector(mesh_dd_AbstractMesh_co_ force?_dd_boolean)_dd_BABYLON.Vector3 {\n            var matrix_dd_BABYLON.Matrix _eq_ mesh.computeWorldMatrix(force)_sm_\n            return BABYLON.Vector3.TransformCoordinates(BABYLON.Vector3.Up()_co_ matrix)_sm_\n        }\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso I saw some c++ code for getting forward vector using the quaternion_co_ could I use this in babylon or SHOULD I even try use in Babylon ... Is there something already in Babylon for this_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_Vector3 Quaternion_dd__dd_GetForwardVector() const\n{\n    return Vector3( 2 * (x * z + w * y)_co_ \n                    2 * (y * x - w * x)_co_\n                    1 - 2 * (x * x + y * y))_sm_\n}\n \nVector3 Quaternion_dd__dd_GetUpVector() const\n{\n    return Vector3( 2 * (x * y - w * z)_co_ \n                    1 - 2 * (x * x + z * z)_co_\n                    2 * (y * z + w * x))_sm_\n}\n \nVector3 Quaternion_dd__dd_GetRightVector() const\n{\n    return Vector3( 1 - 2 * (y * y + z * z)_co_\n                    2 * (x * y + w * z)_co_\n                    2 * (x * z - w * y))_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tOr am I way off _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2017-08-21T13:57:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#2609XG_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#2609XG_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.abstractMesh.ts#L1832_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Mesh/babylon.abstractMesh.ts#L1832_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"SvenFrankson","Date":"2017-08-21T14:00:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIf you want your first attempt to work_co_ I think you need to use TransformNormal_co_ and not TransformCoordinates.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t(because it_t_s a direction / normal_co_ not a position / coordinates)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI don_t_t know enough about Quaternion for the 2nd one_co_ but if it works I guess it would be a pretty optimized way to do it. Only issue would be that unlike in Unity_co_ rotation and rotationQuaternion are not binded together.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MackeyK24","Date":"2017-08-23T02:30:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI think I got it... These are my little _qt_Unity-Like_qt_ Helper functions on the SceneManager class_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_// *********************************** //\n// *   Update Actor Helper Support   * //\n// *********************************** //\n\n/** Applies force to actor using physics imposter. */\npublic addForce(owner_dd_BABYLON.AbstractMesh_co_ force_dd_BABYLON.Vector3_co_ contact_dd_BABYLON.Vector3) _dd_ void {\n    if (owner !_eq_ null) {\n        if (owner.physicsImpostor !_eq_ null) {\n            if (force !_eq_ null &amp_sm_&amp_sm_ contact !_eq_ null) owner.physicsImpostor.applyForce(force_co_ contact)_sm_\n        } else {\n            BABYLON.Tools.Warn(_qt_Physics imposter not defined for mesh_dd_ _qt_ + owner.name)_sm_\n        }\n    }\n}\n/** Applies impulse to actor using physics imposter. */\npublic addImpulse(owner_dd_BABYLON.AbstractMesh_co_ force_dd_BABYLON.Vector3_co_ contact_dd_BABYLON.Vector3) _dd_ void {\n    if (owner !_eq_ null) {\n        if (owner.physicsImpostor !_eq_ null) {\n            if (force !_eq_ null &amp_sm_&amp_sm_ contact !_eq_ null) owner.physicsImpostor.applyImpulse(force_co_ contact)_sm_\n        } else {\n            BABYLON.Tools.Warn(_qt_Physics imposter not defined for mesh_dd_ _qt_ + owner.name)_sm_\n        }\n    }\n}\n/** Moves actor using physics imposter. */\npublic moveWithPhysics(owner_dd_BABYLON.AbstractMesh_co_ velocity_dd_BABYLON.Vector3_co_ angular_dd_BABYLON.Vector3 _eq_ null) _dd_ void {\n    if (owner !_eq_ null) {\n        if (owner.physicsImpostor !_eq_ null) {\n            if (velocity !_eq_ null) owner.physicsImpostor.setLinearVelocity(velocity)_sm_\n            if (angular !_eq_ null) owner.physicsImpostor.setAngularVelocity(angular)_sm_\n        } else {\n            BABYLON.Tools.Warn(_qt_Physics imposter not defined for mesh_dd_ _qt_ + owner.name)_sm_\n        }\n    }\n}\n/** Moves actor using camera collisions. */\npublic moveWithCollisions(owner_dd_BABYLON.AbstractMesh_co_ velocity_dd_BABYLON.Vector3) _dd_ void {\n    if (owner !_eq_ null &amp_sm_&amp_sm_ velocity !_eq_ null) {\n        owner.moveWithCollisions(velocity)_sm_\n    }\n}\n\n// ************************************ //\n// *  Public Transform Tools Support  * //\n// ************************************ //\n\n/** Transforms position from local space to world space. */\npublic transformPosition(owner_dd_ BABYLON.AbstractMesh | BABYLON.Camera_co_ position_dd_BABYLON.Vector3)_dd_BABYLON.Vector3 {\n    return BABYLON.Vector3.TransformCoordinates(position_co_ owner.getWorldMatrix())_sm_\n}\n/** Transforms direction from local space to world space. */\npublic transformDirection(owner_dd_ BABYLON.AbstractMesh | BABYLON.Camera_co_ direction_dd_BABYLON.Vector3)_dd_BABYLON.Vector3 {\n    return BABYLON.Vector3.TransformNormal(direction_co_ owner.getWorldMatrix())_sm_\n}\n\n// ************************************ //\n// *  Scene Direction Helper Support  * //\n// ************************************ //\n\n/** Gets the blue axis of the owner in world space. */\npublic getForwardVector(owner_dd_ BABYLON.AbstractMesh | BABYLON.Camera)_dd_BABYLON.Vector3 {\n    return owner.getDirection(BABYLON.Vector3.Forward())\n}\n/** Gets the red axis of the owner in world space. */\npublic getRightVector(owner_dd_ BABYLON.AbstractMesh | BABYLON.Camera)_dd_BABYLON.Vector3 {\n    return owner.getDirection(BABYLON.Vector3.Right())_sm_\n}\n/** Gets the green axis of the owner in world space. */\npublic getUpVector(owner_dd_ BABYLON.AbstractMesh | BABYLON.Camera)_dd_BABYLON.Vector3 {\n    return owner.getDirection(BABYLON.Vector3.Up())_sm_\n}\n\n// ************************************* //\n// *  Public Quaternion Tools Support  * //\n// ************************************* //\n\n/** Computes the Quaternion forward vector */\npublic getQuaternionForwardVector(quat_dd_Quaternion)_dd_BABYLON.Vector3 {\n    return new BABYLON.Vector3( 2 * (quat.x * quat.z + quat.w * quat.y)_co_ 2 * (quat.y * quat.x - quat.w * quat.x)_co_ 1 - 2 * (quat.x * quat.x + quat.y * quat.y))_sm_\n}\n/** Computes the Quaternion right vector */\npublic getQuaternionRightVector(quat_dd_Quaternion)_dd_BABYLON.Vector3  {\n    return new BABYLON.Vector3( 1 - 2 * (quat.y * quat.y + quat.z * quat.z)_co_ 2 * (quat.x * quat.y + quat.w * quat.z)_co_ 2 * (quat.x * quat.z - quat.w * quat.y))_sm_\n}\n/** Computes the Quaternion up vector */\npublic getQuaternionUpVector(quat_dd_Quaternion)_dd_ BABYLON.Vector3 {\n    return new BABYLON.Vector3( 2 * (quat.x * quat.y - quat.w * quat.z)_co_ 1 - 2 * (quat.x * quat.x + quat.z * quat.z)_co_ 2 * (quat.y * quat.z + quat.w * quat.x))_sm_\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tWorking great so far _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]