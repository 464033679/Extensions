[{"Owner":"demonixis","Date":"2014-04-10T09:20:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For performances reasons on mobile devices_co_ I need to disable some textures at runtime to get a good FPS rate. In BABYLON.Scene.js  there is a parameter to disable all textures but it_t_s don_t_t what I need. I need to disable only some textures not all._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I haven_t_t found a method to do that. A good way could be to easily remove a specified uniform define. We can add some parameters in Scene.js to disable a specified type of texture. _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_if (this._scene.texturesEnabled) {        if (this.specularTexture &amp_sm_&amp_sm_ this._scene.specularTextureEnabled) { }}_lt_/pre_gt__lt_div_gt_Is there a better method ? What do you think about that ? If you want I can send a pull request that do this job _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_Yann._lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_Edit_dd_ I send a pull request which _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/c970e352b7cc6584c0d33374d995c7f63c1d6215/Babylon/Materials/babylon.standardMaterial.js_qt_ rel_eq__qt_external nofollow_qt__gt_has been merged_lt_/a_gt__co_ we can achieve this by using static parameters_dd__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_// Disable bump and specular texture for all Standard MaterialsBabylon.StandardMaterial.BumpTextureEnabled _eq_ false_sm_Babylon.StandardMaterial.SpecularTextureEnabled _eq_ false_sm__lt_/pre_gt__lt_p_gt_@_lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/user/4442-deltakosh/_qt_ title_eq__qt__qt__gt_Deltakosh_lt_/a_gt__dd_ Thanks for merging _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2014-04-14T23:26:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi.  Didn_t_t all this flag checking add a ton of processing time to StandardMaterial?  Why not put in CreateScene()..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_   if (client _eq__eq_ crappy phone) {_lt_/p_gt__lt_p_gt_         crappyPhone _eq_ 1_sm__lt_/p_gt__lt_p_gt_   }_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_And then later..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_     if (!crappyPhone) {_lt_/p_gt__lt_p_gt_         add some texture_lt_/p_gt__lt_p_gt_     }_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_   etc._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It seems to me that the framework is having to do a bunch of extra work_co_ when the scene author should be doing the check-for-crappy-device in _lt_u_gt_their_lt_/u_gt_ CreateScene() function.  Something is not good or right_co_ here_co_ it seems.  We shouldn_t_t be slowing EVERYONE down... just so an author can kiss the butt of a slow mobile device.  Maybe I am mis-interpreting this_co_  but I see tons of extra testing in this modifed version of standardMaterial.  I sure hope ALL OF US don_t_t need to use this _qt_heavy version_qt_ of standardMaterial.  That would seem terrible_co_ and if my thoughts are correct_co_ my vote is to reject this idea/modification._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"demonixis","Date":"2014-04-15T07:50:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_Hi_co_ _lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_I understand your point of view but I can assure you that there is not so much to test it in the code and are not these tests that will impact the performance of an application. _lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_In the StandardMaterial class there are already several tests that are done and I_t_ve just added a test by texture. I let you look _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/Babylon/Materials/babylon.standardMaterial.js#L67_qt_ rel_eq__qt_external nofollow_qt__gt_at the code_lt_/a_gt_ so that you can see that this is really not heavy. _lt_/div_gt__lt_br_gt__lt_div_gt_ _lt_/div_gt__lt_br_gt__lt_div_gt_I suggest you to read StandardMaterial class and you_t_ll see that there are a lot of tests that are done for each textures for each frames. So if you_t_re using only one diffuse texture you may think that this class is to heavy for you right ? These tests are really simple._lt_/div_gt__lt_br_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Feldspar","Date":"2014-04-15T08:17:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I agree with demonixis_co_ for each texture you have on your material_co_ there is only 1 more boolean to test._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The best part is_co_ since JavaScript has lazy evaluation on booleans_co_ whenever you have_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_this.ambientTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.AmbientTextureEnabled_lt_/pre_gt__lt_p_gt_If this.ambientTexture _eq__eq__eq_ undefined_co_ the evaluation will stop here and BABYLON.StandardMaterial.AmbientTextureEnabled will not even be tested._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2014-04-15T11:39:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi gang.  I understand_co_ and thanks for the clarification and added knowledge for me.  Yes_co_ for one material_co_ there is not too much added overhead.  But in a 400 material big scene... that is where my concern lies.  That info about lazy boolean evaluation is VERY good news_co_ thanks for that._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In other projects_co_ though_co_ I have seen flags get completely out of control.  Although this is a ridiculous example_co_ I have seen things like..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_if (this.ambientTexture &amp_sm_&amp_sm_ BABYLON.StandardMaterial.AmbientTextureEnabled &amp_sm_&amp_sm_ this.isInFrustum(scene.activeCamera) &amp_sm_&amp_sm_ this.isLit() &amp_sm_&amp_sm_ !(_qt_BlackAndWhite_qt_ in this.tags) &amp_sm_&amp_sm_ this.isEnabled() &amp_sm_&amp_sm_ this.isVisible() &amp_sm_&amp_sm_ this.LOD &gt_sm_ this.LodTexturingThreshhold &amp_sm_&amp_sm_ !daughterPregnant) { ... }  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_We just can_t_t let things get out of control. I sure don_t_t want to stand in the way of progress and innovation... but I have seen ugly things.  Let_t_s be careful.   _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  Thanks again for the info and reassurances_co_ friends._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]