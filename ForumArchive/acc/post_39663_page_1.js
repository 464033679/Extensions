[{"Owner":"joeBImagine","Date":"2018-08-27T14:47:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello Babylon community!! I have a query concerning implementing a callback in a callback for taking a screenshot of cameras.  I have this function call \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_createCameraView_dd_ function (camera)\n{\n    let src_sm_\n    BABYLON.Tools.CreateScreenshot(engine_co_ camera_co_  { width_dd_ 293_co_ height_dd_ 150 }_co_ function (data) { src _eq_ data_sm_ })_sm_\n    return src_sm_\n}_co__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tthe callback function actually saves out the image for each camera (including the hidden on_t_s) in the scene as a base64 to the images src tag_co_ but that saving part takes time.  The part that I am confused about is actually setting up a callback for the callback_co_ that lets me know when the image itself is done rendering.  I am sorry I do not have a playground as most of this code is internal.  And also please forgive me if this is not enough information to understand my issue.  Cheers!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-08-27T15:20:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIf you pass in the function you wish to run as an argument to createCameraView_co_ then call assign it as the callback_co_ then ditch the let_co_ your anonymous function &amp_sm_ the return.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-08-27T15:22:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI think he means like a DOM image.onload callback_co_ so when the screenshot has been made and is visible.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"joeBImagine","Date":"2018-08-27T15:43:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAww yes! Something similar to a DOM image.onload callback.  But mainly for when it is fully made_co_ so that I can update my react toolbar  \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-08-27T15:47:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSo img.onload is not what you need?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"joeBImagine","Date":"2018-08-27T15:54:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tCome to think of it_co_ you are right.  I tried that before_co_ but I wasn_t_t implementing it correctly it would seem.  \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_let img _eq_ new Image()_sm_\n    img.onload _eq_ function () {\n   alert(_qt_image is loaded_qt_)_sm_\n}\n    img.src _eq_ src_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-08-27T16:05:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tPerfect! \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]