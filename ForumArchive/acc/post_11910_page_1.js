[{"Owner":"spritefire","Date":"2015-01-22T12:48:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I have had a look and couldn_t_t find any answers (mostly because the results returned were the opposite of what I am trying to achieve)._lt_br_gt__lt_br_gt_I know with three.js it_t_s possible to embed web pages into the actual scene itself_dd_ _lt_a href_eq__qt_http_dd_//learningthreejs.com/blog/2013/04/30/closing-the-gap-between-html-and-webgl/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//learningthreejs.com/blog/2013/04/30/closing-the-gap-between-html-and-webgl/_lt_/a_gt__lt_/p_gt__lt_p_gt_(mind you the link is rather old so I presume things have since progressed)_lt_/p_gt__lt_p_gt_Reason I ask is because I see the future of the web using 3 dimensional interactions (as we are 3 dimensional creatures so 3D UI makes sense) so being able to implement web functionality from existing html code would be an easier bridge for everyone to cross._lt_br_gt__lt_br_gt_Otherwise I am assuming that the clicking a mesh or object etc would fire off the ability to fire off a javascript function that could return data as a texture_co_ in which case are there any commands that allow you to create input fields on textures using babylon? If there is nothing like this at the moment i have an idea of how to create something like this_co_ but would prefer the more traditional form input fields._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-01-22T13:50:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_div_gt_You can submit your idea here_dd_ _lt_a href_eq__qt_http_dd_//babylonjs.uservoice.com/forums/267546-general_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//babylonjs.uservoice.com/forums/267546-general_lt_/a_gt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_This is a nice feature. a bit like VideoTexture babylon_co_ but then it would webTexture  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/div_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-01-22T13:53:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I don_t_t know if this is what you_t_re aiming for_co_ but for my current project (game) I_t_m using HTML + CSS to handle the user interface. The UI is made from DOM elements that are placed dynamically above the canvas running WebGL. This way I_t_m effectively mixing HTML &amp_sm_ WebGL_co_ and still keeping all the functionality of the DOM objects_dd_ events_co_ CSS properties etc._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It is still not as flexible as having the DOM objects integrated to the scene. Namely_co_ I can_t_t actually put WebGL stuff in front of DOM elements_co_ well not without resorting to sneaky tricks like leaving part of the canvas transparent etc. But I don_t_t think it_t_s possible to have the DOM objects in the BJS scene AND keep their events functional (on click_co_ on hover_co_ etc.)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Just though I_t_d share that with you_co_ since this was a big design decision for me and I_t_ve looked quite a lot on the internet before making it._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-01-22T14:20:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_+1_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think you either_lt_/p_gt__lt_p_gt_map DOM html objects onto mesh textures so you can manage them in the WebGL context as other 3D objects_co_ but you loose the possibilty to interact with in the DOM (as they aren_t_t any longer DOM html objects but bitmaps)_lt_/p_gt__lt_p_gt_either_lt_/p_gt__lt_p_gt_choose not to use the WebGL context (so forget BJS) and then use CSS3 3D transformations (with 3D world axis_co_ gpu acceleration_co_ but less rich in terms of coding tools) and keep the whole DOM html features and interactions_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_z-sorting webgl elements to have them _qt_behind_qt_ DOM elements_co_ and vice-versa_co_ might be... infernal_co_ imho_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The article you linked_co_ I know well_co_  just show a dynamicTexture-like solution _dd_ the html page is no longer a html page but a texture_co_ so not interactive._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In Threejs_co_ they_t_ve got a real dedicated renderer_co_ called CSS3Renderer_co_ which abstract dynamic CSS3 manipulations with other renderer (webGL_co_ canvas2D) same call signatures. But this renderer has very little methods to deal with in terms of 3D_co_ therefore it supports every DOM HTML interactions._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"reddozen","Date":"2015-01-22T18:04:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I would imagine that you would slow down your game rendering with that over just letting CSS etc handle it all. I wouldn_t_t personally want to take that hit to my fame processing time._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-01-23T00:22:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_And this is not technically feasable with webgl _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ alt_eq__qt__dd_(_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"spritefire","Date":"2015-01-23T06:22:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Maybe not with webgl but with javascript as a bridge between the two using the method jahow said above which after searching seems to be pretty commonplace. _lt_br_gt__lt_br_gt_It also appears that on the link I had sent earlier the webpages were actual webpages with full interactivity and not a texture (he demonstrates its usage in the clip on his page). I have found other pages that were based off what he was doing and can also see full interactivity with the webpage. However I think with the latest versions of threejs the effect itself has become broken and the html textures (well illusion of texture) is no longer skewing correctly across all browsers (this happens a LOT with threejs they will bring out a newer version that will break everything in older versions) and is probably why it is now only being shown as a bitmap texture on his demo. _lt_br_gt__lt_br_gt_Here is a link to one which is using the method mentioned by jahow and also on that blog_dd__lt_br_gt__lt_a href_eq__qt_http_dd_//jensarps.de/3d/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jensarps.de/3d/_lt_/a_gt__lt_br_gt__lt_br_gt_The computer and desk are obj files and the screen is a canvas placed across it to give it the appearance of a ht texture. The links work (although some go to a new tab)._lt_br_gt__lt_br_gt_I guess one of the reasons I am pushing for something like this is for the use of web applications within babylonjs. ie you might be in a virtual meeting by visiting a website and you click on a virtual button and it brings up your email or calender. Or you might be roaming a virtual kingdom and want to do something on the web at the same time (like order pizza). There are other ways to go about it ie using a backend function that writes a call that posts the email text to the dynamic texture and then using bitmap character keys mapped to keyboard input to write a reply. It all comes down to interface_co_ using preexisting webpages as the illusion of texture or using the data that exists on webpages (or spat out by apis) and creating an interface around that data (which would look a lot prettier and would mean any virtual interface could be created). Hmm_co_ come to think of it I like the latter more. Scraping the data from existing websites and placing that data into a new interface. A new glowy translucent interface. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_br_gt__lt_br_gt_In regards to performance there should be the ability to switch something like this on or off_co_ but that is a feature which would be good for all of babylon ie choosing a flag or config of either performance or one that is juicy (or even inbetween). That way everyone is happy. Here is a great video on _qt_juice_qt_ and its also why I think it_t_s important_dd_ \n_lt_/p_gt__lt_div class_eq__qt_ipsEmbeddedVideo_qt_ contenteditable_eq__qt_false_qt__gt__lt_div_gt__lt_iframe width_eq__qt_480_qt_ height_eq__qt_270_qt_ src_eq__qt_https_dd_//www.youtube.com/embed/Fy0aCDmgnxg?feature_eq_oembed_qt_ frameborder_eq__qt_0_qt_ allowfullscreen_eq__qt_true_qt__gt__lt_/iframe_gt__lt_/div_gt__lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-01-23T08:50:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Oooppss_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You_t_re right and I was wrong _dd_ the page in the demo is interactive (I mistook this article for the one about his dynamicTextures)._lt_/p_gt__lt_p_gt_But_co_ my explanation was still right _dd_ in this demo_co_ the treejs WebGL isn_t_t used. He uses the threejs CSS3Rendeder._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So everything done in this demo are _qt_just_qt_ (*) CSS3 complex transformations._lt_/p_gt__lt_p_gt_This means there is no underlying webGL canvas element and no explicit WebGL API method is used. Only CSS3 transformations and material acceleration if present._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_BJS is WebGL-only focused and intends to optimize everything in here while Threejs tends to cover every possible feature _dd_ different visions._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So according to your needs_co_ you have to opt for one or another_co_ then manage with the power and the weakness of what you_t_ve chosen _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_(*) _qt_just_qt_ _eq_ it is a threejs community really huge work to have succeeded to achieve this stuff therefore !_lt_/p_gt__lt_p_gt_the guy who prototyped it here _dd_ _lt_a href_eq__qt_http_dd_//keithclark.co.uk/labs/three-js-css-renderer/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//keithclark.co.uk/labs/three-js-css-renderer/_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"spritefire","Date":"2015-01-23T10:30:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_You_t_re right CSS3 transformations are more of an illusion than an actual solution (for what I am thinking of anyway)._lt_br_gt_ _lt_/p_gt__lt_p_gt_From everything that has been mentioned it_t_s not technically possible to embed html as a texture into webgl (so the traditional way of input via form fields is a no go) there appears to be a way to replicate some of the the basic features of a webpage (or at least create a cube etc with a working contact page on it for example) using babylon along with dynamicTexture and drawtext. _lt_br_gt__lt_br_gt_I do have another question relating to input fields but I will mark this thread as answered because truly embedding html is a no go. _lt_br_gt__lt_br_gt_ _lt_br_gt__lt_br_gt__lt_br_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"wikiwiggs","Date":"2015-02-03T07:30:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I know you marked this as answered_co_ however_co_ I am very interested in the topic_co_ and was wondering if a dynamicTexture along with drawtext could be implemented alongside of javascript event listeners that would place the focus on hidden form items?_lt_/p_gt__lt_p_gt_Even if these are not truly hidden (eg. elem.style.visibility _eq_ _t_hidden_t__sm_) but rather have their z-index less than that of the canvas element to hide them_co_ but still make them usable._lt_/p_gt__lt_p_gt_If I remember correctly (it_t_s been years since I_t_ve messed with it)_co_ their seemed to be good PHP stuff you could do via Imagemagic_co_ where you could pick button styles_co_ add text_co_ change fonts_co_ etc..._lt_/p_gt__lt_p_gt_Then all that really needed to happen from there was that the button was served up via a downloadable file_co_ or rendered in the webpage after submit._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_example_dd_ _lt_a href_eq__qt_http_dd_//www.webestools.com/button-maker-image-free-button-generator-online-web20.html_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.webestools.com/button-maker-image-free-button-generator-online-web20.html_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m guessing_co_ that this could be served up more efficient if you could actually use some AJAX methods in the hidden html elements._lt_/p_gt__lt_p_gt_Although great care would have to be taken based on the readiness of the calculated image stream._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Anyway_co_ this post really intrigued me_co_ and I thought it was worth getting more people thinking about it_co_ and how to pull it off in creative ways_co_ until the standards solidify to incorporate this kind of thing._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Kind Regards_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"lesterhaus","Date":"2016-05-05T18:25:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey_co_ hey!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tJust stumbled over this thread in my search for.. well a CSS3D render possibility with BJS.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWould it be possible to create something like a placeholder plane in a scene_co_ let BJS take care of all the transformation goodness when moving the camera and set my CSS3D transformations for a stinky old &lt_sm_div id_eq__qt_superCSS3Dawesome_qt_&gt_sm_&lt_sm_!-- your html content here --&gt_sm_&lt_sm_/div&gt_sm_ accordingly in my runRenderLoop? \n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ since no one (except maybe the overall performance gods) can stop me to write weirdest stuff into the renderLoop I guess my question is not if it is possible_co_ but rather how do I get the current transformation of a mesh out of BJS when a frame is drawn on the canvas?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo I_t_m not talking about the position or rotation in the current scene_co_ but the resulting 2D projection of it?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dal","Date":"2016-05-05T19:52:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis is probably what you need_co_ but it needs porting to Babylon _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/jeromeetienne/threex.htmlmixer_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/jeromeetienne/threex.htmlmixer_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]