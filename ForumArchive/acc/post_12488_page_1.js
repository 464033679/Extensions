[{"Owner":"benoit-1842","Date":"2015-02-13T18:54:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi everybody !!!!!  Before moving on I will like to say that babylon.js is the best community out there and I will always be faithful...  But I have found today a library call jthree.js and it looks very interesting because they are doing exactkly what I am trying to do....  Does a webgl guru give me some pointers on how this setup works _dd_ _lt_a href_eq__qt_http_dd_//editor.jthree.jp/?id_eq_VCpG2w_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//editor.jthree.jp/?id_eq_VCpG2w_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanx_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Benoit_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-02-13T19:04:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_everything is clearly detailed here _dd_ _lt_a href_eq__qt_http_dd_//jthree.jp/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//jthree.jp/_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-02-13T19:21:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Nihongo o hanashimasu ka?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-02-13T19:39:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_just a small tiny microscopic little_lt_/p_gt__lt_p_gt_I only can count from one to ten and know little common words _dd_ thank you_co_ sorry_co_ hello_co_ go on_co_ stop_co_ good bye_co_ etc_lt_/p_gt__lt_p_gt__lt_em_gt_(years of martial arts help)_lt_/em_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Not enough to make bad jokes on a 3D framework forum  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2015-02-13T19:48:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Bof._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-02-13T19:58:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yeah !!!!!!  I know !!!!  But there_t_s maybe Japanese user of babylon.js _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ !!!!!  But me too my Japanese is a little bit rusty......... _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  This library looks powerful though !!!!!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_HaPPY SUSHI !!!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_benoit_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-02-14T05:56:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I use the Kinect v2 daily_co_ and animare characters using the BabylonJS framework.  I can see what you_t_re doing_co_ but have no idea why either so much is displayed or if all of the elements displayed are essential to animating using the Kinect.  My pipeline is 5 minutes of capture and maybe 30 (often 5) minutes to publish online using existing software.  Can you provide more info on your process?  Cheers._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-02-14T06:09:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_hi thanx for answering !!!!  What I am trying to do is I capture the joint data of a skeleton with the kinect v2 and I want to implement this animation or data inside an avatar in babylon.js.  But I don_t_t know how to grab my data from a json file and put it in my model....  Any pointer will be appreciated...  Here_t_s a json file of the data I am receiving..._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_https_dd_//drive.google.com/file/d/0B_ZBy6q5jS8xaFhBRVhnYXBmY2c/view?usp_eq_sharing_qt_ title_eq__qt_External link_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//drive.google...iew?usp_eq_sharing_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanx for responding_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Benoit_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-02-14T09:32:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I completely seperate the building and rigging of any character - the characer is it_t_s own easthetic model and the rigging (skeleton) only has to work within the 3D software which has to have an FBX (or .babylon) exporter.  Once this is acomplished and the character is deforming the way it was designed_co_ then I import my character into Motionbuilder_co_ and characterize it (if you need any help with this_co_ I can certainly provide the steps to do so.)  Once I have my character in MotionBuilder_co_ I then use software made by my long time friends in Amsterdam - the software is named Brekel Pro Body - below is the link to their site_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//brekel.com/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//brekel.com/_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You can use either probody1 or probody2 based upon your version of the Kinect.  I prefer the Kinect v2 as it has increased the resolution by a value of approximately 4x - so the results are far greter than the Kinect v1.  But it matters far little than you might think for the motion capture.  They are both very responsive_co_ and Brekel will provide you with a temp fully functional license upon request for you to test.  However_co_ once I have a character in MotionBuilder_co_ I can do so much with it.  Ican capture motion and within a few minutes export a .babylon file and publish on our server.  Again_co_ I_t_m very happy to walk you through the steps to do this._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Please keep in mind there are strict vertex and polygon restrictions for render in WebGL when building characer models and their children_co_ but otherwise it_t_s a fairly simple task.  Once you capture the motion using the Brekel plugin to MotionBuilder_co_ and once the fbx file is written out and converted to .babylon - I am able to produce and publish online as much animation as I can capture and publish - very little other work is involved - once your pipreline is in place.  I hope this helps_co_ but please ask for any assistance you might need.  I_t_m alittle busy right now_co_ but will check daily if you might like this pipeline and ask for any assistance.  Cheers._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-02-14T15:04:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi Thank you for your interest... Yes I have use brekel and the results are great !!!! But you are right there_t_s not a lot of difference in mocap in between the k1 and k2... I have used a software call mikumikucapture and it_t_s working well. But that_t_s not my problem.. Right now we are using a skeleton capture in json ( like the file I have give to you in one of the reply). My challenge is to put those datas at the right bone in the code in b.js and after to be able to have a new set of bone position and animation and be able to change it.... So I have a model in b.js and i want with that model to play animation 1 i.e And after I need to play animation 2 but using only json file and not having to pass by blender or motion builder to build the animation I need to target thev json file to the correct bones inside babylon.js....Hope it makes sense_co__lt_/p_gt__lt_p_gt_Benoit_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-02-14T20:11:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have only looked at using the json format to evaluate_co_ and have not produced any animation that I have continued with to work within babylon.  This is because there are so many attributes that are required to be declared_co_ and there is no layer of association using software (compiled code) to simplify this process.  After more than 20 years of working with motion capture and all of the issues in re-targetting motion_co_ I quickly determined not to further explore the json format.  From my experience_co_ you are attempting to animate using a format which will provide a quality of animation which will never be consistant - especially when attempting to re-target a persons motion to a skeleton of different proportions which wil always be the case._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I wish I could advise a course for your current pipeline_co_ but I would advise against the direction in which you are currently following.  Using MotionBuilder will save considerable time which almost always directly results in saving cost_co_ and the goal is to publish animated characters as far as I can tell.  Using the Kinect v2_co_ I can scan_co_ build and bind to a skeleton_co_ retarget_co_ animate_co_ and publish online animated characters within a day.  And if I already have a charcter built_co_ the process takes 1 or 2 hours currently._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_When I purchased the first license of Filmbox (MotionBuilder) way back in 1996_co_ it was quite difficult to re-target animation using their software as it was built to animate light shows - not characters.  However I would still choose this first version over the json format.  The people who contribute to the json format are quite thorough_co_ but I choose to spend my time on aesthetics rather than an ever changing process of coding my captured motion to a skeleton of considerably different proportions as will always be the case._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I wish I could offer more encouragement_co_ but I must tell you of the great pain I have experienced over the years using mocap_co_ and the various options now available to make the process much more simple.  I wish you all the best.  Cheers._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-02-14T21:58:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I know exactly what you mean.  For my personnal work_co_ I work with almost the same pipeline as you......  MikuMikuCapture (way better than brekel...trust me)_co_ the motion capture goes into blender or motion builder for retargeting and I export that to babylon.js with no problem....  the problem is sometime you have to work with company constraints and one of them is the animation have to be done with a json file capture with a kinect 2...  I don_t_t need a retargeting system in babylon.js but I need that yes_co_ the animation is accurate.  So me_co_ I see it has a challenge _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_....._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thank you very much for your insight_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Benoit Gauthier_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-02-15T06:15:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks for referring me to MMC.  I took a look_co_ and would like to know if the software supports the Kinext2 - as the MMC build appears quite dated from the English site I found to download.  If there is an updated version in English_co_ please provide a link as I_t_d like to compare to Brekel Body.  Good luck with the work using json.  Cheers. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-02-15T06:30:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_No it_t_s a kinect 1 only software but wow !!!  The motion capture in bvh is excellent !!!  My personnal workflow is mmc (export bvh)---&gt_sm__lt_/p_gt__lt_p_gt_Blender for retargeting (makewalk plugin) and making my model a beauty -----&gt_sm_ export to babylon.js.  You were right_co_ with that workflow_co_ I spend less time in the motion capture technicality and more time in the esthetic...    And the beauty of my workflow_co_ it_t_s totally free and the results are awesome....If you have any info you can give me about the json file I will be very happy to listen to your advice...   Have a good day_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Benoit_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-02-15T19:07:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_ll take a look at the work I did using json_co_ and see if there might be abything useful beyond what is readily online.  Thanks for the insight into MMC - I_t_m not a huge fan of .bvh for my own use_co_ but it has certainly worked for decades and still used in production with the old Activision system (Biomechanics Corp. and now Giant).  I_t_ll test the Kinect 1 in MMC vs. Kinect v2 using Brekel_co_ and see if there are substantial differences these days.  Also_co_ Brekel is working on newer versions still_co_ and is also a friend - so I can ask for _qt_favors_qt_ from time to time.  Cheers._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-07-07T21:22:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi dbawel !!!  I must say that since a couple month I am using the wisdom of this post and it_t_s true that not using a json format is the way to go !!!!!  Me I am using the Kinect 1 and it_t_s true that my mocap is fairly good.  I think that the Kinect 2 is good but you need a very fast computer_co_ usb 3 etc.  Me I love my modest laptop and I am doing great with it with the kinect 1 with Brekel or mmc.  So me I am working on a project (kind of) that it_t_s possible for high school student to do mocap with a very limited budget.......  I would like your thought on this or if it_t_s possible having advice on how to get good mocap and where to go from there_co_ animation_co_ games etc....._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanx_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Ben_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-07-08T01:16:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi benoit_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In revisiting the json fromat_co_ it is more than difficult to use. I believe you are already producing good mocap_co_ and if you use the tools in Motionbuilder_co_ you can refine this further.  As for where to go with this knowledge - good question.  However_co_ if you want to purse mocap as a vocation_co_ then you_t_ll need to move onto the passive optical systems such as Motion Anaylysis and Vicon.  These have expanded beyond capturing biomechanical data_co_ and into other production areas such as camera tracking.  In order to get into these areas_co_ you must know Motionbuilder and I also recommend Blade_co_ and take a job as an intern at a mocp facility - one that is actually doing work daily_co_ as most system simply sit waiting for work._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Cheers_co__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2015-07-08T04:12:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Jumping back a moment to jthree_co_ it seems to be more aimed at non-programmers. The getting-started article shows setting up a scene declaratively in an HTML-like language_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_&lt_sm_goml&gt_sm_    &lt_sm_head&gt_sm_        &lt_sm_txr id_eq__qt_txr1_qt_ src_eq__qt_img/earth.jpg_qt_ /&gt_sm_        &lt_sm_geo id_eq__qt_geo1_qt_ type_eq__qt_Sphere_qt_ param_eq__qt_10 64 64_qt_ /&gt_sm_        &lt_sm_mtl id_eq__qt_mtl1_qt_ type_eq__qt_MeshPhong_qt_ param_eq__qt_map_dd_ #txr1_sm_ color_dd_ #0ff_sm_ specular_dd_ #fff_sm__qt_ /&gt_sm_        &lt_sm_rdr frame_eq__qt_body_qt_ camera_eq__qt_camera_dd_first_qt_ param_eq__qt_antialias_dd_ true_sm_ clearColor_dd_ #fff_sm__qt_ /&gt_sm_    &lt_sm_/head&gt_sm_    &lt_sm_body&gt_sm_        &lt_sm_scene&gt_sm_            &lt_sm_mmd model_eq__qt_model/miku/index.pmx_qt_ /&gt_sm_            &lt_sm_mesh geo_eq__qt_#geo1_qt_ mtl_eq__qt_#mtl1_qt_ style_eq__qt_positionY_dd_ -10_sm__qt_&gt_sm_&lt_sm_/mesh&gt_sm_            ..._lt_/pre_gt__lt_p_gt_It looks like it_t_s a project with quite different goals from BJS._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-07-09T05:57:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yeah ! Because the goal I am working on_co_ it_t_s to have an avatar in babylon.js animated by the kinect in realtime. I am investigating a couple of route here....._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Benoit_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-07-09T06:00:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Something a little bit like that is interesting _dd__lt_a href_eq__qt_https_dd_//www.youtube.com/watch?v_eq_tDlSlu8IxuQ_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.youtube.com/watch?v_eq_tDlSlu8IxuQ_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_That_t_s what I want to achieve but I miss a walkthrough or some experience to be able to build that code._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-07-09T12:24:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I wish I had time now_co_ but I wrote the code to run reattime mocap from motiobuilder to most any other package.  Ask me in 1 month_co_ and I_t_m sure I can help you with this._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-07-09T19:50:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thank you very much for this future help..._dd_-) for now is it possible to have a little bit of code that I can put my hands on.  And does your work is using the web ? Or it_t_s all non-web stuff ?_lt_/p_gt__lt_p_gt_Thank you_co__lt_/p_gt__lt_p_gt_Benoit_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-07-09T23:05:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I have no code to parse real time mocap to a browser.  It is all in different plugins specifically for a rendering package.  I could send you a plugin for Motionbuilder that runs peer to peer from one Motionbuilder session to another remotely written in C++_co_ but I doubt many people would be able to read the code.  If you_t_re up fpr it_co_ I_t_m sure I have it on a disk.  Let me know_co_ but beware_co_ it took 8 months to write and do the QA._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2015-07-11T01:56:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_If you can understand this_co_ then I can post more.  Good info though - written 15 years ago but the math is as valid now as was then._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt_/*****************************************************************************_lt_/div_gt__lt_div_gt_ * Sources_dd__lt_/div_gt__lt_div_gt_ *_lt_span_gt_ _lt_/span_gt_Shoemake_co_ Ken_co_ _qt_Animating Rotations with Quaternion Curves_qt__lt_/div_gt__lt_div_gt_ *_lt_span_gt_ _lt_/span_gt_Computer Graphics 85_co_ pp. 245-254_lt_/div_gt__lt_div_gt_ *_lt_span_gt_ _lt_/span_gt_Watt and Watt_co_ Advanced Animation and Rendering Techniques_lt_/div_gt__lt_div_gt_ *_lt_span_gt_ _lt_/span_gt_Addison Wesley_co_ pp. 360-368_lt_/div_gt__lt_div_gt_ *  Shoemake_co_ Graphic Gems II._lt_/div_gt__lt_div_gt_ *_lt_/div_gt__lt_div_gt_ *****************************************************************************/_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_/*****************************************************************************_lt_/div_gt__lt_div_gt_ *_lt_span_gt_ _lt_/span_gt_Copyright 1997 Jeff Lander_co_ All Rights Reserved._lt_/div_gt__lt_div_gt_ *  For educational purposes only._lt_/div_gt__lt_div_gt_ *  Please do not republish in electronic or print form without permission_lt_/div_gt__lt_div_gt_ *  Thanks - jeffl@darwin3d.com_lt_/div_gt__lt_div_gt_ *****************************************************************************/_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_#include _qt_stdafx.h_qt__lt_/div_gt__lt_div_gt_#include &lt_sm_math.h&gt_sm__lt_/div_gt__lt_div_gt_#include _qt_amQuaternion.h_qt__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_#define M_PI        3.14159265358979323846_lt_/div_gt__lt_div_gt_#define HALF_PI_lt_span_gt_ _lt_/span_gt_    1.57079632679489661923_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_void CopyVector(tVector *dest_co_ tVector *src)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_dest-&gt_sm_x _eq_ src-&gt_sm_x_sm__lt_/div_gt__lt_div_gt_dest-&gt_sm_y _eq_ src-&gt_sm_y_sm__lt_/div_gt__lt_div_gt_dest-&gt_sm_z _eq_ src-&gt_sm_z_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_void ScaleVector(tVector *vect_co_ float scale)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_vect-&gt_sm_x *_eq_ scale_sm__lt_/div_gt__lt_div_gt_vect-&gt_sm_y *_eq_ scale_sm__lt_/div_gt__lt_div_gt_vect-&gt_sm_z *_eq_ scale_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_void AddVectors(tVector *vect1_co_ tVector *vect2_co_ tVector *dest)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_dest-&gt_sm_x _eq_ vect1-&gt_sm_x + vect2-&gt_sm_x_sm__lt_/div_gt__lt_div_gt_dest-&gt_sm_y _eq_ vect1-&gt_sm_y + vect2-&gt_sm_y_sm__lt_/div_gt__lt_div_gt_dest-&gt_sm_z _eq_ vect1-&gt_sm_z + vect2-&gt_sm_z_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_float DotVectors(tVector *vect1_co_ tVector *vect2)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_return_lt_span_gt_ _lt_/span_gt_(vect1-&gt_sm_x * vect2-&gt_sm_x) + _lt_/div_gt__lt_div_gt_(vect1-&gt_sm_y * vect2-&gt_sm_y) + _lt_/div_gt__lt_div_gt_(vect1-&gt_sm_z * vect2-&gt_sm_z)_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_void CrossVectors(tVector *vect1_co_ tVector *vect2_co_ tVector *dest)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_// COMPUTE THE CROSS PRODUCT_lt_/div_gt__lt_div_gt_dest-&gt_sm_x _eq_ (vect1-&gt_sm_y * vect2-&gt_sm_z) - (vect1-&gt_sm_z * vect2-&gt_sm_y)_sm__lt_/div_gt__lt_div_gt_dest-&gt_sm_y _eq_ (vect1-&gt_sm_z * vect2-&gt_sm_x) - (vect1-&gt_sm_x * vect2-&gt_sm_z)_sm__lt_/div_gt__lt_div_gt_dest-&gt_sm_z _eq_ (vect1-&gt_sm_x * vect2-&gt_sm_y) - (vect1-&gt_sm_y * vect2-&gt_sm_x)_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_void MultQuaternions(tQuaternion *quat1_co_ tQuaternion *quat2_co_ tQuaternion *dest)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_tQuaternion v1_co_v2_co_v3_co_vf_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_CopyVector((tVector *)&amp_sm_v1_co_ (tVector *)quat1)_sm__lt_span_gt_ _lt_/span_gt_// COPY OFF THE VECTOR PART OF THE QUAT1_lt_/div_gt__lt_div_gt_ScaleVector((tVector *)&amp_sm_v1_co_quat2-&gt_sm_w)_sm__lt_span_gt_ _lt_/span_gt_// MULTIPLY IT BY THE SCALAR PART OF QUAT2_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_CopyVector((tVector *)&amp_sm_v2_co_ (tVector *)quat2)_sm__lt_span_gt_ _lt_/span_gt_// COPY OFF THE VECTOR PART OF THE QUAT1_lt_/div_gt__lt_div_gt_ScaleVector((tVector *)&amp_sm_v2_co_quat1-&gt_sm_w)_sm__lt_span_gt_ _lt_/span_gt_// MULTIPLY IT BY THE SCALAR PART OF QUAT2_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_CrossVectors((tVector *)quat2_co_(tVector *)quat1_co_(tVector *)&amp_sm_v3)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_AddVectors((tVector *)&amp_sm_v1_co_ (tVector *)&amp_sm_v2_co_ (tVector *)&amp_sm_vf)_sm__lt_/div_gt__lt_div_gt_AddVectors((tVector *)&amp_sm_v3_co_ (tVector *)&amp_sm_vf_co_ (tVector *)&amp_sm_vf)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_vf.w _eq_ (quat1-&gt_sm_w * quat2-&gt_sm_w) - DotVectors((tVector *)quat1_co_(tVector *)quat2)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_dest-&gt_sm_x _eq_ vf.x_sm__lt_/div_gt__lt_div_gt_dest-&gt_sm_y _eq_ vf.y_sm__lt_/div_gt__lt_div_gt_dest-&gt_sm_z _eq_ vf.z_sm__lt_/div_gt__lt_div_gt_dest-&gt_sm_w _eq_ vf.w_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_/* AN OPTIMIZATION/REORGANIZATION OF ABOVE CODE - NOT AS CLEAR _lt_/div_gt__lt_div_gt_   I THINK THIS IS SIMILAR TO GRAPHIC GEMS THOUGH I DON_t_T HAVE THE REF HANDY_lt_/div_gt__lt_div_gt_   THE MATH CHECKS OUT THOUGH */_lt_/div_gt__lt_div_gt_void MultQuaternions2(tQuaternion *quat1_co_ tQuaternion *quat2_co_ tQuaternion *dest)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_    tQuaternion tmp_sm__lt_/div_gt__lt_div_gt_    tmp.x _eq__lt_span_gt_ _lt_/span_gt_quat2-&gt_sm_w * quat1-&gt_sm_x + quat2-&gt_sm_x * quat1-&gt_sm_w +_lt_/div_gt__lt_div_gt_quat2-&gt_sm_y * quat1-&gt_sm_z - quat2-&gt_sm_z * quat1-&gt_sm_y_sm__lt_/div_gt__lt_div_gt_    tmp.y  _eq__lt_span_gt_ _lt_/span_gt_quat2-&gt_sm_w * quat1-&gt_sm_y + quat2-&gt_sm_y * quat1-&gt_sm_w +_lt_/div_gt__lt_div_gt_quat2-&gt_sm_z * quat1-&gt_sm_x - quat2-&gt_sm_x * quat1-&gt_sm_z_sm__lt_/div_gt__lt_div_gt_    tmp.z  _eq__lt_span_gt_ _lt_/span_gt_quat2-&gt_sm_w * quat1-&gt_sm_z + quat2-&gt_sm_z * quat1-&gt_sm_w +_lt_/div_gt__lt_div_gt_quat2-&gt_sm_x * quat1-&gt_sm_y - quat2-&gt_sm_y * quat1-&gt_sm_x_sm__lt_/div_gt__lt_div_gt_    tmp.w  _eq__lt_span_gt_ _lt_/span_gt_quat2-&gt_sm_w * quat1-&gt_sm_w - quat2-&gt_sm_x * quat1-&gt_sm_x -_lt_/div_gt__lt_div_gt_quat2-&gt_sm_y * quat1-&gt_sm_y - quat2-&gt_sm_z * quat1-&gt_sm_z_sm__lt_/div_gt__lt_div_gt_    dest-&gt_sm_x _eq_ tmp.x_sm_ dest-&gt_sm_y _eq_ tmp.y_sm__lt_/div_gt__lt_div_gt_    dest-&gt_sm_z _eq_ tmp.z_sm_ dest-&gt_sm_w _eq_ tmp.w_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// Discussion_dd_  Quaternions must follow the rules of x^2 + y^2 + z^2 + w^2 _eq_ 1_lt_/div_gt__lt_div_gt_//_lt_span_gt_ _lt_/span_gt_This function insures this_lt_/div_gt__lt_div_gt_void NormalizeQuaternion(tQuaternion *quat)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_float magnitude_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// FIRST STEP_co_ FIND THE MAGNITUDE_lt_/div_gt__lt_div_gt_magnitude _eq_ (quat-&gt_sm_x * quat-&gt_sm_x) + _lt_/div_gt__lt_div_gt_(quat-&gt_sm_y * quat-&gt_sm_y) + _lt_/div_gt__lt_div_gt_(quat-&gt_sm_z * quat-&gt_sm_z) + _lt_/div_gt__lt_div_gt_(quat-&gt_sm_w * quat-&gt_sm_w)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// DIVIDE BY THE MAGNITUDE TO NORMALIZE_lt_/div_gt__lt_div_gt_quat-&gt_sm_x _eq_ quat-&gt_sm_x / magnitude_sm__lt_/div_gt__lt_div_gt_quat-&gt_sm_y _eq_ quat-&gt_sm_y / magnitude_sm__lt_/div_gt__lt_div_gt_quat-&gt_sm_z _eq_ quat-&gt_sm_z / magnitude_sm__lt_/div_gt__lt_div_gt_quat-&gt_sm_w _eq_ quat-&gt_sm_w / magnitude_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_//_lt_span_gt_ _lt_/span_gt_Uses (X_co_Y_co_Z) order_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_void EulerToQuaternion(tVector *rot_co_ tQuaternion *quat)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_float rx_co_ ry_co_ rz_co__lt_/div_gt__lt_div_gt_tx_co_ ty_co_ tz_co__lt_/div_gt__lt_div_gt_cx_co_ cy_co_ cz_co__lt_/div_gt__lt_div_gt_sx_co_ sy_co_ sz_co__lt_/div_gt__lt_div_gt_cc_co_ cs_co_ sc_co_ ss_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// FIRST STEP_co_ CONVERT ANGLES TO RADIANS_lt_/div_gt__lt_div_gt_rx _eq_  (rot-&gt_sm_x * (float)M_PI) / (360 / 2)_sm__lt_/div_gt__lt_div_gt_ry _eq_  (rot-&gt_sm_y * (float)M_PI) / (360 / 2)_sm__lt_/div_gt__lt_div_gt_rz _eq_  (rot-&gt_sm_z * (float)M_PI) / (360 / 2)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// GET THE HALF ANGLES_lt_/div_gt__lt_div_gt_tx _eq_ rx * (float)0.5_sm__lt_/div_gt__lt_div_gt_ty _eq_ ry * (float)0.5_sm__lt_/div_gt__lt_div_gt_tz _eq_ rz * (float)0.5_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_cx _eq_ (float)cos(tx)_sm__lt_/div_gt__lt_div_gt_cy _eq_ (float)cos(ty)_sm__lt_/div_gt__lt_div_gt_cz _eq_ (float)cos(tz)_sm__lt_/div_gt__lt_div_gt_sx _eq_ (float)sin(tx)_sm__lt_/div_gt__lt_div_gt_sy _eq_ (float)sin(ty)_sm__lt_/div_gt__lt_div_gt_sz _eq_ (float)sin(tz)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_cc _eq_ cx * cz_sm__lt_/div_gt__lt_div_gt_cs _eq_ cx * sz_sm__lt_/div_gt__lt_div_gt_sc _eq_ sx * cz_sm__lt_/div_gt__lt_div_gt_ss _eq_ sx * sz_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_quat-&gt_sm_x _eq_ (cy * sc) - (sy * cs)_sm__lt_/div_gt__lt_div_gt_quat-&gt_sm_y _eq_ (cy * ss) + (sy * cc)_sm__lt_/div_gt__lt_div_gt_quat-&gt_sm_z _eq_ (cy * cs) - (sy * sc)_sm__lt_/div_gt__lt_div_gt_quat-&gt_sm_w _eq_ (cy * cc) + (sy * ss)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// INSURE THE QUATERNION IS NORMALIZED_lt_/div_gt__lt_div_gt_// PROBABLY NOT NECESSARY IN MOST CASES_lt_/div_gt__lt_div_gt_NormalizeQuaternion(quat)_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// A second variation.  Creates a series of quaternions and multiplies_lt_/div_gt__lt_div_gt_// them together. Would be easier to extend this for other rotation orders_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_void EulerToQuaternion2(tVector *rot_co_ tQuaternion *quat)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_float rx_co_ry_co_rz_co_ti_co_tj_co_tk_sm__lt_/div_gt__lt_div_gt_tQuaternion qx_co_qy_co_qz_co_qf_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// FIRST STEP_co_ CONVERT ANGLES TO RADIANS_lt_/div_gt__lt_div_gt_rx _eq_  (rot-&gt_sm_x * (float)M_PI) / (360 / 2)_sm__lt_/div_gt__lt_div_gt_ry _eq_  (rot-&gt_sm_y * (float)M_PI) / (360 / 2)_sm__lt_/div_gt__lt_div_gt_rz _eq_  (rot-&gt_sm_z * (float)M_PI) / (360 / 2)_sm__lt_/div_gt__lt_div_gt_// GET THE HALF ANGLES_lt_/div_gt__lt_div_gt_ti _eq_ rx * (float)0.5_sm__lt_/div_gt__lt_div_gt_tj _eq_ ry * (float)0.5_sm__lt_/div_gt__lt_div_gt_tk _eq_ rz * (float)0.5_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_qx.x _eq_ (float)sin(ti)_sm_ qx.y _eq_ 0.0_sm_ qx.z _eq_ 0.0_sm_ qx.w _eq_ (float)cos(ti)_sm__lt_/div_gt__lt_div_gt_qy.x _eq_ 0.0_sm_ qy.y _eq_ (float)sin(tj)_sm_ qy.z _eq_ 0.0_sm_ qy.w _eq_ (float)cos(tj)_sm__lt_/div_gt__lt_div_gt_qz.x _eq_ 0.0_sm_ qz.y _eq_ 0.0_sm_ qz.z _eq_ (float)sin(tk)_sm_ qz.w _eq_ (float)cos(tk)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_MultQuaternions(&amp_sm_qx_co_&amp_sm_qy_co_&amp_sm_qf)_sm__lt_/div_gt__lt_div_gt_MultQuaternions(&amp_sm_qf_co_&amp_sm_qz_co_&amp_sm_qf)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// ANOTHER TEST VARIATION_lt_/div_gt__lt_div_gt_//_lt_span_gt_ _lt_/span_gt_MultQuaternions2(&amp_sm_qx_co_&amp_sm_qy_co_&amp_sm_qf)_sm__lt_/div_gt__lt_div_gt_//_lt_span_gt_ _lt_/span_gt_MultQuaternions2(&amp_sm_qf_co_&amp_sm_qz_co_&amp_sm_qf)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// INSURE THE QUATERNION IS NORMALIZED_lt_/div_gt__lt_div_gt_// PROBABLY NOT NECESSARY IN MOST CASES_lt_/div_gt__lt_div_gt_NormalizeQuaternion(&amp_sm_qf)_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_quat-&gt_sm_x _eq_ qf.x_sm__lt_/div_gt__lt_div_gt_quat-&gt_sm_y _eq_ qf.y_sm__lt_/div_gt__lt_div_gt_quat-&gt_sm_z _eq_ qf.z_sm__lt_/div_gt__lt_div_gt_quat-&gt_sm_w _eq_ qf.w_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_void QuatToAxisAngle(tQuaternion *quat_co_ tQuaternion *axisAngle)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_float scale_co_tw_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_tw _eq_ (float)acos(quat-&gt_sm_w) * 2_sm__lt_/div_gt__lt_div_gt_scale _eq_ (float)sin(tw / 2.0)_sm__lt_/div_gt__lt_div_gt_axisAngle-&gt_sm_x _eq_ quat-&gt_sm_x / scale_sm__lt_/div_gt__lt_div_gt_axisAngle-&gt_sm_y _eq_ quat-&gt_sm_y / scale_sm__lt_/div_gt__lt_div_gt_axisAngle-&gt_sm_z _eq_ quat-&gt_sm_z / scale_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// NOW CONVERT THE ANGLE OF ROTATION BACK TO DEGREES_lt_/div_gt__lt_div_gt_axisAngle-&gt_sm_w _eq_ (tw * (360 / 2)) / (float)M_PI_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_#define DELTA_lt_span_gt_ _lt_/span_gt_0.0001_lt_span_gt_ _lt_/span_gt_// DIFFERENCE AT WHICH TO LERP INSTEAD OF SLERP_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_void SlerpQuat2(tQuaternion *quat1_co_ tQuaternion *quat2_co_ float slerp_co_ tQuaternion *result)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_tQuaternion quat1b_sm__lt_/div_gt__lt_div_gt_double omega_co_ cosom_co_ sinom_co_ scale0_co_ scale1_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// USE THE DOT PRODUCT TO GET THE COSINE OF THE ANGLE BETWEEN THE_lt_/div_gt__lt_div_gt_// QUATERNIONS_lt_/div_gt__lt_div_gt_cosom _eq_ quat1-&gt_sm_x * quat2-&gt_sm_x + _lt_/div_gt__lt_div_gt_quat1-&gt_sm_y * quat2-&gt_sm_y + _lt_/div_gt__lt_div_gt_quat1-&gt_sm_z * quat2-&gt_sm_z + _lt_/div_gt__lt_div_gt_quat1-&gt_sm_w * quat2-&gt_sm_w_sm_ _lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// MAKE SURE WE ARE TRAVELING ALONG THE SHORTER PATH_lt_/div_gt__lt_div_gt_if (cosom &lt_sm_ 0.0)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_// IF WE ARE NOT_co_ REVERSE ONE OF THE QUATERNIONS_lt_/div_gt__lt_div_gt_cosom _eq_ -cosom_sm__lt_/div_gt__lt_div_gt_quat1b.x _eq_ - quat1-&gt_sm_x_sm__lt_/div_gt__lt_div_gt_quat1b.y _eq_ - quat1-&gt_sm_y_sm__lt_/div_gt__lt_div_gt_quat1b.z _eq_ - quat1-&gt_sm_z_sm__lt_/div_gt__lt_div_gt_quat1b.w _eq_ - quat1-&gt_sm_w_sm__lt_/div_gt__lt_div_gt_} else {_lt_/div_gt__lt_div_gt_quat1b.x _eq_ quat1-&gt_sm_x_sm__lt_/div_gt__lt_div_gt_quat1b.y _eq_ quat1-&gt_sm_y_sm__lt_/div_gt__lt_div_gt_quat1b.z _eq_ quat1-&gt_sm_z_sm__lt_/div_gt__lt_div_gt_quat1b.w _eq_ quat1-&gt_sm_w_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_if ((1.0 - cosom) &gt_sm_ DELTA) {_lt_/div_gt__lt_div_gt_omega _eq_ acos(cosom)_sm__lt_/div_gt__lt_div_gt_sinom _eq_ sin(omega)_sm__lt_/div_gt__lt_div_gt_scale0 _eq_ sin((1 - slerp) * omega) / sinom_sm__lt_/div_gt__lt_div_gt_scale1 _eq_ sin(slerp * omega) / sinom_sm__lt_/div_gt__lt_div_gt_} else {_lt_/div_gt__lt_div_gt_scale0 _eq_ 1.0 - slerp_sm__lt_/div_gt__lt_div_gt_scale1 _eq_ slerp_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_result-&gt_sm_x _eq_ (float)(scale0 * quat1-&gt_sm_x + scale1 * quat2-&gt_sm_x)_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_y _eq_ (float)(scale0 * quat1-&gt_sm_y + scale1 * quat2-&gt_sm_y)_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_z _eq_ (float)(scale0 * quat1-&gt_sm_z + scale1 * quat2-&gt_sm_z)_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_w _eq_ (float)(scale0 * quat1-&gt_sm_w + scale1 * quat2-&gt_sm_w)_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_void SlerpQuat(tQuaternion *quat1_co_ tQuaternion *quat2_co_ float slerp_co_ tQuaternion *result)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_double omega_co_ cosom_co_ sinom_co_ scale0_co_ scale1_sm__lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// USE THE DOT PRODUCT TO GET THE COSINE OF THE ANGLE BETWEEN THE_lt_/div_gt__lt_div_gt_// QUATERNIONS_lt_/div_gt__lt_div_gt_cosom _eq_ quat1-&gt_sm_x * quat2-&gt_sm_x + _lt_/div_gt__lt_div_gt_quat1-&gt_sm_y * quat2-&gt_sm_y + _lt_/div_gt__lt_div_gt_quat1-&gt_sm_z * quat2-&gt_sm_z + _lt_/div_gt__lt_div_gt_quat1-&gt_sm_w * quat2-&gt_sm_w_sm_ _lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_// CHECK A COUPLE OF SPECIAL CASES. _lt_/div_gt__lt_div_gt_// MAKE SURE THE TWO QUATERNIONS ARE NOT EXACTLY OPPOSITE? (WITHIN A LITTLE SLOP)_lt_/div_gt__lt_div_gt_if ((1.0 + cosom) &gt_sm_ DELTA)_lt_/div_gt__lt_div_gt_{_lt_/div_gt__lt_div_gt_// ARE THEY MORE THAN A LITTLE BIT DIFFERENT? AVOID A DIVIDED BY ZERO AND LERP IF NOT_lt_/div_gt__lt_div_gt_if ((1.0 - cosom) &gt_sm_ DELTA) {_lt_/div_gt__lt_div_gt_// YES_co_ DO A SLERP_lt_/div_gt__lt_div_gt_omega _eq_ acos(cosom)_sm__lt_/div_gt__lt_div_gt_sinom _eq_ sin(omega)_sm__lt_/div_gt__lt_div_gt_scale0 _eq_ sin((1.0 - slerp) * omega) / sinom_sm__lt_/div_gt__lt_div_gt_scale1 _eq_ sin(slerp * omega) / sinom_sm__lt_/div_gt__lt_div_gt_} else {_lt_/div_gt__lt_div_gt_// NOT A VERY BIG DIFFERENCE_co_ DO A LERP_lt_/div_gt__lt_div_gt_scale0 _eq_ 1.0 - slerp_sm__lt_/div_gt__lt_div_gt_scale1 _eq_ slerp_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_result-&gt_sm_x _eq_ (float)(scale0 * quat1-&gt_sm_x + scale1 * quat2-&gt_sm_x)_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_y _eq_ (float)(scale0 * quat1-&gt_sm_y + scale1 * quat2-&gt_sm_y)_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_z _eq_ (float)(scale0 * quat1-&gt_sm_z + scale1 * quat2-&gt_sm_z)_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_w _eq_ (float)(scale0 * quat1-&gt_sm_w + scale1 * quat2-&gt_sm_w)_sm__lt_/div_gt__lt_div_gt_} else {_lt_/div_gt__lt_div_gt_// THE QUATERNIONS ARE NEARLY OPPOSITE SO TO AVOID A DIVIDED BY ZERO ERROR_lt_/div_gt__lt_div_gt_// CALCULATE A PERPENDICULAR QUATERNION AND SLERP THAT DIRECTION_lt_/div_gt__lt_div_gt_result-&gt_sm_x _eq_ -quat2-&gt_sm_y_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_y _eq_ quat2-&gt_sm_x_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_z _eq_ -quat2-&gt_sm_w_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_w _eq_ quat2-&gt_sm_z_sm__lt_/div_gt__lt_div_gt_scale0 _eq_ sin((1.0 - slerp) * (float)HALF_PI)_sm__lt_/div_gt__lt_div_gt_scale1 _eq_ sin(slerp * (float)HALF_PI)_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_x _eq_ (float)(scale0 * quat1-&gt_sm_x + scale1 * result-&gt_sm_x)_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_y _eq_ (float)(scale0 * quat1-&gt_sm_y + scale1 * result-&gt_sm_y)_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_z _eq_ (float)(scale0 * quat1-&gt_sm_z + scale1 * result-&gt_sm_z)_sm__lt_/div_gt__lt_div_gt_result-&gt_sm_w _eq_ (float)(scale0 * quat1-&gt_sm_w + scale1 * result-&gt_sm_w)_sm__lt_/div_gt__lt_div_gt_}_lt_/div_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt_}_lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"benoit-1842","Date":"2015-07-13T23:41:34Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanx for all those datas it means a lot !!!!  Now it_t_s to figure out where every parts is going where _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_thanx_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Benoit_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]