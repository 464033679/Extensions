[{"Owner":"Rubis","Date":"2015-04-01T23:56:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I want to show data on a mesh ( an histogram_co_ one axis is data _co_ other is time). I use a dynamic texture and the render loop to slide curent content by one column_co_ then i create an array  to stock my data then i rewrite the content of the array on the first line of my texture context._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_This is an exemple ( playground doesn_t_t work) of the structure. This structure work  but i don_t_t thing i have to touch two time conText with the same function( cost FPS). I_t_m completly conscient that a better way exist like paste each pixel in image data_co_ but before i need your suggestions._lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var dynText _eq_ new BABYLON.DynamicTexture(_qt_dino_qt__co_512_co_scene)_sm_var conText _eq_ dynText.getContext()_sm_var size _eq_ dynText.getSize()_sm_var pixelIndex _eq_0_sm_// render loopengine.runRenderLoop(function () {\t// array of my data_co_ each loop i_t_ve got completly new data [0_co_1]\tdonnee _eq_ ligne()_sm_\t//slide by one all my previous data_co_ NOTICE the one at the end \tconText.putImageData(conText.getImageData(0_co_ 0_co_ size.width_co_ size.height)_co_ 0_co_ 1)_sm_\t\t// write the first line with my data\timageData _eq_ conText.getImageData(0_co_ 0_co_ size.width_co_ size.height)_sm_\t\tfor(var j _eq_0 _sm_j&lt_sm_size.width_sm_j++){\t\tpixelIndex _eq_ j*4_sm_\t\t// grey scale\t\timageData[pixelIndex ] _eq_ donnee[j]*255_sm_ // red one\t\timageData[pixelIndex + 1 ] _eq_ donnee[j]*255_sm_ // green oen\t\timageData[pixelIndex + 2] _eq_ donnee[j]*255_sm_ // blue one\t\timageData[pixelIndex + 3] _eq_ 255_sm_ // alpha\t}\t\tconText.putImageData(imageData_co_0_co_0)_sm_        dynText.update()_sm_\t\t\t        scene.render()_sm_})_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2015-04-02T07:09:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well_co_ generating a new texture each frame is not such a good idea because it_t_s really costly in fps_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_... and human eyeballs can_t_t reasonably follow/understand data evolving 60 times per second_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_That said_co_ if you want to display data with graphics in a 3D engine_co_ why making a 2D texture instead of using directly 3D shapes (planes_co_ boxes_co_ etc) ?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you still want a 2D texture applied to a 3D mesh_co_ I would suggest to re-generate it at some frequency relative to the data refresh only ( with _lt_em_gt_setInterval()_lt_/em_gt_ ) instead of at each frame._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jahow","Date":"2015-04-02T19:05:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It seems you have simpler solutions at hand. As Jerome said_co_ using meshes instead of a dynamic texture could prove useful._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If you want to stick to a DynamicTexture_co_ then I_t_d avise _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_rect(x_co_ y_co_ width_co_ height)_lt_/span_gt_ to draw stuff_co_ instead of _lt_span style_eq__qt_font-family_dd__t_courier new_t__co_ courier_co_ monospace_sm__qt__gt_put/getImageData_lt_/span_gt_. Currently your logic is_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_getImageData of the whole texture_lt_/li_gt__lt_li_gt_putImageData shifted 1 pixel_lt_/li_gt__lt_li_gt_getImageData of the whole texture_lt_/li_gt__lt_li_gt_draw new first line in image data_lt_/li_gt__lt_li_gt_putImageData at the same place_lt_/li_gt__lt_/ul_gt__lt_p_gt_Why not_dd__lt_/p_gt__lt_ul_gt__lt_li_gt_getImageData of the whole texture_lt_/li_gt__lt_li_gt_putImageData shifted 1 pixel_lt_/li_gt__lt_li_gt_draw new first line with rect()_lt_/li_gt__lt_/ul_gt__lt_div_gt_Or even_dd__lt_/div_gt__lt_ul_gt__lt_li_gt_save new data in an array_co_ pushing older data back_lt_/li_gt__lt_li_gt_draw every line from the array using rect()_lt_/li_gt__lt_/ul_gt__lt_p_gt_And of course only update when necessary!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]