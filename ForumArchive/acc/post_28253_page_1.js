[{"Owner":"nikokoneko","Date":"2017-02-06T18:57:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co__lt_br /_gt_\n\tI noticed a problem with VRDeviceOrientationFreeCamera_dd_  when the window is resized_co_ the content displayed by rig cameras get stretched. It looks exactly the same as when using one camera without calling engine.resize().\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am aware of _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/9609-how-to-update-a-postprocess-aspect-ratio-when-the-window-is-resized/#comment-56763_qt_ rel_eq__qt__qt__gt_this_lt_/a_gt_ post_co_ but I don_t_t use distortion correction_co_ hence there is no post process.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI see that it has to do with metrics vResolution_co_ but I don_t_t know if I can update metrics after camera is created and force changes. I messed around with it_co_ without success_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#W1NP4%230_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#W1NP4#0_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tProbably one workaround would be to call setCameraRigMode() for each window resize_co_ but that seems terribly wasteful_co_ as lots of new objects are being created (and destroyed).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAny help much appreciated!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"nikokoneko","Date":"2017-02-06T20:09:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk I messed around a bit more_co_ and came up with a nasty piece of code that does the trick_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#W1NP4%237_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#W1NP4#7_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHowever_co_ this literally has to trash the existing camera and create a new one for the settings to take effect. Still would like to know a more elegant solution _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-02-07T17:24:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI like the way you fixed it. Recreating camera is almost free as there is no postprocess attached.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe other way is just to force the camera to update its projection matrix_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#W1NP4%238_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#W1NP4#8_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]