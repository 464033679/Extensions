[{"Owner":"ziguri","Date":"2017-11-09T16:02:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI do have a mesh with a huge amount of vertices (Meshlab say 1800000 vertices_co_ after unifying duplicates still 304000 vertices). Its stored in an STL File. I import it as a mesh as shown in the example below\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt_t_s doing well on a PC with FPS of almost 60fps. But using mobile devices I end up with 10-20 FPS.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ I am looking for an optimization solution. I read all the HowTo on your Web page. Since its only one model - instancing or cloning does not help.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI thought about using LOD or Auto LOD. But trying that the framerate totally drops. See here (lines 43-45) _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#XG8RH3%231_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#XG8RH3#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFrom Unity I know that they split or slice models with lots of vertices in slices of max 16k vertices. Is there a way in BabylonJS to split huge meshes into slices of sub-meshes to improve FPS performance?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnother idea is to keep the amount of vertices/triangles for the main areas of the model and decrease it for others. Do you support such a feature?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat would you suggest to improve the performance while keeping the information? I know its a trade-off.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThx for your hints.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSee you\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-11-09T16:10:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tyou can slice your mesh into submeshes with the subMeshes property. By default it contains only one subMesh for the entire mesh. You can call mesh.subdivide(x) to cut your mesh into multiples submeshes_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#XG8RH3%232_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#XG8RH3#2_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut the issue is that all your mesh is on the screen so all the vertices has to be rendered.  On mobile it could be interesting to use a simplified version of the mesh perhaps?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ziguri","Date":"2017-11-09T16:26:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_ thx for the fast reply.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOk - how does babylonJS subdivide the mesh? Horizontally_co_ vertically_co_ ...?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo you think - subdividing does not improve the FPS on mobile since we see all the vertices at once? Did I understand you right? We tried the same STL using Unity on a mobile with FPS up to 60. So they probably have another trick.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDo you think any of the optimization techniques explained on the BabylonJS HowTo (_lt_a href_eq__qt_http_dd_//doc.babylonjs.com/how_to_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/how_to_lt_/a_gt_) would help? Or is reducing the vertices the only thing that helps on mobile?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhats the amount of vertices/triangles per scene usually lead to a FPS &gt_sm_ 50 on mobile based on your experience? One important side note - interaction (zoom_co_ rotate) is important to include. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThx in advance\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-11-09T16:34:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t1. Subdivisions is not topologically done. Here is the code_dd_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/efba84ea2e81e56709bca7d6c99f377fb900b304/src/Mesh/babylon.mesh.ts#L738_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/efba84ea2e81e56709bca7d6c99f377fb900b304/src/Mesh/babylon.mesh.ts#L738_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2. I think Unity is not rendering the 1.8 Millions vertices _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ You should make sure that vertices are dedupped first. 300K vertices is a big number but far more accessible for a low end device\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3. On your specific case the only optimization that will work is reducing the number of vertices by merging them. You can use tools like Blender to optimize the mesh and then export a .babylon file\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Convergence","Date":"2017-11-09T16:37:41Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI agree with Deltakosh_co_ I think these kinds of details are much better done using bump or parralax mapping_co_ since the overall shape looks fairly simple.  Many of the details would be lost on mobile anyway.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ziguri","Date":"2017-11-09T16:52:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThx again. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tOk - I think I got the main problem. Does babylonJS provide a function to efficiently reduce the vertices by merging?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe receive the data from a laser scanner in a real environment in a resolution we cant change. Our task is to automatically process the data and present it on a pc and and mobile. Zooming in to specific areas of the mesh is important for our customer - so there should be details available on mobile too (at least in interesting areas). Since we need to automatically (without human interaction) process the data the _qt_workaround_qt_ using Blender (i already tried it) is not the best solution for our specific problem. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tDoes someone have a hint for an automatic / code based vertex reduction?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOtherwise we have to write it by ourself...\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-11-09T16:58:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\thello this is not a big deal_co_ you provide the list of vertices with mesh.getVerticesData(_lt_span style_eq__qt_background-color_dd_#f0f0f0_sm_color_dd_#444444_sm_font-size_dd_16px_sm__qt__gt_BABYLON.VertexBuffer.PositionKind)_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_background-color_dd_#f0f0f0_sm_color_dd_#444444_sm_font-size_dd_16px_sm__qt__gt_then the idea is to simply go through this list and deduplicate manually (could be a long process that you may want to do on the back end) in order to update the list of indices (mesh.getIndices())_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__qt_background-color_dd_#f0f0f0_sm_color_dd_#444444_sm_font-size_dd_16px_sm__qt__gt_btw if you are interested to share this code later we could integrate it into the framework_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-11-09T17:23:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIf you can read python_co_ you might look at the relevant area in the _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Exporters/blob/master/Blender/src/babylon-js/mesh.py#L249_qt_ rel_eq__qt_external nofollow_qt__gt_Blender exporter_lt_/a_gt_.  Blender stores all vertices.  It is the exporter which goes through each one_co_ sees if it is already recorded_co_ and if so also makes sure the material_co_ normals_co_ UVs_co_ vertex colors_co_ matrix weights &amp_sm_ indices match. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI can also see issues if the mesh has multiple materials.  By the time it is in BJS you already have duplicates for the border verts.  These must not be removed.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tComing from a scanner_co_ it probably means the material_co_ normals_co_ UVs_co_ vertex colors_co_ matrix weights &amp_sm_ indices match checking is not required for your case.  You might want to round all your vertices to say 4 decimals before comparing.  This could reduce your count.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2017-11-10T00:11:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThis does some minimising of vertices  _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/samples/minimise_vertices_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/samples/minimise_vertices_lt_/a_gt_ read warning at end. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tEven if it does not do what you want it might give you a start on writing your own.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ziguri","Date":"2017-11-24T17:45:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI just want to send you a brief thx for all the hints. We are on the right track and think BabylonJS will be the right framework to work within our environment.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI will keep you updated how we solve this issue.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThx to all!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]