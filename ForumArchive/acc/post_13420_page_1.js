[{"Owner":"Dinkelborg","Date":"2015-03-26T22:28:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co__lt_br_gt__lt_br_gt_I_t_m working on a little side project where I want to switch between two videos with a slider_co_ now while there might be complex shader ways of doing this I was thinking_dd_ What if I had a hundred little planes which would build a mesh_co_ on which video 1 was projected and another hundred little planes on which video 2 would be visible and I would just place them in front of each other and fade the planes to the left of my slider out..._lt_br_gt__lt_br_gt_So my question would be_dd_ Is it possible to display a video on a hundred little planes? _lt_br_gt_What I_t_m looking for is pretty much EXACTLY this_dd_ _lt_a href_eq__qt_http_dd_//threejs.org/examples/#webgl_materials_video_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//threejs.org/examples/#webgl_materials_video_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2015-03-27T00:56:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hahaha.  Cool idea.  You_t_re going to build a 3D video effects switcher_co_ eh?  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Ok_co_ here_t_s my thoughts.  I know NOTHING about _qt_submeshes_qt_ but they appear to be a way... to make a single plane... from many smaller planes... and the video could map-out across it as if it were a single plane.  Maybe._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Yeah_co_ if you built two back-to-back large planes_co_ each made-up of many subMesh_co_ there should be further fun available.  One video in the back_co_ one in the front_co_ and when you want to switch videos_co_ just rotate _lt_u_gt_all_lt_/u_gt_ the subMeshes (on both big-screens)... 180 degrees.  Yay!  And... fancy positioning and rotating will be within reach.  Be forewarned_co_ though.  I believe subMesh require some unique code in order to rotate or position them individually.  I think you must _qt_transform_qt_ the 4 points of each subMesh plane. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If I may quote deltakosh_co_ I think he called them _qt_quads_qt_ once_co_ when talking with me about the BJS particleSystem.  The speed of Babylon particles is probably the same speeds you can expect when rotating and/or translating YOUR subMesh (That_t_s _lt_u_gt_without_lt_/u_gt_ the video playing. Video slows everything a bit). _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I suppose the BJS particleSystem could be called a quad manager_co_ and there are coding techniques worth stealing_co_ in there.  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Your _qt_changing z-order_qt_ idea would work_co_ I believe.  Also you could drop the .alpha on one video_co_ while raising it on the other (_qt_dissolve_qt_).  And... _qt_wipes_qt_ such as when one screen slides-in from the side and has a physics collision with the other screen_co_ which then skids-off the edge of the ground and falls forever via scene gravity!  FUN!  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ alt_eq__qt__sm_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Dissolves and wipes... some of the earliest and still best... video effects.  yuh yuh yuh._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I believe Fenomas made _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#OM4QU_qt_ rel_eq__qt_external nofollow_qt__gt_this playground demo_lt_/a_gt_ which is one of the smoothest subMesh operations I have seen.  With very little code_co_ he used CreateBox_co_ grabbed its vertexData_co_ disposed the box_co_ and then used that data to make two subMesh boxes.  Two geometries on a single mesh_co_ just that easy.  Pretty nice codin_t_._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Yeah_co_ subMeshes_co_ I think that might work.  I_t_m sure others will have suggestions.  Your idea sounds interesting and fun.  Keep us posted on your experiments_co_ if you do some.  Be well._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-03-27T13:04:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well_co_ the three js demo is actually changing the UV Vertex data of the geometries!_lt_/p_gt__lt_p_gt_So_co_ let_t_s do that too _dd_-)_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#DXCI8%232_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#DXCI8#2_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dinkelborg","Date":"2015-03-27T14:40:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes I was gonna try the same thing! Awesome RaananW!_lt_br_gt_Could you maybe explain a little more of the background behind these commands?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_div_gt_videoPlane.setVerticesData(BABYLON.VertexBuffer.UVKind_co_ [0_co_ 0_co_ 0.5_co_ 0_co_ 0.5_co_ 1_co_ 0_co_ 1])_sm__lt_/div_gt__lt_div_gt_videoPlane2.setVerticesData(BABYLON.VertexBuffer.UVKind_co_ [0.5_co_ 0_co_ 1_co_ 0_co_ 1_co_ 1_co_ 0.5_co_ 1])_sm__lt_br_gt__lt_br_gt_It looks like the uv-array requires values inbetween 0 and 1 could you elaborate how those come to be?_lt_br_gt_Thanks in advance._lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2015-03-27T15:03:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Of course - _lt_/p_gt__lt_p_gt_a plane has 4 points_co_ represented using the PositionKind vertex data. those 4 points have also their correlating UV coordinates_co_ each with U and V coordinates. U _eq_ X axis of the texture_co_ V _eq_ Y axis of the texture._lt_/p_gt__lt_p_gt_UV start at 0 (think 0% of the entire texture width/height) and end at 1 (100% of the texture_t_s width and height)_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_img src_eq__qt_http_dd_//paulyg.f2s.com/graphics/uvexp.gif_qt_ alt_eq__qt_uvexp.gif_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_A standard plane will have the following_dd_ (each color a different point_lt_/p_gt__lt_p_gt_Positions _dd_ [_lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_-1_co_-1_co_0_lt_/span_gt__co_ _lt_span style_eq__qt_color_dd_#ff8c00_sm__qt__gt_1_co_ -1_co_ 0_lt_/span_gt__co_  _lt_span style_eq__qt_color_dd_#008000_sm__qt__gt_1_co_ 1_co_ 0_lt_/span_gt__co_ _lt_span style_eq__qt_color_dd_#0000ff_sm__qt__gt_-1_co_ 1_co_ 0_lt_/span_gt_]_lt_/p_gt__lt_p_gt_UVs_dd_ [_lt_span style_eq__qt_color_dd_#ff0000_sm__qt__gt_0_co_ 0_lt_/span_gt__co_ _lt_span style_eq__qt_color_dd_#ff8c00_sm__qt__gt_1_co_ 0_lt_/span_gt__co_ _lt_span style_eq__qt_color_dd_#008000_sm__qt__gt_1_co_ 1_lt_/span_gt__co_ _lt_span style_eq__qt_color_dd_#0000ff_sm__qt__gt_0 _co_1_lt_/span_gt_]_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What I did is say that the X (U) coordinates of the texture should start at 0 and end at 0.5 (for the first plane)_co_ and start at 0.5 and end at 1 (for the 2nd plane). Y should stay the same_co_ as I only have two planes and they are on the X axis._lt_/p_gt__lt_p_gt_You can also do that with more than two planes_co_ both vertical and horizontal. You could calculate the new size each axis will have for each plane ( uSize _eq_ 1/ number of planes on the X axis_co_ vSize _eq_ 1/ number of planes on the Y axis) and then set the coordinates to each plane individually._lt_/p_gt__lt_p_gt_I am saying plane_co_ as it is the simplest to explain with planes. BOX_co_ Sphere or each other Mesh/Geometry have their own UV and Position coordinates_co_ but eventually all work the same._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_BTW - The best solution would actually be to use uOffset and vOffset at the texture level_co_ BUT what you want to do cannot be done_co_ as those are texture variables_co_ you will have to set a new texture to each and every plane_co_ which won_t_t really work with a film._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dinkelborg","Date":"2015-03-27T16:14:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks a lot! _lt_br_gt_That was a very good explanation _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]