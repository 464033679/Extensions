[{"Owner":"ProfessorF","Date":"2015-09-01T02:12:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi all_co__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Okay so you have a character with multiple animations_dd_ idle_co_ walk_co_ run_co_ etc._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Is there a preferred way to do the animations?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_ve just been putting them all in one timeline and setting different start and stop points -- is that how you do it?_lt_/p_gt__lt_p_gt_Thanks in advance?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_- Nick_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-09-01T03:43:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey Prof!_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_That_t_s exactly how you do it_dd_ walk from key 0 to 20_co_ run from 21 to 45 and so on_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ProfessorF","Date":"2015-09-01T03:57:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Thanks DeltaKosh. You_t_re the man!  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You need to organize a Babylon.js Developer_t_s Conference _dd_-)_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2015-09-01T16:30:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m your man if you want me to talk at this conference _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-09-01T17:38:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_That is not the only way_co_ though it might be the most practical way given the capabilities of exporters.  The other way_co_ if you are using skeletons / bones would be to put each in it own BABYLON.Animation_co_ inside of the animations ARRAY of each Bone.  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It is not surprising that very few people know this. Exporters dump everything in animations[0] &amp_sm_ Fileloader.parseSkeleton() will only load the first_co_ if there was more than 1.  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I have just coded a MORPH.SkeletonInterpolator as a subclass of POV.BeforeRenderer.  This subclass will process MORH.SkeletalDeformation objects in it_t_s event queue. SkeletalDeformations are a subclass of POV.MotionEvent_co_ so they can actually incrementally move and rotate as the skeleton deforms_co_ not just _t_walk in place_t_.  This is not a frame by frame replay system_co_ so an animation could be expressed in as little as 2 poses.  Walking probably 4_co_ not 20.  Not sure if it too late to mark a skeleton dirty in a before render or not.  It has not been tested yet.  May have to switch to an after render._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The other great thing about an animations ARRAY for a bone that no one has a clue about_dd_   Having a reference skeleton for copying the animations from.  Every time you wish have a rig do a common task like walking_co_ you have to do all phases_co_ even though someone less might have already done it.  _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_BabylonJS sorely needs a common humanoid skeleton.  Unity has one.  Right now for a MakeHuman runtime I am developing_co_ 2 rigs are being looked at.  I am not the expert in this area_co_ so others are advising.  The really good part is the new MHX2 importer for Blender is it creates the same shape keys I used in my speech testing_co_ so the MH_runtime looks like it will be able to talk too._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2015-09-01T23:04:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Are you saying its possible to morph animations now?  So a character can run and shoot at the same time? Cool!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-09-03T01:15:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes_co_ there is an extension called MORPH.  It used a Mesh subclass_co_ that the Tower of Babel exporter for Blender referenced if it found Blender shape keys.  There was an experiment to see if meshes could talk_co_ using a hand built head by Gryff.  The tool is here_dd_ _lt_a href_eq__qt_https_dd_//googledrive.com/host/0B6-s6ZjHyEwUSDVBUGpHOXdtbHc/_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//googledrive.com/host/0B6-s6ZjHyEwUSDVBUGpHOXdtbHc/_lt_/a_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_It was not perfect_co_ but it quickly became obvious that unless a supply of bodies could be found that already had the mouth shape keys_co_ speech could not be a _qt_real_qt_ project.  Make Human was coming out with a new version_co_ 1.1_co_ that looked like it would work_co_ but it was not ready in December_co_ so the project was mothballed._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_In the last week_co_ I have restarted it.  MH 1.1 is not yet production_co_ but we are getting all the shape keys plus extras.  I have fixed the exporter to get shape keys exported when you also have a skeleton.  Have also written a skeleton interpolator in the MORPH extension_co_ so it can run within the same before render as the vertex interpolator for shape keys.  Lots of work still to be done._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ozRocker","Date":"2015-09-03T02:41:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_ohh_co_ you_t_re talking about morph targets / blend shapes.  I was actually going to ask about that because I_t_m experimenting with it now.  My original post was actually about combining armature animation_co_ like a walking animation and a shooting animation together or smoothly transitioning from walking to standing idle_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-09-03T23:17:43Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_At first_co_ I thought I would be not _qt_combining animations_qt__co_ but realized we just have a terminology conflict.  In my terminology_co_ the skeletonInterpolator_co_ only works with poses.  It _qt_performs_qt_ the animation from the current state to the desired pose.  This is done in the time allotted_co_ with integrated position &amp_sm_ rotation changes._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The base extension_co_ POV_co_ is queue based.  You would use that directly is your mesh did not deform with either shape keys or armature.  The MOPRH extension is built on top of POV_co_  so position &amp_sm_ rotation are in addition to deforming._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So_co_ you might have 4 poses that define running.  You can construct an re-usable event series_co_ which groups them.  You could add that event series along with a # of repeats &amp_sm_ acceleration to the queue.  If events cause you to want change to a shooting pose_co_ you can queue that series_co_ deleting anything else in the queue if you wish._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_As discussed earlier_co_ the poses would be frames of a BABYLON.Animation object inside the BABYLON.Bone.animations[].  I would just be reusing them for a slightly different purpose._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]