[{"Owner":"Ariel Yust","Date":"2014-03-11T14:43:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hey_co_ I_t_m making a big project using babylon.js and I_t_m looking for information about_lt_/p_gt__lt_p_gt_creating loading screen for loading textures _lt_em_gt_(*.png files)_lt_/em_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_this is my function for loading textures inside a material_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_function loadTexture(fileName_co_ backFaceCulling_co_ hasAlpha_co_ opacityPath) {        var m _eq_ new BABYLON.StandardMaterial(fileName_co_ scene)_sm_        var texture _eq_ new BABYLON.Texture(fileName_co_ scene)_sm_        //texture.anisotropicFilteringLevel _eq_ 0_sm_                if (opacityPath !_eq_ null) {            m.opacityTexture _eq_ new BABYLON.Texture(opacityPath_co_ scene)_sm_        }        m.diffuseTexture _eq_ texture_sm_        m.backFaceCulling _eq_ backFaceCulling_sm_        m.diffuseTexture.hasAlpha _eq_ hasAlpha_sm_        return m_sm_    }_lt_/pre_gt__lt_p_gt_the problem is that when I load the texture from the URL_co_ I don_t_t know when will it finish loading the image..._lt_/p_gt__lt_p_gt_is there a way to get an event ? and also to know how much data have been loaded ?_lt_/p_gt__lt_p_gt_does it load it dynamically and show it in the scene ?_lt_strong_gt_ how the whole loading thing works ?_lt_/strong_gt_  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_huh.png_qt_ alt_eq__qt__dd_huh_dd__qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m searching for answers for a whole day without success - need help asap  _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_rolleyes.gif_qt_ alt_eq__qt__dd_rolleyes_dd__qt__gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thank you... _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Xanmia","Date":"2014-03-11T15:34:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_There is probably a better way to do it_co_ there always is   _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_div_gt_ _lt_/div_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_    var textureLoad _eq_ new Image()_sm_    textureLoad.onload _eq_ function () {                 //fires when image is fully loaded            }_sm_     textureLoad.src _eq_ _qt_images.png_qt__sm__lt_/pre_gt__lt_/div_gt__lt_p_gt_Then you should be able to use that image source for your textures._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Ariel Yust","Date":"2014-03-27T08:56:02Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I created an asynchronous event based system_co_ just like LazyLoad.js_co_ that loads babylon files_co_ scripts and images thanks for the right solution! _eq_]_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"gwenael","Date":"2014-03-27T13:11:14Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Maybe this will help you_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_BABYLON.Engine.prototype.createTexture_lt_/pre_gt__lt_p_gt_It calls _t_BABYLON.Tools.LoadFile_t_ or _t_BABYLON.Tools.LoadImage_t_ depending on _t_isDDS_t_ boolean. Both functions take callbacks as arguments._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Here_t_s the code for LoadImage_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_BABYLON.Tools.LoadImage _eq_ function (url_co_ onload_co_ onerror_co_ database) {          var img _eq_ new Image()_sm_        img.crossOrigin _eq_ _t_anonymous_t__sm_        img.onload _eq_ function () {            onload(img)_sm_        }_sm_        img.onerror _eq_ function (err) {            onerror(img_co_ err)_sm_        }_sm_        var noIndexedDB _eq_ function () {            img.src _eq_ url_sm_        }_sm_        var loadFromIndexedDB _eq_ function () {            database.loadImageFromDB(url_co_ img)_sm_        }_sm_        if (database &amp_sm_&amp_sm_ database.enableTexturesOffline &amp_sm_&amp_sm_ BABYLON.Database.isUASupportingBlobStorage) {            database.openAsync(loadFromIndexedDB_co_ noIndexedDB)_sm_        }        else {            if (url.indexOf(_qt_file_dd__qt_) _eq__eq__eq_ -1) {                noIndexedDB()_sm_            }            else {                try {                    var textureName _eq_ url.substring(5)_sm_                    var blobURL_sm_                    try {                        blobURL _eq_ URL.createObjectURL(BABYLON.FilesTextures[textureName]_co_ { oneTimeOnly_dd_ true })_sm_                    }                    catch (ex) {                        // Chrome doesn_t_t support oneTimeOnly parameter                        blobURL _eq_ URL.createObjectURL(BABYLON.FilesTextures[textureName])_sm_                    }                    img.src _eq_ blobURL_sm_                }                catch (e) {                    console.log(_qt_Error while trying to load texture_dd_ _qt_ + textureName)_sm_                    img.src _eq_ null_sm_                }            }        }        return img_sm_    }_sm__lt_/pre_gt__lt_p_gt_You_t_ll notice that it uses what Xanmia posted_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_var img _eq_ new Image()_sm_        img.crossOrigin _eq_ _t_anonymous_t__sm_        img.onload _eq_ function () {            onload(img)_sm_        }_sm__lt_/pre_gt__lt_p_gt_In conclusion you can use BABYLON.Tools.LoadImage with your own callbacks_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]