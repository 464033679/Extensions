[{"Owner":"focomoso","Date":"2017-06-08T17:42:42Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m trying to import an .stl file with the asset manager. The task seems to complete successfully_co_ but there are no meshes in the loadedMeshes array so there_t_s nothing to add to the scene. The same thing happens if I use the SceneLoader.Load (and I_t_ve tested this using a local .stl file served off a local web server rather than aws with the same result).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI suspect I_t_m just doing it wrong.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tplayground here_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#V4WNE7%239_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#V4WNE7#9_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for any help.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-06-09T15:03:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think this is because you are using a binary STL which is not supported by the loader _lt_img alt_eq__qt__dd_(_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_sad.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/sad@2x.png 2x_qt_ title_eq__qt__dd_(_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"focomoso","Date":"2017-06-09T18:44:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tWell_co_ that would do it. I_t_ll try an ascii (though it would be good if there were an error). If I were to write a binary stl importer_co_ would it be better to integrate it into the existing stlFileLoader.js or create a binaryStlFileLoader.js?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"focomoso","Date":"2017-06-10T02:08:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tUnfortunately there_t_s a catch-22 here.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe data being sent to the stlFileLoader has already been converted to a string (and lost significance) because loader itself has to register as .isBinary in order get useArrayBuffer to be true and therefore get binary data_co_ but the choice of loader is based on file extension so there_t_s no way for the loader to make the determination itself. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe only workaround I can think of would be to have the stlFileLoader register as .isBinary and handle the conversion to a string itself (based on the content of the file). Does anyone think this might mess up other use cases?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tJames\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-06-10T17:35:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThis SHOULD work _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"focomoso","Date":"2017-06-12T17:34:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOkay - I have this working. Except...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen I export geometry from Blender for testing_co_ the ascii output only seems to come in correctly if you use the setting Z forward Y up and the binary output only seems to work with Y forward and Z up. Are there any known issues with exporting stls from Blender (I_t_m no Blender expert)? \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks for any help with this.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tJames\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"focomoso","Date":"2017-06-12T22:31:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI figured it out. Had to flip the order of the y and z vertices (and the normal).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBelow is the blender monkey exported from blender with Y up and -Z forward. The one on the left is binary_co_ the one on the right_co_ ASCII.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPull request created.\n_lt_/p_gt_\n\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2017_06/593f15f2be3f6_ScreenShot2017-06-12at3_28_54PM.png.fb5bd3c5fcf18aac07b66fa8e1c80265.png_qt_ class_eq__qt_ipsAttachLink ipsAttachLink_image_qt__gt__lt_img data-fileid_eq__qt_13365_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2017_06/593f15f2be3f6_ScreenShot2017-06-12at3_28_54PM.png.fb5bd3c5fcf18aac07b66fa8e1c80265.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_Screen Shot 2017-06-12 at 3.28.54 PM.png_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-06-13T23:57:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou rock!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthanks a lot\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]