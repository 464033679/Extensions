[{"Owner":"ovmihai","Date":"2015-10-22T08:41:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hello everyone_co__lt_/p_gt__lt_p_gt_I read some threads but my problem is not clear yet. Is there any option in the latest Babylon API to load external files(models_co_ textures_co_ etc) without using an external web server?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thank you_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"MasterK","Date":"2015-10-22T10:17:13Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt__lt_span style_eq__qt_color_dd_rgb(0_co_0_co_0)_sm_font-family_dd_Arial_sm__qt__gt__qt_C_dd_\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe_qt_ --disable-web-security_lt_/span_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt__lt_span style_eq__qt_color_dd_rgb(0_co_0_co_0)_sm_font-family_dd_Arial_sm__qt__gt_Is that what you mean?_lt_/span_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"ovmihai","Date":"2015-10-22T10:25:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_No_co_ sorry maybe i did not explain my problem very good. I want to push data into babylon_co_ data already loaded somwhere. Like a texture i have in binary texture data i would like to push it into babylon. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-10-22T10:31:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_What exactly do you want to do? Like an upload field where you select a file from you PC and the instead of uploading you use it in the local client with babylon... something like that?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_What have you read so far? I think we had that topic for textures at least somewhere in the forum... but I can_t_t find it at the moment and don_t_t have time to search. I don_t_t remember anything like this for models_co_ but should work the same way_co_ I guess._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think it was something like that_dd_ _lt_a href_eq__qt_http_dd_//www.html5rocks.com/en/tutorials/file/dndfiles/_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.html5rocks.com/en/tutorials/file/dndfiles/_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Edit_dd_ think I found it_dd_ _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/17653-how-to-load-textures-dynamically/?hl_eq_readasdataurl_qt__gt_http_dd_//www.html5gamedevs.com/topic/17653-how-to-load-textures-dynamically/?hl_eq_readasdataurl_lt_/a_gt__lt_/p_gt__lt_p_gt_Example_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#VNVOU_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#VNVOU_lt_/a_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2015-10-22T12:15:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Are you trying to do something similar than the Sandbox_dd_ _lt_a href_eq__qt_http_dd_//www.babylonjs.com/sandbox_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/sandbox_lt_/a_gt_ where you can drag_t_n_t_drop content (.babylon &amp_sm_ textures) into it to load a scene? _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_More info here_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/search?q_eq_sandbox_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/search?q_eq_sandbox_lt_/a_gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_David_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-10-22T12:22:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Is that the sandbox code? _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Samples/tree/master/Sandbox_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Samples/tree/master/Sandbox_lt_/a_gt_ It looks so short... is that really everything? _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Can you explain how the loading of local files into the sandbox works?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2015-10-22T13:19:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Well the github hasn_t_t been updated. The up to date version is on _lt_a href_eq__qt_http_dd_//www.babylonjs.com/sandbox_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/sandbox_lt_/a_gt_ and simply view the source with your favorite browser. _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The implementation is fairly simple. I_t_m just taking the blob via the HTML5 File API_co_ storing the texture as blog into an array and I_t_ve slightly modified the Babylon.js loader to load the texture from my blob array rather than using XHR to load them from the server._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You_t_ll find the main parts in our code here_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_- _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.filesInput.ts_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.filesInput.ts_lt_/a_gt__lt_/p_gt__lt_p_gt_- _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.tools.ts_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.tools.ts_lt_/a_gt_ -&gt_sm_ look at LoadImage function and I_t_m filtering on the _qt_file_dd__qt_ moniker. _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"reddozen","Date":"2015-10-22T14:51:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_You know... couldn_t_t this be expanded to make _qt_install_qt_ packages for users? So if you dont want to keep several gigs of data in your cache and also don_t_t want to have to download it everytime to render the scene.... the server could keep track of _qt_install point_qt_ on the users machine and direct the data pull from there instead of relying on downloading it again._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Any possibility of making a dedicated load function for local files that you feed it the root folder path and file names like loadMesh? This would be insanely useful for massive projects like mine where some players may not have great internet access to stream all the content_co_ but they could play reasonably well if they could pre-download all the raw files._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-10-22T14:58:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_That sounds like a reasonable idea. I think that could be useful indeed!_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-10-22T15:18:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_In fact_co_ the meshes and textures loading system alteady put everything in the local indexDB browser cache by default (need to add the manifest file alongside the .babylon files)_co_ so people coming back later does not need to reload everything. Is this not enough ?_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2015-10-22T15:53:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yes_co_ I can_t_t see the difference between what you_t_re suggesting reddozen and what I_t_ve already implemented via IDB_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/tutorials/07._Caching_Resources_in_IndexedDB_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/tutorials/07._Caching_Resources_in_IndexedDB_lt_/a_gt_ and my blog article_dd_ _lt_a href_eq__qt_http_dd_//blogs.msdn.com/b/davrous/archive/2013/09/24/using-indexeddb-to-handle-your-3d-webgl-assets-sharing-feedbacks-amp-tips-of-babylon-js.aspx_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//blogs.msdn.com/b/davrous/archive/2013/09/24/using-indexeddb-to-handle-your-3d-webgl-assets-sharing-feedbacks-amp-tips-of-babylon-js.aspx_lt_/a_gt_ _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"reddozen","Date":"2015-10-22T16:46:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Because if they clear their cache_co_ it_t_s all gone. In some instances where you have exceptially large files_co_ it can be more benificial to be able to download the packages and load them locally. With that I can provide them a compressed archive option if they have a poor internet connection to be able to get the files they need instead of waiting on the browser to pull down and cache everything._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I think the cache is great for dynamic content that will change regularly_co_ or quick model swapping for events_co_ or small demo_t_s or games_co_ but I_t_m expecting to be generating several gigs worth of map file data_co_ player character data_co_ and monster / NPC data. I_t_m converting an entire MMO world (failed game that didnt leave beta) into babylon a piece at a time. The original game is close to 6GB of compressed UT2k4 files_co_ and we_t_ll be expanding it further than where the beta left off. That_t_s way too much to expect a player (especially with a weaker internet conection) to wait for the cache to pick up while sitting on a black / loading screne for hours. To me_co_ this is better suited to an _qt_install_qt_ type process. It can still use a manifest type file itself as well to make sure that their files are in sync with the server_co_ but this would be easier to manage with a larger project._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_I_t_m not being critical of what we have_co_ just suggesting more options to handle huge projects in the future. I hope you can understand my thought process on this._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-10-22T17:54:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_In fact_co_ no_co_ if people clear their cache meshes and textures are still there. The indexedDB is not browser cache_co_ it_t_s browser _qt_application data cache_qt_. To empty this special cache_co_ in most browsers you need to do more sophisticated operations than just clear cache (that_t_s even usually a problem when developping because you are constantly in the need of emptying everything _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ alt_eq__qt__dd_D_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_But I understand your point reddozen_co_ a downloadable assets package that can be addressed afterward in the BJS application. Integrate this possibility directly in the engine could be a nice feature_co_ but it_t_s already possible to create that for now _qt_outside of the engine_qt_ (since it is possible to specifiy the url of every assets you want to load_co_ it_t_s up to the dev to create such a package downloadable and set urls accordingly)._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jacquesr","Date":"2015-10-28T08:52:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Hi_co_ I want to support ovmihai here a bit._lt_br_gt__lt_br_gt_The problem we have is the following_dd__lt_br_gt__lt_br_gt_We have a (sub)component of a bigger project that uses babylon js to display 3D scenes. The component should not ask the server for resources itself_co_ instead_co_ it should provide an api to put in textures_co_ models_co_ etc. We are most likely going tor some kind of a theming object that contains all the data._lt_br_gt__lt_br_gt_So_co_ we cannot call new Texture(some url) or a loader that loads models but instead we have to put in binary image data and already loaded .babylon json objects into the component through the api using e. g. the mentioned theming container objects._lt_br_gt__lt_br_gt_In the end_co_ of course the subcomponent is in the same domain as the container and of course_co_ theoretically it could call the server_co_ but it_t_s rather an architectural design choice to prevent that from happening._lt_/p_gt__lt_p_gt_You could now say _qt_well_co_ the parent component can use the loaders_qt_ but well_co_ then the parent component becomes dependent to babylon while it shouldn_t_t know anything about it._lt_/p_gt__lt_p_gt_I hope the problem is more clear now._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2015-10-28T13:48:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_There are multiple conversations going on in this thread.  2 thoughts_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Why not just make an application? The customer / user downloads it_co_ using (XDK_co_ CocoonJS_co_ or BabylonHX).  All are both mobile &amp_sm_ desktop.  An application can still get some of its stuff from net_co_ but all the bulk was downloaded at install._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Or_co_ if everything must be in a .babylon_co_ then put everything in.  FileLoader.ts accepts inline textures.  Right now the only producer of a .babylon that packs textures in a .babylon is Blender_co_ but if someone wants it in coming from another producer_co_ then they should modify it to do so (PR it_co_ if you are so inclined)._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2015-10-28T16:52:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Interesting discussions. Let me share my thoughts_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_1 - IndexedDB has some limitations_co_ you_t_re right. Some browsers have quota (like IE11 at 250 Mo) and users can clear their cache but as they can also delete files themselves on the hard drive even if it_t_s a bit different process_lt_/p_gt__lt_p_gt_2 - I_t_m wondering if we_t_re not reaching the limit of the web as a media to distribute a game with such a big size. Or maybe we don_t_t have the proper web technologies to cover that. Let_t_s imagine you_t_re downloading your packed assets on the hard drive using whatever technology. How do you provide it to the game? You_t_re asking to the user to drag_t_n_t_drop it into the game or using the File API to open the files explorer? The experience is not great. You have no garantee he will provide the proper files. And you can_t_t access directly to the hard drive from your web app for obvious security reasons._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_So_co_ I perfectly understand your points here_co_ it_t_s exactly why I_t_ve been building the database layer trying to experiment with IDB. I know this is not perfect but I_t_m still trying to figure out if we have real better plan than that with today_t_s available Web APIs._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Apart from that_co_ service workers could also be a better approach to cover what some of the things you_t_d like to do. But it_t_s currently Chrome only.  _lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"reddozen","Date":"2015-10-28T17:56:16Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I was invisioning using file API_co_ and having the player tell the website what their root _qt_installed_qt_ directory is_co_ and go from there using php to build dynamic load files from a database. All my scenes lately are dynamic PHP. I would know the file names and where they_t_re located. if the file isnt found_co_ notify them to update the directory location_co_ and if it_t_s not found_co_ then either tell them to reinstall_co_ or revert to indexDB. Could even present a new download file. All that handling is my own deal to handle. All we would really need is a method to read a given file. either by selection browse or known directory / file name (if it_t_s even possible)._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If RuneScape can go full HTML5 there_t_s no reason we can_t_t as well._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Example_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_function readSingleFile(e) {var file _eq_ e.target.files[0]_sm_if (!file) {return_sm_}var reader _eq_ new FileReader()_sm_reader.onload _eq_ function(e) {var contents _eq_ e.target.result_sm_displayContents(contents)_sm_}_sm_reader.readAsText(file)_sm_}function displayContents(contents) {var element _eq_ document.getElementById(_t_file-content_t_)_sm_element.innerHTML _eq_ contents_sm_}document.getElementById(_t_file-input_t_).addEventListener(_t_change_t__co_ readSingleFile_co_ false)_sm_ &lt_sm_input type_eq__qt_file_qt_ id_eq__qt_file-input_qt_ /&gt_sm_&lt_sm_h3&gt_sm_Contents of the file_dd_&lt_sm_/h3&gt_sm_&lt_sm_pre id_eq__qt_file-content_qt_&gt_sm_&lt_sm_/pre&gt_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jacquesr","Date":"2015-10-29T07:39:45Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I like your conversation guys_co_ but it went off topic. We still have a question about how we can disconnect loading data like models and textures from babylon and put it in using our own top layer api _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ alt_eq__qt__dd_)_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-10-29T07:57:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_You can create meshes via .obj_co_ .stl loaders_co_ or by importing vertex data the way you want and injecting the data in an empty mesh. You then make materials by creating directly new babylon textures by specifying the images URL and assigning them to your materials._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-10-29T09:27:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_@jacquesr_co_ wahts wrong with the way davrous suggested? This seems to work well with the sandbox application... or why dos that not fit your request?_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_102164_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_18078_qt_ data-ipsquote-username_eq__qt_davrous_qt_ data-cite_eq__qt_davrous_qt_ data-ipsquote-timestamp_eq__qt_1445519992_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_Well the github hasn_t_t been updated. The up to date version is on _lt_a href_eq__qt_http_dd_//www.babylonjs.com/sandbox_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs.com/sandbox_lt_/a_gt_ and simply view the source with your favorite browser._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_The implementation is fairly simple. I_t_m just taking the blob via the HTML5 File API_co_ storing the texture as blog into an array and I_t_ve slightly modified the Babylon.js loader to load the texture from my blob array rather than using XHR to load them from the server._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_You_t_ll find the main parts in our code here_dd__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_- _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.filesInput.ts_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.filesInput.ts_lt_/a_gt__lt_/p_gt__lt_p_gt_- _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.tools.ts_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.tools.ts_lt_/a_gt_ -&gt_sm_ look at LoadImage function and I_t_m filtering on the _qt_file_dd__qt_ moniker._lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Vousk-prod.","Date":"2015-10-29T09:30:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I_t_m pretty sure they don_t_t want to have their users to drag_t_n drop files. They already have a data loading API and wanna create Babylon objects on top of that._lt_/p_gt__lt_p_gt_But it_t_s completely feasible_co_ since we can inject vertex data in a mesh_co_ and create material and textures from scratch from images files URL._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"iiceman","Date":"2015-10-29T09:48:28Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Yeah_co_ it_t_s not about the drag n drop. The point is storing the file as a blob thingy and using _lt_span style_eq__qt_color_dd_rgb(51_co_51_co_51)_sm_font-family_dd_Consolas_co_ _t_Liberation Mono_t__co_ Menlo_co_ Courier_co_ monospace_sm_font-size_dd_12px_sm__qt__gt_createObjectURL_lt_/span_gt_. That can be done completely independent from any Babylon calls. And if you need to create a mesh or a texture from a file_co_ you just reference that ObjectURL... at least if I understood the idea right. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ alt_eq__qt__dd_P_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jacquesr","Date":"2015-10-29T14:56:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote data-ipsquote_eq__qt__qt_ class_eq__qt_ipsQuote_qt_ data-ipsquote-contentcommentid_eq__qt_103302_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentid_eq__qt_18078_qt_ data-ipsquote-username_eq__qt_iiceman_qt_ data-cite_eq__qt_iiceman_qt_ data-ipsquote-timestamp_eq__qt_1446110856_qt__gt__lt_div_gt__lt_div_gt__lt_p_gt_@jacquesr_co_ wahts wrong with the way davrous suggested? This seems to work well with the sandbox application... or why dos that not fit your request?_lt_/p_gt__lt_/div_gt__lt_/div_gt__lt_/blockquote_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_sorry_co_ I totally missed that! Thanks a lot_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]