[{"Owner":"theom","Date":"2018-07-09T14:02:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ve just started out using BJS and I really like what I_t_ve seen so far. For my application I saw the Babylon gui as a real booster since I have always ended up implementing those parts myself using what ever library I was using at the time (SVG and TheeJS for example).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCurrently I_t_m implementing a registration form using the 2D gui and I needed a password input field where the entered characters are shown as bullets. Since the InputText control doesn_t_t seem to have this functionality I added a flag to the control and replaced the text with bullets if the flag was set. This works fine_co_ but it kind of felt too specific to passwords. Besides there are other well known use-cases where similar behavior changes might be needed_co_ like entering only numbers_co_ dates_co_ email addresses etc. I then wonder how to best implement this. I see two ways_dd_\n_lt_/p_gt_\n\n_lt_ol_gt_\n\t_lt_li_gt_\n\t\tModify the InputText class directly to support these different input _t_modes_t_ (or types).\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tCreate separate subclasses for each different input type.\n\t_lt_/li_gt_\n_lt_/ol_gt_\n\n_lt_p_gt_\n\tWhich of these (or some other way I didn_t_t think of) makes more sense for Babylon?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"brianzinn","Date":"2018-07-09T14:46:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tFor the password part #1 would work_co_ but I don_t_t think #2 implementing different subclasses for each different type would be very extendable._lt_br /_gt_\n\t_lt_br /_gt_\n\tThese requirements are quite common and are often implemented as _qt_input masks_qt_ or regular expressions.  Input masks have a lot of edge cases and are harder to implement (ie_dd_ making corrections or blocking input).  Regular expressions are much easier and you may want some accompanying validation text.  Each regular expression can be evaluated when a letter is added or removed and perhaps you want a class to manage all the validations_co_ so you could disable a submit button.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-07-09T15:28:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWelcome Theom!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor the specific need of password I guess a simple PasswordBox (inheriting from Textbox) could make it as the code will be really simple and it will be easier to discover\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor the regex support_co_ I_t_m with _lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/25365-brianzinn/?do_eq_hovercard_qt_ data-mentionid_eq__qt_25365_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/25365-brianzinn/_qt_ rel_eq__qt__qt__gt_@brianzinn_lt_/a_gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"theom","Date":"2018-07-09T16:12:07Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks Deltakosh. Glad to be here _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI was kind of leaning towards subclassing but I agree with @brianzinn that a regular expressions is probably the way to go for the input mask.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ll explore this a bit further and see what I can come up with.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-07-09T17:09:51Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m for subclassing for the PasswordBox _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]