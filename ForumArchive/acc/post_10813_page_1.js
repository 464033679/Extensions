[{"Owner":"Dad72","Date":"2014-12-02T20:31:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_I do not know to use GitHub. _lt_img src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_ph34r.png_qt_ alt_eq__qt__dd_ph34r_dd__qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/ph34r@2x.png 2x_qt_ width_eq__qt_20_qt_ height_eq__qt_20_qt__gt_  but I would like to propose new Vector3 shortened to supplement existing ones is Zero and Up._lt_br_gt_Would you explain quickly Deltakosh  pull requests on GitHub._lt_br_gt_ _lt_br_gt_babylon.Math_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint lang-auto_qt__gt_Vector3.Back_eq_ function (mesh_co_ speed_co_ gravity) {            if(speed _eq__eq__eq_ null) speed _eq_ 8_sm_            if(gravity _eq__eq__eq_ null) gravity _eq_ -0.15_sm_            var back _eq_ new BABYLON.Vector3(parseFloat(Math.sin(mesh.rotation.y)) / speed_co_ gravity_co_ parseFloat(Math.cos(mesh.rotation.y)) / speed)_sm_            return back.negate()_sm_}_sm_Vector3.Down _eq_ function () {             return new Vector3(0_co_ -1.0_co_ 0)_sm_}_sm_Vector3.Forward _eq_ function (mesh_co_ speed_co_ gravity) {            if(speed _eq__eq__eq_ null) speed _eq_ 8_sm_            if(gravity _eq__eq__eq_ null) gravity _eq_ -0.15_sm_            return new BABYLON.Vector3(parseFloat(Math.sin(mesh.rotation.y)) / speed_co_ gravity_co_ parseFloat(Math.cos(mesh.rotation.y)) / speed)_sm_}_sm_Vector3.Left _eq_ function () {             return new Vector3(-1.0_co_ 0_co_ 0)_sm_}_sm_ Vector3.One _eq_ function () {             return new Vector3(1.0_co_ 1.0_co_ 1.0)_sm_}_sm_Vector3.Right _eq_ function () {             return new Vector3(1_co_ 0_co_ 0)_sm_}_sm_// ExistVector3.Zero _eq_ function (){ ......_lt_/pre_gt__lt_p_gt_ [code edite]_lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Thanks_lt_/p_gt_\n\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2014-12-02T21_dd_43_dd_05Z_t_ title_eq__t_12/02/2014 09_dd_43  PM_t_ data-short_eq__t_4 yr_t__gt_December 2_co_ 2014_lt_/time_gt_ by dad72_lt_/strong_gt_\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-12-02T20:43:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Code that uses the result of these functions is going to have to take into account that the object may not be oriented facing forward on all axises.  I am doing POV movement &amp_sm_ rotation of MORPH.Mesh objects_co_ where you have no need to know.  May be just a style preference._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_If doing it this way_co_ it might be more useful to have an amount argument._lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-12-02T20:48:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_There are already 2 done in the same way_co_ I only complements here. I think it would be helpful_lt_/p_gt__lt_div_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_Vector3.Zero _eq_ function () {            return new Vector3(0_co_ 0_co_ 0)_sm_        }_sm_        Vector3.Up _eq_ function () {            return new Vector3(0_co_ 1.0_co_ 0)_sm_        }_sm__lt_/pre_gt__lt_p_gt_exemple_dd__lt_/p_gt__lt_p_gt_meshPlayer.moveWithCollisions(new BABYLON.Vector3.Forward())_sm__lt_/p_gt__lt_p_gt_or_lt_/p_gt__lt_p_gt_meshPlayer.moveWithCollisions(new BABYLON.Vector3.Back())_sm__lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_Vector3.Up exists_co_ why not Down ..._lt_/p_gt__lt_/div_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"davrous","Date":"2014-12-02T21:01:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_We will discuss with Deltakosh if it_t_s interesting and useful to add this shortcuts to our Math.js library._lt_/p_gt__lt_p_gt_Thanks for the feedbacks._lt_/p_gt__lt_p_gt_David_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-12-02T21:08:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Ok multipling is equivalent to an amount argument.  Could not taking its orientation into account mean your example would not actually go forward_co_ as it is oriented?  I looked at the code for this_co_ and have say I do not know what Mesh.ellipsoid is.  There is almost no code comments.  Does ellipsoid solve this?_lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        public moveWithCollisions(velocity_dd_ Vector3)_dd_ void {            var globalPosition _eq_ this.getAbsolutePosition()_sm_            globalPosition.subtractFromFloatsToRef(0_co_ this.ellipsoid.y_co_ 0_co_ this._oldPositionForCollisions)_sm_            this._oldPositionForCollisions.addInPlace(this.ellipsoidOffset)_sm_            this._collider.radius _eq_ this.ellipsoid_sm_            this.getScene()._getNewPosition(this._oldPositionForCollisions_co_ velocity_co_ this._collider_co_ 3_co_ this._newPositionForCollisions_co_ this)_sm_            this._newPositionForCollisions.subtractToRef(this._oldPositionForCollisions_co_ this._diffPositionForCollisions)_sm_            if (this._diffPositionForCollisions.length() &gt_sm_ Engine.CollisionsEpsilon) {                this.position.addInPlace(this._diffPositionForCollisions)_sm_            }        }_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2014-12-02T21:11:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_In complete you will have reasons_co_ but if we do like this_co_ it always works the front._lt_br_gt_ _lt_br_gt_ _lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint lang-auto_qt__gt_Vector3.Forward _eq_ function (mesh_co_ speed_co_ gravity) {            if(speed _eq__eq__eq_ null) speed _eq_ 8_sm_            if(gravity _eq__eq__eq_ null) gravity _eq_ -0.15_sm_            return new BABYLON.Vector3(parseFloat(Math.sin(mesh.rotation.y)) / speed_co_ gravity_co_ parseFloat(Math.cos(mesh.rotation.y)) / speed)_sm_}_sm__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2014-12-02T21:53:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_Your expanded example works for y axis rotation.  I was doing all-axis.  If you saw the flying table-cloth sample I did  _lt_a href_eq__qt_https_dd_//googledrive.com/host/0B6-s6ZjHyEwUdHp3a3pJdlgwS0U_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//googledrive.com/host/0B6-s6ZjHyEwUdHp3a3pJdlgwS0U_lt_/a_gt__co_ it did climbed a little as it moved forward_co_ so Forward took into account more than y-rotation.  It also tilted right_co_ which also affected _qt_Forward_qt_._lt_/p_gt__lt_p_gt_ _lt_/p_gt__lt_p_gt_For most_co_ y axis only will be fine.  Here is my typescript_dd__lt_/p_gt__lt_pre class_eq__qt_ipsCode prettyprint_qt__gt_        // _eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq_ Point of View Movement _eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq_        /**         * When the mesh is defined facing forward_co_ multipliers must be set so that movePOV() is          * from the point of view of behind the front of the mesh.         * @param {boolean} definedFacingForward - True is the default         */        public setDefinedFacingForward(definedFacingForward _dd_ boolean) _dd_ void {            this._definedFacingForward _eq_ definedFacingForward_sm_        }                /**         * Perform relative position change from the point of view of behind the front of the mesh.         * This is performed taking into account the meshes current rotation_co_ so you do not have to care.         * Supports definition of mesh facing forward or backward.         * @param {number} amountRight         * @param {number} amountUp         * @param {number} amountForward         */        public movePOV(amountRight _dd_ number_co_ amountUp _dd_ number_co_ amountForward _dd_ number) _dd_ void {            this.position.addInPlace(this.calcMovePOV(amountRight_co_ amountUp_co_ amountForward))_sm_        }                /**         * Calculate relative position change from the point of view of behind the front of the mesh.         * This is performed taking into account the meshes current rotation_co_ so you do not have to care.         * Supports definition of mesh facing forward or backward.         * @param {number} amountRight         * @param {number} amountUp         * @param {number} amountForward         */        public calcMovePOV(amountRight _dd_ number_co_ amountUp _dd_ number_co_ amountForward _dd_ number) _dd_ BABYLON.Vector3 {            var rotMatrix _eq_ new BABYLON.Matrix()_sm_            var rotQuaternion _eq_ (this.rotationQuaternion) ? this.rotationQuaternion _dd_ BABYLON.Quaternion.RotationYawPitchRoll(this.rotation.y_co_ this.rotation.x_co_ this.rotation.z)_sm_            rotQuaternion.toRotationMatrix(rotMatrix)_sm_                        var translationDelta _eq_ BABYLON.Vector3.Zero()_sm_            var defForwardMult _eq_ this._definedFacingForward ? -1 _dd_ 1_sm_            BABYLON.Vector3.TransformCoordinatesFromFloatsToRef(amountRight * defForwardMult_co_ amountUp_co_ amountForward * defForwardMult_co_ rotMatrix_co_ translationDelta)_sm_            return translationDelta_sm_        }        // _eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq_ Point of View Rotation _eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq__eq_        /**         * Perform relative rotation change from the point of view of behind the front of the mesh.         * Supports definition of mesh facing forward or backward.         * @param {number} flipBack         * @param {number} twirlClockwise         * @param {number} tiltRight         */        public rotatePOV(flipBack _dd_ number_co_ twirlClockwise _dd_ number_co_ tiltRight _dd_ number) _dd_ void {            this.rotation.addInPlace(this.calcRotatePOV(flipBack_co_ twirlClockwise_co_ tiltRight))_sm_        }                /**         * Calculate relative rotation change from the point of view of behind the front of the mesh.         * Supports definition of mesh facing forward or backward.         * @param {number} flipBack         * @param {number} twirlClockwise         * @param {number} tiltRight         */        public calcRotatePOV(flipBack _dd_ number_co_ twirlClockwise _dd_ number_co_ tiltRight _dd_ number) _dd_ BABYLON.Vector3 {            var defForwardMult _eq_ this._definedFacingForward ? 1 _dd_ -1_sm_            return new BABYLON.Vector3(flipBack * defForwardMult_co_ twirlClockwise_co_ tiltRight * defForwardMult)_sm_        }_lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]