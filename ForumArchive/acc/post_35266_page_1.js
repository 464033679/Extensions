[{"Owner":"Kaffesumpen","Date":"2018-01-24T21:15:17Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey all_co_ someone could explain too me why the sphere don_t_t drop when I start the scene. Do I need to add something else to it other then enabling gravity_co_ maybe some mass? thanks in advance\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\nimport * as BABYLON from _t_./node_modules/babylonjs/es6.js_t_\n\nconst canvas _eq_ document.getElementById(_t_game-canvas_t_)\n\nconst engine _eq_ new BABYLON.Engine(canvas_co_ true)\n\nconst createScene _eq_ () _eq_&gt_sm_ {\n\n    const scene _eq_ new BABYLON.Scene(engine)\n\n    const camera _eq_ new BABYLON.FreeCamera(_qt_FreeCamera_qt__co_ new BABYLON.Vector3(0_co_ 0_co_ -2)_co_ scene)\n\n    camera.attachControl(canvas_co_ true)\n\n    const light _eq_ new BABYLON.PointLight(_t_PointLight_t__co_ new BABYLON.Vector3(1_co_10_co_1)_co_ scene)\n\n    const sphere _eq_ new BABYLON.MeshBuilder.CreateSphere(_t_Sphere_t__co_ {}_co_ scene)\n\n    const box _eq_ new BABYLON.MeshBuilder.CreateBox(_t_Box_t__co_ {}_co_ scene)\n\n    box.position.x _eq_ 2\n\n    scene.gravity _eq_ new BABYLON.Vector3(0_co_ -1_co_ 0)\n\n    sphere.applyGravity _eq_ true\n\n    return scene\n}\n\nconst scene _eq_ createScene()\n\nengine.runRenderLoop(() _eq_&gt_sm_ {\n    scene.render()\n})\n\nwindow.addEventListener(_t_resize_t__co_ () _eq_&gt_sm_ {\n    engine.resize()\n})_lt_/code_gt__lt_/pre_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Wingnut","Date":"2018-01-25T01:28:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHiya K!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t    .applyGravity is really only for cameras.  It is part of a built-into BJS system for first-person-shooter games.  That system also includes .checkCollisions_co_ .moveWithCollisions()_co_ and mesh/cam .ellipsoid.  In general_co_ it is used for cameras... falling_co_ hitting ground_co_ and hitting mesh (by cursoring) whose .checkCollisions _eq_ true_sm_  This built-in system has no friction_co_ mass_co_ or restitution (bounce).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow_co_ about 3rd-party physics engines.  BabylonJS has two physics engines that it interfaces-with... OimoJS and CannonJS.  They are available as external files_co_ which are already included into our fantastic _lt_a href_eq__qt_http_dd_//playground.babylonjs.com/_qt_ rel_eq__qt_external nofollow_qt__gt_BabylonJS Playground_lt_/a_gt_ application.  So_co_ let_t_s play with one. \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#110CDL%235_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#110CDL#5_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere_t_s a great little heavily-commented playground... which uses BOTH camera.applyGravity system_co_ AND Oimo physics engine.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhen you first run the scene_co_ you will see the camera drop to the ground and stop... without a bounce.  No 3rd-party-authored physics engine used for the camera drop.  But_co_ SIMILAR-TO physics engines_co_ there are some _qt_impostors_qt_ involved.  They are ground.ellipsoid and camera.ellipsoid.  You are allowed to change their size/shape_co_ somewhat (_lt_strong_gt_see sidenote_lt_/strong_gt_). \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSphere.ellipsoid exists_co_ too_co_ but we have turned-on the Oimo physics engine for sphere_co_ so we will be using a DIFFERENT kind of impostor for him... called a physics impostor.  I wrote a _lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/topic/35252-how-to-properly-rotate-a-mesh-with-yours-physic-imporstor/?do_eq_findComment&amp_sm_comment_eq_202455_qt_ rel_eq__qt__qt__gt_recent post with examples_lt_/a_gt_ of HOW to _qt_move_qt_ a mesh with a physicsImpostor installed.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOk_co_ back to OUR playground example... both the ground and the sphere... have physicsImpostors activated_co_ and the scene has physics enabled... so the ball is bouncing_co_ thanks to Oimo.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tGround_co_ camera_co_ and sphere... have .ellipsoid property_co_ but again... not used by physics engines (for sphere bouncing on ground).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tJust for fun_co_ let_t_s make the camera.ellipsoid much taller.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#110CDL%234_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#110CDL#4_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSee lines 74-76.  The camera.ellipsoid started with a 0.5_co_ 1.0_co_ 0.5 ellipsoid dimension.  We made that 1.0 into 25.0.  Wow!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNotice how the camera hit the ground much sooner_co_ and stays 50-units above the ground?  The camera STARTS at 80 units above ground (line 9).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNotice I said _lt_strong_gt_50 units above ground_lt_/strong_gt_ and not 25 units?  That_t_s because...  the values of .ellipsoid are _qt_radii_qt_.  The values are the radius of the ellipsoid.  So with an ellipsoid.y _eq_ 25_co_ the total height of the ellipsoid is 50.  Understand?  Cool.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_sidenote_dd_  _lt_/strong_gt_I tried adjusting ground.ellipsoid to a height of 25/50_co_ but that didn_t_t work.  Apparently_co_ with camera.applyGravity... it ignores the size of ground.ellipsoid.  I think I know why... but we_t_ll talk about that on another day.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe main thing... is to understand WHEN and WHERE to use the BJS built-in collision system (.ellipsoid_co_ .checkCollisions_co_ .moveWithCollisions()_co_ cam.applyGravity_co_ and cam._needMoveForGravity)_co_ and... WHEN and WHERE to use physics engines.  It takes some time/experience to know when it is best to use one or the other (or both). \n_lt_/p_gt_\n\n_lt_p_gt_\n\tBJS-built-in collision system is much much faster than physics engines_co_ but no mass_co_ friction_co_ and restitution (bounce) calculations.  Physics engines are much more _qt_realistic_qt__co_ but more performance costly.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ you COULD _qt_fake_qt_ the gravity for the sphere (without using EITHER collision/physics system).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#110CDL%233_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#110CDL#3_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSee the little _qt_render loop_qt_ code in lines 33-37?  Yep_co_ we slowly drop the position.y of sphere... until it is 5 units above ground.  No ellipsoids_co_ no physics engines.  We still have .checkCollisions on camera and ground... so the camera drop still works.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOkay_co_ that_t_s a whole lot of learning in a single comment_co_ eh?  It is easy for users to get the two systems confused with each other.  But both systems... are pretty cool... and handy.  Even the fake gravity for sphere... is useful.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  I hope this helps.  Study and experiment with that playground scene.  Grab a zip and take it home... see if you can scare the dog.  _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_  Make edits and more saves... you can_t_t hurt ANYTHING in the playground.  When you discover something cool_co_ save the playground_co_ copy the URL_co_ and show it to us.  We LOVE looking at scenes_co_ especially playground-based scenes.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHave faith-in and patience-with yourself.  And have FUN!  In no time_co_ you will be a forces and collisions expert.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kaffesumpen","Date":"2018-01-25T14:46:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_202511_qt_ data-ipsquote-contentid_eq__qt_35266_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1516843715_qt_ data-ipsquote-userid_eq__qt_5733_qt_ data-ipsquote-username_eq__qt_Wingnut_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t13 hours ago_co_ Wingnut said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tHiya K!\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\t... very long and helpful answer\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThank you very much Wingnut for that very lengthy and helpful post. I assumed that (.ellipsoid_co_ .checkCollisions_co_ .moveWithCollisions()_co_ .. etc.) was CannonJS just abstracted away._lt_br /_gt_\n\tThe demos will sure help me get on my merry way_co_ thanks again.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t/may the force be with you\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]