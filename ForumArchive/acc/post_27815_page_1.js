[{"Owner":"Kesshi","Date":"2017-01-19T09:39:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tWhy BabylonJs uses Int32Array for mesh indices?_lt_br /_gt_\n\tWebGL (the OES_element_index_uint extension) requires unsigned values. Currently the Int32Array will be copied to an Uint32Array before it can be used_dd__lt_br /_gt__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.engine.ts#L1328_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.engine.ts#L1328_lt_/a_gt__lt_br /_gt_\n\tWouldn_t_t it be better to change it to Uint32Array? The array could be used directly then. ... or is ther any use for indices with negative value?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"whizzter","Date":"2017-01-19T14:59:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tInt32Array_co_Uint32Array_co_Float32Array_co_etc are all backed by a slab of bytes in memory (you can create an Uint32Array object that refers to the same memory as another Int32Array). OpenGL (that WebGL is ultimately based on and mostly implemented upon with the exception of libangle) is also a C api meaning that it doesn_t_t really care about the type of data and will just consume it. If you fed data you_t_ve written through a Float32Array you_t_d get errornous results (or more probably nothing since GL is a tad bad at reporting errors).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn machine representation however Int32 and Uint32 are identical as long as the value is below 2147483648 (_eq_2^31)_co_ the representations only different when dealing with numbers that has the highest bit set (the sign bit) but for all practical purposes you_t_re not going to be dealing with meshes with over 2 billion vertices for the forseeable future.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kesshi","Date":"2017-01-19T19:27:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI know that _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ Please read_dd_ _lt_a href_eq__qt_https_dd_//developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/TypedArray_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/TypedArray_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tQuote\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tWhen called with a typedArray argument_co_ which can be an object of any of the typed array types (such as Int32Array)_co_ the typedArray gets copied into a new typed array. Each value in typedArray is converted to the corresponding type of the constructor before being copied into the new array. Then length of the new typedArray object will be same of length of the typedArray argument.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tIt seems that the Int32 values are not just interpreted as UInt32. The whole Int32 array will be copied into a new Uint32 array and the values are converted if you use the constructor like this. Thats why i_t_m asking this question. It would be faster to use an Uint32Array directly.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"whizzter","Date":"2017-01-22T09:39:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWebGL will call out to C/C++ code and will just use the underlying buffer regardless of if your JavaScript code sees it as Uint32Array or Int32Array so no copies will be made. Buffers are just flat slabs of bytes and can be viewed in different ways.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf buffers are created or copied depends on what constructor you use(see the page you linked)_co_ if you use the typed array directly (as with regular arrays) you get a copy BUT if you use the underlying buffer object instead then you_t_re instead given a view. The example below should show the difference in usage (you can test it in chrome_co_firefox or node)\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var x_eq_new Uint32Array([123])_sm_ // array copy construction\nvar y_eq_new Int32Array(x)_sm_    // typed array copy construction \ny[0]_eq_-44_sm_\nconsole.log(x[0]+_qt__co__qt_+y[0])_sm_  // prints 123_co_-44\n\nvar z_eq_new Int32Array(x.buffer)_sm_ // using the view creation constructor (notice the buffer)\nz[0]_eq_145_sm_\nconsole.log(x[0]+_qt__co__qt_+y[0]+_qt__co__qt_+z[0])_sm_  // prints 145_co_-44_co_145\n\nz[0]_eq_-145_sm_\nconsole.log(x[0]+_qt__co__qt_+y[0]+_qt__co__qt_+z[0])_sm_  // prints 4294967151_co_-44_co_-145\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tIn the first printout x[0] retains it_t_s value since y got a separate buffer via the copy constructor.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor the second printout however x[0] has changed the value when we changed z[0] since they share the same underlying buffer_co_ in this example you see why one can use either Int32Array or Uint32Array since the representation is the same for positive integers below 2^31.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe third printout again changes x[0] when z[0] is changed due to using the same buffer but this time the values shown are different_co_ this is because negative numbers has the top sign bit set and this is where the unsigned and signed representations of 32bit integers differ.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor unsigned numbers the top bit means that the value is between 2^31 and 2^32-1 (2147483648 to 4294967295) whereas for signed numbers this means that the number is negative.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnyhow_co_ as i said before. For mesh indices you_t_re unlikely to have 2147483648 indices or more so using Int32 or Uint32 won_t_t matter much today.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t\t\t\n\n_lt_span class_eq__t_ipsType_reset ipsType_medium ipsType_light_t_ data-excludequote_gt_\n\t_lt_strong_gt_Edited _lt_time datetime_eq__t_2017-01-22T13_dd_44_dd_07Z_t_ title_eq__t_01/22/2017 01_dd_44  PM_t_ data-short_eq__t_1 yr_t__gt_January 22_co_ 2017_lt_/time_gt_ by whizzter_lt_/strong_gt_\n\t\n\t\t_lt_br_gt_(wrote the wrong variable name in the text)\n\t\n\t\n_lt_/span_gt_\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kesshi","Date":"2017-01-22T18:41:25Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThank you for your explanation ... but i know this already before_co_ i_t_m programming in c++ for many years._lt_br /_gt_\n\tI know that i don_t_t need the full 32 bit integer range nowadays. The point is that currently the array will get copied (because the copy constructor is used) and this is wasting perfomance and memory in my opinion. Especially for big meshes._lt_br /_gt__lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Nabroski","Date":"2017-01-23T09:49:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tso anyone did a pull request on this ? _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Nabroski","Date":"2017-01-23T17:19:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tregisterBeforrender onBeforeCameraRenderObservable onCompileAndRun render engine.endFrame and finally BABYLON.Tools.QueueNewFrame(renderLoop)_sm_ who carers about arrays\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-01-23T19:07:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI see no reason why we could not change it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFancy doing it?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kesshi","Date":"2017-01-23T19:26:12Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_160462_qt_ data-ipsquote-contentid_eq__qt_27815_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1485198474_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t17 minutes ago_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tI see no reason why we could not change it.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tFancy doing it?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI will have a look and try to work on PR in the next days._lt_br /_gt__lt_br /_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-01-23T19:34:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tI appreciate the help _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]