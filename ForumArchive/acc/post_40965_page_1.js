[{"Owner":"timetocode","Date":"2018-10-31T07:59:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_m about to begin a whole lot of 3D-related R&amp_sm_D on making large multiplayer levels_co_ and I_t_m here to get pointed in the right direction.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs an example_co_ how would a Babylon.js version of PUBG/Fortnite/Blackops have to be made? I_t_ve categorized some of the larger problems and offered a few guesses as for solutions_co_ but am looking for feedback and ideas. I also know very little about 3D games so if y_t_all happen to simply know how any of these things works in AAA games I_t_d love to hear it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEdit_dd_ I already have the netcode that can do 50-150 players and all the first person shooter fancy stuff_co_ so I_t_m just going to focus on rendering and collisions which I have no idea about\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Large Landmass (Terrain)_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEach of these games has a huge island. My guess is these are cut up into chunks and varying LODs. I_t_ve been reading through the bablyon docs and found mesh simplification stuff which sounds to me like it could handle making the lower LOD versions of chunks. There_t_s also a function for subdividing meshes_co_ though I_t_m not sure how that works and if it would be viable for cutting a larger object into spatial chunks_co_ or if this is something to write some custom code for. Any suggestions?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Rendering Buildings_co_ Players_co_ Props_co_ etc_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think this category is an extension of the terrain ideas (solved by multiple LODs)_co_ but with the added benefit that stuff that is truly far away wouldn_t_t get added to the scene on the client at all.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Collisions everywhere_lt_/strong_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tUnlike the client_co_ the server has to keep the entire mesh of the game loaded.  Luckily the server doesn_t_t have to render it. But how do collisions on the server work? Every tick it has to stop ~100 players from falling through the ground or clipping through walls. It also has to calculate every shot landing. It is easy to use moveWithCollisions for a single player against a simple world -- but what happens when the whole world is one huge scene in NullEngine? Does putting every mesh manually into babylon_t_s octree solve this? I_t_m totally willing to learn and implement spatial structures and custom collisions if needed. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn one of my simple prototypes I tried to fire rays downwards from the players to allow them to jump up onto varying meshes. It worked great_co_ and I make and crazy shape I wanted in blender_co_ import it_co_ and then climb up ontop of it. But as I added more and more players_co_ and more and more rocks/obstacles I eventually hit a performance wall. Does an octree solve this? Is firing rays downwards even an appropriate technique?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAny tips on any of these topics are appreciated _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt_ TY\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-10-31T15:05:26Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHello for terrain_co_ you should have a look at _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5453_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5453-jerome/_qt_ rel_eq__qt__qt__gt_@jerome_lt_/a_gt_ great dynamic terrain_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/extensions/dynamic_terrain_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/extensions/dynamic_terrain_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor collisions I would have done them partially on the local computer (and the server can do some checks but not at the same frequency to avoid cheaters)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-10-31T15:05:59Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAlso as you mentioned_co_ octrees will help a lot here to boost collisions / picking perf\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]