[{"Owner":"amo yeh","Date":"2016-11-24T15:12:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tTrying to do a lookat clamp on both axes_co_ the attached image shows my problem.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tmy goal is to set a mesh to look at some object only if both axes are fall within clamp range.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI found similar thread_co_ but only discuss on one axis only. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tVery appreciated if anyone could provide direction or solution on this problem_co_ thanks~\n_lt_/p_gt_\n\n_lt_p_gt__lt_a href_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_11/lookatproblem.png.66403222fb890a570799e3016d70668a.png_qt_ class_eq__qt_ipsAttachLink ipsAttachLink_image_qt__gt__lt_img data-fileid_eq__qt_10391_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2016_11/lookatproblem.png.66403222fb890a570799e3016d70668a.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ alt_eq__qt_lookatproblem.png_qt__gt__lt_/a_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"max123","Date":"2016-11-24T17:14:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tSimplest solution_dd_ attach an invisible mesh (sphere or box) that fits your _qt_range/shape_qt_ to your _qt_object to rotate_qt_ and check .intesectsMesh(objectToLookAt).\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amo yeh","Date":"2016-11-25T09:49:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks @max123 for simple solution_co_ I am also trying to solve it mathematically_co_ might try your method later if mine is not working.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI guess the problem can be solved with some clamp and calculation in spherical coordinate space.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAfter watching _lt_a href_eq__qt_https_dd_//www.youtube.com/watch?v_eq_-ny7psXNdUU_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.youtube.com/watch?v_eq_-ny7psXNdUU_lt_/a_gt_ _co_ I was able to covert Cartesian to spherical space\n_lt_/p_gt_\n\n_lt_p_gt_\n\there is the conversion I came up so far\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1II8GP_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1II8GP_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think it is similar to how ArchRotateCamera moves_co_ will try later for clamping functions_co_ very appreciated for any other suggestions\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Klaas","Date":"2016-11-25T10:31:11Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi amo_co__lt_br /_gt_\n\tlook_co_ this is the source to lookAt() ...\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_public lookAt(targetPoint_dd_ Vector3_co_ yawCor_dd_ number _eq_ 0_co_ pitchCor_dd_ number _eq_ 0_co_ rollCor_dd_ number _eq_ 0_co_ space_dd_ Space _eq_ Space.LOCAL)_dd_ void {\n            /// &lt_sm_summary&gt_sm_Orients a mesh towards a target point. Mesh must be drawn facing user.&lt_sm_/summary&gt_sm_\n            /// &lt_sm_param name_eq__qt_targetPoint_qt_ type_eq__qt_Vector3_qt_&gt_sm_The position (must be in same space as current mesh) to look at&lt_sm_/param&gt_sm_\n            /// &lt_sm_param name_eq__qt_yawCor_qt_ type_eq__qt_Number_qt_&gt_sm_optional yaw (y-axis) correction in radians&lt_sm_/param&gt_sm_\n            /// &lt_sm_param name_eq__qt_pitchCor_qt_ type_eq__qt_Number_qt_&gt_sm_optional pitch (x-axis) correction in radians&lt_sm_/param&gt_sm_\n            /// &lt_sm_param name_eq__qt_rollCor_qt_ type_eq__qt_Number_qt_&gt_sm_optional roll (z-axis) correction in radians&lt_sm_/param&gt_sm_\n            /// &lt_sm_returns&gt_sm_Mesh oriented towards targetMesh&lt_sm_/returns&gt_sm_\n\n            var dv _eq_ AbstractMesh._lookAtVectorCache_sm_\n            var pos _eq_ space _eq__eq__eq_ Space.LOCAL ? this.position _dd_ this.getAbsolutePosition()_sm_\n            targetPoint.subtractToRef(pos_co_ dv)_sm_\n            var yaw _eq_ -Math.atan2(dv.z_co_ dv.x) - Math.PI / 2_sm_\n            var len _eq_ Math.sqrt(dv.x * dv.x + dv.z * dv.z)_sm_\n            var pitch _eq_ Math.atan2(dv.y_co_ len)_sm_\n            this.rotationQuaternion _eq_ this.rotationQuaternion || new Quaternion()_sm_\n            Quaternion.RotationYawPitchRollToRef(yaw + yawCor_co_ pitch + pitchCor_co_ rollCor_co_ this.rotationQuaternion)_sm_\n        }\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tSo_co_ i would make my own lookAt function and add the clamp function just before the QuaternionRotaion.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Klaas","Date":"2016-11-25T22:52:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co__lt_br /_gt_\n\ti just ran in a very similar problem. Maybe this can help.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_targetFrontality( target ){\n\t//get the directional vector from viewer to target\n\tvar d _eq_ viewer.position.subtract( target.position )_sm_\n\td.normalize()_sm_\n\n\t//generate a heading vector for the viewer_co_ here the viewer looks along the z axis in positive direction\n\tvar v _eq_ new BABYLON.Vector3(0_co_0_co_1)_sm_\n\t\n\t//now calculate the directional vector of the viewer from the rotation of the viewer\n\tvar c _eq_ QuaternionMultiplyVector3(viewer._rotationQuaternion_co_ v)_sm_\n\tc.normalize()_sm_\n\t\n\t// the dot product projects one vector on another\n\t// 1.0 _eq_ heading strait on\n\t// -1.0 _eq_ heading strait away\n\treturn BABYLON.Vector3.Dot(d_co_ c)_sm_\n}\n\nQuaternionMultiplyVector3 (quat_co_vec) {\n\tvar num _eq_ quat.x * 2_sm_\n\tvar num2 _eq_ quat.y * 2_sm_\n\tvar num3 _eq_ quat.z * 2_sm_\n\tvar num4 _eq_ quat.x * num_sm_\n\tvar num5 _eq_ quat.y * num2_sm_\n\tvar num6 _eq_ quat.z * num3_sm_\n\tvar num7 _eq_ quat.x * num2_sm_\n\tvar num8 _eq_ quat.x * num3_sm_\n\tvar num9 _eq_ quat.y * num3_sm_\n\tvar num10 _eq_ quat.w * num_sm_\n\tvar num11 _eq_ quat.w * num2_sm_\n\tvar num12 _eq_ quat.w * num3_sm_\n\tvar result _eq_ new BABYLON.Vector3(0_co_0_co_0)_sm_\n\tresult.x _eq_ (1 - (num5 + num6)) * vec.x + (num7 - num12) * vec.y + (num8 + num11) * vec.z_sm_\n\tresult.y _eq_ (num7 + num12) * vec.x + (1 - (num4 + num6)) * vec.y + (num9 - num10) * vec.z_sm_\n\tresult.z _eq_ (num8 - num11) * vec.x + (num9 + num10) * vec.y + (1 - (num4 + num5)) * vec.z_sm_\n\treturn result_sm_\n}\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tif you restrict d and c on axis you can calculate the compontents\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"amo yeh","Date":"2016-11-27T11:42:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tAfter some testing I was able to come up the solution from lookat function from the babylon source as _lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/23442-klaas/?do_eq_hovercard_qt_ data-mentionid_eq__qt_23442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/23442-klaas/_qt_ rel_eq__qt__qt__gt_@Klaas_lt_/a_gt_ suggested_co_ really appreciated for the help. _lt_/span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\there is a demo \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1II8GP%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1II8GP#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI still don_t_t know what _t_s the default direction the object is facing without making any rotations.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe demo above I used an empty mesh coneHolder to look at the moving box_co_ The calculated yaw value is between 90 ~ -270 _co_ which I thought was odd (I thought it would be -180 ~ 180 or 0 ~ 360) _co_  and pitch value seems to be fine ( -90 ~ 90)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tany information or corrections on these ? Thanks for the help  ~\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-11-27T13:17:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_152587_qt_ data-ipsquote-contentid_eq__qt_26607_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1480246956_qt_ data-ipsquote-userid_eq__qt_16997_qt_ data-ipsquote-username_eq__qt_amo yeh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t1 hour ago_co_ amo yeh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThe demo above I used an empty mesh coneHolder to look at the moving box_co_ The calculated yaw value is between 90 ~ -270\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThis confused me too.\n_lt_/p_gt_\n_lt_iframe data-embedcontent_eq__qt__qt_ frameborder_eq__qt_0_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/topic/25932-meshlookat/?do_eq_embed_qt__gt__lt_/iframe_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Klaas","Date":"2016-11-27T21:43:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell that looks as if its working nicley. The somewhat wierd degree value of yaw come from this line ..\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_var yaw _eq_ -Math.atan2(dv.z_co_ dv.x) - Math.PI / 2_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tat the end (-Math.PI / 2) the yaw value is turnt by 90 degree clockwise. At this point you have to insert the yaw offset of the viewer. Wich is the default direction of the facing.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]