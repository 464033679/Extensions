[{"Owner":"touslecoq","Date":"2016-11-03T13:25:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHas anyone created simple undo/redo function in Babylon?  I_t_ve had a quick search and cannot see any examples.  Is it as simple as taking copies of the scene variable and storing in an array and recalling when user selects undo from a UI button or keyboard shortcut?  That would be too easy right?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCheers_co_ Rich\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-11-03T13:40:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tLook up the Command pattern.\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"adam","Date":"2016-11-03T13:42:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.codeproject.com/Articles/33384/Multilevel-Undo-and-Redo-Implementation-in-Cshar_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.codeproject.com/Articles/33384/Multilevel-Undo-and-Redo-Implementation-in-Cshar_lt_/a_gt_\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"dbawel","Date":"2016-11-03T16:08:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/19275-touslecoq/?do_eq_hovercard_qt_ data-mentionid_eq__qt_19275_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/19275-touslecoq/_qt_ rel_eq__qt__qt__gt_@touslecoq_lt_/a_gt_ -\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have built many undo.history functions in various applications - and you can use any memory element (container) such as an array_co_ a text file_co_ a DB_co_ make use of pointers etc. The trick is to establish what events make up the data set such as if you have built a drawing app_co_and want to add an undo feature - you might consider a single undo operation to consist of all pointer X_co_Y data between a pointerdown and a pointerup canvas or Window event.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt all depends on the application_co_ what the dataset represents_co_ and optimize as much as possible to avoid undoing long events - unless your application requires this - especially if you_t_re running off a server to avoid delays due to the amount of data streaming in the undo function_sm_ whatever that might be.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is a very broad question_co_ so it_t_s difficult to provide a specific answer without additional info on the  app the operations involved_co_ user connectivity_co_ badwidth_co_ user hardware_co_ etc. However_co_ you_t_ll find that buffering such data and recalling the data to _qt_undo_qt_ an operation or set of operations is generally quite simple - and if required_co_ I highly advise implimenting sooner than later.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tDB\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"touslecoq","Date":"2016-11-03T16:55:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks both for your responses.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt_@_lt_/span_gt_Adam - the pattern I was looking at implementing I think was a cross between 2 and 3 in that link.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI had intended using the push/pop of _qt_events_qt_ to/from undo/redo queue.  However rather than creating individual reversible actions (e.g. mesh moved from position a to b_co_ undo moves back to a) my plan was to take a snapshot of everything at key points and be able to revert to that point.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe main reason for this is that reversing the actions undertaken by a user would also require reversal of any consequential actions and because of the free-roaming capability in 3D this could become quite tedious and difficult to code (yes I am looking for a shortcut!).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor context_co_ imagine a scene with up to 100 components (think simple lego bricks) that can be plugged together.  Imagine the user drags a brick close to another and the 2 snap together.  However because the gap was exactly one brick wide_co_ it also triggers a snap to a third brick (ie our moved brick is now sandwiched between 2 others and has snapped/locked to both).  To undo a move would also require the undoing of any deliberate connections and any consequential connections.  \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs we are not talking about a huge number of components/bricks (ie meshes) or a huge undo history (maybe 3 steps?) I hoped it would be more simple to reload the scene and would not be too resource intensive.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have been looking at the scene serializer function to effectively save the scene at key points and allow the user to hit the _qt_u_qt_ key to undo and return to saved point.  Haven_t_t managed to get that to work yet though.  Once I have this working for a single step then I_t_ll implement the push/pop method which will allow me to configure MAX_UNDO_STEPS and v check performance.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThoughts - am I barking?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRich \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]