[{"Owner":"Rodrix3","Date":"2018-05-15T14:59:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI am using a reflection probe to capture the scene and use the texture for reflection.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am aware I can change the blur setting in the final texture. However_co_ I don_t_t want an homogenous blur.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI want the reflection to be crystal clear for what is close (no blur) and blurry for what is far away. The more far away_co_ the more blurry.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIs there native support for this? If there is not_co_ can anyone help me create a custom shader that applies blur based on z depth?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd finally_co_ if the shader is an option_co_ how can I use that custom shader with the reflection probe? What would be the actual setup? Thoughts?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThanks!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-05-15T15:23:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHey_co_ interesting question. By default the reflection probes generate a crystal clear image. You can then create a custom postprocess to apply to the probe texture (probe.cubeTexture) with addPostProcess function (_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Materials/Textures/babylon.renderTargetTexture.ts#L293_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Materials/Textures/babylon.renderTargetTexture.ts#L293)_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCreating a custom postprocess is not complex_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/how_to/how_to_use_postprocesses#custom-postprocesses_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/how_to/how_to_use_postprocesses#custom-postprocesses_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Rodrix3","Date":"2018-05-16T04:02:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks _lt_span_gt__lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_! _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt__lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt__lt_span_gt__lt_span_gt_Ok I am glad there is a way to add a custom postprocess._lt_br /_gt_\n\tNow the _qt_hard part_qt_ will be creating the shader._lt_/span_gt__lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span_gt__lt_span_gt__lt_span_gt_Thinking out loud_dd__lt_/span_gt__lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_strong_gt_Layer 1._lt_/strong_gt_ Depth Pass_dd_ _qt_white_qt_ close by objects / _qt_black_qt_ far away objects._lt_br /_gt_\n\t_lt_strong_gt_Layer 2_lt_/strong_gt_. Crystal clear image._lt_br /_gt_\n\t_lt_strong_gt_Layer 3._lt_/strong_gt_ Crystal clear image +  blur applied to entire image homogenously._lt_br /_gt_\n\t_lt_br /_gt_\n\t_lt_strong_gt_Final Output_dd_ _lt_/strong_gt_ _lt_br /_gt_\n\toutput.r _eq_ mix([blurred image].r_co_ [crystal clear image].r_co_ luminance([depth pass])_sm__lt_br /_gt_\n\toutput.g _eq_ mix([blurred image].g_co_ [crystal clear image].g_co_ luminance([depth pass])_sm__lt_br /_gt_\n\toutput.b _eq_ mix([blurred image].b_co_ [crystal clear image].b_co_ luminance([depth pass])_sm_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWe are interpolating the pixel from the _qt_clear image_qt_ &lt_sm_--&gt_sm_ _qt_blurred image_qt_ pixels_co_ using the luminance of the depth pass as an interpolation factor._lt_br /_gt_\n\tThe luminance of the depth pass is 0 for far away objects_co_ so in those cases we would be getting 100% the pixel from the blurred image._lt_br /_gt_\n\tThe luminance of the depth pass is 1 for very close objects_co_ so in that case we would be getting 100% the pixel from the clear image._lt_br /_gt_\n\tAnything in between will be a value from 0 to 1 for the luminance_co_ giving us an interpolation of blurred / clear image.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThat would be the pseudo code for the shader_sm_ which would give a more blurred image for far away objects_co_ and more clear image for close objects._lt_br /_gt_\n\tFor objects that are close and get further away_co_ the blur would appear in a gradient form.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt took me a while to figuring this algorithm_co_ but I think it would work very well. _lt_br /_gt_\n\tAny thoughts or improvements?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t..and do you think anyone could contribute to coding this into actual code?_lt_br /_gt_\n\tAnd most importantly_co_ is there already a way of easily calculating a depth texture (z)?_lt_br /_gt_\n\tThat part is complicated as it is a multi-step shader_co_ where the input of one of the uniforms (a texture)_co__lt_br /_gt_\n\twould be the depth pass_co_ calculated in a previous pass. This would depend heavily on how the postprocessing pipeline has been created on Babylon to see how easy would be to implement this.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-05-16T17:19:21Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tLet_t_s try it and see how it works _lt_span_gt__lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- _qt__lt_span style_eq__t_display_dd_ inline !important_sm_ float_dd_ none_sm_ background-color_dd_ transparent_sm_ color_dd_ rgb(53_co_ 60_co_ 65)_sm_ font-family_dd_ _qt_Roboto_qt__co__qt_Helvetica Neue_qt__co_Helvetica_co_Arial_co_sans-serif_sm_ font-size_dd_ 14px_sm_ font-style_dd_ normal_sm_ font-variant_dd_ normal_sm_ font-weight_dd_ 400_sm_ letter-spacing_dd_ normal_sm_ orphans_dd_ 2_sm_ text-align_dd_ left_sm_ text-decoration_dd_ none_sm_ text-indent_dd_ 0px_sm_ text-transform_dd_ none_sm_ -webkit-text-stroke-width_dd_ 0px_sm_ white-space_dd_ normal_sm_ word-spacing_dd_ 0px_sm__t__gt_and do you think anyone could contribute to coding this into actual code?_qt__dd_ yes_co_ definitely. Bjs is open source for that reason!_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_span style_eq__t_display_dd_ inline !important_sm_ float_dd_ none_sm_ background-color_dd_ transparent_sm_ color_dd_ rgb(53_co_ 60_co_ 65)_sm_ font-family_dd_ _qt_Roboto_qt__co__qt_Helvetica Neue_qt__co_Helvetica_co_Arial_co_sans-serif_sm_ font-size_dd_ 14px_sm_ font-style_dd_ normal_sm_ font-variant_dd_ normal_sm_ font-weight_dd_ 400_sm_ letter-spacing_dd_ normal_sm_ orphans_dd_ 2_sm_ text-align_dd_ left_sm_ text-decoration_dd_ none_sm_ text-indent_dd_ 0px_sm_ text-transform_dd_ none_sm_ -webkit-text-stroke-width_dd_ 0px_sm_ white-space_dd_ normal_sm_ word-spacing_dd_ 0px_sm__t__gt_- _qt_is there already a way of easily calculating a depth texture (z)?_qt__dd_ yes sir! _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/how_to/how_to_use_depthrenderer_to_get_depth_values_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/how_to/how_to_use_depthrenderer_to_get_depth_values_lt_/a_gt__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]