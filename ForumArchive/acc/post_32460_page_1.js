[{"Owner":"Kreeba","Date":"2017-08-19T12:05:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi. I get the concept of Delta Time_co_ but one thing I have always struggled with is exactly where to apply the multiplier on movement calculation. For example_co_ this is my movement code_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_    protected updatePosition(deltaTime_dd_ number _eq_ 1) {\n        //Speed\n        if (this.state.targetSpeed !_eq_ 0) {\n            if (this.state.targetSpeed &gt_sm_ this.state.currentSpeed) {\n                this.state.currentSpeed +_eq_ this.characteristics.handling.acceleration\n            }\n            if (this.state.targetSpeed &lt_sm_ this.state.currentSpeed) {\n                this.state.currentSpeed -_eq_ (this.characteristics.handling.acceleration * 2)\n            }\n        } else {\n            this.state.currentSpeed _eq_ 0\n        }\n\n        //Calculate Acceleration\n        let accelerationVector _eq_ {\n            x_dd_ this.state.currentSpeed * 0.02 * Math.cos((this.state.currentHeading - 90) * (Math.PI / 180))_co_\n            z_dd_ this.state.currentSpeed * 0.02 * Math.sin((this.state.currentHeading - 90) * (Math.PI / 180))\n        }\n\n        //Apply Acceleration Vector onto Movement Vector\n        this.state.movement.x +_eq_ accelerationVector.x\n        this.state.movement.z -_eq_ accelerationVector.z\n\n        //Multiply Drag (also corrects momentum issues)\n        this.state.movement.x *_eq_ this.characteristics.handling.drag\n        this.state.movement.z *_eq_ this.characteristics.handling.drag\n\n        //Apply movement vector to position\n        this.state.position.x +_eq_ this.state.movement.x\n        this.state.position.z +_eq_ this.state.movement.z\n    }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tMy delta time is leavling out as _t_1_t_ if the game is running correctly at 60fps. Where do I add the deltaTime multiplier? On every caclulation_co_ on just the application at the end?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Raggar","Date":"2017-08-19T18:28:19Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_pre_gt_\n_lt_code_gt__lt_span_gt_this_lt_/span_gt_.state.position.x +_eq_ _lt_span_gt_this_lt_/span_gt_.state.movement.x * deltaTime\n_lt_span_gt_this_lt_/span_gt_.state.position.z +_eq_ _lt_span_gt_this_lt_/span_gt_.state.movement.z * deltaTime_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI would use it like that_co_ instead of applying to to all the calculations.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_m not sure whether or not applying it to the calculations would change the end-result of the position_co_ compared to applying it directly to the position. You know....  math _lt_img alt_eq__qt__dd_P_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ title_eq__qt__dd_P_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-08-20T05:36:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou want to be multiplying by the time factor twice - once when converting acceleration to velocity and once when converting velocity to position.\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_acceleration _eq_ force/mass + gravity\nvelocity +_eq_ impulse/mass + acceleration * dt\nvelocity *_eq_ drag\nposition +_eq_ velocity * dt_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThe usual thing is to have _qt_dt_qt_ be an actual time value in seconds_co_ rather than a scaling factor - that way the acceleration value will be a familiar sort of _qt_spatial units per second per second_qt_ value. If you assign _qt_dt_qt_ to be 1_co_ that works out the same math-wise but your acceleration value will be in (spatial units per 1/60th of a second) squared.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Raggar","Date":"2017-08-20T09:11:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_186115_qt_ data-ipsquote-contentid_eq__qt_32460_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1503207395_qt_ data-ipsquote-userid_eq__qt_12925_qt_ data-ipsquote-username_eq__qt_fenomas_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t3 hours ago_co_ fenomas said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tYou want to be multiplying by the time factor twice - once when converting acceleration to velocity and once when converting velocity to position.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tCare to explain why you would do it like this?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-08-20T12:08:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_186118_qt_ data-ipsquote-contentid_eq__qt_32460_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1503220275_qt_ data-ipsquote-userid_eq__qt_22713_qt_ data-ipsquote-username_eq__qt_Raggar_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t2 hours ago_co_ Raggar said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tCare to explain why you would do it like this?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tVelocity is the change in position per unit of time_co_ right? For example_co_ if a video game character is moving at 10 meters per second_co_ and the physics engine wants to know how far the character will move in 1/60th of a second_co_ the answer is (10 m/s) * (1/60 s) _eq_ one sixth meter_co_ right?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWell_co_ all those things are also true for acceleration and velocity - acceleration is a measure of how much the velocity changes per unit of time_co_ so if you want to know how much the velocity changes in 1/60th of a second you multiply that time value by the acceleration.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn mathy terms_co_ you multiply by time twice when converting acceleration to position because acceleration is the second derivative of position_co_ with respect to time.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kreeba","Date":"2017-08-20T14:07:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_186115_qt_ data-ipsquote-contentid_eq__qt_32460_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1503207395_qt_ data-ipsquote-userid_eq__qt_12925_qt_ data-ipsquote-username_eq__qt_fenomas_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t8 hours ago_co_ fenomas said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tYou want to be multiplying by the time factor twice - once when converting acceleration to velocity and once when converting velocity to position.\n\t\t_lt_/p_gt_\n\n\t\t_lt_pre_gt_\n\n_lt_code_gt__lt_span_gt_acceleration_lt_/span_gt_ _eq_ force/mass + gravity\n_lt_span_gt_velocity_lt_/span_gt_ +_eq_ impulse/mass + acceleration * dt\n_lt_span_gt_velocity_lt_/span_gt_ *_eq_ drag\n_lt_span_gt_position_lt_/span_gt_ +_eq_ velocity * dt_lt_/code_gt__lt_/pre_gt_\n\n\t\t_lt_p_gt_\n\t\t\tThe usual thing is to have _qt_dt_qt_ be an actual time value in seconds_co_ rather than a scaling factor - that way the acceleration value will be a familiar sort of _qt_spatial units per second per second_qt_ value. If you assign _qt_dt_qt_ to be 1_co_ that works out the same math-wise but your acceleration value will be in (spatial units per 1/60th of a second) squared.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tWhat is the difference between impulse and force and how are they calculated?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-08-20T14:47:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_186124_qt_ data-ipsquote-contentid_eq__qt_32460_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1503238047_qt_ data-ipsquote-userid_eq__qt_27667_qt_ data-ipsquote-username_eq__qt_Kreeba_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t27 minutes ago_co_ Kreeba said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tWhat is the difference between impulse and force and how are they calculated?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThink of impulse as something that affects things once_co_ instantaneously_co_ while a force is something that acts gradually_co_ starting and stopping at different times. E.g. to make the character move when the player presses a key you want a force_co_ but to make the character jump you probably want to apply an impulse.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs for how to calculate them_co_ usually they_t_re arbitrary numbers that you chose based on how fast to move the character_co_ how they jump_co_ etc. I just put them in the sample code as an example of what a slightly more general physics loop would look like.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kreeba","Date":"2017-08-20T14:51:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThanks. I am looking to standardise my physics terminology. I like your little guide _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_. Do you have any resources for setting up a physics loop for non physicists?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI have found that I am now getting a little bit of rubber banding when the server syncs with the client_co_ so I think it is working. I now need to compensate for the network delay\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-08-20T16:03:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI do not profess to be familiar with physics_co_ at least not recently.  I do think whatever you do_co_ things should not measured or judged by frame per second_co_ but rather units of time.  Why?  It is not going to serve you well_co_ if you later which to deploy on Webvr.  There the max is 90_co_ not 60 fps.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPersonally_co_ do all my animation queuing in terms of the desired result_co_ maybe a step (or a left &amp_sm_ a right step)_co_ in the amount of time required.  If you stamp the time when the event gets taken off the queue_co_ you merely calculate where it is to be_co_ morph target or bone matrix state at any given time.  This is blissfully un-aware of the max fps of a platform.  It is also a little more forgiving if your game just has a little too much stuff to really sustain the max FPS.  50 FPS is pretty playable.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor acceleration_co_ I handle that by passing how many times to repeat_co_ and the amount of time the last repeat is to run in.  Here is a _lt_a href_eq__qt_https_dd_//palmer-jc.github.io/scenes/QueuedInterpolation/flying_carpet/index.html_qt_ rel_eq__qt_external nofollow_qt__gt_scene _lt_/a_gt_accelerating using this in the beginning.  If you do not know how many repeats are going to be needed_co_ you can place a function at the end of the event_co_ submitting another event to the queue with less time.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAgain_co_ probably wrong for physics_co_ but I am building for morphing (speech / emotions)_co_ and choreographed mobility.  The time unit thing is still the way to do.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-08-20T16:14:54Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tOh_co_ if forgot_co_ for smooth acceleration within an event_co_  I have a number of _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Extensions/blob/master/QueuedInterpolation/src/queue/Pace.ts_qt_ rel_eq__qt_external nofollow_qt__gt_paces_lt_/a_gt_ (sine_co_ elastic_co_ cubic_co_ bezier curve_co_ etc).  BJS does not call them paces_co_ but it has the same (I stolen them from them).\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Kreeba","Date":"2017-08-20T16:19:10Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_186134_qt_ data-ipsquote-contentid_eq__qt_32460_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1503245032_qt_ data-ipsquote-userid_eq__qt_8492_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t14 minutes ago_co_ JCPalmer said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tI do not profess to be familiar with physics_co_ at least not recently.  I do think whatever you do_co_ things should not measured or judged by frame per second_co_ but rather units of time.  Why?  It is not going to serve you well_co_ if you later which to deploy on Webvr.  There the max is 90_co_ not 60 fps.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tPersonally_co_ do all my animation queuing in terms of the desired result_co_ maybe a step (or a left &amp_sm_ a right step)_co_ in the amount of time required.  If you stamp the time when the event gets taken off the queue_co_ you merely calculate where it is to be_co_ morph target or bone matrix state at any given time.  This is blissfully un-aware of the max fps of a platform.  It is also a little more forgiving if your game just has a little too much stuff to really sustain the max FPS.  50 FPS is pretty playable.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tFor acceleration_co_ I handle that by passing how many times to repeat_co_ and the amount of time the last repeat is to run in.  Here is a _lt_a href_eq__qt_https_dd_//palmer-jc.github.io/scenes/QueuedInterpolation/flying_carpet/index.html_qt_ rel_eq__qt_external nofollow_qt__gt_scene _lt_/a_gt_accelerating using this in the beginning.  If you do not know how many repeats are going to be needed_co_ you can place a function at the end of the event_co_ submitting another event to the queue with less time.\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tAgain_co_ probably wrong for physics_co_ but I am building for morphing (speech / emotions)_co_ and choreographed mobility.  The time unit thing is still the way to do.\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\t*note to self_dd_ don_t_t target webvr...\n_lt_/p_gt_\n\n_lt_p_gt_\n\t..problem solved _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tI think this is a little overkill for my needs_co_ however its great to add it to the thread. I am targeting Desktops and low powered mobiles_co_ then trying to keep them in sync with the server.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"fenomas","Date":"2017-08-21T06:52:01Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_186129_qt_ data-ipsquote-contentid_eq__qt_32460_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1503240697_qt_ data-ipsquote-userid_eq__qt_27667_qt_ data-ipsquote-username_eq__qt_Kreeba_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t15 hours ago_co_ Kreeba said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tThanks. I am looking to standardise my physics terminology. I like your little guide _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_. Do you have any resources for setting up a physics loop for non physicists?\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tI have found that I am now getting a little bit of rubber banding when the server syncs with the client_co_ so I think it is working. I now need to compensate for the network delay\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI think the easiest thing is to peek inside an existing engine. You might look_co_ for example_co_ at _lt_a href_eq__qt_https_dd_//github.com/andyhall/voxel-physics-engine_qt_ rel_eq__qt_external nofollow_qt__gt_voxel-physics-engine_lt_/a_gt_ (by me _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt_ /_gt_ )_co_ which is a lot more bite-sized than production engines (all the relevant code is in index.js and rigidBody.js)_co_ and see what it_t_s doing.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAddendum_dd_ to speak briefly to JC_t_s point about timesteps_co_ there are fundamentally two ways of doing physics. _lt_strong_gt_The Easy Way_lt_/strong_gt_ is to update your physics before each render_co_ using the time since the previous render as a timestep_co_ and _lt_strong_gt_The Right Way_lt_/strong_gt_ is to _lt_a href_eq__qt_https_dd_//gafferongames.com/post/fix_your_timestep/_qt_ rel_eq__qt_external nofollow_qt__gt_fix your timesteps_lt_/a_gt_ and decouple physics from rendering. The former is simple and intuitive_co_ and fine for any kind of starter project (and indeed lots of AAA games even use it)_co_ but if you like this stuff and want to learn the real deal you should eventually look at the latter way_co_ and either use it_co_ or at least have a clear idea of what its benefits are and why you_t_re okay without them.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-08-21T17:15:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tIf you have integration of multiple serialized animations with sound_co_ there is also _lt_strong_gt_The Only Way_lt_/strong_gt_._lt_img alt_eq__qt__dd_P_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_tongue.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/tongue@2x.png 2x_qt_ title_eq__qt__dd_P_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"bzor","Date":"2018-11-19T14:35:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/12925-fenomas/?do_eq_hovercard_qt_ data-mentionid_eq__qt_12925_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/12925-fenomas/_qt_ rel_eq__qt__qt__gt_@fenomas_lt_/a_gt_ would drag also need to use dt as it_t_s modifying velocity every frame?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"aWeirdo","Date":"2018-11-19T14:59:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/27372-bzor/?do_eq_hovercard_qt_ data-mentionid_eq__qt_27372_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/27372-bzor/_qt_ rel_eq__qt__qt__gt_@bzor_lt_/a_gt__lt_br /_gt_\n\tDo you mean Drop &amp_sm_ Drag_co_ with your mouse? \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_em_gt_Edit_sm_ _lt_br /_gt_\n\tOh holy necro.. _lt_/em_gt__lt_span class_eq__qt_ipsEmoji_qt__gt_😂_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]