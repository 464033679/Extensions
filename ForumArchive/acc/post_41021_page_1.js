[{"Owner":"Nodragem","Date":"2018-11-03T20:12:04Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI would like to be able to load a text file (or json_co_ csv_co_ and other text-based files) as simply as I do with textures. Something like that\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_this.dictionary _eq_ new BABYLON.TextFile(_qt_./assets/data/dictionary.txt_qt_)_sm_\nconsole.log(this.dictionary)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tI would likeÂ  my text file to de loaded synchronously so that I am sure I can read its content once I run the line that loaded it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBut it seems that there is no way to do so _lt_span class_eq__qt_ipsEmoji_qt__gt_ðŸ˜•_lt_/span_gt_Â that just drives me crazy.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-11-03T20:50:09Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.tools.ts#L851_qt_ rel_eq__qt_external nofollow_qt__gt_LoadFile _lt_/a_gt_is what gets run for things like a .babylon or sound file.Â  The second arg is a successÂ  function callback.Â  You cannot really do any synchronous file loading except for script &amp_sm_ other files listed in a html file.Â  Even then_co_ it is not really synchronous_co_ just performed before control is passed.Â  Do Something like_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_BABYLON.Tools.LoadFile(_qt_./assets/data/dictionary.txt_qt__co_ (data) _eq_&gt_sm_ {\n     this.dictionary _eq_ data_sm_\n     console.log(data)_sm_\n})_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2018-11-03T20:50:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou can do this this way to load a json file synchronously_lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#353c41_sm_font-size_dd_14px_sm__qt__gt_ (withÂ $.ajaxSetup({ async_dd_ false})_sm_)_lt_/span_gt_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_function getJson() {\n    var text _eq_ _qt__qt__sm_\n    $.ajaxSetup({ async_dd_ false})_sm_\n    $.getJSON(dictionary.json?_qt_ + Date.now()_co_ (data) _eq_&gt_sm_ {\n        text _eq_ data_sm_\n    })_sm_\n    $.ajaxSetup({ async_dd_ true})_sm_\n    return text_sm_\n}\n\nvar myText _eq_ getJson()_sm_\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Nodragem","Date":"2018-11-03T22:39:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_233687_qt_ data-ipsquote-contentid_eq__qt_41021_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1541278209_qt_ data-ipsquote-userid_eq__qt_8492_qt_ data-ipsquote-username_eq__qt_JCPalmer_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\t1 hour ago_co_ JCPalmer said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\t_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.tools.ts#L851_qt_ rel_eq__qt_external nofollow_qt__gt_LoadFile _lt_/a_gt_is what gets run for things like a .babylon or sound file.Â  The second arg is a successÂ  function callback.Â  You cannot really do any synchronous file loading except for script &amp_sm_ other files listed in a html file.Â  Even then_co_ it is not really synchronous_co_ just performed before control is passed.Â  Do Something like_dd_\n\t\t_lt_/p_gt_\n\n\t\t_lt_pre_gt_\n\n_lt_code_gt_BABYLON.Tools.LoadFile_lt_span_gt__lt_span_gt_(_lt_span_gt__qt_./assets/data/dictionary.txt_qt__lt_/span_gt__co_ (data) _eq_&gt_sm_ {\n     _lt_span_gt_this_lt_/span_gt_.dictionary _eq_ data_sm_\n     _lt_span_gt_console_lt_/span_gt_.log(data)_sm_\n})_lt_/span_gt__sm__lt_/span_gt__lt_/code_gt__lt_/pre_gt_\n\n\t\t_lt_p_gt_\n\t\t\tÂ \n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tThe issue of this solution is that this is not synchronous. Hence when I try to use my dictionary from an other object_co_ I get an error because the dictionary is still _qt_undefined_qt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/5292-dad72/?do_eq_hovercard_qt_ data-mentionid_eq__qt_5292_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/5292-dad72/_qt_ rel_eq__qt__qt__gt_@Dad72_lt_/a_gt_Â I am new in web development_co_ I am using Typescript. Is there big drawback in using jQuery? In term of memory usage and mobile web?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThank you for your answers! _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2018-11-03T23:09:23Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNo_co_ there is no inconvenience_co_ Jquery is very good_co_ performing_co_ but I do not know how to use it with typescript_co_ but I guess it should not be a problem. try.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JohnK","Date":"2018-11-04T00:34:03Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThese PGs load meshes for synchronous use and perhaps usingÂ \n_lt_/p_gt_\n\n_lt_p_gt_\n\taddTextFileTask rather than addMeshTask they could be adapted\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#YGUADW%2311_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#YGUADW%2311_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#YGUADW%238_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#YGUADW%238_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tfromÂ \n_lt_/p_gt_\n_lt_iframe allowfullscreen_eq__qt__qt_ data-controller_eq__qt_core.front.core.autosizeiframe_qt_ data-embedcontent_eq__qt__qt_ data-embedid_eq__qt_embed8211184759_qt_ scrolling_eq__qt_no_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/topic/32480-loading-asynchronous-objects-into-array-for-later-use/?do_eq_embed&amp_sm_comment_eq_187590&amp_sm_embedComment_eq_187590&amp_sm_embedDo_eq_findComment_qt_ style_eq__qt_height_dd_261px_sm_max-width_dd_502px_sm__qt__gt__lt_/iframe_gt_\n\n_lt_p_gt_\n\tor it could be a complete red herring\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Nodragem","Date":"2018-11-04T11:38:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/14282-johnk/?do_eq_hovercard_qt_ data-mentionid_eq__qt_14282_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/14282-johnk/_qt_ rel_eq__qt__qt__gt_@JohnK_lt_/a_gt_Â That_t_s not really synchronous_co_ but yes_co_ I thought of a similar solution. Ultimately I thoughtÂ I will have to use the AssetManager and start the game when it is loaded and then access the assets by name from the Scene...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHowever_co_ you can_t_t access a Text-basedÂ asset by nameÂ from the Scene. Here is the list of things you can retrieve by name_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img alt_eq__qt_image.png.a820ca5a016f0774592546642d57345c.png_qt_ class_eq__qt_ipsImage ipsImage_thumbnailed_qt_ data-fileid_eq__qt_20776_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/monthly_2018_11/image.png.a820ca5a016f0774592546642d57345c.png_qt_ /_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_u_gt__lt_strong_gt_Async / Await as a solution_lt_/strong_gt__lt_/u_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI started to play with async / await_co_ which are very similar to Coroutine / Yield in C# (or python).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBasically you can start an _qt_async_qt_ function (Coroutine)_co_ in which you can use _qt_await_qt_ to block the code execution until a Promise is resolved (Yield).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tInstead of using BABYLON.Tools.loadFile()_co_ I use d3-fetch_co_ which is part of d3.js_co_ a library for handling and visualizing data. As d3-fetchÂ is based on fetch API and Promises_co_Â it is compatible with async / await. As far as I understand_co_ BABYLON.Tools.LoadFile() returns a IFileRequest and hence_co_ it is not compatible with async / await.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tHere is the code I came up with_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_class LetterData {\n    \n    letterTable_dd_any_sm_\n    \n    async loadData(){\n        let s_dd_any _eq_ await d3f.csv(_qt_./assets/data/letter-frequency.csv_qt_)_sm_\n        this.letterTable _eq_ s_sm_\n    }   \n}\n\nclass Game {\n    constructor(canvasElement _dd_ string) {\n        // Create canvas and engine.\n        this._canvas _eq_ document.getElementById(canvasElement) as HTMLCanvasElement_sm_\n        this._engine _eq_ new BABYLON.Engine(this._canvas_co_ true)_sm_\n        \n        this.start()_sm_ // this is equivalent to a Coroutine\n\n        // I could display a loading screen here in parallel to this.start() ...      \n    }\n\n    async start(){\n        // here every single functions wait for the previous one to be terminated before to start\n        await this.initScene()_sm_\n        await this.loadUI()_sm_ // we are 100% sure that the scene was loaded when we start making the UI\n        await this.initRendering()_sm_ \n    }\n\n \n    async initScene() {\n        console.log(_qt_Loading..._qt_)\n        this._scene _eq_ new BABYLON.Scene(this._engine)_sm_\n        await new Promise((resolve_co_ reject) _eq_&gt_sm_ {\n            window.setTimeout(() _eq_&gt_sm_ resolve(_qt_simulating loading time here!_qt_)_co_ 1000)\n          })_sm_  \n        console.log(_qt_Loading done!_qt_)  \n    }\n\n    \n    async loadUI() {        \n        let letterData _eq_ new LetterData()_sm_\n        await letterData.loadData()_sm_\n        // I am 100% sure that the data is accessible now_dd_\n        console.log(letterData.getEnglishLetterDistribution())_sm_\n\n    }\n\n    async initRendering() {}\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe only drawback on this await / async solution is that I need to add _qt_es2015_qt_ to _qt_lib_qt_ in my tsconfig.json. After this change_co_Â _qt_console.log_qt_ wasÂ not recognised by typescript anymore and I needed to add _qt_dom_qt_ to _qt_lib_qt_. One drawback I can think of is that I have no idea if that makes the code incompatible with some browsers_co_ or make the dependencies heavier. But I can say for definite that await / async is a very nice things to have for game dev (to create a game loop coroutine for instance).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tEDIT_dd_ So I checked_co_ and it seems we can add lib _eq_ [_qt_es2015_qt__co_ _qt_dom_qt_] to the tsconfig.json without messing up compatibility with browsers_co_ as the target stays the same. ... Any one to confirm?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-11-05T18:26:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tasync await WON_t_T work on old browsers (but most will be fine)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tas an intermediate solution you can uses promises (Babylon.js will provide a fallback for you)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tÂ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tso instead of await loadData() you will end up wtih loadData().then(...) but at least it will work even on ie 11\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Nodragem","Date":"2018-11-09T17:15:38Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tActually I found this link in the documentation which speaks about Async/Await_dd_Â _lt_a href_eq__qt_https_dd_//doc.babylonjs.com/how_to/promises_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//doc.babylonjs.com/how_to/promises_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt_ data-ipsquote-contentapp_eq__qt_forums_qt_ data-ipsquote-contentclass_eq__qt_forums_Topic_qt_ data-ipsquote-contentcommentid_eq__qt_233844_qt_ data-ipsquote-contentid_eq__qt_41021_qt_ data-ipsquote-contenttype_eq__qt_forums_qt_ data-ipsquote-timestamp_eq__qt_1541442399_qt_ data-ipsquote-userid_eq__qt_4442_qt_ data-ipsquote-username_eq__qt_Deltakosh_qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tOn 11/5/2018 at 6_dd_26 PM_co_ Deltakosh said_dd_\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tasync await WON_t_T work on old browsers (but most will be fine)\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tas an intermediate solution you can uses promises (Babylon.js will provide a fallback for you)\n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tÂ \n\t\t_lt_/p_gt_\n\n\t\t_lt_p_gt_\n\t\t\tso instead of await loadData() you will end up wtih loadData().then(...) but at least it will work even on ie 11\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tI am not sure thatÂ .then(...) avoids _qt_having to deal with pyramids of callbacks intricated in a non easy to maintain way._qt_ (cited from the documentation link above).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI get the impression I will end up doing Promise.then().then().then().then() _lt_span class_eq__qt_ipsEmoji_qt__gt_ðŸ˜•_lt_/span_gt_Â \n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo... I guess that means I won_t_t support old browsers _lt_span_gt__lt_span class_eq__qt_ipsEmoji_qt__gt_ðŸ˜•_lt_/span_gt_Â thank you for letting me know!_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-11-10T06:08:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWell yeah _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt_Â this is a bit better still than pure pyramidal callbacks but if you do not need to support old browsers then async/await is magic _lt_span_gt__lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/span_gt__lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]