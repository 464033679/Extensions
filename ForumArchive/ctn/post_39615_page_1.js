[{"Owner":"JCPalmer","Date":"2018-08-24T14:19:30Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI think I asked for this before_co_ but not in a specific topic.  I need to know at the detailed level how Blender_t_s Principled BSDF shader maps to BJS.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe BJS relevant doc seems to be_dd_ _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/api/classes/babylon.pbrmaterial_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/api/classes/babylon.pbrmaterial_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBlender describes the shader here_dd_ _lt_a href_eq__qt_https_dd_//docs.blender.org/manual/en/dev/render/cycles/nodes/types/shaders/principled.html_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//docs.blender.org/manual/en/dev/render/cycles/nodes/types/shaders/principled.html_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThere is no place in the Blender API docs which layout how to access / set this_co_ but there is this_dd_ _lt_a href_eq__qt_https_dd_//blender.stackexchange.com/questions/105463/principled-shader-inputs_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//blender.stackexchange.com/questions/105463/principled-shader-inputs_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-08-24T15:37:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWe have a complete doc on how the PBR works (plus the description of two simplified version depending on the mode you want to use for PBR)_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t-  _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/how_to/physically_based_rendering_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/how_to/physically_based_rendering_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/how_to/physically_based_rendering_master_qt_ ipsnoembed_eq__qt_true_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/how_to/physically_based_rendering_master_lt_/a_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2018-08-24T15:37:52Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIs doing drawings like this can be useful? _lt_a href_eq__qt_https_dd_//www.draw.io/?lightbox_eq_1&amp_sm_highlight_eq_0000ff&amp_sm_edit_eq__blank&amp_sm_layers_eq_1&amp_sm_nav_eq_1&amp_sm_title_eq_BJS%20Blender%20exporter.xml#Uhttps%3A%2F%2Fraw.githubusercontent.com%2FVinc3r%2FDraw.io-drawings%2Fmaster%2FBJS%2520Blender%2520exporter.xml_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.draw.io/?lightbox_eq_1&amp_sm_amp_sm_highlight_eq_0000ff&amp_sm_amp_sm_edit_eq__blank&amp_sm_amp_sm_layers_eq_1&amp_sm_amp_sm_nav_eq_1&amp_sm_amp_sm_title_eq_BJS Blender exporter.xml#Uhttps%3A%2F%2Fraw.githubusercontent.com%2FVinc3r%2FDraw.io-drawings%2Fmaster%2FBJS%20Blender%20exporter.xml_lt_/a_gt_ (_lt_a href_eq__qt_https_dd_//github.com/Vinc3r/Draw.io-drawings/blob/master/BJS%20Blender%20exporter.xml_qt_ rel_eq__qt_external nofollow_qt__gt_source available_lt_/a_gt_ here)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf so_co_ I will finish my first try on this. Already facing issues for some properties_co_ I think we should read_lt_a href_eq__qt_https_dd_//github.com/KhronosGroup/glTF-Blender-Exporter/issues/101_qt_ rel_eq__qt_external nofollow_qt__gt_ this gltf issue about exporting Principled node_lt_/a_gt__co_ it can help (and why not be consistent in the logic they use).\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-08-24T16:46:35Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYes_co_ it would mean that I get what goes where in the export_co_ and also documentation.  Red line anything in the Blender that maps to nothing.  Doc things that BJS has with no corresponding field could just be listed in text below.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2018-08-24T17:01:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOK_co_ so I_t_m on it_co_ trying to finish this in the next hour or couple\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2018-08-24T18:56:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOK so this is_co_ I think_co_ a good first start to work on a conversion_dd_ _lt_a href_eq__qt_https_dd_//www.draw.io/?lightbox_eq_1&amp_sm_highlight_eq_0000ff&amp_sm_edit_eq__blank&amp_sm_layers_eq_1&amp_sm_nav_eq_1&amp_sm_title_eq_BJS%20Blender%20exporter.xml#Uhttps%3A%2F%2Fraw.githubusercontent.com%2FVinc3r%2FDraw.io-drawings%2Fmaster%2FBJS%2520Blender%2520exporter.xml_qt_ rel_eq__qt_external nofollow_qt__gt_still the same link_lt_/a_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_img alt_eq__qt_BJS%20Blender%20exporter.png_qt_ class_eq__qt_ipsImage_qt_ height_eq__qt_363_qt_ src_eq__qt_https_dd_//raw.githubusercontent.com/Vinc3r/Draw.io-drawings/master/BJS%20Blender%20exporter.png_qt_ width_eq__qt_1000_qt_ /_gt_\n_lt_/p_gt_\n\n_lt_ul_gt_\n\t_lt_li_gt_\n\t\t for some missing textures nodes_co_ or even number values_co_ maybe we can think about a node convention using add or mix shader node to enhance the export (like in this _lt_a href_eq__qt_https_dd_//user-images.githubusercontent.com/1848368/38793022-5f8df570-4104-11e8-8c5e-315af0f9f609.png_qt_ rel_eq__qt_external nofollow_qt__gt_example from gltf issue_lt_/a_gt_). But for now it_t_s probably too complex_co_ we can wait before adding this such features. The big question about that is that artist should be able to get a convenient and realistic render using this node setup in Blender (example _dd_ emissive using add shader_co_ AO using multiply_co_ etc &lt_sm_-_lt_strong_gt_ this is why gltf currently use a custom nodes group_lt_/strong_gt__co_ maybe a solution too for .babylon_co_ and this will make the Principled allowing just simple material setup?)\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\twhen 2.8 will be production usable (still some months to wait)_co_ we will have to think on how to be able to export to standardMaterial too (because of the deletion of Blender Render). At this moment_co_ I think we should only support Eeeve engine and get rid of Cycles (it_t_s in fact just a detail because Principled BSDF is both compatible_co_ but it can help to lower potential addon bugs)\n\t_lt_/li_gt_\n_lt_/ul_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-08-24T19:22:53Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWow_co_ I knew there was a problem when only one or 2 of the principled properties had a name in BJS.  We are going to need some type of node analyzer to determine if PBR can be transferred_co_ or the whole thing just needs to be baked.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think to get best results_co_ perhaps we need to add an operation in the Materials tab_co_ which creates the exact structure we support.  It would probably not be laid out very well_co_ at least initially.  It would save work_co_ and avoid baking at the same time.  If a given did not have say a bump texture_co_ you could just nuke the node.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is such a free form organization_co_ it is not going to be easy.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2018-08-24T19:28:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI_t_ve already have to make some bits of Blender python code to detect values in nodes_co_ it_t_s not such difficult as it looks like. We can probably start with something like_co_ exporter point of view_dd_\n_lt_/p_gt_\n\n_lt_ul_gt_\n\t_lt_li_gt_\n\t\tif an object have one (or multiple) material_co_ then it_t_s a PBRMaterial (here the exporter already have default values for PBR properties\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tif this material output is linked to a Principled_co_ then we check the few equivalent values (color_co_ alpha_co_ metallic_co_ roughness)\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tif these values have something linked to them_co_ we check_co_\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tetc\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tif the artist connect something we does_t_nt recognize_co_ we fallback to the default value\n\t_lt_/li_gt_\n_lt_/ul_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-08-27T17:55:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tgltf is Apache licensed_co_ so we could steal anything we might want from there. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI not exactly sure what you mean by a an exporter POV.  I am leaning towards making a nodes directory.  In the directory_co_ each type of Node would have it_t_s own class &amp_sm_ file name_co_ if we support it.  E.G. BsdfDiffuse.py.  Many files would be very small_co_ but once made would not likely to need to be changed.  This suits a repo very well.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe constructor for a node class would get passed in the Blender node instance.  The constructor would be responsible for parsing any fields used &amp_sm_ do anything to get the values prepped_co_ as required_co_ to be output in the 2nd pass.  If something about this node means that this material must be baked_co_ then the construct would set self.mustBake _eq_ True\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTo handle the chaining of nodes in a single spot_co_ all node classes would inherit from AbstractNode.py.  I am hoping this constructor_co_ which would run prior to the sub-classe_t_s_co_ would process each of the input nodes to the current node.  This would effectively go all the way down the chains_co_ if the original instance is called with the node with no parent_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_for node in material.node_tree.nodes_dd_\n    if node.parent is None_dd_\n        self.node _eq_ AsbtractNode(node)_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tJust writing directly into this topic_co_ the straw man for AbstractNode.py would be something like_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_\ndef __init__(self_co_ shader)_dd_\n    self.mustBake _eq_ False\n    self.inputs _eq_ []\n    for input in shader.inputs\n        node _eq_ AbstractNode.determineNodeClass(shader)\n        if node.mustBake_dd_\n            self.mustBake _eq_ True\n            break\n        else_dd_\n            self.inputs.append(node)\n\n     # end of super class constructor_co_ sub-class constructor now runs\n            \n\n@staticmethod\ndef determineNodeClass(shader)_dd_\n    shaderName _eq_ shader.bl_idname\n\n    if shaderName _eq__eq_ _t_ShaderNodeBsdfPrincipled_t__dd_\n        return BsdfPrincipled(shader)\n\n    elif shaderName _eq__eq_ _t_ShaderNodeBsdfDiffuse_t__dd_\n        return BsdfDiffuse(shader)\n\n    ...\n\n    else_dd_\n        return MustBakeNode(shader)_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThere may also need to pass the parent or type of input into the constructor.  Each node class would be responsible for writing their part of the material.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2018-08-27T18:05:15Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYou lost me _lt_span class_eq__qt_ipsEmoji_qt__gt_😀_lt_/span_gt_ (out of my skills). But I can prepare a small Cycles test scene with commons examples + same scene but in gltf. The last one should give us kind of a guiding thread.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf you_t_re interested in it_co_ it can be done... ASAP? (maybe this wkd)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-08-27T18:39:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNo hurry.  I will begin by using a MakeHuman import using cycles.  Cause that has to work.  I_t_ll branch out as I get something to run.  Just freshened branch.  Going to rip out anything that does not run. Start adding in the material area.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-10-24T17:46:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/20526-vnc3r/?do_eq_hovercard_qt_ data-mentionid_eq__qt_20526_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/20526-vnc3r/_qt_ rel_eq__qt__qt__gt_@V!nc3r_lt_/a_gt__co_what if both the metallic &amp_sm_ roughness are zero?  Shouldn_t_t a standard material be be created?  If yes_co_ then would using the specular field also then be consulted?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2018-10-25T07:24:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI think it still should be a PBRMaterial to be still consistent with all scene materials.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-10-25T14:57:56Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tUnless that consistency is to NOT be all PBRMaterials.  Personally_co_ I see no need for PBRMaterials in my work.  I am not to this point yet_co_ but am thinking a scene level_co_ _qt_no PBR materials_qt_ check box.  Principled is setup to do _qt_everything_qt_.  If you are not doing PBR_co_ you should not have to pay for it.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI am successfully _qt_reading_qt_ the currently active node tree recursively.  Am doing this in the TOB code base on 2.79.  The 2.80 convert work is being done on the EEVEE branch of the JSON exporter.  At some point they will _qt_merge_qt_.  Neither is ever going to be published with PBR for 2.79.  This is just a vehicle to work in parallel.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2018-10-26T06:40:05Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe scene level checkbox seems fine to me _lt_span_gt__dd_)_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2018-11-14T15:19:08Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOk_co_ starting to generate output (javascript)_co_ at least for the environment texture &amp_sm_ sky box.  Everything is not right yet_co_ but still significant.  I am looking at your principled picture_co_ _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/20526-vnc3r/?do_eq_hovercard_qt_ data-mentionid_eq__qt_20526_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/20526-vnc3r/_qt_ rel_eq__qt__qt__gt_@V!nc3r_lt_/a_gt_.  You seem to have a single texture for for multiple channels (occlusion_co_ roughness_co_ &amp_sm_ metallic).  I understand that these occupy different colors of the texture_co_ but not how you would actually get such data into one texture?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMore over_co_ that multiple to one relationship was not in the prior exporters.  Am in the process of that final piece for principled Node_co_ and generation of JS from that.  I just want to make sure before the JSON exporter starts to get modified that this can be expressed there too?  Do you _lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/?do_eq_hovercard_qt_ data-mentionid_eq__qt_4442_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/4442-deltakosh/_qt_ rel_eq__qt__qt__gt_@Deltakosh_lt_/a_gt_?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAlso_co_ Occlusion does not seem possible in Cycles_co_ so that probably cannot be done.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"V!nc3r","Date":"2018-11-14T19:27:57Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI was taking example from _lt_a href_eq__qt_http_dd_//i.imgur.com/2AcqmG0.png_qt_ rel_eq__qt_external nofollow_qt__gt_glTF process_lt_/a_gt__co_ where ORM texture is available (even if Occlusion map have its own node_co_ we can use the same texture as Metallic Roughness). And about how to merge metallic_co_ roughness &amp_sm_ occlusion in only on texture_dd_ you get your differents passes as black and white images_co_ and the simpliest way I found until then is to use Allegorithmic Substance Designer which is perfect to combine image data_co_ but I think its also doable through Photoshop_co_ Gimp_co_ maybe Krita and even CLI tools like ImageMagick. Substance Painter can also export directly ORM using gltf export pattern.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAbout occlusion it needs some node mixing to get it in a Cycle shader (but if its in ORM texture_co_ BJS user can activate AO pass using _lt_em_gt_useAmbientOcclusionFromMetallicTextureRed _eq_ true_sm__lt_/em_gt_)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]