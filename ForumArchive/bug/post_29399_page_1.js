[{"Owner":"JCPalmer","Date":"2017-03-29T20:10:37Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI am expanding my _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Extensions/blob/master/QueuedInterpolation/src/ReadAhead.ts#L177_qt_ rel_eq__qt_external nofollow_qt__gt_read ahead_lt_/a_gt_ to include textures in addition to .js files with in-line geometry.  It is going to split the fetch of the file from the creation of the texture.  When a TOB generated .js file is dynamically loaded_co_ it will call a function matReadAhead() in the file.  It will create a QI.TextureBuffer_t_s for each texture.  When the scene asks for the materials_co_ the _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Extensions/blob/master/QueuedInterpolation/src/ReadAhead.ts#L266_qt_ rel_eq__qt_external nofollow_qt__gt_applyWhenReady()_lt_/a_gt_ will be called.  Hopefully_co_ the fetch of the image file has already been performed when the .js was being fetched in advance as well.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOnce the fetch is complete_co_ I will be executing a BABYLON.Texture _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Materials/Textures/babylon.texture.ts#L77_qt_ rel_eq__qt_external nofollow_qt__gt_constructor()_lt_/a_gt_ passing the buffer QI.TextureBuffer got. Texture passes the buffer to _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/babylon.engine.ts#L2128_qt_ rel_eq__qt_external nofollow_qt__gt_Engine.createTexture()_lt_/a_gt__co_ but it looks like it is only actually used when fromData is an Array.  Isn_t_t this test wrong?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2017-03-29T20:54:31Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIt is not obvious. This API kinda sucks...\n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou have to call createTexture with url _eq_ _qt_data_dd_mytexture.jpg_qt_ and provide data in the buffer parameter\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-03-29T20:58:32Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tLooking further_co_ I see the static in Texture_co_ _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Materials/Textures/babylon.texture.ts#L323_qt_ rel_eq__qt_external nofollow_qt__gt_LoadFromString_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSeems like I could just add a _qt_data_dd__qt_ on my url like it does.  Then fromData would be a _t_true_t_.  fromData would still _lt_strong_gt__lt_span style_eq__qt_color_dd_#c0392b_sm__qt__gt_not be an Array_lt_/span_gt__lt_/strong_gt_ though.  For un-compressed textures_co_ I think the test just needs to be changed to_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_if (!(buffer instanceof Array)) {\n      do load file\n}else {\n    callback(buffer)_sm_\n}_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tFor images calling looks like it the buffer never gets called_co_ so LoadFromString should not work.  I was also not actually passing an Array. I have already called LoadImage_co_ so I am passing a HTMLImageElement.  Maybe the tests should be_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_if (!buffer)\n    Tools.LoadImage(url_co_ onload_co_ onerror_co_ scene.database)_sm_\nelse if (buffer instanceof Array)\n    Tools.LoadImage(buffer_co_ onload_co_ onerror_co_ scene.database)_sm_ // using LoadDataFromString\nelse\n    callback(buffer)_sm_ // passing a HTMLImageElement from previous Tools.LoadImage\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"JCPalmer","Date":"2017-03-30T16:25:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have moved beyond whether this is a bug.  I am going to do a PR in this area anyway to_dd_\n_lt_/p_gt_\n\n_lt_ul_gt__lt_li_gt_\n\t\tremove ATC as a compressed texture format\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\tdepreciate .DDS in favor of DXT inside of a .KTX\n\t_lt_/li_gt_\n\t_lt_li_gt_\n\t\thave a more flexible default internal format where extensions of _t_.jpg_t_ can be RGB instead of RGBA to save GPU memory\n\t_lt_/li_gt_\n_lt_/ul_gt__lt_p_gt_\n\tI will also expand buffer parameter to be either an arraybuffer or HTMLImageElement.  The whole beginning of this function will be refactored to clean up &amp_sm_ make more clear.  Here is the documentation.  Is this right?\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_/**\n * Usually called from BABYLON.Texture.ts.  Passed information to create a WebGLTexture.\n * @param {string} urlArg- This contains one of the following_dd_\n *                         1. A conventional http URL_co_ e.g. _t_http_dd_//..._t_ or _t_file_dd_//..._t_\n *                         2. A base64 string of in-line texture data_co_ e.g. _t_data_dd_image/jpg_sm_base64_co_/ ... //Z_t_\n *                         3. A indicator that data being passed using the buffer parameter_co_ e.g. _t_data_dd_mytexture.jpg_t_\n *\n * @param {boolean} noMipmap- When true_co_ no mipmaps shall be generated.  Ignored for compressed textures.  They must be in the file.\n * @param {boolean} invertY- When true_co_ image is flipped when loaded.  You probably want true. Ignored for compressed textures.  Must be flipped in the file.\n * @param {Scene} scene- Needed for loading to the correct scene.\n * @param {number} samplingMode- Mode with should be used sample / access the texture.  Default_dd_ TRILINEAR\n * @param {callback} onLoad- Optional callback to be called upon successful completion.\n * @param {callback} onError- Optional callback to be called upon failure.\n * @param {ArrayBuffer | HTMLImageElement} buffer- A source of a file previously fetched as either an ArrayBuffer (compressed or image format) or HTMLImageElement (image format)\n * @param {WebGLTexture} fallback- An internal argument in case the function must be called again_co_ due to etc1 not having alpha capabilities.\n * @param {number} format-  Internal format.  Default_dd_ RGB when extension is _t_.jpg_t_ else RGBA.  Ignored for compressed textures.\n */\n_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]