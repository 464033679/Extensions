[{"Owner":"lostwoods91","Date":"2016-10-04T13:58:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\thi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\ti_t_m working with FreeCamera_co_ which is a TargetCamera.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tif you move the mouse left or right_co_ the camera rotates according to your movement_co_ around y axis by default_sm_ but if you change the upVector_co_ it rotates according the old configuration!\n_lt_/p_gt_\n\n_lt_p_gt_\n\tin my opinion_co_ cameraRotation should be applied depending to the actual upVector_co_ not the defaultUpVector_co_ isn_t_t right?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tlooking for usages of member upVector in TargetCamera_co_ i see that it_t_s updated only in _updateCameraRotationMatrix function and used only in _getViewMatrix.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tfurthermore_co_ it_t_s normalized in setTarget function_co_ but it isn_t_t used there (defaultUpVector is used in its place).\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthanks\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"lostwoods91","Date":"2016-10-10T16:18:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1EOODK%231_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1EOODK#1_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthis is the playground repro of the (presumed) issue.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tthanks!\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-10-10T16:48:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tDo you have a fix in mind?\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"lostwoods91","Date":"2016-10-11T14:46:47Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tthis is the setTarget() method of the target camera. why i normalize the upVector if i don_t_t use it (use defaultUpVector instead)\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_// Target\n        TargetCamera.prototype.setTarget _eq_ function (target) {\n            this.upVector.normalize()_sm_\n            BABYLON.Matrix.LookAtLHToRef(this.position_co_ target_co_ this._defaultUpVector_co_ this._camMatrix)_sm_\n            this._camMatrix.invert()_sm_\n            this.rotation.x _eq_ Math.atan(this._camMatrix.m[6] / this._camMatrix.m[10])_sm_\n            var vDir _eq_ target.subtract(this.position)_sm_\n            if (vDir.x &gt_sm__eq_ 0.0) {\n                this.rotation.y _eq_ (-Math.atan(vDir.z / vDir.x) + Math.PI / 2.0)_sm_\n            }\n            else {\n                this.rotation.y _eq_ (-Math.atan(vDir.z / vDir.x) - Math.PI / 2.0)_sm_\n            }\n            this.rotation.z _eq_ 0_sm_\n            if (isNaN(this.rotation.x)) {\n                this.rotation.x _eq_ 0_sm_\n            }\n            if (isNaN(this.rotation.y)) {\n                this.rotation.y _eq_ 0_sm_\n            }\n            if (isNaN(this.rotation.z)) {\n                this.rotation.z _eq_ 0_sm_\n            }\n            if (this.rotationQuaternion) {\n                BABYLON.Quaternion.RotationYawPitchRollToRef(this.rotation.y_co_ this.rotation.x_co_ this.rotation.z_co_ this.rotationQuaternion)_sm_\n            }\n        }_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\ti would use the real upVector instead of the defaultUpVector.\n_lt_/p_gt_\n\n_lt_p_gt_\n\trunning this function for an arbitrary upVector_co_ it seems that the following code to recreate the camera orientation are wrong.\n_lt_/p_gt_\n\n_lt_p_gt_\n\ti would substitute the function with this version (slower but correct_co_ need improvement)_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_// Target\n        TargetCamera.prototype.setTarget _eq_ function (target) {\n            this.upVector.normalize()_sm_\n            BABYLON.Matrix.LookAtLHToRef(this.position_co_ target_co_ this.upVector_co_ this._camMatrix)_sm_\n            this._camMatrix.invert()_sm_\n\n            var scale _eq_ new BABYLON.Vector3()_sm_\n            var rotationQuat _eq_ new BABYLON.Quaternion()_sm_\n            var translation _eq_ new BABYLON.Vector3()_sm_\n            var decomposition _eq_ this._camMatrix.decompose(scale_co_ rotationQuat_co_ translation)_sm_\n            var rotation _eq_ rotationQuat.toEulerAngles()_sm_\n\n            this.rotation _eq_ rotation_sm_\n\n            if (this.rotationQuaternion) {\n                BABYLON.Quaternion.RotationYawPitchRollToRef(this.rotation.y_co_ this.rotation.x_co_ this.rotation.z_co_ this.rotationQuaternion)_sm_\n            }\n        }_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tnow the setTarget function works for every upVector.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\ti_t_m still working to a fix for the camera movement... and i_t_d like to answer to some questions first_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t1) what is this code for? i see everywhere those _qt_if_qt_ snippets checking if rotationQuaternion is set to use it instead_co_ but it appears that it is never used...\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_if (this.rotationQuaternion) {\n                BABYLON.Quaternion.RotationYawPitchRollToRef(this.rotation.y_co_ this.rotation.x_co_ this.rotation.z_co_ this.rotationQuaternion)_sm_\n            }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t2) here_co_ only if using quaternion version_co_ we update upVector. why?\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_//why to update upVector only if using quaternion?\nTargetCamera.prototype._updateCameraRotationMatrix _eq_ function () {\n            if (this.rotationQuaternion) {\n                this.rotationQuaternion.toRotationMatrix(this._cameraRotationMatrix)_sm_\n                //update the up vector!\n                BABYLON.Vector3.TransformNormalToRef(this._defaultUpVector_co_ this._cameraRotationMatrix_co_ this.upVector)_sm_\n            }\n            else {\n                BABYLON.Matrix.RotationYawPitchRollToRef(this.rotation.y_co_ this.rotation.x_co_ this.rotation.z_co_ this._cameraRotationMatrix)_sm_\n            }\n        }_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t3) according to this article_dd_ _lt_a href_eq__qt_http_dd_//www.staff.city.ac.uk/~sbbh653/publications/euler.pdf_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.staff.city.ac.uk/~sbbh653/publications/euler.pdf_lt_/a_gt__co_ line\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_this.rotation.x _eq_ Math.atan(this._camMatrix.m[6] / this._camMatrix.m[10])_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tshould be substituted by_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_this.rotation.x _eq_ Math.atan(this._camMatrix.m[9] / this._camMatrix.m[10])_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tor is there an hidden transposition i haven_t_t noticed?\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-10-11T17:07:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSo first of all we cannot use allocation in this method because it is called on every frame. (So no new Matrix/Vector3).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t1. WebVR camera works with quaternion and not euler angles\n_lt_/p_gt_\n\n_lt_p_gt_\n\t2.Bug _dd_0\n_lt_/p_gt_\n\n_lt_p_gt_\n\t3.Your article works with a different system (probably a transpose of our)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"lostwoods91","Date":"2016-10-11T17:24:33Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tThanks_co_ tomorrow I_t_ll optimize the function and continue to work on camera movement _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-10-11T17:52:36Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tLike it!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]