[{"Owner":"Dad72","Date":"2018-09-27T11:03:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi _lt_span_gt__lt_a contenteditable_eq__qt_false_qt_ data-ipshover_eq__qt__qt_ data-ipshover-target_eq__qt_http_dd_//www.html5gamedevs.com/profile/29361-trevordev/?do_eq_hovercard_qt_ data-mentionid_eq__qt_29361_qt_ href_eq__qt_http_dd_//www.html5gamedevs.com/profile/29361-trevordev/_qt_ rel_eq__qt__qt__gt_@_lt_font style_eq__qt_vertical-align_dd_inherit_sm__qt__gt__lt_font style_eq__qt_vertical-align_dd_inherit_sm__qt__gt_trevordev_lt_/font_gt__lt_/font_gt__lt_/a_gt__co__lt_/span_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI found_co_ I think_co_ a bug to recover the change of position / rotation / scaling with the observable DragStart and DragEnd which retrieves the same position value for example.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf I start with DragStart_co_ I should recover the position of an object at the start_co_ that_t_s OK_co_ but when we move and release (DragEnd) the position of the object should have changed_co_ but it is the same as with DragStart and yet the object was moved on the stage_co_ but not in the recoverable value in the observable.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tA PG is better than a long explanation_dd_ (move the _lt_strong_gt_X axis _lt_/strong_gt_(_lt_span style_eq__qt_color_dd_#c0392b_sm__qt__gt_red_lt_/span_gt_) and look at the values in the console. the x position is the same as dragStart and dradEnd)\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#4TBMBR%238_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#4TBMBR#8_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPS_dd_ Using e.dragPlanePoint.x it gets the X position of the gizmo pointer and not the pivot object select (maybe we could get the object selected)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI find it very repetitive to use an observable for each axis. This gives _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis would be shorter _dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_gizmoManager.gizmos.positionGizmo.Gizmo.dragBehavior.onDragStartObservable.add((e)_eq_&gt_sm_{\n   console.log(e)_sm_\n})_sm_\ngizmoManager.gizmos.positionGizmo.Gizmo.dragBehavior.onDragEndObservable.add((e)_eq_&gt_sm_{\n   console.log(e)_sm_\n})_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tthan that _dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_gizmoManager.gizmos.positionGizmo.xGizmo.dragBehavior.onDragStartObservable.add((e)_eq_&gt_sm_{\n   console.log(e)_sm_\n})_sm_\ngizmoManager.gizmos.positionGizmo.yGizmo.dragBehavior.onDragStartObservable.add((e)_eq_&gt_sm_{\n    console.log(e)_sm_\n})_sm_\ngizmoManager.gizmos.positionGizmo.zGizmo.dragBehavior.onDragStartObservable.add((e)_eq_&gt_sm_{\n    console.log(e)_sm_\n})_sm_\n\ngizmoManager.gizmos.positionGizmo.xGizmo.dragBehavior.onDragEndObservable.add((e)_eq_&gt_sm_{\n   console.log(e)_sm_\n})_sm_\ngizmoManager.gizmos.positionGizmo.yGizmo.dragBehavior.onDragEndObservable.add((e)_eq_&gt_sm_{\n    console.log(e)_sm_\n})_sm_\ngizmoManager.gizmos.positionGizmo.zGizmo.dragBehavior.onDragEndObservable.add((e)_eq_&gt_sm_{\n    console.log(e)_sm_\n})_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"trevordev","Date":"2018-09-27T17:22:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThe values in the playground that are pushed to the array are objects so position will be pointing to the same x_co_y_co_z values. You should clone the positions when you store them to get a copy. See _lt_a href_eq__qt_https_dd_//www.babylonjs-playground.com/#4TBMBR%2310_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//www.babylonjs-playground.com/#4TBMBR#10_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAs for unifying the sub gizmo events to parents I created this PR (_lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/pull/5268_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/pull/5268_lt_/a_gt_) which adds dragstart/end to position/rotation/scale gizmos.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2018-09-27T17:37:06Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tThank you Trevor.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnd for the use of dragStar and end on the position_co_ rotation / scale. What changes?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tgizmoManager.gizmos.positionGizmo.zGizmo.dragBehavior.onDragEndObservable.add()\n_lt_/p_gt_\n\n_lt_p_gt_\n\tshould we do like this?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tgizmoManager.gizmos.positionGizmo.dragBehavior.onDragEndObservable.add()\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOr\n_lt_/p_gt_\n\n_lt_p_gt_\n\tgizmoManager.gizmos.positionGizmo.onDragEndObservable.add()\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"trevordev","Date":"2018-09-27T17:39:39Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tIt will be to this _lt_span style_eq__qt_background-color_dd_#ffffff_sm_color_dd_#353c41_sm_font-size_dd_14px_sm__qt__gt_gizmoManager.gizmos.positionGizmo.onDragEndObservable.add()_lt_/span_gt_\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Dad72","Date":"2018-09-27T17:42:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tOK_co_ that_t_s very good. thank you very much\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]