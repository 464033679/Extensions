[{"Owner":"satguru","Date":"2016-02-14T18:43:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI have a .babylon file containing a mesh and a skeleton (with animation)\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI load the mesh and skeleton into a scene_co_ twice_co_ using the SceneLoader ImportMesh() function.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo now if I have a scene with two mesh and two skeleton.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIf I play animation on one skeleton it only animates the mesh it is attached to.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tSo far so good\n_lt_/p_gt_\n\n_lt_p_gt_\n\tNow I serialize the scene and save it to a file.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI load the scene using the SceneLoader Load function.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI play animation on one skeleton.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tBoth the meshes are animated. !!\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think the issue is that_co_ unlike mesh and bones_co_ skeletons do not have a uniqueId.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn a serialized scene_co_ meshes have references to skeleton ids and that skeleton id not unique.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tI think we should  have uniqueId for each skeleton instance and when the scene is serialized the mesh should be serialized referencing their skeletons uniqueId.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"satguru","Date":"2016-02-15T01:04:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tFor now to get around this issue_co_ just before I serialize the scene_co_ I set the value of each skeleton id to a unique  string. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tAnother thing I notice is that the engine does not remove artifacts which are no longer required. For example if I dispose off a mesh_co_ the skeleton referenced by that mesh is still retained even though it is not referenced by any other mesh. Same thing with textures _co_ material etc. It might be a good idea to provide an serialization option  to cleanup  or _qt_garbage collect_qt_ any orphaned _co_ unreferenced item. \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-02-15T03:24:46Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tPlease contribute _lt_img alt_eq__qt__dd_D_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_biggrin.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/biggrin@2x.png 2x_qt_ title_eq__qt__dd_D_qt_ width_eq__qt_20_qt__gt_ this is an open source framework\n_lt_/p_gt_\n\n_lt_p_gt_\n\tRegarding skeletons_co_ they do have an id_dd__lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Bones/babylon.skeleton.ts#L16_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Bones/babylon.skeleton.ts#L16_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt is supposed to be unique. Can you check what value do you have in your serialized scene for this id?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor auto-disposing_co_ this is on purpose as Babylon.js cannot know if you want (or know) to later reuse the skeleton. But I agree with you this could be great to check it at serialization time\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"satguru","Date":"2016-02-15T17:21:20Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tI will definitely look into contributing. Right now I am just enjoying using Babylon. _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt__gt__lt_/p_gt_\n\n_lt_p_gt_\n\tSkeletons have _qt_Id_qt_ but they do not have _qt_uniqueId_qt_ . _qt_Id_qt_s can assigned by user and can be duplicate. _qt_uniqueId_qt__co_ I think_co_ are internally generated.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAbstractMesh_co_ Bone_co_ Camera and Light all have _qt_uniqueId_qt_ which they inherit from Node. _lt_a href_eq__qt_http_dd_//doc.babylonjs.com/classes/2.3/Node#uniqueid-number_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//doc.babylonjs.com/classes/2.3/Node#uniqueid-number_lt_/a_gt_.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI could look into adding an option for serialization.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tCleaning up skeleton should be easy _co_ as they are only referenced by mesh - right ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\tWhat about textures ? They are referenced just by materials ? and materials themselves ? mesh_co_ particles ...?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-02-16T04:02:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_blockquote class_eq__qt_ipsQuote_qt_ data-ipsquote_eq__qt__qt__gt_\n\t_lt_div class_eq__qt_ipsQuote_citation_qt__gt_\n\t\tQuote\n\t_lt_/div_gt_\n\n\t_lt_div class_eq__qt_ipsQuote_contents_qt__gt_\n\t\t_lt_p_gt_\n\t\t\tCleaning up skeleton should be easy _co_ as they are only referenced by mesh - right ?\n\t\t_lt_/p_gt_\n\t_lt_/div_gt_\n_lt_/blockquote_gt_\n\n_lt_p_gt_\n\tCorrect\n_lt_/p_gt_\n\n_lt_p_gt_\n\tTextures should be already deleted (because of memory pressure) when not referenced.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaterials are only referenced by meshes\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tRegarding your bug_dd_ if the scene was loaded from a .Babylon then skeleton.id should be already unique.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]