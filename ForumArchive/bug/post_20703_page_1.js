[{"Owner":"Pryme8","Date":"2016-02-22T17:13:24Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tSo_co_ I guess this would be considered a bug.  If you ever pass a value from a standard HTML input to like let say CreateSphere or CreateGround functions it handles them like they are strings.  So this lead me to test and sure enough the mesh creation functions do not automatically parse passed values.  Is there a reason for this?  I really see no reason for these functions to not inherently parse variables passed to them as Integers.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2016-02-22T18:13:55Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tNot sure to understand but I_t_m pretty sure this is not related to babylon.js\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-22T19:08:29Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tActually_co_ no BJS CreateXXX() function parses the input parameters. If they aren_t_t the expected type_co_ the function crashes or behaves strangely due to JS dynamic typing.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis is not a bug neither a lack. This is a design choice _dd_ the function (and the framework) intends to be as fast_co_ light and performant as possible. Thus_co_ no internal parsing_co_ nor check_co_ nor cast_co_ nor error message.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe doc (API + user doc) is here to explain how_co_ when and what to use. Sometimes_co_ it may be incomplete. Please let us know where to complete it (or feel fre to contribute _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt__gt_) \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIt is then the user responsability to pass the right types at the right places.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tIn your case_co_ I guess that_co_ by default_co_ anything coming from the DOM inputs is considered by javascript as strings. So you might first cast it to the right type before passing it to any CreateXXX() function.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Pryme8","Date":"2016-02-22T19:33:50Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tYup_co_ I understand now I did not know if it was intentional or not but your explanation validates that it was.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"jerome","Date":"2016-02-22T21:01:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tglad to help (at least to understand _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt_true_qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt__gt_)\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-02-23T09:20:49Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tyou just need a middleware between your form and Babylon. Some form of validation and conversion.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tPassing strings can sometimes work (due to JavaScript auto-conversion when the need arises)_co_ but due to type-matching (like the _qt__eq__eq__eq__qt_ operator) and other architecture choices (as jerome said) it won_t_t be possible to fully use strings. Here is the basic scene with strings - _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#SERR9_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#SERR9_lt_/a_gt_ . You would notice that the last parameter of the ground creation function is a number. try changing it to a string and it will fail.\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]