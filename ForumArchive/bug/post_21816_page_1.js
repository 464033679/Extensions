[{"Owner":"Samuel Girardin","Date":"2016-04-09T13:47:22Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi_co_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tI_t_ve just noticed some strange behaviors when disposing a spritemanager using _lt_strong_gt_dynamic texture_lt_/strong_gt_ _dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t- when you remove a spritemanger_co_ there is still a texture in the _t_stack_t_ -&gt_sm_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1GWIGC%2313_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1GWIGC#13_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tMaybe we can fix this by testing imgUrl in spriteManager.ts. It seems to solve the problem. \n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_ if (imgUrl) {\n                this._spriteTexture _eq_ new BABYLON.Texture(imgUrl_co_ scene_co_ true_co_ false_co_ samplingMode)_sm_\n                this._spriteTexture.wrapU _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm_\n                this._spriteTexture.wrapV _eq_ BABYLON.Texture.CLAMP_ADDRESSMODE_sm_\n            }_lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\tOne  other thing when using a bitmap texture_co_ how correctly remove sprite and spriteMananger. \n_lt_/p_gt_\n\n_lt_p_gt_\n\tYou can see here a _t_no texture bound to GL_TEXTURE_2D error_t_  -&gt_sm_ _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2IPMDX%237_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2IPMDX#7_lt_/a_gt_ [edit was a wrong playground]\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThe first spriteManager.dispose() no throw error_co_ the second does. Any idea ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-04-09T20:23:00Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHi sam_co_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tfirst about the second error - \n_lt_/p_gt_\n\n_lt_p_gt_\n\tthis is because the texture is shared between the two sprite managers (same url_co_ texture is cached). We just had the discussion regarding cached textures and dispose_co_ but in this case it is a bit more complicated_co_ as the texture is created inside the sprite manager. You can prevent it this way - _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2IPMDX%238_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2IPMDX#8_lt_/a_gt_ (cloning the texture).\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-04-09T20:33:48Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tRegarding the first problem - \n_lt_/p_gt_\n\n_lt_p_gt_\n\twhen setting the texture for the sprite manager_co_ the old one is not being disposed. disposing it before setting the new one will do the job_dd_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#1GWIGC%2316_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#1GWIGC#16_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAgain about the discussion we had - to prevent disposing reused textures we decided to leave the texture disposing in the hands of the developer. so in this case you will have to know that the old texture should be disposed. The set texture method can dispose the old one_co_ but this will be a problem if it is used somewhere else.\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Samuel Girardin","Date":"2016-04-11T09:13:27Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHI Ranaan_co_ \n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor the first problem_co_ ok I understand. Thanks a lot\n_lt_/p_gt_\n\n_lt_p_gt_\n\tFor the second_co_ one thing I don_t_ t understand.If you have only one sprite and one sprite manager_co_ and you dispose both. You still have the webgl error. Is there a way to prevent that ?\n_lt_/p_gt_\n\n_lt_p_gt_\n\t_lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2IPMDX%239_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2IPMDX#9_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"RaananW","Date":"2016-04-11T13:43:40Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tHmmm....\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAsync problems. The proble ist that you are disposing the texture before it was even created (javascript is crazy like that). here_co_ this works - _lt_a href_eq__qt_http_dd_//www.babylonjs-playground.com/#2IPMDX%2310_qt_ rel_eq__qt_external nofollow_qt__gt_http_dd_//www.babylonjs-playground.com/#2IPMDX#10_lt_/a_gt_\n_lt_/p_gt_\n\n_lt_p_gt_\n\tOne day_co_ when promises will be in all browsers_co_ this will be much easier to solve _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt_ . I don_t_t see a quick solution_co_ but I haven_t_t looked too deep into the code. If you have this kind of case_co_ make sure first that the texture was created.\n_lt_/p_gt_\n\n_lt_p_gt_\n\tThis line is the problem - _lt_a href_eq__qt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Sprites/babylon.spriteManager.ts#L34_qt_ rel_eq__qt_external nofollow_qt__gt_https_dd_//github.com/BabylonJS/Babylon.js/blob/master/src/Sprites/babylon.spriteManager.ts#L34_lt_/a_gt_ . The texture_t_s constructor accepts an onload callback_co_ but where will you define it?... Adding more params to the spritemanager_t_s constructor will probably create unwanted chaos _lt_img alt_eq__qt__sm_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_wink.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/wink@2x.png 2x_qt_ title_eq__qt__sm_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\tSo_co_ just wait a bit_co_ or always dispose with a getTimeout_co_ this would be my (tmp) solution. I will see if there is a nicer solution anyhow. Like adding a default onLoad function to the texture and checking if it was disposed in the meantime. Let me think about it _lt_img alt_eq__qt__dd_)_qt_ data-emoticon_eq__qt__qt_ height_eq__qt_20_qt_ src_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/default_smile.png_qt_ srcset_eq__qt_http_dd_//www.html5gamedevs.com/uploads/emoticons/smile@2x.png 2x_qt_ title_eq__qt__dd_)_qt_ width_eq__qt_20_qt_ /_gt__lt_/p_gt_\n\n_lt_p_gt_\n\t \n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Samuel Girardin","Date":"2016-04-11T13:49:44Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t_lt_p_gt_\n\tshame on me... ! thx !!\n_lt_/p_gt_\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]