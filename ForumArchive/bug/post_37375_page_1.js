[{"Owner":"gamefan","Date":"2018-05-03T08:02:58Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tFirstly_co_ Congrats for completing 3.2 . We were looking forward to quite of a lot of features implemented here._lt_br /_gt_\n\t_lt_br /_gt_\n\tThis isn_t_t a bug_co_ but in my opinion I think the merge meshes should continue merging the rest of the meshes in the list when it encounters an invalid mesh instead of throwing an error. We have a model load workflow which on load finds the center and extent of the model using mergeMeshes. Few of our models have empty container like meshes that are parent of meshes that have real vertex data. And this breaks our App when vertexData.validate() throws _qt_Positions are required_qt_._lt_br /_gt_\n\t_lt_br /_gt_\n\tThere is an easy fix for this - I made a pass before mergingMeshes like so_dd_\n_lt_/p_gt_\n\n_lt_pre_gt_\n_lt_code_gt_for (var i _eq_ 0_sm_ i &lt_sm_ meshes.length_sm_ i++) {\n//only pass meshes that have valid position data\nif (meshes[i].getVerticesData(BABYLON.VertexBuffer.PositionKind))\n\tclones.push(meshes[i].clone(_qt_clone_qt_ + i))_sm_\n}\nvar combinedMesh _eq_ BABYLON.Mesh.MergeMeshes(clones)_sm__lt_/code_gt__lt_/pre_gt_\n\n_lt_p_gt_\n\tThis is potentially a breaking change as it works right with 3.1\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"},{"Owner":"Deltakosh","Date":"2018-05-03T20:54:18Z","Content":"_lt_div class_eq__qt_mages_qt__gt_\n\t\t\t\n_lt_p_gt_\n\tWe cannot change that behavior because it could swallow an error unknown to the user\n_lt_/p_gt_\n\n_lt_p_gt_\n\tAS there is an easy fix (that you found _dd_)) I don_t_t think we will integrate it\n_lt_/p_gt_\n\n\n\t\t\t\n\t\t_lt_/div_gt_\n\n\t\t_lt_div class_eq__qt_ipsI_qt__gt__lt_/div_gt__lt_/div_gt_"}]