{"map":"{\"version\":3,\"file\":\"gif.creator.service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/gif.creator.service.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"/* ----------------------------------------------NeuQuant START---------------------------------------------------------- */\r\n/** NeuQuant Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\r\n * See \"Kohonen neural networks for optimal colour quantization\"\r\n * in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\r\n * for a discussion of the algorithm.\r\n * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal\r\n * in this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons who receive\r\n * copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n *\r\n * (JavaScript port 2012 by Johan Nordberg)\r\n * @author Anthony Powell (Typescript 2018)\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nvar NeuQuant = /** @class */ (function () {\r\n    /**\r\n     * Constructor: init\r\n     * sets up arrays\r\n     */\r\n    function NeuQuant(pixels, samplefac) {\r\n        this.ncycles = 100; // number of learning cycles\r\n        this.netsize = 256; // number of colors used\r\n        this.maxnetpos = this.netsize - 1;\r\n        // defs for freq and bias\r\n        this.netbiasshift = 4; // bias for colour values\r\n        this.intbiasshift = 16; // bias for fractions\r\n        this.intbias = 1 << this.intbiasshift;\r\n        this.gammashift = 10;\r\n        this.gamma = 1 << this.gammashift;\r\n        this.betashift = 10;\r\n        this.beta = this.intbias >> this.betashift; /* beta = 1/1024 */\r\n        this.betagamma = this.intbias << (this.gammashift - this.betashift);\r\n        // defs for decreasing radius factor\r\n        this.initrad = this.netsize >> 3; // for 256 cols, radius starts\r\n        this.radiusbiasshift = 6; // at 32.0 biased by 6 bits\r\n        this.radiusbias = 1 << this.radiusbiasshift;\r\n        this.initradius = this.initrad * this.radiusbias; //and decreases by a\r\n        this.radiusdec = 30; // factor of 1/30 each cycle\r\n        // defs for decreasing alpha factor\r\n        this.alphabiasshift = 10; // alpha starts at 1.0\r\n        this.initalpha = 1 << this.alphabiasshift;\r\n        /* radbias and alpharadbias used for radpower calculation */\r\n        this.radbiasshift = 8;\r\n        this.radbias = 1 << this.radbiasshift;\r\n        this.alpharadbshift = this.alphabiasshift + this.radbiasshift;\r\n        this.alpharadbias = 1 << this.alpharadbshift;\r\n        // four primes near 500 - assume no image has a length so large that it is\r\n        // divisible by all four primes\r\n        this.prime1 = 499;\r\n        this.prime2 = 491;\r\n        this.prime3 = 487;\r\n        this.prime4 = 503;\r\n        this.minpicturebytes = 3 * this.prime4;\r\n        this.network = []; // int[netsize][4]\r\n        this.netindex = []; // for network lookup - really 256\r\n        // bias and freq arrays for learning\r\n        this.bias = [];\r\n        this.freq = [];\r\n        this.radpower = [];\r\n        var v;\r\n        this.pixels = pixels;\r\n        this.samplefac = samplefac;\r\n        for (var i = 0; i < this.netsize; i++) {\r\n            v = (i << (this.netbiasshift + 8)) / this.netsize;\r\n            this.network[i] = [v, v, v];\r\n            this.freq[i] = this.intbias / this.netsize;\r\n            this.bias[i] = 0;\r\n        }\r\n    }\r\n    NeuQuant.prototype.toInt = function (v) {\r\n        return ~~v;\r\n    };\r\n    NeuQuant.prototype.unbiasnet = function () {\r\n        for (var i = 0; i < this.netsize; i++) {\r\n            this.network[i][0] >>= this.netbiasshift;\r\n            this.network[i][1] >>= this.netbiasshift;\r\n            this.network[i][2] >>= this.netbiasshift;\r\n            this.network[i][3] = i; // record color number\r\n        }\r\n    };\r\n    NeuQuant.prototype.altersingle = function (alpha, i, b, g, r) {\r\n        this.network[i][0] -= (alpha * (this.network[i][0] - b)) / this.initalpha;\r\n        this.network[i][1] -= (alpha * (this.network[i][1] - g)) / this.initalpha;\r\n        this.network[i][2] -= (alpha * (this.network[i][2] - r)) / this.initalpha;\r\n    };\r\n    NeuQuant.prototype.alterneigh = function (radius, i, b, g, r) {\r\n        var lo = Math.abs(i - radius);\r\n        var hi = Math.min(i + radius, this.netsize);\r\n        var j = i + 1;\r\n        var k = i - 1;\r\n        var m = 1;\r\n        var p, a;\r\n        while (j < hi || k > lo) {\r\n            a = this.radpower[m++];\r\n            if (j < hi) {\r\n                p = this.network[j++];\r\n                p[0] -= (a * (p[0] - b)) / this.alpharadbias;\r\n                p[1] -= (a * (p[1] - g)) / this.alpharadbias;\r\n                p[2] -= (a * (p[2] - r)) / this.alpharadbias;\r\n            }\r\n            if (k > lo) {\r\n                p = this.network[k--];\r\n                p[0] -= (a * (p[0] - b)) / this.alpharadbias;\r\n                p[1] -= (a * (p[1] - g)) / this.alpharadbias;\r\n                p[2] -= (a * (p[2] - r)) / this.alpharadbias;\r\n            }\r\n        }\r\n    };\r\n    NeuQuant.prototype.contest = function (b, g, r) {\r\n        /*\r\n        finds closest neuron (min dist) and updates freq\r\n        finds best neuron (min dist-bias) and returns position\r\n        for frequently chosen neurons, freq[i] is high and bias[i] is negative\r\n        bias[i] = gamma * ((1 / netsize) - freq[i])\r\n      */\r\n        var bestd = ~(1 << 31);\r\n        var bestbiasd = bestd;\r\n        var bestpos = -1;\r\n        var bestbiaspos = bestpos;\r\n        var i, n, dist, biasdist, betafreq;\r\n        for (i = 0; i < this.netsize; i++) {\r\n            n = this.network[i];\r\n            dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\r\n            if (dist < bestd) {\r\n                bestd = dist;\r\n                bestpos = i;\r\n            }\r\n            biasdist = dist - (this.bias[i] >> (this.intbiasshift - this.netbiasshift));\r\n            if (biasdist < bestbiasd) {\r\n                bestbiasd = biasdist;\r\n                bestbiaspos = i;\r\n            }\r\n            betafreq = this.freq[i] >> this.betashift;\r\n            this.freq[i] -= betafreq;\r\n            this.bias[i] += betafreq << this.gammashift;\r\n        }\r\n        this.freq[bestpos] += this.beta;\r\n        this.bias[bestpos] -= this.betagamma;\r\n        return bestbiaspos;\r\n    };\r\n    NeuQuant.prototype.inxbuild = function () {\r\n        var i, j, p, q, smallpos, smallval, previouscol = 0, startpos = 0;\r\n        for (i = 0; i < this.netsize; i++) {\r\n            p = this.network[i];\r\n            smallpos = i;\r\n            smallval = p[1]; // index on g\r\n            // find smallest in i..netsize-1\r\n            for (j = i + 1; j < this.netsize; j++) {\r\n                q = this.network[j];\r\n                if (q[1] < smallval) {\r\n                    // index on g\r\n                    smallpos = j;\r\n                    smallval = q[1]; // index on g\r\n                }\r\n            }\r\n            q = this.network[smallpos];\r\n            // swap p (i) and q (smallpos) entries\r\n            if (i != smallpos) {\r\n                j = q[0];\r\n                q[0] = p[0];\r\n                p[0] = j;\r\n                j = q[1];\r\n                q[1] = p[1];\r\n                p[1] = j;\r\n                j = q[2];\r\n                q[2] = p[2];\r\n                p[2] = j;\r\n                j = q[3];\r\n                q[3] = p[3];\r\n                p[3] = j;\r\n            }\r\n            // smallval entry is now in position i\r\n            if (smallval != previouscol) {\r\n                this.netindex[previouscol] = (startpos + i) >> 1;\r\n                for (j = previouscol + 1; j < smallval; j++)\r\n                    this.netindex[j] = i;\r\n                previouscol = smallval;\r\n                startpos = i;\r\n            }\r\n        }\r\n        this.netindex[previouscol] = (startpos + this.maxnetpos) >> 1;\r\n        for (j = previouscol + 1; j < 256; j++)\r\n            this.netindex[j] = this.maxnetpos; // really 256\r\n    };\r\n    NeuQuant.prototype.lookupRGB = function (b, g, r) {\r\n        var a, p, dist;\r\n        var bestd = 1000; // biggest possible dist is 256*3\r\n        var best = -1;\r\n        var i = this.netindex[g]; // index on g\r\n        var j = i - 1; // start at netindex[g] and work outwards\r\n        while (i < this.netsize || j >= 0) {\r\n            if (i < this.netsize) {\r\n                p = this.network[i];\r\n                dist = p[1] - g; // inx key\r\n                if (dist >= bestd)\r\n                    i = this.netsize;\r\n                // stop iter\r\n                else {\r\n                    i++;\r\n                    if (dist < 0)\r\n                        dist = -dist;\r\n                    a = p[0] - b;\r\n                    if (a < 0)\r\n                        a = -a;\r\n                    dist += a;\r\n                    if (dist < bestd) {\r\n                        a = p[2] - r;\r\n                        if (a < 0)\r\n                            a = -a;\r\n                        dist += a;\r\n                        if (dist < bestd) {\r\n                            bestd = dist;\r\n                            best = p[3];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (j >= 0) {\r\n                p = this.network[j];\r\n                dist = g - p[1]; // inx key - reverse dif\r\n                if (dist >= bestd)\r\n                    j = -1;\r\n                // stop iter\r\n                else {\r\n                    j--;\r\n                    if (dist < 0)\r\n                        dist = -dist;\r\n                    a = p[0] - b;\r\n                    if (a < 0)\r\n                        a = -a;\r\n                    dist += a;\r\n                    if (dist < bestd) {\r\n                        a = p[2] - r;\r\n                        if (a < 0)\r\n                            a = -a;\r\n                        dist += a;\r\n                        if (dist < bestd) {\r\n                            bestd = dist;\r\n                            best = p[3];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return best;\r\n    };\r\n    NeuQuant.prototype.learn = function () {\r\n        var i;\r\n        var lengthcount = this.pixels.length;\r\n        var alphadec = this.toInt(30 + (this.samplefac - 1) / 3);\r\n        var samplepixels = this.toInt(lengthcount / (3 * this.samplefac));\r\n        var delta = this.toInt(samplepixels / this.ncycles);\r\n        var alpha = this.initalpha;\r\n        var radius = this.initradius;\r\n        var rad = radius >> this.radiusbiasshift;\r\n        if (rad <= 1)\r\n            rad = 0;\r\n        for (i = 0; i < rad; i++)\r\n            this.radpower[i] = this.toInt(alpha * (((rad * rad - i * i) * this.radbias) / (rad * rad)));\r\n        var step;\r\n        if (lengthcount < this.minpicturebytes) {\r\n            this.samplefac = 1;\r\n            step = 3;\r\n        }\r\n        else if (lengthcount % this.prime1 !== 0) {\r\n            step = 3 * this.prime1;\r\n        }\r\n        else if (lengthcount % this.prime2 !== 0) {\r\n            step = 3 * this.prime2;\r\n        }\r\n        else if (lengthcount % this.prime3 !== 0) {\r\n            step = 3 * this.prime3;\r\n        }\r\n        else {\r\n            step = 3 * this.prime4;\r\n        }\r\n        var b, g, r, j;\r\n        var pix = 0; // current pixel\r\n        i = 0;\r\n        while (i < samplepixels) {\r\n            b = (this.pixels[pix] & 0xff) << this.netbiasshift;\r\n            g = (this.pixels[pix + 1] & 0xff) << this.netbiasshift;\r\n            r = (this.pixels[pix + 2] & 0xff) << this.netbiasshift;\r\n            j = this.contest(b, g, r);\r\n            this.altersingle(alpha, j, b, g, r);\r\n            if (rad !== 0)\r\n                this.alterneigh(rad, j, b, g, r); // alter neighbours\r\n            pix += step;\r\n            if (pix >= lengthcount)\r\n                pix -= lengthcount;\r\n            i++;\r\n            if (delta === 0)\r\n                delta = 1;\r\n            if (i % delta === 0) {\r\n                alpha -= alpha / alphadec;\r\n                radius -= radius / this.radiusdec;\r\n                rad = radius >> this.radiusbiasshift;\r\n                if (rad <= 1)\r\n                    rad = 0;\r\n                for (j = 0; j < rad; j++)\r\n                    this.radpower[j] = this.toInt(alpha * (((rad * rad - j * j) * this.radbias) / (rad * rad)));\r\n            }\r\n        }\r\n    };\r\n    NeuQuant.prototype.buildColormap = function () {\r\n        this.learn();\r\n        this.unbiasnet();\r\n        this.inxbuild();\r\n    };\r\n    NeuQuant.prototype.getColormap = function () {\r\n        var map = [];\r\n        var index = [];\r\n        for (var i = 0; i < this.netsize; i++)\r\n            index[this.network[i][3]] = i;\r\n        var k = 0;\r\n        for (var l = 0; l < this.netsize; l++) {\r\n            var j = index[l];\r\n            map[k++] = this.network[j][0];\r\n            map[k++] = this.network[j][1];\r\n            map[k++] = this.network[j][2];\r\n        }\r\n        return map;\r\n    };\r\n    return NeuQuant;\r\n}());\r\nexport { NeuQuant };\r\n/* ----------------------------------------------NeuQuant END---------------------------------------------------------- */\r\n/* ----------------------------------------------ColorTableGen START---------------------------------------------------------- */\r\nvar ColorTableGenerator = /** @class */ (function () {\r\n    function ColorTableGenerator(frame) {\r\n        this._colorTable = [];\r\n        this._GCT = [];\r\n        this._distribution = 51;\r\n        this._colorLookup = {};\r\n        this._neuQuant = new NeuQuant(frame, 20);\r\n        this._neuQuant.buildColormap();\r\n        this._colorTable = this._neuQuant.getColormap();\r\n    }\r\n    ColorTableGenerator.prototype.generate = function () {\r\n        var _this = this;\r\n        var pixel = '';\r\n        var count = 0;\r\n        this._colorTable.forEach(function (value, index, array) {\r\n            pixel += _this.pad(value);\r\n            if ((index + 1) % 3 === 0) {\r\n                _this._GCT.push(pixel);\r\n                _this._colorLookup[pixel] = count;\r\n                count++;\r\n                pixel = '';\r\n            }\r\n            if (index === _this._colorTable.length - 1)\r\n                return [_this._colorLookup, _this._GCT];\r\n        });\r\n        return [this._colorLookup, this._GCT];\r\n    };\r\n    ColorTableGenerator.prototype.lookupRGB = function (pixel) {\r\n        var R = parseInt(pixel.substr(0, 2), 16);\r\n        var G = parseInt(pixel.substr(2, 2), 16);\r\n        var B = parseInt(pixel.substr(4, 2), 16);\r\n        var pixelIndex = this._neuQuant.lookupRGB(R, G, B);\r\n        return pixelIndex;\r\n    };\r\n    ColorTableGenerator.prototype.pad = function (color) {\r\n        if (color < 16) {\r\n            return \"0\" + color.toString(16);\r\n        }\r\n        else {\r\n            return color.toString(16);\r\n        }\r\n    };\r\n    return ColorTableGenerator;\r\n}());\r\nexport { ColorTableGenerator };\r\n/* ----------------------------------------------ColorTableGen END---------------------------------------------------------- */\r\n/* ----------------------------------------------EncodedImage START---------------------------------------------------------- */\r\nvar EncodedImage = /** @class */ (function () {\r\n    function EncodedImage() {\r\n        this.data = [];\r\n    }\r\n    EncodedImage.prototype.get = function () {\r\n        return this.data;\r\n    };\r\n    EncodedImage.prototype.write = function (byte) {\r\n        this.data.push(byte);\r\n    };\r\n    EncodedImage.prototype.writeArray = function (array, arraySize) {\r\n        for (var i = 0; i < arraySize; i++) {\r\n            this.write(array[i]);\r\n        }\r\n    };\r\n    EncodedImage.prototype.writeUTF = function (UTF) {\r\n        for (var i = 0; i < UTF.length; i++) {\r\n            this.write(UTF.charCodeAt(i));\r\n        }\r\n    };\r\n    EncodedImage.prototype.writeColor = function (color) {\r\n        for (var i = 0; i < color.length; i += 2) {\r\n            var intValue = parseInt(color[i] + color[i + 1], 16);\r\n            this.write(intValue);\r\n        }\r\n    };\r\n    EncodedImage.prototype.writeLittleEndian = function (num) {\r\n        this.write(num & 0xff);\r\n        this.write((num >> 8) & 0xff);\r\n    };\r\n    EncodedImage.prototype.reset = function () {\r\n        this.data = [];\r\n    };\r\n    return EncodedImage;\r\n}());\r\nexport { EncodedImage };\r\n/* ----------------------------------------------EncodedImage END---------------------------------------------------------- */\r\n/* ----------------------------------------------TypedLZW START---------------------------------------------------------- */\r\n/**\r\n * This class handles LZW encoding\r\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\r\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n * @author Thibault Imbert (AS3 version - bytearray.org)\r\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n * @author Anthony Powell (TypeScript version 2018)\r\n * @version 0.1 AS3 implementation\r\n */\r\nvar LZWEncoder = /** @class */ (function () {\r\n    function LZWEncoder(width, height, pixels, colorDepth) {\r\n        this.EOF = 1;\r\n        // GIFCOMPR.C - GIF Image compression routines\r\n        // Lempel-Ziv compression based on 'compress'. GIF modifications by\r\n        // David Rowley (mgardi@watdcsu.waterloo.edu)\r\n        // General DEFINEs\r\n        this.BITS = 12;\r\n        this.HSIZE = 5003;\r\n        this._maxbits = this.BITS; // user settable max # bits/code\r\n        this._maxmaxcode = 1 << this.BITS; // should NEVER generate this code\r\n        this._htab = [];\r\n        this._codetab = [];\r\n        this._hsize = this.HSIZE; // for dynamic table sizing\r\n        this._free_ent = 0; // first unused entry\r\n        // block compression parameters -- after all codes are used up,\r\n        // and compression rate changes, start over.\r\n        this._clear_flg = false;\r\n        // output\r\n        // Output the given code.\r\n        // Inputs:\r\n        // code: A n_bits-bit integer. If == -1, then EOF. This assumes\r\n        // that n_bits =< wordsize - 1.\r\n        // Outputs:\r\n        // Outputs code to the file.\r\n        // Assumptions:\r\n        // Chars are 8 bits long.\r\n        // Algorithm:\r\n        // Maintain a BITS character long buffer (so that 8 codes will\r\n        // fit in it exactly). Use the VAX insv instruction to insert each\r\n        // code in turn. When the buffer fills up empty it and start over.\r\n        this._cur_accum = 0;\r\n        this._cur_bits = 0;\r\n        this._masks = [\r\n            0x0000,\r\n            0x0001,\r\n            0x0003,\r\n            0x0007,\r\n            0x000f,\r\n            0x001f,\r\n            0x003f,\r\n            0x007f,\r\n            0x00ff,\r\n            0x01ff,\r\n            0x03ff,\r\n            0x07ff,\r\n            0x0fff,\r\n            0x1fff,\r\n            0x3fff,\r\n            0x7fff,\r\n            0xffff,\r\n        ];\r\n        // Define the storage for the packet accumulator\r\n        this._accum = [];\r\n        this._imgW = width;\r\n        this._imgH = height;\r\n        this._pixels = pixels;\r\n        this._initCodeSize = Math.max(2, colorDepth);\r\n    }\r\n    // Add a character to the end of the current packet, and if it is 254\r\n    // characters, flush the packet to disk.\r\n    LZWEncoder.prototype.writeCharToPacket = function (c, outs) {\r\n        this._accum[this._a_count++] = c;\r\n        if (this._a_count >= 254)\r\n            this.flush_char(outs);\r\n    };\r\n    // Clear out the hash table\r\n    // table clear for block compress\r\n    LZWEncoder.prototype.cl_block = function (outs) {\r\n        this.cl_hash(this._hsize);\r\n        this._free_ent = this._ClearCode + 2;\r\n        this._clear_flg = true;\r\n        this.output(this._ClearCode, outs);\r\n    };\r\n    // reset code table\r\n    LZWEncoder.prototype.cl_hash = function (hsize) {\r\n        for (var i = 0; i < hsize; ++i)\r\n            this._htab[i] = -1;\r\n    };\r\n    LZWEncoder.prototype.compress = function (init_bits, outs) {\r\n        var fcode;\r\n        var i; /* = 0 */\r\n        var c;\r\n        var ent;\r\n        var disp;\r\n        var hsize_reg;\r\n        var hshift;\r\n        // Set up the globals: g_init_bits - initial number of bits\r\n        this._g_init_bits = init_bits;\r\n        // Set up the necessary values\r\n        this._clear_flg = false;\r\n        this._n_bits = this._g_init_bits;\r\n        this._maxcode = this.MAXCODE(this._n_bits);\r\n        this._ClearCode = 1 << (init_bits - 1);\r\n        this._EOFCode = this._ClearCode + 1;\r\n        this._free_ent = this._ClearCode + 2;\r\n        this._a_count = 0; // clear packet\r\n        ent = this.nextPixel();\r\n        hshift = 0;\r\n        for (fcode = this._hsize; fcode < 65536; fcode *= 2)\r\n            ++hshift;\r\n        hshift = 8 - hshift; // set hash code range bound\r\n        hsize_reg = this._hsize;\r\n        this.cl_hash(hsize_reg); // clear hash table\r\n        this.output(this._ClearCode, outs);\r\n        outer_loop: while ((c = this.nextPixel()) != this.EOF) {\r\n            fcode = (c << this._maxbits) + ent;\r\n            i = (c << hshift) ^ ent; // xor hashing\r\n            if (this._htab[i] == fcode) {\r\n                ent = this._codetab[i];\r\n                continue;\r\n            }\r\n            else if (this._htab[i] >= 0) {\r\n                // non-empty slot\r\n                disp = hsize_reg - i; // secondary hash (after G. Knott)\r\n                if (i === 0)\r\n                    disp = 1;\r\n                do {\r\n                    if ((i -= disp) < 0)\r\n                        i += hsize_reg;\r\n                    if (this._htab[i] == fcode) {\r\n                        ent = this._codetab[i];\r\n                        continue outer_loop;\r\n                    }\r\n                } while (this._htab[i] >= 0);\r\n            }\r\n            this.output(ent, outs);\r\n            ent = c;\r\n            if (this._free_ent < this._maxmaxcode) {\r\n                this._codetab[i] = this._free_ent++; // code -> hashtable\r\n                this._htab[i] = fcode;\r\n            }\r\n            else\r\n                this.cl_block(outs);\r\n        }\r\n        // Put out the final code.\r\n        this.output(ent, outs);\r\n        this.output(this._EOFCode, outs);\r\n    };\r\n    // ----------------------------------------------------------------------------\r\n    LZWEncoder.prototype.encode = function (os) {\r\n        os.write(this._initCodeSize); // write \"initial code size\" byte\r\n        this._remaining = this._imgW * this._imgH; // reset navigation variables\r\n        this._curPixel = 0;\r\n        this.compress(this._initCodeSize + 1, os); // compress and write the pixel data\r\n        os.write(0); // write block terminator\r\n    };\r\n    // Flush the packet to disk, and reset the accumulator\r\n    LZWEncoder.prototype.flush_char = function (outs) {\r\n        if (this._a_count > 0) {\r\n            outs.write(this._a_count);\r\n            outs.writeArray(this._accum, this._a_count);\r\n            this._a_count = 0;\r\n        }\r\n    };\r\n    LZWEncoder.prototype.MAXCODE = function (n_bits) {\r\n        return (1 << n_bits) - 1;\r\n    };\r\n    // ----------------------------------------------------------------------------\r\n    // Return the next pixel from the image\r\n    // ----------------------------------------------------------------------------\r\n    LZWEncoder.prototype.nextPixel = function () {\r\n        if (this._remaining === 0)\r\n            return this.EOF;\r\n        --this._remaining;\r\n        var pix = this._pixels[this._curPixel++];\r\n        return pix & 0xff;\r\n    };\r\n    LZWEncoder.prototype.output = function (code, outs) {\r\n        this._cur_accum &= this._masks[this._cur_bits];\r\n        if (this._cur_bits > 0)\r\n            this._cur_accum |= code << this._cur_bits;\r\n        else\r\n            this._cur_accum = code;\r\n        this._cur_bits += this._n_bits;\r\n        while (this._cur_bits >= 8) {\r\n            this.writeCharToPacket(this._cur_accum & 0xff, outs);\r\n            this._cur_accum >>= 8;\r\n            this._cur_bits -= 8;\r\n        }\r\n        // If the next entry is going to be too big for the code size,\r\n        // then increase it, if possible.\r\n        if (this._free_ent > this._maxcode || this._clear_flg) {\r\n            if (this._clear_flg) {\r\n                this._maxcode = this.MAXCODE((this._n_bits = this._g_init_bits));\r\n                this._clear_flg = false;\r\n            }\r\n            else {\r\n                ++this._n_bits;\r\n                if (this._n_bits == this._maxbits)\r\n                    this._maxcode = this._maxmaxcode;\r\n                else\r\n                    this._maxcode = this.MAXCODE(this._n_bits);\r\n            }\r\n        }\r\n        if (code == this._EOFCode) {\r\n            // At EOF, write the rest of the buffer.\r\n            while (this._cur_bits > 0) {\r\n                this.writeCharToPacket(this._cur_accum & 0xff, outs);\r\n                this._cur_accum >>= 8;\r\n                this._cur_bits -= 8;\r\n            }\r\n            this.flush_char(outs);\r\n        }\r\n    };\r\n    return LZWEncoder;\r\n}());\r\nexport { LZWEncoder };\r\n/* ----------------------------------------------TypedLZW END---------------------------------------------------------- */\r\n/* ----------------------------------------------GIFGen START---------------------------------------------------------- */\r\nvar GIFGenerator = /** @class */ (function () {\r\n    function GIFGenerator() {\r\n        this.stream = new EncodedImage();\r\n        this.frameCount = 0;\r\n        console.log(\"Generator now running...\");\r\n    }\r\n    GIFGenerator.prototype.init = function (width, height, GCT) {\r\n        this.reset();\r\n        this.width = width;\r\n        this.height = height;\r\n        this.GCT = GCT;\r\n        this.writeHeader();\r\n        this.writeLogicalScreenDescriptor();\r\n        this.writeGlobalColorTable();\r\n        this.writeApplicationExtension();\r\n    };\r\n    GIFGenerator.prototype.generateFrame = function (indexedPixels) {\r\n        this.frameIndexedPixels = indexedPixels;\r\n        this.frameCount += 1;\r\n        console.log(\"generating frame \" + this.frameCount);\r\n        this.writeGraphicControlExtension();\r\n        this.writeImageDescriptor();\r\n        this.writeImageData();\r\n    };\r\n    GIFGenerator.prototype.getStream = function () {\r\n        this.writeTrailer();\r\n        return this.stream.get();\r\n    };\r\n    GIFGenerator.prototype.writeHeader = function () {\r\n        this.stream.writeUTF('GIF89a'); /* GIF Header */\r\n    };\r\n    GIFGenerator.prototype.writeLogicalScreenDescriptor = function () {\r\n        this.stream.writeLittleEndian(this.width); /* Canvas Width */\r\n        this.stream.writeLittleEndian(this.height); /* Canvas Height */\r\n        this.stream.write(0xf7); /* Packed Field */\r\n        this.stream.write(0); /* Background Color Index */\r\n        this.stream.write(0); /* Pixel Aspect Ration */\r\n    };\r\n    GIFGenerator.prototype.writeGlobalColorTable = function () {\r\n        var _this = this;\r\n        var count = 0;\r\n        this.GCT.forEach(function (color) {\r\n            count += 3;\r\n            _this.stream.writeColor(color);\r\n        });\r\n        for (var i = count; i < 3 * 256; i++) {\r\n            this.stream.write(0);\r\n        }\r\n    };\r\n    GIFGenerator.prototype.writeApplicationExtension = function () {\r\n        this.stream.write(0x21); /* extension introducer */\r\n        this.stream.write(0xff); /* app extension label */\r\n        this.stream.write(11); /* block size */\r\n        this.stream.writeUTF('NETSCAPE' + '2.0'); /* app id + auth code */\r\n        this.stream.write(3); /* sub-block size */\r\n        this.stream.write(1); /* loop sub-block id */\r\n        this.stream.writeLittleEndian(0); /* loop count (extra iterations, 0=repeat forever) */\r\n        this.stream.write(0); /* Block Terminator */\r\n    };\r\n    GIFGenerator.prototype.writeGraphicControlExtension = function () {\r\n        this.stream.write(0x21); /* Extension Introducer */\r\n        this.stream.write(0xf9); /* Graphic Control Label */\r\n        this.stream.write(0x4); /* Byte Size */\r\n        this.stream.write(0x4); /* Packed Field */\r\n        this.stream.writeLittleEndian(0x9); /* Delay Time */\r\n        this.stream.write(0x0); /* Transparent Color Index */\r\n        this.stream.write(0x0); /* Block Terminator */\r\n    };\r\n    GIFGenerator.prototype.writeImageDescriptor = function () {\r\n        this.stream.write(0x2c); /* Image Seperator Always 2C */\r\n        this.stream.writeLittleEndian(0x0); /* Image Left */\r\n        this.stream.writeLittleEndian(0x0); /* Image Top */\r\n        this.stream.writeLittleEndian(this.width); /* Image Width */\r\n        this.stream.writeLittleEndian(this.height); /* Image Height */\r\n        this.stream.write(0x0); /* Block Terminator */\r\n    };\r\n    GIFGenerator.prototype.writeImageData = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var encoder;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                encoder = new LZWEncoder(this.width, this.height, this.frameIndexedPixels, 8);\r\n                encoder.encode(this.stream);\r\n                console.log(\"completed frame \" + this.frameCount);\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    GIFGenerator.prototype.writeTrailer = function () {\r\n        this.stream.write(0x3b); /* Trailer Marker */\r\n        console.log(\"Generator now finished.\");\r\n        this.frameCount = 0; /* Reset frame count for next GIF */\r\n    };\r\n    GIFGenerator.prototype.writeLocalColorTable = function () { };\r\n    GIFGenerator.prototype.writePlainTextExtension = function () { };\r\n    GIFGenerator.prototype.writeCommentExtension = function () { };\r\n    GIFGenerator.prototype.reset = function () {\r\n        this.stream.reset();\r\n        this.frameCount = 0;\r\n    };\r\n    return GIFGenerator;\r\n}());\r\nexport { GIFGenerator };\r\n/* ----------------------------------------------GIFGen END---------------------------------------------------------- */\r\n/* ----------------------------------------------Worker Processing Duties START---------------------------------------------------------- */\r\nvar ctx = self;\r\nvar _colorTableGen;\r\nvar gifGenerator = new GIFGenerator();\r\nvar _frameCollection = [];\r\nfunction createColorTable(frame, width, height) {\r\n    var _a;\r\n    _colorTableGen = new ColorTableGenerator(frame);\r\n    var colorLookup, colorTable;\r\n    _a = _colorTableGen.generate(), colorLookup = _a[0], colorTable = _a[1];\r\n    writeColorTable(colorTable, width, height);\r\n    return colorLookup;\r\n    function writeColorTable(globalColorTable, width, height) {\r\n        gifGenerator.init(width, height, globalColorTable);\r\n        return;\r\n    }\r\n}\r\nfunction processFrames(frames, width, height) {\r\n    function process() {\r\n        var numericalRGBFrames = [];\r\n        var stringRGBFrames = [];\r\n        frames.forEach(function (frame) {\r\n            var _a = toRGB(frame), numericalRGBData = _a.numericalRGBData, stringRGBData = _a.stringRGBData;\r\n            numericalRGBFrames.push(numericalRGBData);\r\n            stringRGBFrames.push(stringRGBData);\r\n        });\r\n        return { numericalRGBFrames: numericalRGBFrames, stringRGBFrames: stringRGBFrames };\r\n    }\r\n    function toRGB(frame) {\r\n        var numericalRGBData = frame.filter(function (pixel, index) { return (index + 1) % 4 !== 0; });\r\n        var stringRGBData = [];\r\n        var pixel = '';\r\n        numericalRGBData.forEach(function (color, index) {\r\n            pixel += pad(color);\r\n            if ((index + 1) % 3 === 0) {\r\n                stringRGBData.push(pixel);\r\n                pixel = '';\r\n            }\r\n        });\r\n        return { numericalRGBData: numericalRGBData, stringRGBData: stringRGBData };\r\n    }\r\n    function pad(color) {\r\n        if (color < 16) {\r\n            return \"0\" + color.toString(16);\r\n        }\r\n        else {\r\n            return color.toString(16);\r\n        }\r\n    }\r\n    return process();\r\n}\r\nfunction generateGIF(frames, colorLookup) {\r\n    function mapPixelsToIndex(frames, colorLookup) {\r\n        var indexedFrames = [];\r\n        frames.forEach(function (frame, index) {\r\n            var indexedPixels = [];\r\n            frame.forEach(function (pixel) {\r\n                indexedPixels.push(lookup(pixel));\r\n            });\r\n            indexedFrames.push(indexedPixels);\r\n        });\r\n        return indexedFrames;\r\n    }\r\n    function lookup(pixel) {\r\n        return /* colorLookup[pixel] ? colorLookup[pixel] : */ _colorTableGen.lookupRGB(pixel);\r\n    }\r\n    var indexedFrames = mapPixelsToIndex(frames, colorLookup);\r\n    indexedFrames.forEach(function (frame) {\r\n        gifGenerator.generateFrame(frame);\r\n    });\r\n    return gifGenerator.getStream();\r\n}\r\nfunction collectFrames(frame) {\r\n    _frameCollection.push(new Uint8Array(frame));\r\n}\r\nfunction getColorSamplingFrames(frames) {\r\n    /* every 5 frames placed in sampling frames array */\r\n    var samplingFrames = frames.filter(function (frame, index) { return (index + 1) % 5 === 0; });\r\n    /* Combine arrays in samplingFrames into one Uint8Array */\r\n    return samplingFrames.reduce(function (accFrame, frame) {\r\n        var sampling = new Uint8Array(accFrame.length + frame.length);\r\n        sampling.set(accFrame);\r\n        sampling.set(frame, accFrame.length);\r\n        return sampling;\r\n    }, new Uint8Array([]));\r\n}\r\n/* ----------------------------------------------Worker Processing Duties END---------------------------------------------------------- */\r\n/* ----------------------------------------------Worker Router START---------------------------------------------------------- */\r\nonmessage = function (_a) {\r\n    var _b = _a.data, job = _b.job, params = _b.params;\r\n    switch (job) {\r\n        case 'createGIF':\r\n            var width = params.width, height = params.height;\r\n            var _c = processFrames(_frameCollection, width, height), numericalRGBFrames = _c.numericalRGBFrames, stringRGBFrames = _c.stringRGBFrames;\r\n            var samplingFrame = getColorSamplingFrames(numericalRGBFrames);\r\n            var colorLookup = createColorTable(samplingFrame, width, height);\r\n            var gifData = generateGIF(stringRGBFrames, colorLookup);\r\n            ctx.postMessage(gifData);\r\n            break;\r\n        case 'collectFrames':\r\n            var frame = params.frame;\r\n            collectFrames(frame);\r\n            break;\r\n    }\r\n};\r\n/* ----------------------------------------------Worker Router END---------------------------------------------------------- */\r\n//# sourceMappingURL=gif.creator.service.js.map"}
